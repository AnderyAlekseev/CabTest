
FW_CableTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c30  08009c30  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08009c30  08009c30  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c30  08009c30  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d4  20000094  08009ccc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001268  08009ccc  00021268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f02  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c60  00000000  00000000  00038fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  0003cc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  0003db58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb2d  00000000  00000000  0003e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001254b  00000000  00000000  0005b405  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e14a  00000000  00000000  0006d950  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fba9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000fbb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ec0 	.word	0x08008ec0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08008ec0 	.word	0x08008ec0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	4907      	ldr	r1, [pc, #28]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4313      	orrs	r3, r2
 800016e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4013      	ands	r3, r2
 8000178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8000190:	2040      	movs	r0, #64	; 0x40
 8000192:	f7ff ffe3 	bl	800015c <LL_AHB1_GRP1_EnableClock>

}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}

0800019a <LineStructInit>:

/*********************************************
 * 	Инициализация структуры для (проверки)
 *
 * */
void LineStructInit(typeEnv *Env){
 800019a:	b480      	push	{r7}
 800019c:	b085      	sub	sp, #20
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 char *str=0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
//
//		str = (*Env).Lines[i].cabel.end.name;
//		strncpy(str, "XS1", 4);
//		(*Env).Lines[i].cabel.end.num = 24;
//	}
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <ParseCSVBuf>:
	3  |XP1	  2		 XS1	 2	|	X1	 3		X1	 4
	4  |XP1	  3		 XS1	 5	|	X1	 5		X1	 6

 * */
void ParseCSVBuf(typeEnv *Env)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b08a      	sub	sp, #40	; 0x28
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
#define tmpSZ 50
	char *buf = (*Env).CSVBuf;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 80001be:	623b      	str	r3, [r7, #32]
	char *p_cabName=0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	61fb      	str	r3, [r7, #28]
	char *p_line=0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	61bb      	str	r3, [r7, #24]
	char *p_token=0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]
	int   cnt_line=0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	627b      	str	r3, [r7, #36]	; 0x24
	char sepLine[2] = "\n";
 80001d0:	230a      	movs	r3, #10
 80001d2:	823b      	strh	r3, [r7, #16]
	char sepToken[1] = ",";
 80001d4:	232c      	movs	r3, #44	; 0x2c
 80001d6:	733b      	strb	r3, [r7, #12]
	p_line = strtok(buf,sepToken);		// первая строка до запятой - название файла/кабеля
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	4619      	mov	r1, r3
 80001de:	6a38      	ldr	r0, [r7, #32]
 80001e0:	f008 fa44 	bl	800866c <strtok>
 80001e4:	61b8      	str	r0, [r7, #24]
	p_cabName = p_line;
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	61fb      	str	r3, [r7, #28]
	p_token = strtok(0,sepLine);				// находит следущую строку с которой начинается запись конфигурации
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	2000      	movs	r0, #0
 80001f2:	f008 fa3b 	bl	800866c <strtok>
 80001f6:	6178      	str	r0, [r7, #20]
	do
	{
			p_token = strtok (NULL,sepToken);
 80001f8:	f107 030c 	add.w	r3, r7, #12
 80001fc:	4619      	mov	r1, r3
 80001fe:	2000      	movs	r0, #0
 8000200:	f008 fa34 	bl	800866c <strtok>
 8000204:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].cabel.begin.name = p_token;	// кабель.начало.имя
 8000206:	6879      	ldr	r1, [r7, #4]
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	4613      	mov	r3, r2
 800020c:	00db      	lsls	r3, r3, #3
 800020e:	4413      	add	r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	440b      	add	r3, r1
 8000214:	339c      	adds	r3, #156	; 0x9c
 8000216:	697a      	ldr	r2, [r7, #20]
 8000218:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4619      	mov	r1, r3
 8000220:	2000      	movs	r0, #0
 8000222:	f008 fa23 	bl	800866c <strtok>
 8000226:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].cabel.begin.num = p_token;	//кабель.начало.номер
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800022c:	4613      	mov	r3, r2
 800022e:	00db      	lsls	r3, r3, #3
 8000230:	4413      	add	r3, r2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	440b      	add	r3, r1
 8000236:	33a0      	adds	r3, #160	; 0xa0
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4619      	mov	r1, r3
 8000242:	2000      	movs	r0, #0
 8000244:	f008 fa12 	bl	800866c <strtok>
 8000248:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].cabel.end.name = p_token;  //кабель.конец.имя
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800024e:	4613      	mov	r3, r2
 8000250:	00db      	lsls	r3, r3, #3
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	33a4      	adds	r3, #164	; 0xa4
 800025a:	697a      	ldr	r2, [r7, #20]
 800025c:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 800025e:	f107 030c 	add.w	r3, r7, #12
 8000262:	4619      	mov	r1, r3
 8000264:	2000      	movs	r0, #0
 8000266:	f008 fa01 	bl	800866c <strtok>
 800026a:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].cabel.end.num = p_token; //кабель.конец.номер
 800026c:	6879      	ldr	r1, [r7, #4]
 800026e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000270:	4613      	mov	r3, r2
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	4413      	add	r3, r2
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	440b      	add	r3, r1
 800027a:	33a8      	adds	r3, #168	; 0xa8
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 8000280:	f107 030c 	add.w	r3, r7, #12
 8000284:	4619      	mov	r1, r3
 8000286:	2000      	movs	r0, #0
 8000288:	f008 f9f0 	bl	800866c <strtok>
 800028c:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].adapter.begin.name = p_token; //адаптер.начало.имя
 800028e:	6879      	ldr	r1, [r7, #4]
 8000290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000292:	4613      	mov	r3, r2
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	4413      	add	r3, r2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	440b      	add	r3, r1
 800029c:	338c      	adds	r3, #140	; 0x8c
 800029e:	697a      	ldr	r2, [r7, #20]
 80002a0:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4619      	mov	r1, r3
 80002a8:	2000      	movs	r0, #0
 80002aa:	f008 f9df 	bl	800866c <strtok>
 80002ae:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].adapter.begin.num = p_token; //адаптер.начало.номер
 80002b0:	6879      	ldr	r1, [r7, #4]
 80002b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002b4:	4613      	mov	r3, r2
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	4413      	add	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	440b      	add	r3, r1
 80002be:	3390      	adds	r3, #144	; 0x90
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	601a      	str	r2, [r3, #0]

			p_token = strtok (NULL,sepToken);
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f008 f9ce 	bl	800866c <strtok>
 80002d0:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].adapter.end.name = p_token; //адаптер.конец.имя
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002d6:	4613      	mov	r3, r2
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	4413      	add	r3, r2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	440b      	add	r3, r1
 80002e0:	3394      	adds	r3, #148	; 0x94
 80002e2:	697a      	ldr	r2, [r7, #20]
 80002e4:	601a      	str	r2, [r3, #0]

//			p_token = strtok (NULL,sepLine);					// "\r\n"   символы "конец линии" (строки) оставляем в строке
			p_token = strtok (NULL,sepToken);					// ","
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4619      	mov	r1, r3
 80002ec:	2000      	movs	r0, #0
 80002ee:	f008 f9bd 	bl	800866c <strtok>
 80002f2:	6178      	str	r0, [r7, #20]
			(*Env).Lines[cnt_line].adapter.end.num = p_token; //адаптер.конец.номер
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002f8:	4613      	mov	r3, r2
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	4413      	add	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	440b      	add	r3, r1
 8000302:	3398      	adds	r3, #152	; 0x98
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	601a      	str	r2, [r3, #0]

		(*Env).Lines[cnt_line].numLine = cnt_line+1;
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	3301      	adds	r3, #1
 800030c:	4618      	mov	r0, r3
 800030e:	6879      	ldr	r1, [r7, #4]
 8000310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000312:	4613      	mov	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	4413      	add	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	440b      	add	r3, r1
 800031c:	3388      	adds	r3, #136	; 0x88
 800031e:	6018      	str	r0, [r3, #0]
		cnt_line++;
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	3301      	adds	r3, #1
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
	} while(p_token !=NULL);
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	2b00      	cmp	r3, #0
 800032a:	f47f af65 	bne.w	80001f8 <ParseCSVBuf+0x48>

}
 800032e:	bf00      	nop
 8000330:	3728      	adds	r7, #40	; 0x28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <Display>:
void DisplayWait(typeEnv *Env);
void DisplayTest(typeEnv *Env);
void DrawTable(typeEnv *Env);

void Display(typeEnv *Env)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b084      	sub	sp, #16
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
	uint8_t mode = (*Env).Mode;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f893 3bdc 	ldrb.w	r3, [r3, #3036]	; 0xbdc
 8000344:	73fb      	strb	r3, [r7, #15]
	switch(mode)	// назначить действие в зависимости от текущего режима
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d008      	beq.n	800035e <Display+0x28>
 800034c:	2b03      	cmp	r3, #3
 800034e:	d00a      	beq.n	8000366 <Display+0x30>
 8000350:	2b01      	cmp	r3, #1
 8000352:	d000      	beq.n	8000356 <Display+0x20>
		{
			case MODE_MENU: 	DisplayMenu(Env); 			break;
			case MODE_WAIT: 	DisplayWait(Env);  			break;
			case MODE_TEST: 	DisplayTest(Env);			break;
			default: break;
 8000354:	e00b      	b.n	800036e <Display+0x38>
			case MODE_MENU: 	DisplayMenu(Env); 			break;
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f80e 	bl	8000378 <DisplayMenu>
 800035c:	e007      	b.n	800036e <Display+0x38>
			case MODE_WAIT: 	DisplayWait(Env);  			break;
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 f87e 	bl	8000460 <DisplayWait>
 8000364:	e003      	b.n	800036e <Display+0x38>
			case MODE_TEST: 	DisplayTest(Env);			break;
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f914 	bl	8000594 <DisplayTest>
 800036c:	bf00      	nop
		}
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <DisplayMenu>:

void DisplayMenu(typeEnv *Env)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09e      	sub	sp, #120	; 0x78
 800037c:	af02      	add	r7, sp, #8
 800037e:	6078      	str	r0, [r7, #4]
	ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];
	ST7735_ListBox FileList;
	uint32_t selectedFile = Env->Menu.ActiveItem;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8000386:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800038c:	667b      	str	r3, [r7, #100]	; 0x64

	if(f_RefreshScreen == 1)
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <DisplayMenu+0xe4>)
 8000390:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000394:	015b      	lsls	r3, r3, #5
 8000396:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800039a:	f043 0314 	orr.w	r3, r3, #20
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d156      	bne.n	8000452 <DisplayMenu+0xda>
	{
		f_RefreshScreen = 0;
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <DisplayMenu+0xe4>)
 80003a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003aa:	015b      	lsls	r3, r3, #5
 80003ac:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80003b0:	f043 0314 	orr.w	r3, r3, #20
 80003b4:	461a      	mov	r2, r3
 80003b6:	2300      	movs	r3, #0
 80003b8:	6013      	str	r3, [r2, #0]
		for(uint32_t index =0; index < end_list; index++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80003be:	e021      	b.n	8000404 <DisplayMenu+0x8c>
		{
			Files_on_SD[index].text  = &(Env->Menu.FileList[index]);
 80003c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80003c2:	4613      	mov	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	4413      	add	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	441a      	add	r2, r3
 80003d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003d2:	00db      	lsls	r3, r3, #3
 80003d4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80003d8:	440b      	add	r3, r1
 80003da:	f843 2c54 	str.w	r2, [r3, #-84]
			Files_on_SD[index].visible=1;
 80003de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003e6:	4413      	add	r3, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	f803 2c50 	strb.w	r2, [r3, #-80]
			Files_on_SD[index].selected=0;
 80003ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003f0:	00db      	lsls	r3, r3, #3
 80003f2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80003f6:	4413      	add	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	f803 2c4f 	strb.w	r2, [r3, #-79]
		for(uint32_t index =0; index < end_list; index++)
 80003fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000400:	3301      	adds	r3, #1
 8000402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000408:	429a      	cmp	r2, r3
 800040a:	d3d9      	bcc.n	80003c0 <DisplayMenu+0x48>
		}
		ST7735_ListBox_StructInit(&FileList,0,0,&Files_on_SD,end_list);
 800040c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f107 021c 	add.w	r2, r7, #28
 8000414:	f107 0008 	add.w	r0, r7, #8
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	4613      	mov	r3, r2
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	f003 fa40 	bl	80038a4 <ST7735_ListBox_StructInit>
		Files_on_SD[selectedFile].selected=1;
 8000424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800042c:	4413      	add	r3, r2
 800042e:	2201      	movs	r2, #1
 8000430:	f803 2c4f 	strb.w	r2, [r3, #-79]
		FileList.BackgroundColor = BGR_COLOR;
 8000434:	2311      	movs	r3, #17
 8000436:	81fb      	strh	r3, [r7, #14]
		FileList.BorderColor	=	BRD_COLOR;
 8000438:	f24f 73df 	movw	r3, #63455	; 0xf7df
 800043c:	81bb      	strh	r3, [r7, #12]
		FileList.ItemTextColor	=	TXT_COLOR;
 800043e:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000442:	823b      	strh	r3, [r7, #16]
		FileList.SelectedItemColor	=SEL_COLOR;
 8000444:	231f      	movs	r3, #31
 8000446:	827b      	strh	r3, [r7, #18]
		ST7735_ListBox_Draw(&FileList);
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4618      	mov	r0, r3
 800044e:	f003 f977 	bl	8003740 <ST7735_ListBox_Draw>
	}
}
 8000452:	bf00      	nop
 8000454:	3770      	adds	r7, #112	; 0x70
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000da4 	.word	0x20000da4

08000460 <DisplayWait>:


void DisplayWait(typeEnv *Env)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b08d      	sub	sp, #52	; 0x34
 8000464:	af02      	add	r7, sp, #8
 8000466:	6078      	str	r0, [r7, #4]
	static uint8_t countTick =0;
	uint8_t WaitMessage[7]={"Wait..."};
 8000468:	4a44      	ldr	r2, [pc, #272]	; (800057c <DisplayWait+0x11c>)
 800046a:	f107 0320 	add.w	r3, r7, #32
 800046e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000472:	6018      	str	r0, [r3, #0]
 8000474:	3304      	adds	r3, #4
 8000476:	8019      	strh	r1, [r3, #0]
 8000478:	3302      	adds	r3, #2
 800047a:	0c0a      	lsrs	r2, r1, #16
 800047c:	701a      	strb	r2, [r3, #0]
	uint8_t Message[20]={"Check scheme"};
 800047e:	4b40      	ldr	r3, [pc, #256]	; (8000580 <DisplayWait+0x120>)
 8000480:	f107 040c 	add.w	r4, r7, #12
 8000484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000486:	c407      	stmia	r4!, {r0, r1, r2}
 8000488:	7023      	strb	r3, [r4, #0]
 800048a:	f107 0319 	add.w	r3, r7, #25
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t waitCHR[4]= {0x5c,0x7c,0x2f,0x2d};//   / - \ |
 8000496:	4b3b      	ldr	r3, [pc, #236]	; (8000584 <DisplayWait+0x124>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	60bb      	str	r3, [r7, #8]
	static uint8_t indx_WaitChar=0;

	if(f_waitTick == 1)
 800049c:	4b3a      	ldr	r3, [pc, #232]	; (8000588 <DisplayWait+0x128>)
 800049e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80004a2:	015b      	lsls	r3, r3, #5
 80004a4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80004a8:	f043 031c 	orr.w	r3, r3, #28
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d139      	bne.n	8000526 <DisplayWait+0xc6>
	{
		f_waitTick=0;
 80004b2:	4b35      	ldr	r3, [pc, #212]	; (8000588 <DisplayWait+0x128>)
 80004b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80004be:	f043 031c 	orr.w	r3, r3, #28
 80004c2:	461a      	mov	r2, r3
 80004c4:	2300      	movs	r3, #0
 80004c6:	6013      	str	r3, [r2, #0]
		if(countTick++ ==1)
 80004c8:	4b30      	ldr	r3, [pc, #192]	; (800058c <DisplayWait+0x12c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	b2d1      	uxtb	r1, r2
 80004d0:	4a2e      	ldr	r2, [pc, #184]	; (800058c <DisplayWait+0x12c>)
 80004d2:	7011      	strb	r1, [r2, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d126      	bne.n	8000526 <DisplayWait+0xc6>
		{
			countTick = 0 ;
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <DisplayWait+0x12c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
			ST7735_DrawString(Mx,6,&WaitMessage[0],TXT_COLOR,BGR_COLOR);
 80004de:	f107 0220 	add.w	r2, r7, #32
 80004e2:	2311      	movs	r3, #17
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80004ea:	2106      	movs	r1, #6
 80004ec:	200f      	movs	r0, #15
 80004ee:	f002 ffc1 	bl	8003474 <ST7735_DrawString>
			ST7735_DrawChar(57,6, waitCHR[indx_WaitChar++],TXT_COLOR,BGR_COLOR);
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <DisplayWait+0x130>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	b2d1      	uxtb	r1, r2
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <DisplayWait+0x130>)
 80004fc:	7011      	strb	r1, [r2, #0]
 80004fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000502:	4413      	add	r3, r2
 8000504:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8000508:	2311      	movs	r3, #17
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000510:	2106      	movs	r1, #6
 8000512:	2039      	movs	r0, #57	; 0x39
 8000514:	f002 ff20 	bl	8003358 <ST7735_DrawChar>
			if(indx_WaitChar == 4)
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <DisplayWait+0x130>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d102      	bne.n	8000526 <DisplayWait+0xc6>
			{ indx_WaitChar = 0; }
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <DisplayWait+0x130>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
		}
	}

	if(f_RefreshScreen == 1)
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <DisplayWait+0x128>)
 8000528:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800052c:	015b      	lsls	r3, r3, #5
 800052e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000532:	f043 0314 	orr.w	r3, r3, #20
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d11a      	bne.n	8000572 <DisplayWait+0x112>
		{
			f_RefreshScreen = 0;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <DisplayWait+0x128>)
 800053e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000548:	f043 0314 	orr.w	r3, r3, #20
 800054c:	461a      	mov	r2, r3
 800054e:	2300      	movs	r3, #0
 8000550:	6013      	str	r3, [r2, #0]
			ST7735_Clear(BGR_COLOR);
 8000552:	2011      	movs	r0, #17
 8000554:	f002 fe4e 	bl	80031f4 <ST7735_Clear>
			DrawTable(Env);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f001 fc8b 	bl	8001e74 <DrawTable>
			ST7735_DrawString(Mx,My,Message,TXT_COLOR,BGR_COLOR);
 800055e:	f107 020c 	add.w	r2, r7, #12
 8000562:	2311      	movs	r3, #17
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	f24f 73df 	movw	r3, #63455	; 0xf7df
 800056a:	2170      	movs	r1, #112	; 0x70
 800056c:	200f      	movs	r0, #15
 800056e:	f002 ff81 	bl	8003474 <ST7735_DrawString>
		}
}
 8000572:	bf00      	nop
 8000574:	372c      	adds	r7, #44	; 0x2c
 8000576:	46bd      	mov	sp, r7
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	08008ed8 	.word	0x08008ed8
 8000580:	08008ee0 	.word	0x08008ee0
 8000584:	08008ef4 	.word	0x08008ef4
 8000588:	20000da4 	.word	0x20000da4
 800058c:	200000b0 	.word	0x200000b0
 8000590:	200000b1 	.word	0x200000b1

08000594 <DisplayTest>:

void DisplayTest(typeEnv *Env)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
	if(f_RefreshScreen == 1)
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <DisplayTest+0x88>)
 800059e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005a2:	015b      	lsls	r3, r3, #5
 80005a4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80005a8:	f043 0314 	orr.w	r3, r3, #20
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d130      	bne.n	8000614 <DisplayTest+0x80>
	{
		f_RefreshScreen = 0;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <DisplayTest+0x88>)
 80005b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80005be:	f043 0314 	orr.w	r3, r3, #20
 80005c2:	461a      	mov	r2, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	6013      	str	r3, [r2, #0]
		ST7735_Clear(BGR_COLOR);
 80005c8:	2011      	movs	r0, #17
 80005ca:	f002 fe13 	bl	80031f4 <ST7735_Clear>
		DrawTable(Env);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f001 fc50 	bl	8001e74 <DrawTable>
		uint8_t Message[22]={"Press OK for run test"};
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <DisplayTest+0x8c>)
 80005d6:	f107 0408 	add.w	r4, r7, #8
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e4:	6020      	str	r0, [r4, #0]
 80005e6:	3404      	adds	r4, #4
 80005e8:	8021      	strh	r1, [r4, #0]
		ST7735_DrawString(Mx,My,Message,TXT_COLOR,BGR_COLOR);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	2311      	movs	r3, #17
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80005f6:	2170      	movs	r1, #112	; 0x70
 80005f8:	200f      	movs	r0, #15
 80005fa:	f002 ff3b 	bl	8003474 <ST7735_DrawString>

		ST7735_DrawString(Mx,6,(*Env).Status,TXT_COLOR,BGR_COLOR);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f503 62fb 	add.w	r2, r3, #2008	; 0x7d8
 8000604:	2311      	movs	r3, #17
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	f24f 73df 	movw	r3, #63455	; 0xf7df
 800060c:	2106      	movs	r1, #6
 800060e:	200f      	movs	r0, #15
 8000610:	f002 ff30 	bl	8003474 <ST7735_DrawString>
	}
}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bdb0      	pop	{r4, r5, r7, pc}
 800061c:	20000da4 	.word	0x20000da4
 8000620:	08008ef8 	.word	0x08008ef8

08000624 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	4907      	ldr	r1, [pc, #28]	; (8000650 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4313      	orrs	r3, r2
 8000636:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800063a:	699a      	ldr	r2, [r3, #24]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29a      	uxth	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	611a      	str	r2, [r3, #16]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	615a      	str	r2, [r3, #20]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f7ff ffbd 	bl	8000624 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80006aa:	2020      	movs	r0, #32
 80006ac:	f7ff ffba 	bl	8000624 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f7ff ffb7 	bl	8000624 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f7ff ffb4 	bl	8000624 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80006bc:	4936      	ldr	r1, [pc, #216]	; (8000798 <MX_GPIO_Init+0x108>)
 80006be:	4837      	ldr	r0, [pc, #220]	; (800079c <MX_GPIO_Init+0x10c>)
 80006c0:	f7ff ffd7 	bl	8000672 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin|LCD_CS_Pin|IN_A_Pin
 80006c4:	4936      	ldr	r1, [pc, #216]	; (80007a0 <MX_GPIO_Init+0x110>)
 80006c6:	4837      	ldr	r0, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x114>)
 80006c8:	f7ff ffd3 	bl	8000672 <LL_GPIO_ResetOutputPin>
                          |IN_B_Pin|IN_C_Pin|IN_EN_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SD_CS_Pin|OUT_A_Pin|OUT_B_Pin|OUT_C_Pin
 80006cc:	4936      	ldr	r1, [pc, #216]	; (80007a8 <MX_GPIO_Init+0x118>)
 80006ce:	4837      	ldr	r0, [pc, #220]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006d0:	f7ff ffcf 	bl	8000672 <LL_GPIO_ResetOutputPin>
                          |OUT_EN_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <MX_GPIO_Init+0x108>)
 80006d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006d8:	2301      	movs	r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	482c      	ldr	r0, [pc, #176]	; (800079c <MX_GPIO_Init+0x10c>)
 80006ea:	f003 fb7d 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 80006ee:	f241 2312 	movw	r3, #4626	; 0x1212
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4826      	ldr	r0, [pc, #152]	; (80007a4 <MX_GPIO_Init+0x114>)
 800070a:	f003 fb6d 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_A0_Pin|IN_A_Pin|IN_B_Pin|IN_C_Pin
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_GPIO_Init+0x120>)
 8000710:	607b      	str	r3, [r7, #4]
                          |IN_EN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4820      	ldr	r0, [pc, #128]	; (80007a4 <MX_GPIO_Init+0x114>)
 8000724:	f003 fb60 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000728:	f240 2302 	movw	r3, #514	; 0x202
 800072c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800072e:	2301      	movs	r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_GPIO_Init+0x11c>)
 8000744:	f003 fb50 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUT_OK_Pin|BUT_UP_Pin|BUT_DW_Pin;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_GPIO_Init+0x124>)
 800074a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800074c:	2308      	movs	r3, #8
 800074e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000750:	2301      	movs	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <MX_GPIO_Init+0x11c>)
 800075a:	f003 fb45 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|OUT_EN_Pin;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_GPIO_Init+0x128>)
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000762:	2301      	movs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_GPIO_Init+0x11c>)
 8000774:	f003 fb38 	bl	8003de8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_GPIO_Init+0x12c>)
 800077a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800077c:	2308      	movs	r3, #8
 800077e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000780:	2301      	movs	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_GPIO_Init+0x114>)
 800078a:	f003 fb2d 	bl	8003de8 <LL_GPIO_Init>



}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	04200020 	.word	0x04200020
 800079c:	40011000 	.word	0x40011000
 80007a0:	04171a1f 	.word	0x04171a1f
 80007a4:	40010800 	.word	0x40010800
 80007a8:	04f002f2 	.word	0x04f002f2
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	0417081f 	.word	0x0417081f
 80007b4:	040c404c 	.word	0x040c404c
 80007b8:	04f000f0 	.word	0x04f000f0
 80007bc:	04800080 	.word	0x04800080

080007c0 <Init_Output_Input_Alter>:

/* USER CODE BEGIN 2 */

void Init_Output_Input_Alter()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
	// in
		GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80007d4:	f240 1301 	movw	r3, #257	; 0x101
 80007d8:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80007da:	2304      	movs	r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
	//	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <Init_Output_Input_Alter+0x4c>)
 80007e4:	f003 fb00 	bl	8003de8 <LL_GPIO_Init>
   // out
		GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <Init_Output_Input_Alter+0x50>)
 80007ea:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007ec:	2309      	movs	r3, #9
 80007ee:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <Init_Output_Input_Alter+0x4c>)
 80007fe:	f003 faf3 	bl	8003de8 <LL_GPIO_Init>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010800 	.word	0x40010800
 8000810:	04080008 	.word	0x04080008

08000814 <Init_Output_Input_GPIO>:


void Init_Output_Input_GPIO()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000828:	490f      	ldr	r1, [pc, #60]	; (8000868 <Init_Output_Input_GPIO+0x54>)
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <Init_Output_Input_GPIO+0x58>)
 800082c:	f7ff ff21 	bl	8000672 <LL_GPIO_ResetOutputPin>
	// in
		GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000830:	f240 1301 	movw	r3, #257	; 0x101
 8000834:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000836:	2308      	movs	r3, #8
 8000838:	60bb      	str	r3, [r7, #8]
		//GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <Init_Output_Input_GPIO+0x58>)
 8000840:	f003 fad2 	bl	8003de8 <LL_GPIO_Init>
   // out
		GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <Init_Output_Input_GPIO+0x54>)
 8000846:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000848:	2301      	movs	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <Init_Output_Input_GPIO+0x58>)
 800085a:	f003 fac5 	bl	8003de8 <LL_GPIO_Init>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	04080008 	.word	0x04080008
 800086c:	40010800 	.word	0x40010800

08000870 <GPIO_WriteBit>:
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/

void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint8_t BitVal)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//DWT_CYCCNT = 0;// обнуляем значение
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//BitVal ?  LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin) : LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin) ;
  if (BitVal != RESET)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d004      	beq.n	800088e <GPIO_WriteBit+0x1e>
  {
    LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin);
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fee4 	bl	8000654 <LL_GPIO_SetOutputPin>
  }
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//	   count_tic = DWT_CYCCNT;//смотрим сколько натикало
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

}
 800088c:	e003      	b.n	8000896 <GPIO_WriteBit+0x26>
	  LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f7ff feee 	bl	8000672 <LL_GPIO_ResetOutputPin>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <LL_RCC_HSE_Enable+0x18>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <LL_RCC_HSE_Enable+0x18>)
 80008aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_RCC_HSE_IsReady+0x20>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80008cc:	bf0c      	ite	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	2300      	movne	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000

080008e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <LL_RCC_SetSysClkSource+0x24>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f023 0203 	bic.w	r2, r3, #3
 80008f0:	4904      	ldr	r1, [pc, #16]	; (8000904 <LL_RCC_SetSysClkSource+0x24>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	604b      	str	r3, [r1, #4]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <LL_RCC_GetSysClkSource+0x14>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 030c 	and.w	r3, r3, #12
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <LL_RCC_SetAHBPrescaler+0x24>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000930:	4904      	ldr	r1, [pc, #16]	; (8000944 <LL_RCC_SetAHBPrescaler+0x24>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	604b      	str	r3, [r1, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000958:	4904      	ldr	r1, [pc, #16]	; (800096c <LL_RCC_SetAPB1Prescaler+0x24>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	604b      	str	r3, [r1, #4]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <LL_RCC_SetAPB2Prescaler+0x24>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000980:	4904      	ldr	r1, [pc, #16]	; (8000994 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4313      	orrs	r3, r2
 8000986:	604b      	str	r3, [r1, #4]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <LL_RCC_PLL_Enable+0x18>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <LL_RCC_PLL_Enable+0x18>)
 80009a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000

080009b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <LL_RCC_PLL_IsReady+0x20>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000

080009d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	430b      	orrs	r3, r1
 80009f4:	4903      	ldr	r1, [pc, #12]	; (8000a04 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80009f6:	4313      	orrs	r3, r2
 80009f8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000

08000a08 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_FLASH_SetLatency+0x24>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 0207 	bic.w	r2, r3, #7
 8000a18:	4904      	ldr	r1, [pc, #16]	; (8000a2c <LL_FLASH_SetLatency+0x24>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <LL_FLASH_GetLatency+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40022000 	.word	0x40022000

08000a48 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f043 0201 	orr.w	r2, r3, #1
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a1a      	ldr	r2, [r3, #32]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	621a      	str	r2, [r3, #32]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	f6ad 7d34 	subw	sp, sp, #3892	; 0xf34
 8000aaa:	f44f 674e 	mov.w	r7, #3296	; 0xce0
 8000aae:	446f      	add	r7, sp
  /* USER CODE BEGIN 1 */
	FATFS	FatFs;
	FRESULT resFS;
	char status[20] = {0};
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	6053      	str	r3, [r2, #4]
 8000abc:	6093      	str	r3, [r2, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
 8000ac0:	6113      	str	r3, [r2, #16]
	uint8_t waitCHR[4]= {0x7C, 0x2F, 0x2D, 0x5C}, w_indx=0;//   / - \ | - в режиме ожидания крутим спинер из этих символов
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <main+0x284>)
 8000ac6:	6812      	ldr	r2, [r2, #0]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	Env.Menu.ActiveItem=0;
 8000ad0:	4b96      	ldr	r3, [pc, #600]	; (8000d2c <main+0x288>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Env.Menu.ActivePage=0;
 8000ad8:	4b94      	ldr	r3, [pc, #592]	; (8000d2c <main+0x288>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	Env.period=0;
 8000ae0:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <main+0x288>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f8a3 2cea 	strh.w	r2, [r3, #3306]	; 0xcea
	Env.pulse=0;
 8000ae8:	4b90      	ldr	r3, [pc, #576]	; (8000d2c <main+0x288>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f8a3 2cec 	strh.w	r2, [r3, #3308]	; 0xcec
	Env.Mode = MODE_MENU;
 8000af0:	4b8e      	ldr	r3, [pc, #568]	; (8000d2c <main+0x288>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2bdc 	strb.w	r2, [r3, #3036]	; 0xbdc
	uint8_t mode = Env.Mode;
 8000af8:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <main+0x288>)
 8000afa:	f893 3bdc 	ldrb.w	r3, [r3, #3036]	; 0xbdc
 8000afe:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	f_RefreshScreen = 1;
 8000b02:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <main+0x28c>)
 8000b04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b08:	015b      	lsls	r3, r3, #5
 8000b0a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000b0e:	f043 0314 	orr.w	r3, r3, #20
 8000b12:	461a      	mov	r2, r3
 8000b14:	2301      	movs	r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

	LineStructInit(&Env);
 8000b18:	4884      	ldr	r0, [pc, #528]	; (8000d2c <main+0x288>)
 8000b1a:	f7ff fb3e 	bl	800019a <LineStructInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1e:	f002 feed 	bl	80038fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT
 8000b22:	4b84      	ldr	r3, [pc, #528]	; (8000d34 <main+0x290>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a83      	ldr	r2, [pc, #524]	; (8000d34 <main+0x290>)
 8000b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b2c:	6013      	str	r3, [r2, #0]
  		  DWT_CYCCNT = 0;// обнуляем значение
 8000b2e:	4b82      	ldr	r3, [pc, #520]	; (8000d38 <main+0x294>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
  		  DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
 8000b34:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <main+0x298>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a80      	ldr	r2, [pc, #512]	; (8000d3c <main+0x298>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]
  		/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f916 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff fda4 	bl	8000690 <MX_GPIO_Init>
  MX_CRC_Init();
 8000b48:	f7ff fb20 	bl	800018c <MX_CRC_Init>
  MX_SPI1_Init();
 8000b4c:	f000 fc0a 	bl	8001364 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000b50:	f004 f910 	bl	8004d74 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000b54:	f002 f876 	bl	8002c44 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b58:	f001 ff56 	bl	8002a08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5c:	f002 f804 	bl	8002b68 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b60:	f002 f8d6 	bl	8002d10 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8000b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b68:	4875      	ldr	r0, [pc, #468]	; (8000d40 <main+0x29c>)
 8000b6a:	f7ff ff8b 	bl	8000a84 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b74:	f7ff ff86 	bl	8000a84 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4872      	ldr	r0, [pc, #456]	; (8000d44 <main+0x2a0>)
 8000b7c:	f7ff ff82 	bl	8000a84 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8000b80:	2110      	movs	r1, #16
 8000b82:	4871      	ldr	r0, [pc, #452]	; (8000d48 <main+0x2a4>)
 8000b84:	f7ff ff7e 	bl	8000a84 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM1);
 8000b88:	486d      	ldr	r0, [pc, #436]	; (8000d40 <main+0x29c>)
 8000b8a:	f7ff ff6c 	bl	8000a66 <LL_TIM_EnableCounter>

	LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
 8000b8e:	486f      	ldr	r0, [pc, #444]	; (8000d4c <main+0x2a8>)
 8000b90:	f7ff ff5a 	bl	8000a48 <LL_SPI_Enable>
	resFS = f_mount(&FatFs, "", 1); //Монтируем файловую систему до первого использования SPI дисплеем
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2201      	movs	r2, #1
 8000b9a:	496d      	ldr	r1, [pc, #436]	; (8000d50 <main+0x2ac>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fee9 	bl	8007974 <f_mount>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d

	HAL_ST7735_Init();
 8000ba8:	f002 f99a 	bl	8002ee0 <HAL_ST7735_Init>

	if(resFS != FR_OK)
 8000bac:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d067      	beq.n	8000c84 <main+0x1e0>
	{
		ST7735_Clear(DANGER_BGR_COLOR);
 8000bb4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000bb8:	f002 fb1c 	bl	80031f4 <ST7735_Clear>
		sprintf(status, "SD card" );
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4a64      	ldr	r2, [pc, #400]	; (8000d54 <main+0x2b0>)
 8000bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc6:	e883 0003 	stmia.w	r3, {r0, r1}
		ST7735_DrawString7x11(39,1, status,DANGER_TXT_COLOR,DANGER_BGR_COLOR);
 8000bca:	f107 0208 	add.w	r2, r7, #8
 8000bce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2027      	movs	r0, #39	; 0x27
 8000bdc:	f002 fd0e 	bl	80035fc <ST7735_DrawString7x11>
		sprintf(status, "not find" );
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4a5c      	ldr	r2, [pc, #368]	; (8000d58 <main+0x2b4>)
 8000be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000be8:	c303      	stmia	r3!, {r0, r1}
 8000bea:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(27,LINE_HEIGTH*1, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000bec:	f107 0208 	add.w	r2, r7, #8
 8000bf0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfa:	210d      	movs	r1, #13
 8000bfc:	201b      	movs	r0, #27
 8000bfe:	f002 fcfd 	bl	80035fc <ST7735_DrawString7x11>
		sprintf(status, "Insert SD card" );
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4a55      	ldr	r2, [pc, #340]	; (8000d5c <main+0x2b8>)
 8000c08:	461c      	mov	r4, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0e:	c407      	stmia	r4!, {r0, r1, r2}
 8000c10:	8023      	strh	r3, [r4, #0]
 8000c12:	3402      	adds	r4, #2
 8000c14:	0c1b      	lsrs	r3, r3, #16
 8000c16:	7023      	strb	r3, [r4, #0]
		ST7735_DrawString7x11(8,LINE_HEIGTH*2, status, DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000c18:	f107 0208 	add.w	r2, r7, #8
 8000c1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c26:	211a      	movs	r1, #26
 8000c28:	2008      	movs	r0, #8
 8000c2a:	f002 fce7 	bl	80035fc <ST7735_DrawString7x11>
		sprintf(status, "and reboot" );
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4a4b      	ldr	r2, [pc, #300]	; (8000d60 <main+0x2bc>)
 8000c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c36:	c303      	stmia	r3!, {r0, r1}
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	0c12      	lsrs	r2, r2, #16
 8000c3e:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(29,LINE_HEIGTH*3, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000c40:	f107 0208 	add.w	r2, r7, #8
 8000c44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c4e:	2127      	movs	r1, #39	; 0x27
 8000c50:	201d      	movs	r0, #29
 8000c52:	f002 fcd3 	bl	80035fc <ST7735_DrawString7x11>
		sprintf(status, "device" );
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4a42      	ldr	r2, [pc, #264]	; (8000d64 <main+0x2c0>)
 8000c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c60:	6018      	str	r0, [r3, #0]
 8000c62:	3304      	adds	r3, #4
 8000c64:	8019      	strh	r1, [r3, #0]
 8000c66:	3302      	adds	r3, #2
 8000c68:	0c0a      	lsrs	r2, r1, #16
 8000c6a:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(42,LINE_HEIGTH*4, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7a:	2134      	movs	r1, #52	; 0x34
 8000c7c:	202a      	movs	r0, #42	; 0x2a
 8000c7e:	f002 fcbd 	bl	80035fc <ST7735_DrawString7x11>
		while( 1);
 8000c82:	e7fe      	b.n	8000c82 <main+0x1de>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		ST7735_Clear(BGR_COLOR);
 8000c84:	2011      	movs	r0, #17
 8000c86:	f002 fab5 	bl	80031f4 <ST7735_Clear>
		FS_GetFileList( &Env);
 8000c8a:	4828      	ldr	r0, [pc, #160]	; (8000d2c <main+0x288>)
 8000c8c:	f004 f88c 	bl	8004da8 <FS_GetFileList>
		Env.Menu.NmbrAllPages = (uint32_t)(Env.Menu.NmbrAllFiles/ITEM_ON_PAGE_MAX);
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <main+0x288>)
 8000c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <main+0x2c4>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <main+0x288>)
 8000ca0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		Env.FileNameForTest = Env.Menu.FileList[0];
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <main+0x288>)
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <main+0x288>)
 8000ca8:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
  while (1)
  {
	f_connect = CheckConnect(Env);
 8000cac:	4c1f      	ldr	r4, [pc, #124]	; (8000d2c <main+0x288>)
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f104 0310 	add.w	r3, r4, #16
 8000cb4:	f44f 624e 	mov.w	r2, #3296	; 0xce0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f007 fc6d 	bl	8008598 <memcpy>
 8000cbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc2:	f001 fa59 	bl	8002178 <CheckConnect>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <main+0x28c>)
 8000cca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000cce:	015b      	lsls	r3, r3, #5
 8000cd0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000cd4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000cd8:	601a      	str	r2, [r3, #0]
	count_tic = DWT_CYCCNT;//смотрим сколько натикало
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <main+0x294>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <main+0x2c8>)
 8000ce0:	6013      	str	r3, [r2, #0]
	ReadKeyPad();
 8000ce2:	f000 f9df 	bl	80010a4 <ReadKeyPad>
	mode = Env.Mode;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <main+0x288>)
 8000ce8:	f893 3bdc 	ldrb.w	r3, [r3, #3036]	; 0xbdc
 8000cec:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	switch(mode)	// назначить действие в зависимости от текущего режима
 8000cf0:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d008      	beq.n	8000d0a <main+0x266>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d00a      	beq.n	8000d12 <main+0x26e>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d000      	beq.n	8000d02 <main+0x25e>
	{
		case MODE_MENU: 	Menu(&Env); 	break;
		case MODE_WAIT: 	Wait(&Env);  	break;
		case MODE_TEST: 	Test(&Env);		break;
		default: break;
 8000d00:	e00b      	b.n	8000d1a <main+0x276>
		case MODE_MENU: 	Menu(&Env); 	break;
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <main+0x288>)
 8000d04:	f000 f8a8 	bl	8000e58 <Menu>
 8000d08:	e007      	b.n	8000d1a <main+0x276>
		case MODE_WAIT: 	Wait(&Env);  	break;
 8000d0a:	4808      	ldr	r0, [pc, #32]	; (8000d2c <main+0x288>)
 8000d0c:	f000 f966 	bl	8000fdc <Wait>
 8000d10:	e003      	b.n	8000d1a <main+0x276>
		case MODE_TEST: 	Test(&Env);		break;
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <main+0x288>)
 8000d14:	f000 fe50 	bl	80019b8 <Test>
 8000d18:	bf00      	nop
	}
	Display(&Env);
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <main+0x288>)
 8000d1c:	f7ff fb0b 	bl	8000336 <Display>
    HAL_Delay(100);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f002 fe4d 	bl	80039c0 <HAL_Delay>
  {
 8000d26:	e7c1      	b.n	8000cac <main+0x208>
 8000d28:	08008f4c 	.word	0x08008f4c
 8000d2c:	200000b4 	.word	0x200000b4
 8000d30:	20000da4 	.word	0x20000da4
 8000d34:	e000edfc 	.word	0xe000edfc
 8000d38:	e0001004 	.word	0xe0001004
 8000d3c:	e0001000 	.word	0xe0001000
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	40000400 	.word	0x40000400
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	40013000 	.word	0x40013000
 8000d50:	08008f10 	.word	0x08008f10
 8000d54:	08008f14 	.word	0x08008f14
 8000d58:	08008f1c 	.word	0x08008f1c
 8000d5c:	08008f28 	.word	0x08008f28
 8000d60:	08008f38 	.word	0x08008f38
 8000d64:	08008f44 	.word	0x08008f44
 8000d68:	38e38e39 	.word	0x38e38e39
 8000d6c:	20000da8 	.word	0x20000da8

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fe47 	bl	8000a08 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff fe58 	bl	8000a30 <LL_FLASH_GetLatency>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d1fa      	bne.n	8000d7c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000d86:	f7ff fd8b 	bl	80008a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff fd96 	bl	80008bc <LL_RCC_HSE_IsReady>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d1fa      	bne.n	8000d8c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000d96:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000d9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d9e:	f7ff fe1b 	bl	80009d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000da2:	f7ff fdf9 	bl	8000998 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000da6:	bf00      	nop
 8000da8:	f7ff fe04 	bl	80009b4 <LL_RCC_PLL_IsReady>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d1fa      	bne.n	8000da8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fdb4 	bl	8000920 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000db8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dbc:	f7ff fdc4 	bl	8000948 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fdd5 	bl	8000970 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fd8a 	bl	80008e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dcc:	bf00      	nop
 8000dce:	f7ff fd9b 	bl	8000908 <LL_RCC_GetSysClkSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d1fa      	bne.n	8000dce <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <SystemClock_Config+0x84>)
 8000dda:	f003 ffbd 	bl	8004d58 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f002 fda2 	bl	8003928 <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000dea:	f000 f805 	bl	8000df8 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	044aa200 	.word	0x044aa200

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <Error_Handler+0x6>

08000e00 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <LL_TIM_GetCounter>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <LL_GPIO_IsInputPinSet>:
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	4013      	ands	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf0c      	ite	eq
 8000e46:	2301      	moveq	r3, #1
 8000e48:	2300      	movne	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <Menu>:

const uint16_t  COLORS565[140] = {0xF7DF, 0xFF5A, 0x07FF, 0x7FFA, 0xF7FF, 0xF7BB, 0xFF38, 0x0, 0xFF59, 0x001F, 0x895C, 0xA145, 0xDDD0, 0x5CF4, 0x7FE0, 0xD343, 0xFBEA, 0x64BD, 0xFFDB, 0xD8A7, 0x07FF, 0x11, 0x451, 0xBC21, 0xAD55, 0x320, 0xBDAD, 0x8811, 0x5345, 0xFC60, 0x9999, 0x8800, 0xECAF, 0x8DF1, 0x49F1, 0x2A69, 0x067A, 0x901A, 0xF8B2, 0x05FF, 0x6B4D, 0x1C9F, 0xB104, 0xFFDE, 0x2444, 0xF81F, 0xDEFB, 0xFFDF, 0xFEA0, 0xDD24, 0x8410, 0x400, 0xAFE5, 0xF7FE, 0xFB56, 0xCAEB, 0x4810, 0xFFFE, 0xF731, 0xE73F, 0xFF9E, 0x7FE0, 0xFFD9, 0xAEDC, 0xF410, 0xE7FF, 0xFFDA, 0xD69A, 0x9772, 0xFDB8, 0xFD0F, 0x2595, 0x867F, 0x7453, 0xB63B, 0xFFFC, 0x7, 0x3666, 0xFF9C, 0xF81F, 0x8000, 0x6675, 0x19, 0xBABA, 0x939B, 0x3D8E, 0x7B5D, 0x07D3, 0x4E99, 0xC0B0, 0x18CE, 0xF7FF, 0xFF3C, 0xFF36, 0xFEF5, 0x10, 0xFFBC, 0x8400, 0x6C64, 0xFD20, 0xFA20, 0xDB9A, 0xEF55, 0x9FD3, 0xAF7D, 0xDB92, 0xFF7A, 0xFED7, 0xCC27, 0xFE19, 0xDD1B, 0xB71C, 0x8010, 0xF800, 0xBC71, 0x435C, 0x8A22, 0xFC0E, 0xF52C, 0x2C4A, 0xFFBD, 0xA285, 0xC618, 0x867D, 0x6AD9, 0x7412, 0xFFDF, 0x07EF, 0x4416, 0xD5B1, 0x410, 0xDDFB, 0xFB08, 0x471A, 0xEC1D, 0xF6F6, 0xFFFF, 0xF7BE, 0xFFE0, 0x9E66 };


void Menu(typeEnv *Env)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e64:	60bb      	str	r3, [r7, #8]
	short int ActiveItem = (*Env).Menu.ActiveItem;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8000e6c:	81fb      	strh	r3, [r7, #14]
	short int ActivePage = (*Env).Menu.ActivePage;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000e74:	81bb      	strh	r3, [r7, #12]

	if(f_StepMenu != 0) // если необходимо перемещение по меню
 8000e76:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <Menu+0x180>)
 8000e78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d078      	beq.n	8000f7e <Menu+0x126>
	{
		f_StepMenu = 0;
 8000e8c:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <Menu+0x180>)
 8000e8e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6013      	str	r3, [r2, #0]
		f_RefreshScreen = 1;				// перерисуй экран
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <Menu+0x180>)
 8000ea4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ea8:	015b      	lsls	r3, r3, #5
 8000eaa:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000eae:	f043 0314 	orr.w	r3, r3, #20
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
		if(f_DirStepMenu == 0)				//двигаемся вверх по меню
 8000eb8:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <Menu+0x180>)
 8000eba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ebe:	015b      	lsls	r3, r3, #5
 8000ec0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000ec4:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d118      	bne.n	8000f00 <Menu+0xa8>
		{
			ActiveItem--;
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem < 0)
 8000eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da2c      	bge.n	8000f3c <Menu+0xe4>
			{
				ActiveItem = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	81fb      	strh	r3, [r7, #14]
				ActivePage--;
 8000ee6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	81bb      	strh	r3, [r7, #12]
				if(ActivePage < 0) {ActivePage = 0;}
 8000ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da20      	bge.n	8000f3c <Menu+0xe4>
 8000efa:	2300      	movs	r3, #0
 8000efc:	81bb      	strh	r3, [r7, #12]
 8000efe:	e01d      	b.n	8000f3c <Menu+0xe4>
			}
		}
		else // двигаемся вниз по меню
		{
			ActiveItem++;
 8000f00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem >= end_list)
 8000f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d812      	bhi.n	8000f3c <Menu+0xe4>
				{
				ActiveItem = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	81fb      	strh	r3, [r7, #14]
				ActivePage++;
 8000f1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	81bb      	strh	r3, [r7, #12]
				if(ActivePage > Env->Menu.NmbrAllPages) {ActivePage = Env->Menu.NmbrAllPages;}
 8000f26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d903      	bls.n	8000f3c <Menu+0xe4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f3a:	81bb      	strh	r3, [r7, #12]
				}
		}
		if(ActivePage != (*Env).Menu.ActivePage)	// при переходе на новую страницу меню
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8000f42:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d009      	beq.n	8000f5e <Menu+0x106>
				{
					(*Env).Menu.ActivePage = ActivePage;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	89ba      	ldrh	r2, [r7, #12]
 8000f4e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
					FS_GetFileList(Env);			// получи новый список файлов
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f003 ff28 	bl	8004da8 <FS_GetFileList>
					ST7735_Clear(BGR_COLOR);
 8000f58:	2011      	movs	r0, #17
 8000f5a:	f002 f94b 	bl	80031f4 <ST7735_Clear>
				}
		(*Env).Menu.ActiveItem = ActiveItem;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	89fa      	ldrh	r2, [r7, #14]
 8000f62:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		(*Env).FileNameForTest = Env->Menu.FileList[ActiveItem];
 8000f66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	441a      	add	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0
	}

	if(f_Action !=0)    				// если нужно действие в меню (кнопка OK!)
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <Menu+0x180>)
 8000f80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f8a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01c      	beq.n	8000fce <Menu+0x176>
	{
		f_Action =0;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <Menu+0x180>)
 8000f96:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f9a:	015b      	lsls	r3, r3, #5
 8000f9c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fa0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6013      	str	r3, [r2, #0]

		FS_ReadCSVFile(Env);			// прочитать выделенный файл
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f003 ffa8 	bl	8004f00 <FS_ReadCSVFile>
		(*Env).Mode = MODE_WAIT;		// перейти в режим проверки схемы соединений, ожидание подключения кабеля
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2bdc 	strb.w	r2, [r3, #3036]	; 0xbdc
		f_RefreshScreen = 1;			// перерисуй экран
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <Menu+0x180>)
 8000fba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fc4:	f043 0314 	orr.w	r3, r3, #20
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2301      	movs	r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000da4 	.word	0x20000da4

08000fdc <Wait>:

void Wait(typeEnv *Env)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint8_t connect=0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

	if(f_StepMenu != 0) 				// если вверх или вниз, направление не важно
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <Wait+0xc4>)
 8000fea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01c      	beq.n	8001038 <Wait+0x5c>
		{
			f_StepMenu = 0;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <Wait+0xc4>)
 8001000:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001004:	015b      	lsls	r3, r3, #5
 8001006:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	461a      	mov	r2, r3
 8001010:	2300      	movs	r3, #0
 8001012:	6013      	str	r3, [r2, #0]
			(*Env).Mode = MODE_MENU;	// перейти в режим меню
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2bdc 	strb.w	r2, [r3, #3036]	; 0xbdc
			ST7735_Clear(BGR_COLOR);
 800101c:	2011      	movs	r0, #17
 800101e:	f002 f8e9 	bl	80031f4 <ST7735_Clear>
			f_RefreshScreen = 1;		// перерисуй экран
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <Wait+0xc4>)
 8001024:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001028:	015b      	lsls	r3, r3, #5
 800102a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800102e:	f043 0314 	orr.w	r3, r3, #20
 8001032:	461a      	mov	r2, r3
 8001034:	2301      	movs	r3, #1
 8001036:	6013      	str	r3, [r2, #0]
		}


	if(f_Action == 1 || f_connect ==1 )    	// если нажата ОК или подключен кабель
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <Wait+0xc4>)
 800103a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001044:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00a      	beq.n	8001064 <Wait+0x88>
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <Wait+0xc4>)
 8001050:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800105a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d119      	bne.n	8001098 <Wait+0xbc>
		{
			f_Action = 0;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <Wait+0xc4>)
 8001066:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800106a:	015b      	lsls	r3, r3, #5
 800106c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001070:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001074:	461a      	mov	r2, r3
 8001076:	2300      	movs	r3, #0
 8001078:	6013      	str	r3, [r2, #0]
			(*Env).Mode = MODE_TEST;		// перейти в режим ТЕСТ
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 2bdc 	strb.w	r2, [r3, #3036]	; 0xbdc
			f_StartTest	= 1; 				// запустить тест сразу при переходе в состояние ТЕСТ
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <Wait+0xc4>)
 8001084:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800108e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001092:	461a      	mov	r2, r3
 8001094:	2301      	movs	r3, #1
 8001096:	6013      	str	r3, [r2, #0]
		}

}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000da4 	.word	0x20000da4

080010a4 <ReadKeyPad>:
		}
}

/* Чтение состояние кнопок*/
void ReadKeyPad(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	static uint16_t LastEncCount=0;
	static uint8_t but_latch=0, but_press=0, key=0;

	uint16_t CurrEncCount=LL_TIM_GetCounter(TIM3);
 80010aa:	4838      	ldr	r0, [pc, #224]	; (800118c <ReadKeyPad+0xe8>)
 80010ac:	f7ff feb2 	bl	8000e14 <LL_TIM_GetCounter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	80fb      	strh	r3, [r7, #6]
	uint8_t but_OK=0, but_DWN=0, but_UP=0, but_ENC=0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	717b      	strb	r3, [r7, #5]
 80010b8:	2300      	movs	r3, #0
 80010ba:	713b      	strb	r3, [r7, #4]
 80010bc:	2300      	movs	r3, #0
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	2300      	movs	r3, #0
 80010c2:	70bb      	strb	r3, [r7, #2]

	if(f_ReadKeyPad !=0)						// по таймеру
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <ReadKeyPad+0xec>)
 80010c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010d0:	f043 0318 	orr.w	r3, r3, #24
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d054      	beq.n	8001184 <ReadKeyPad+0xe0>
	{
		f_ReadKeyPad =0;
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <ReadKeyPad+0xec>)
 80010dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010e6:	f043 0318 	orr.w	r3, r3, #24
 80010ea:	461a      	mov	r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	6013      	str	r3, [r2, #0]
		but_ENC = LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin)<<3;
 80010f0:	4928      	ldr	r1, [pc, #160]	; (8001194 <ReadKeyPad+0xf0>)
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <ReadKeyPad+0xf4>)
 80010f4:	f7ff fe99 	bl	8000e2a <LL_GPIO_IsInputPinSet>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	70bb      	strb	r3, [r7, #2]
		but_UP  = LL_GPIO_IsInputPinSet(BUT_UP_GPIO_Port, BUT_UP_Pin)<<2;
 8001100:	4926      	ldr	r1, [pc, #152]	; (800119c <ReadKeyPad+0xf8>)
 8001102:	4827      	ldr	r0, [pc, #156]	; (80011a0 <ReadKeyPad+0xfc>)
 8001104:	f7ff fe91 	bl	8000e2a <LL_GPIO_IsInputPinSet>
 8001108:	4603      	mov	r3, r0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	70fb      	strb	r3, [r7, #3]
		but_OK  = LL_GPIO_IsInputPinSet(BUT_OK_GPIO_Port, BUT_OK_Pin)<<1;
 8001110:	4924      	ldr	r1, [pc, #144]	; (80011a4 <ReadKeyPad+0x100>)
 8001112:	4823      	ldr	r0, [pc, #140]	; (80011a0 <ReadKeyPad+0xfc>)
 8001114:	f7ff fe89 	bl	8000e2a <LL_GPIO_IsInputPinSet>
 8001118:	4603      	mov	r3, r0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	717b      	strb	r3, [r7, #5]
		but_DWN = LL_GPIO_IsInputPinSet(BUT_DW_GPIO_Port,BUT_DW_Pin);
 8001120:	f244 0140 	movw	r1, #16448	; 0x4040
 8001124:	481e      	ldr	r0, [pc, #120]	; (80011a0 <ReadKeyPad+0xfc>)
 8001126:	f7ff fe80 	bl	8000e2a <LL_GPIO_IsInputPinSet>
 800112a:	4603      	mov	r3, r0
 800112c:	713b      	strb	r3, [r7, #4]
		but_latch = but_ENC | but_UP | but_OK | but_DWN;
 800112e:	78ba      	ldrb	r2, [r7, #2]
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	4313      	orrs	r3, r2
 8001134:	b2da      	uxtb	r2, r3
 8001136:	797b      	ldrb	r3, [r7, #5]
 8001138:	4313      	orrs	r3, r2
 800113a:	b2da      	uxtb	r2, r3
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <ReadKeyPad+0x104>)
 8001144:	701a      	strb	r2, [r3, #0]

		if(but_latch !=0xF)
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <ReadKeyPad+0x104>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	d007      	beq.n	800115e <ReadKeyPad+0xba>
		{
			but_press=1;						// фиксируем нажатие
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <ReadKeyPad+0x108>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
			key = but_latch;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <ReadKeyPad+0x104>)
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <ReadKeyPad+0x10c>)
 800115a:	701a      	strb	r2, [r3, #0]
			but_press=0;
			key=0;

		}
	}
}
 800115c:	e012      	b.n	8001184 <ReadKeyPad+0xe0>
		else if( but_latch==0xF &&  but_press == 1)
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <ReadKeyPad+0x104>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	d10e      	bne.n	8001184 <ReadKeyPad+0xe0>
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <ReadKeyPad+0x108>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10a      	bne.n	8001184 <ReadKeyPad+0xe0>
			Keyboard_handler(key);				// обработка нажатия после отпускания
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <ReadKeyPad+0x10c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f85a 	bl	800122c <Keyboard_handler>
			but_press=0;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <ReadKeyPad+0x108>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			key=0;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <ReadKeyPad+0x10c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40000400 	.word	0x40000400
 8001190:	20000da4 	.word	0x20000da4
 8001194:	04800080 	.word	0x04800080
 8001198:	40010800 	.word	0x40010800
 800119c:	04080008 	.word	0x04080008
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	04040004 	.word	0x04040004
 80011a8:	20000db4 	.word	0x20000db4
 80011ac:	20000db5 	.word	0x20000db5
 80011b0:	20000db6 	.word	0x20000db6

080011b4 <StepUP>:



void StepUP(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	f_DirStepMenu=0; f_StepMenu = 1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <StepUP+0x38>)
 80011ba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011c4:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011c8:	461a      	mov	r2, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <StepUP+0x38>)
 80011d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	461a      	mov	r2, r3
 80011e0:	2301      	movs	r3, #1
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20000da4 	.word	0x20000da4

080011f0 <StepDOWN>:

void StepDOWN(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	f_DirStepMenu=1; f_StepMenu = 1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <StepDOWN+0x38>)
 80011f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001200:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8001204:	461a      	mov	r2, r3
 8001206:	2301      	movs	r3, #1
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <StepDOWN+0x38>)
 800120c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001216:	f043 0320 	orr.w	r3, r3, #32
 800121a:	461a      	mov	r2, r3
 800121c:	2301      	movs	r3, #1
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000da4 	.word	0x20000da4

0800122c <Keyboard_handler>:

void Keyboard_handler(uint8_t key)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	switch(key)
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3b07      	subs	r3, #7
 800123a:	2b07      	cmp	r3, #7
 800123c:	d830      	bhi.n	80012a0 <Keyboard_handler+0x74>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <Keyboard_handler+0x18>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001289 	.word	0x08001289
 8001248:	080012a1 	.word	0x080012a1
 800124c:	080012a1 	.word	0x080012a1
 8001250:	080012a1 	.word	0x080012a1
 8001254:	08001265 	.word	0x08001265
 8001258:	080012a1 	.word	0x080012a1
 800125c:	0800126b 	.word	0x0800126b
 8001260:	08001283 	.word	0x08001283
	{
	case UP: 		StepUP(); break;
 8001264:	f7ff ffa6 	bl	80011b4 <StepUP>
 8001268:	e01b      	b.n	80012a2 <Keyboard_handler+0x76>
	case OK: 		f_Action = 1; break;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <Keyboard_handler+0x80>)
 800126c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001270:	015b      	lsls	r3, r3, #5
 8001272:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001276:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800127a:	461a      	mov	r2, r3
 800127c:	2301      	movs	r3, #1
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e00f      	b.n	80012a2 <Keyboard_handler+0x76>
	case DOWN: 		StepDOWN(); break;
 8001282:	f7ff ffb5 	bl	80011f0 <StepDOWN>
 8001286:	e00c      	b.n	80012a2 <Keyboard_handler+0x76>
	case ENC_BUT: 	f_Action = 1; break;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <Keyboard_handler+0x80>)
 800128a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001294:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001298:	461a      	mov	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e000      	b.n	80012a2 <Keyboard_handler+0x76>
		default: break;
 80012a0:	bf00      	nop
	}
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000da4 	.word	0x20000da4

080012b0 <LL_APB2_GRP1_EnableClock>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b02      	cmp	r3, #2
 8001316:	d101      	bne.n	800131c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	b2db      	uxtb	r3, r3
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	330c      	adds	r3, #12
 8001350:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	78fa      	ldrb	r2, [r7, #3]
 8001356:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b090      	sub	sp, #64	; 0x40
 8001368:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2228      	movs	r2, #40	; 0x28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f007 f934 	bl	80085e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001386:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800138a:	f7ff ff91 	bl	80012b0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800138e:	2004      	movs	r0, #4
 8001390:	f7ff ff8e 	bl	80012b0 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8001394:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8001398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139a:	2309      	movs	r3, #9
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <MX_SPI1_Init+0xa0>)
 80013ac:	f002 fd1c 	bl	8003de8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80013b0:	f244 0340 	movw	r3, #16448	; 0x4040
 80013b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80013b6:	2304      	movs	r3, #4
 80013b8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_SPI1_Init+0xa0>)
 80013c0:	f002 fd12 	bl	8003de8 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013cc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 80013e0:	2330      	movs	r3, #48	; 0x30
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80013ec:	230a      	movs	r3, #10
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_SPI1_Init+0xa4>)
 80013f8:	f002 fdf0 	bl	8003fdc <LL_SPI_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3740      	adds	r7, #64	; 0x40
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40010800 	.word	0x40010800
 8001408:	40013000 	.word	0x40013000

0800140c <LL_SPI_TransmitReceive>:

/* USER CODE BEGIN 1 */
uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
	while(	LL_SPI_IsActiveFlag_TXE(SPIx) == RESET	);
 8001418:	bf00      	nop
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff72 	bl	8001304 <LL_SPI_IsActiveFlag_TXE>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f9      	beq.n	800141a <LL_SPI_TransmitReceive+0xe>
	LL_SPI_TransmitData8(SPIx, TxByte);
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff88 	bl	8001340 <LL_SPI_TransmitData8>

	while(	LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET	);
 8001430:	bf00      	nop
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff54 	bl	80012e0 <LL_SPI_IsActiveFlag_RXNE>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f9      	beq.n	8001432 <LL_SPI_TransmitReceive+0x26>
	return LL_SPI_ReceiveData8(SPIx);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff72 	bl	8001328 <LL_SPI_ReceiveData8>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_MspInit+0x5c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_MspInit+0x5c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x5c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x5c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_MspInit+0x60>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_MspInit+0x60>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010000 	.word	0x40010000

080014b4 <LL_TIM_DisableCounter>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 0201 	bic.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <LL_TIM_SetCounter>:
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f06f 0201 	mvn.w	r2, #1
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f06f 0202 	mvn.w	r2, #2
 800154e:	611a      	str	r2, [r3, #16]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d101      	bne.n	8001572 <LL_TIM_IsActiveFlag_CC1+0x18>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <HardFault_Handler+0x4>

0800158a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <BusFault_Handler+0x4>

08001596 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f002 f9e0 	bl	8003988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_1ms();
 80015c8:	f000 f84a 	bl	8001660 <timer_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1))
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <TIM1_TRG_COM_IRQHandler+0x1c>)
 80015d6:	f7ff ffa1 	bl	800151c <LL_TIM_IsActiveFlag_UPDATE>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <TIM1_TRG_COM_IRQHandler+0x16>
		{
			LL_TIM_ClearFlag_UPDATE(TIM1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM1_TRG_COM_IRQHandler+0x1c>)
 80015e2:	f7ff ff8e 	bl	8001502 <LL_TIM_ClearFlag_UPDATE>
		}
  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012c00 	.word	0x40012c00

080015f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM2))
 80015f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015f8:	f7ff ffaf 	bl	800155a <LL_TIM_IsActiveFlag_CC1>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d017      	beq.n	8001632 <TIM2_IRQHandler+0x42>
		{
			LL_TIM_ClearFlag_CC1(TIM2);
 8001602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001606:	f7ff ff9b 	bl	8001540 <LL_TIM_ClearFlag_CC1>
			//Period += LL_TIM_OC_GetCompareCH1(TIM2);	// Period Pulse N_periods
			Pulse  += LL_TIM_OC_GetCompareCH2(TIM2);
 800160a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800160e:	f7ff ff6d 	bl	80014ec <LL_TIM_OC_GetCompareCH2>
 8001612:	4602      	mov	r2, r0
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <TIM2_IRQHandler+0x48>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4413      	add	r3, r2
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <TIM2_IRQHandler+0x48>)
 800161c:	6013      	str	r3, [r2, #0]
			N_periods++;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <TIM2_IRQHandler+0x4c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a05      	ldr	r2, [pc, #20]	; (800163c <TIM2_IRQHandler+0x4c>)
 8001626:	6013      	str	r3, [r2, #0]
			LL_TIM_SetCounter(TIM2, 0);
 8001628:	2100      	movs	r1, #0
 800162a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800162e:	f7ff ff50 	bl	80014d2 <LL_TIM_SetCounter>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000dac 	.word	0x20000dac
 800163c:	20000db0 	.word	0x20000db0

08001640 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <TIM4_IRQHandler+0x1c>)
 8001646:	f7ff ff69 	bl	800151c <LL_TIM_IsActiveFlag_UPDATE>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <TIM4_IRQHandler+0x16>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM4_IRQHandler+0x1c>)
 8001652:	f7ff ff56 	bl	8001502 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40000800 	.word	0x40000800

08001660 <timer_1ms>:

/* USER CODE BEGIN 1 */
void timer_1ms(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	if (    (f_1ms = !f_1ms)==0        )
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <timer_1ms+0x38>)
 8001666:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <timer_1ms+0x38>)
 800167e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001682:	015b      	lsls	r3, r3, #5
 8001684:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <timer_1ms+0x34>
	  {
	   Flags_1ms();
 8001690:	f000 f804 	bl	800169c <Flags_1ms>
//	   lv_tick_inc(12);
	  }
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000da4 	.word	0x20000da4

0800169c <Flags_1ms>:

void Flags_1ms(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	f_1ms = 1; // user flag every 1 ms
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <Flags_1ms+0x38>)
 80016a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016ac:	461a      	mov	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	6013      	str	r3, [r2, #0]


	  if (--t_10ms == 0x00)
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <Flags_1ms+0x3c>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <Flags_1ms+0x3c>)
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <Flags_1ms+0x3c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <Flags_1ms+0x34>
	    {
	      t_10ms = cl_ms10;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <Flags_1ms+0x3c>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	801a      	strh	r2, [r3, #0]
	      Flags_10msec();
 80016cc:	f000 f806 	bl	80016dc <Flags_10msec>
	    }
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000da4 	.word	0x20000da4
 80016d8:	20000000 	.word	0x20000000

080016dc <Flags_10msec>:

void Flags_10msec()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	f_10ms = 1;		// user flag every 10 ms
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <Flags_10msec+0x54>)
 80016e2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	461a      	mov	r2, r3
 80016f2:	2301      	movs	r3, #1
 80016f4:	6013      	str	r3, [r2, #0]
	f_ReadKeyPad=1;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <Flags_10msec+0x54>)
 80016f8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016fc:	015b      	lsls	r3, r3, #5
 80016fe:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001702:	f043 0318 	orr.w	r3, r3, #24
 8001706:	461a      	mov	r2, r3
 8001708:	2301      	movs	r3, #1
 800170a:	6013      	str	r3, [r2, #0]
	  if (--t_100ms == 0x00)
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <Flags_10msec+0x58>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <Flags_10msec+0x58>)
 8001716:	801a      	strh	r2, [r3, #0]
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <Flags_10msec+0x58>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <Flags_10msec+0x4e>
		{
		  t_100ms = cl_ms100;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <Flags_10msec+0x58>)
 8001722:	220a      	movs	r2, #10
 8001724:	801a      	strh	r2, [r3, #0]
		  Flags_100ms();
 8001726:	f000 f807 	bl	8001738 <Flags_100ms>

		}
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000da4 	.word	0x20000da4
 8001734:	20000002 	.word	0x20000002

08001738 <Flags_100ms>:

void Flags_100ms(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	f_100ms = 1;		// user flag every 100 ms
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <Flags_100ms+0xa0>)
 800173e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	461a      	mov	r2, r3
 800174e:	2301      	movs	r3, #1
 8001750:	6013      	str	r3, [r2, #0]
	f_waitTick = 1;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <Flags_100ms+0xa0>)
 8001754:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800175e:	f043 031c 	orr.w	r3, r3, #28
 8001762:	461a      	mov	r2, r3
 8001764:	2301      	movs	r3, #1
 8001766:	6013      	str	r3, [r2, #0]
//------	таймер длительности звукового сигнала
	if(f_sound == 1)
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <Flags_100ms+0xa0>)
 800176a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800176e:	015b      	lsls	r3, r3, #5
 8001770:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001774:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11a      	bne.n	80017b4 <Flags_100ms+0x7c>
		{
			if(--t_sound == 0)
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <Flags_100ms+0xa4>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <Flags_100ms+0xa4>)
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <Flags_100ms+0xa4>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d110      	bne.n	80017b4 <Flags_100ms+0x7c>
			{
				LL_TIM_DisableCounter(TIM3);
 8001792:	4813      	ldr	r0, [pc, #76]	; (80017e0 <Flags_100ms+0xa8>)
 8001794:	f7ff fe8e 	bl	80014b4 <LL_TIM_DisableCounter>
				f_sound=0;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <Flags_100ms+0xa0>)
 800179a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017a4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80017a8:	461a      	mov	r2, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	6013      	str	r3, [r2, #0]
				t_sound = cl_sound; //t_sound x 100ms
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <Flags_100ms+0xa4>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	801a      	strh	r2, [r3, #0]
			}
		}
//------	Таймер 1 секунды	---
	if (--t_sec == 0x00)
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <Flags_100ms+0xac>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <Flags_100ms+0xac>)
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <Flags_100ms+0xac>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <Flags_100ms+0x9a>
		{
		  t_sec = cl_sec;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <Flags_100ms+0xac>)
 80017ca:	220a      	movs	r2, #10
 80017cc:	801a      	strh	r2, [r3, #0]
		  Flags_1s();
 80017ce:	f000 f80b 	bl	80017e8 <Flags_1s>
		}
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000da4 	.word	0x20000da4
 80017dc:	20000008 	.word	0x20000008
 80017e0:	40000400 	.word	0x40000400
 80017e4:	20000004 	.word	0x20000004

080017e8 <Flags_1s>:

void Flags_1s(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	f_1sec = 1;		// user flag every 1 sec
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <Flags_1s+0x54>)
 80017ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017f2:	015b      	lsls	r3, r3, #5
 80017f4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017f8:	f043 030c 	orr.w	r3, r3, #12
 80017fc:	461a      	mov	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	6013      	str	r3, [r2, #0]

	if (--t_min == 0x00)
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <Flags_1s+0x58>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <Flags_1s+0x58>)
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <Flags_1s+0x58>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10d      	bne.n	8001832 <Flags_1s+0x4a>
			{
				f_1min = 1;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <Flags_1s+0x54>)
 8001818:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	461a      	mov	r2, r3
 8001828:	2301      	movs	r3, #1
 800182a:	6013      	str	r3, [r2, #0]
				t_min = cl_min;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <Flags_1s+0x58>)
 800182e:	223c      	movs	r2, #60	; 0x3c
 8001830:	801a      	strh	r2, [r3, #0]

			}
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000da4 	.word	0x20000da4
 8001840:	20000006 	.word	0x20000006

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f006 fe66 	bl	8008544 <__errno>
 8001878:	4602      	mov	r2, r0
 800187a:	230c      	movs	r3, #12
 800187c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20005000 	.word	0x20005000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000db8 	.word	0x20000db8
 80018ac:	20001268 	.word	0x20001268

080018b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LL_TIM_EnableCounter>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <LL_TIM_DisableCounter>:
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 0201 	bic.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <LL_TIM_SetAutoReload>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_TIM_ClearFlag_UPDATE>:
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f06f 0201 	mvn.w	r2, #1
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f043 0202 	orr.w	r2, r3, #2
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	60da      	str	r2, [r3, #12]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <LL_TIM_DisableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_DisableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f023 0202 	bic.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_GPIO_IsInputPinSet>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	43da      	mvns	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <Test>:
void Sound(uint32_t freq);

extern uint32_t Pulse, Period, N_periods;

void Test(typeEnv *Env)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	static uint8_t addr=0;
	if(f_StepMenu == 1 || f_connect == 0 ) // если вверх или вниз или отключен кабель
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <Test+0xfc>)
 80019c2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019cc:	f043 0320 	orr.w	r3, r3, #32
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d00a      	beq.n	80019ec <Test+0x34>
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <Test+0xfc>)
 80019d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d119      	bne.n	8001a20 <Test+0x68>
		{
			f_StepMenu = 0;
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <Test+0xfc>)
 80019ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	461a      	mov	r2, r3
 80019fe:	2300      	movs	r3, #0
 8001a00:	6013      	str	r3, [r2, #0]
			(*Env).Mode = MODE_WAIT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2bdc 	strb.w	r2, [r3, #3036]	; 0xbdc
			f_RefreshScreen = 1;			// перерисуй экран
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <Test+0xfc>)
 8001a0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a16:	f043 0314 	orr.w	r3, r3, #20
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]
		}
	if(f_Action == 1)   					// если нужно действие
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <Test+0xfc>)
 8001a22:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a2c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d115      	bne.n	8001a62 <Test+0xaa>
		{
			f_Action =0;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <Test+0xfc>)
 8001a38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a3c:	015b      	lsls	r3, r3, #5
 8001a3e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a42:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001a46:	461a      	mov	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6013      	str	r3, [r2, #0]
			f_StartTest	= 1;				// запустить тест
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <Test+0xfc>)
 8001a4e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a58:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2301      	movs	r3, #1
 8001a60:	6013      	str	r3, [r2, #0]
		}

	if(f_StartTest	== 1)
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <Test+0xfc>)
 8001a64:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a6e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d118      	bne.n	8001aaa <Test+0xf2>
	{
		f_StartTest = 0;
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <Test+0xfc>)
 8001a7a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a7e:	015b      	lsls	r3, r3, #5
 8001a80:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a84:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6013      	str	r3, [r2, #0]
		/* сам тест*/
		TestProsed(Env);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f812 	bl	8001ab8 <TestProsed>
		f_RefreshScreen = 1;				// перерисуй экран
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <Test+0xfc>)
 8001a96:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001aa0:	f043 0314 	orr.w	r3, r3, #20
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]

	}
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000da4 	.word	0x20000da4

08001ab8 <TestProsed>:
 *
 *
 * **********************************/

void TestProsed(typeEnv *Env)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	6018      	str	r0, [r3, #0]
	uint32_t X1[NCheckLine][NCheckLine] = {0};	// заданная матрица
 8001ac4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f006 fd85 	bl	80085e0 <memset>
	uint32_t X2[NCheckLine][NCheckLine] = {0};	// результат тестирования
 8001ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ada:	4618      	mov	r0, r3
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f006 fd7c 	bl	80085e0 <memset>
	uint32_t DataAfterTest[2][NCheckLine]={0};	// результат тестирования разреженная матрица
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4618      	mov	r0, r3
 8001aee:	2340      	movs	r3, #64	; 0x40
 8001af0:	461a      	mov	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f006 fd74 	bl	80085e0 <memset>
	uint32_t NoLineX1=0, NoLineX2=0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	uint32_t in_addr=0, out_addr=0, n_line=0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	uint32_t check=0, index=0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	uint32_t size=0; // количество соединённых линий, определённое в результате теста
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

	LL_TIM_EnableIT_CC1(TIM2); // назначить прерывание по захвату принятого сигнала
 8001b28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b2c:	f7ff ff10 	bl	8001950 <LL_TIM_EnableIT_CC1>

	LL_TIM_ClearFlag_UPDATE(TIM4);
 8001b30:	48c7      	ldr	r0, [pc, #796]	; (8001e50 <TestProsed+0x398>)
 8001b32:	f7ff feee 	bl	8001912 <LL_TIM_ClearFlag_UPDATE>
	memset(X1, 0, sizeof(X1));
 8001b36:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f006 fd4d 	bl	80085e0 <memset>
	memset(X2, 0, sizeof(X2));
 8001b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 fd45 	bl	80085e0 <memset>
	f_failtest=0;
 8001b56:	4bbf      	ldr	r3, [pc, #764]	; (8001e54 <TestProsed+0x39c>)
 8001b58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001b5c:	015b      	lsls	r3, r3, #5
 8001b5e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001b62:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001b66:	461a      	mov	r2, r3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6013      	str	r3, [r2, #0]

//	разворачиваем разреженую матрицу из конфиг файла в обычную X1
	for( index=0; index<NCheckLine; index++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8001b72:	e02d      	b.n	8001bd0 <TestProsed+0x118>
	{
		uint8_t i, j;
		i=(*Env).DataForTest[0][index];
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001b7c:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		j=(*Env).DataForTest[1][index];
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001b90:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
		if(i!=0 || j!=0)
 8001b9c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <TestProsed+0xf4>
 8001ba4:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <TestProsed+0x10e>
		{
			X1[i-1][j-1]=1;	// заданная матрица
 8001bac:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8001bb0:	1e59      	subs	r1, r3, #1
 8001bb2:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001bbc:	00c9      	lsls	r1, r1, #3
 8001bbe:	440a      	add	r2, r1
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for( index=0; index<NCheckLine; index++)
 8001bc6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8001bd0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d9cd      	bls.n	8001b74 <TestProsed+0xbc>
		}
	}

// процедура теста заполняем матрицу X2
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001bde:	e060      	b.n	8001ca2 <TestProsed+0x1ea>
			{
				MuxSetOUT_Addr(out_addr);					// установить номер вЫхода X1
 8001be0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fb7e 	bl	80022e8 <MuxSetOUT_Addr>
				GPIO_WriteBit(GPIOB, OUT_EN_Pin, RESET);	// включить мультиплексор выходной
 8001bec:	2200      	movs	r2, #0
 8001bee:	499a      	ldr	r1, [pc, #616]	; (8001e58 <TestProsed+0x3a0>)
 8001bf0:	489a      	ldr	r0, [pc, #616]	; (8001e5c <TestProsed+0x3a4>)
 8001bf2:	f7fe fe3d 	bl	8000870 <GPIO_WriteBit>
				for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001bfc:	e043      	b.n	8001c86 <TestProsed+0x1ce>
				{
					MuxSetIN_Addr(in_addr);					// установить номер входа X2
 8001bfe:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fb3d 	bl	8002284 <MuxSetIN_Addr>
					GPIO_WriteBit(GPIOA, IN_EN_Pin, RESET);	// включить мультиплексор входной
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4994      	ldr	r1, [pc, #592]	; (8001e60 <TestProsed+0x3a8>)
 8001c0e:	4895      	ldr	r0, [pc, #596]	; (8001e64 <TestProsed+0x3ac>)
 8001c10:	f7fe fe2e 	bl	8000870 <GPIO_WriteBit>

					LL_TIM_EnableCounter(TIM2);				// включить захват принятого сигнала
 8001c14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c18:	f7ff fe50 	bl	80018bc <LL_TIM_EnableCounter>
					N_periods=0;
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <TestProsed+0x3b0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
					LL_TIM_EnableCounter(TIM4);				// триггер для запуска тестового сигнала
 8001c22:	488b      	ldr	r0, [pc, #556]	; (8001e50 <TestProsed+0x398>)
 8001c24:	f7ff fe4a 	bl	80018bc <LL_TIM_EnableCounter>

					while( !LL_TIM_IsActiveFlag_UPDATE(TIM4)){}
 8001c28:	bf00      	nop
 8001c2a:	4889      	ldr	r0, [pc, #548]	; (8001e50 <TestProsed+0x398>)
 8001c2c:	f7ff fe7e 	bl	800192c <LL_TIM_IsActiveFlag_UPDATE>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f9      	beq.n	8001c2a <TestProsed+0x172>
					LL_TIM_DisableCounter(TIM4);			// вЫключить триггер для запуска тестового сигнала
 8001c36:	4886      	ldr	r0, [pc, #536]	; (8001e50 <TestProsed+0x398>)
 8001c38:	f7ff fe4f 	bl	80018da <LL_TIM_DisableCounter>
					LL_TIM_ClearFlag_UPDATE(TIM4);
 8001c3c:	4884      	ldr	r0, [pc, #528]	; (8001e50 <TestProsed+0x398>)
 8001c3e:	f7ff fe68 	bl	8001912 <LL_TIM_ClearFlag_UPDATE>
					LL_TIM_DisableCounter(TIM2);			// вЫключить захват принятого сигнала
 8001c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c46:	f7ff fe48 	bl	80018da <LL_TIM_DisableCounter>

					GPIO_WriteBit(GPIOA, IN_EN_Pin, SET);	// вЫключить мультиплексор входной
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4984      	ldr	r1, [pc, #528]	; (8001e60 <TestProsed+0x3a8>)
 8001c4e:	4885      	ldr	r0, [pc, #532]	; (8001e64 <TestProsed+0x3ac>)
 8001c50:	f7fe fe0e 	bl	8000870 <GPIO_WriteBit>
					if( N_periods == 10)
 8001c54:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <TestProsed+0x3b0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d10f      	bne.n	8001c7c <TestProsed+0x1c4>
					{
						X2[out_addr][in_addr]=1; 			// есть контакт
 8001c5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c60:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8001c64:	00d1      	lsls	r1, r2, #3
 8001c66:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001c6a:	440a      	add	r2, r1
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						size++;
 8001c72:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001c76:	3301      	adds	r3, #1
 8001c78:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001c7c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001c86:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	d9b7      	bls.n	8001bfe <TestProsed+0x146>
					}
				}
				GPIO_WriteBit(GPIOB, OUT_EN_Pin, SET);		// вЫключить мультиплексор выходной
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4971      	ldr	r1, [pc, #452]	; (8001e58 <TestProsed+0x3a0>)
 8001c92:	4872      	ldr	r0, [pc, #456]	; (8001e5c <TestProsed+0x3a4>)
 8001c94:	f7fe fdec 	bl	8000870 <GPIO_WriteBit>
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001c98:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001ca2:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d99a      	bls.n	8001be0 <TestProsed+0x128>
			}
			LL_TIM_DisableIT_CC1(TIM2);
 8001caa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cae:	f7ff fe5e 	bl	800196e <LL_TIM_DisableIT_CC1>
// X2 заполнили
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// заполняем разреженную матрицу соединений после теста
			n_line = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
			index=0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001cc4:	e039      	b.n	8001d3a <TestProsed+0x282>
			{
					for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001ccc:	e02c      	b.n	8001d28 <TestProsed+0x270>
						{
						if(X2[out_addr][in_addr] == 1)
 8001cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd2:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8001cd6:	00d1      	lsls	r1, r2, #3
 8001cd8:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001cdc:	440a      	add	r2, r1
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11b      	bne.n	8001d1e <TestProsed+0x266>
							{
								if(index < NCheckLine)
 8001ce6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d817      	bhi.n	8001d1e <TestProsed+0x266>
								{
									DataAfterTest[0][index] = out_addr+1;
 8001cee:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									DataAfterTest[1][index] = in_addr+1;
 8001d00:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									index++;
 8001d14:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
					for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001d1e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001d28:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	d9ce      	bls.n	8001cce <TestProsed+0x216>
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001d30:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001d3a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001d3e:	2b07      	cmp	r3, #7
 8001d40:	d9c1      	bls.n	8001cc6 <TestProsed+0x20e>
						}
			}
// разреженая матрица заполнена
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			for(index=0; index<NCheckLine; index++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8001d48:	e049      	b.n	8001dde <TestProsed+0x326>
			{
				if(index <= size)
 8001d4a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001d4e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d83e      	bhi.n	8001dd4 <TestProsed+0x31c>
				{
					if(			(*Env).DataForTest[0][index] == DataAfterTest[0][index] && 	\
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001d5e:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
 8001d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8001d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11a      	bne.n	8001dac <TestProsed+0x2f4>
								(*Env).DataForTest[1][index] == DataAfterTest[1][index])
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001d7e:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8001d82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8001d8e:	3108      	adds	r1, #8
 8001d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
					if(			(*Env).DataForTest[0][index] == DataAfterTest[0][index] && 	\
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d109      	bne.n	8001dac <TestProsed+0x2f4>
					{
						(*Env).CheckLine[index]=1;
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <TestProsed+0x31c>

					}
					else
					{
						(*Env).CheckLine[index]=2;
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8001dba:	2202      	movs	r2, #2
 8001dbc:	701a      	strb	r2, [r3, #0]
						f_failtest=1;
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <TestProsed+0x39c>)
 8001dc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001dca:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
			for(index=0; index<NCheckLine; index++)
 8001dd4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8001dde:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	d9b1      	bls.n	8001d4a <TestProsed+0x292>
					}
				}
			}
			if(f_failtest == 1)
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <TestProsed+0x39c>)
 8001de8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001dec:	015b      	lsls	r3, r3, #5
 8001dee:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001df2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d118      	bne.n	8001e2e <TestProsed+0x376>
			{
				f_failtest=0;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <TestProsed+0x39c>)
 8001dfe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001e08:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6013      	str	r3, [r2, #0]
				sprintf((*Env).Status,"%s","FAIL");
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <TestProsed+0x3b4>)
 8001e1c:	6810      	ldr	r0, [r2, #0]
 8001e1e:	6018      	str	r0, [r3, #0]
 8001e20:	7912      	ldrb	r2, [r2, #4]
 8001e22:	711a      	strb	r2, [r3, #4]
				Sound(4000);
 8001e24:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001e28:	f000 fa0c 	bl	8002244 <Sound>
			}else{
				sprintf((*Env).Status,"%s","OK");
				Sound(250);
			}
}
 8001e2c:	e00b      	b.n	8001e46 <TestProsed+0x38e>
				sprintf((*Env).Status,"%s","OK");
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <TestProsed+0x3b8>)
 8001e38:	8811      	ldrh	r1, [r2, #0]
 8001e3a:	7892      	ldrb	r2, [r2, #2]
 8001e3c:	8019      	strh	r1, [r3, #0]
 8001e3e:	709a      	strb	r2, [r3, #2]
				Sound(250);
 8001e40:	20fa      	movs	r0, #250	; 0xfa
 8001e42:	f000 f9ff 	bl	8002244 <Sound>
}
 8001e46:	bf00      	nop
 8001e48:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40000800 	.word	0x40000800
 8001e54:	20000da4 	.word	0x20000da4
 8001e58:	04800080 	.word	0x04800080
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	04100010 	.word	0x04100010
 8001e64:	40010800 	.word	0x40010800
 8001e68:	20000db0 	.word	0x20000db0
 8001e6c:	08008f50 	.word	0x08008f50
 8001e70:	08008f58 	.word	0x08008f58

08001e74 <DrawTable>:




void DrawTable(typeEnv *Env)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	6078      	str	r0, [r7, #4]
	uint8_t h=17, w=16;
 8001e7c:	2311      	movs	r3, #17
 8001e7e:	76fb      	strb	r3, [r7, #27]
 8001e80:	2310      	movs	r3, #16
 8001e82:	76bb      	strb	r3, [r7, #26]
	uint8_t col=8, row=5;
 8001e84:	2308      	movs	r3, #8
 8001e86:	767b      	strb	r3, [r7, #25]
 8001e88:	2305      	movs	r3, #5
 8001e8a:	763b      	strb	r3, [r7, #24]
	uint8_t sx=Mx, ex=col*w+sx;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	75fb      	strb	r3, [r7, #23]
 8001e90:	7e7b      	ldrb	r3, [r7, #25]
 8001e92:	7eba      	ldrb	r2, [r7, #26]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	75bb      	strb	r3, [r7, #22]
	uint8_t sy=20, ey=row*h+sy;
 8001ea0:	2314      	movs	r3, #20
 8001ea2:	757b      	strb	r3, [r7, #21]
 8001ea4:	7e3b      	ldrb	r3, [r7, #24]
 8001ea6:	7efa      	ldrb	r2, [r7, #27]
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	7d7b      	ldrb	r3, [r7, #21]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	753b      	strb	r3, [r7, #20]
	uint8_t indx_col=0, indx_row=0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77bb      	strb	r3, [r7, #30]
	uint8_t CHR[3]={0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	460a      	mov	r2, r1
 8001ec4:	801a      	strh	r2, [r3, #0]
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	709a      	strb	r2, [r3, #2]
	uint8_t X1[3]="X1";
 8001eca:	4aa7      	ldr	r2, [pc, #668]	; (8002168 <DrawTable+0x2f4>)
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	8019      	strh	r1, [r3, #0]
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	0c12      	lsrs	r2, r2, #16
 8001eda:	701a      	strb	r2, [r3, #0]
	uint8_t X2[3]="X2";
 8001edc:	4aa3      	ldr	r2, [pc, #652]	; (800216c <DrawTable+0x2f8>)
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	8019      	strh	r1, [r3, #0]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	0c12      	lsrs	r2, r2, #16
 8001eec:	701a      	strb	r2, [r3, #0]
	uint16_t color=0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	83bb      	strh	r3, [r7, #28]
	memset(CHR,0,sizeof(CHR));
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 fb70 	bl	80085e0 <memset>
	for(indx_row=0;indx_row<=row;indx_row++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	77bb      	strb	r3, [r7, #30]
 8001f04:	e010      	b.n	8001f28 <DrawTable+0xb4>
	{
		ST7735_DrawHLine(sx,ex,sy+indx_row*h,TXT_COLOR);
 8001f06:	7fbb      	ldrb	r3, [r7, #30]
 8001f08:	7efa      	ldrb	r2, [r7, #27]
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	7d7b      	ldrb	r3, [r7, #21]
 8001f12:	4413      	add	r3, r2
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	7db9      	ldrb	r1, [r7, #22]
 8001f18:	7df8      	ldrb	r0, [r7, #23]
 8001f1a:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001f1e:	f001 f997 	bl	8003250 <ST7735_DrawHLine>
	for(indx_row=0;indx_row<=row;indx_row++)
 8001f22:	7fbb      	ldrb	r3, [r7, #30]
 8001f24:	3301      	adds	r3, #1
 8001f26:	77bb      	strb	r3, [r7, #30]
 8001f28:	7fba      	ldrb	r2, [r7, #30]
 8001f2a:	7e3b      	ldrb	r3, [r7, #24]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d9ea      	bls.n	8001f06 <DrawTable+0x92>
	}
	ST7735_DrawVLine(sx,sy,sy+row*h,TXT_COLOR);
 8001f30:	7e3b      	ldrb	r3, [r7, #24]
 8001f32:	7efa      	ldrb	r2, [r7, #27]
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7d7b      	ldrb	r3, [r7, #21]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	7d79      	ldrb	r1, [r7, #21]
 8001f42:	7df8      	ldrb	r0, [r7, #23]
 8001f44:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001f48:	f001 f9c4 	bl	80032d4 <ST7735_DrawVLine>
	ST7735_DrawVLine(sx+col*w,sy,sy+row*h,TXT_COLOR);
 8001f4c:	7e7b      	ldrb	r3, [r7, #25]
 8001f4e:	7eba      	ldrb	r2, [r7, #26]
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2d8      	uxtb	r0, r3
 8001f5c:	7e3b      	ldrb	r3, [r7, #24]
 8001f5e:	7efa      	ldrb	r2, [r7, #27]
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	7d7b      	ldrb	r3, [r7, #21]
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	7d79      	ldrb	r1, [r7, #21]
 8001f6e:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001f72:	f001 f9af 	bl	80032d4 <ST7735_DrawVLine>
	for(indx_col=0; indx_col<=col; indx_col++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	77fb      	strb	r3, [r7, #31]
 8001f7a:	e018      	b.n	8001fae <DrawTable+0x13a>
	{
		ST7735_DrawVLine(sx+indx_col*w,sy+h,sy+4*h,TXT_COLOR);
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	7eba      	ldrb	r2, [r7, #26]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2d8      	uxtb	r0, r3
 8001f8c:	7d7a      	ldrb	r2, [r7, #21]
 8001f8e:	7efb      	ldrb	r3, [r7, #27]
 8001f90:	4413      	add	r3, r2
 8001f92:	b2d9      	uxtb	r1, r3
 8001f94:	7efb      	ldrb	r3, [r7, #27]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	7d7b      	ldrb	r3, [r7, #21]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001fa4:	f001 f996 	bl	80032d4 <ST7735_DrawVLine>
	for(indx_col=0; indx_col<=col; indx_col++)
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
 8001faa:	3301      	adds	r3, #1
 8001fac:	77fb      	strb	r3, [r7, #31]
 8001fae:	7ffa      	ldrb	r2, [r7, #31]
 8001fb0:	7e7b      	ldrb	r3, [r7, #25]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d9e2      	bls.n	8001f7c <DrawTable+0x108>
	}

	ST7735_DrawString7x11(WIDTH/2-w/2,sy+4,X1,TXT_COLOR,BGR_COLOR);
 8001fb6:	7ebb      	ldrb	r3, [r7, #26]
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8001fc0:	b2d8      	uxtb	r0, r3
 8001fc2:	7d7b      	ldrb	r3, [r7, #21]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	f107 020c 	add.w	r2, r7, #12
 8001fcc:	2311      	movs	r3, #17
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001fd4:	f001 fb12 	bl	80035fc <ST7735_DrawString7x11>
	ST7735_DrawString7x11(WIDTH/2-w/2,sy+4+4*h,X2,TXT_COLOR,BGR_COLOR);
 8001fd8:	7ebb      	ldrb	r3, [r7, #26]
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8001fe2:	b2d8      	uxtb	r0, r3
 8001fe4:	7efb      	ldrb	r3, [r7, #27]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	7d7b      	ldrb	r3, [r7, #21]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	f107 0208 	add.w	r2, r7, #8
 8001ff8:	2311      	movs	r3, #17
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8002000:	f001 fafc 	bl	80035fc <ST7735_DrawString7x11>

	for(indx_col=0; indx_col<col; indx_col++)
 8002004:	2300      	movs	r3, #0
 8002006:	77fb      	strb	r3, [r7, #31]
 8002008:	e02c      	b.n	8002064 <DrawTable+0x1f0>
	{
		memset(CHR,0,sizeof(CHR));
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2203      	movs	r2, #3
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f006 fae4 	bl	80085e0 <memset>
		sprintf(CHR, "%d ", (*Env).DataForTest[0][indx_col]);
 8002018:	7ffa      	ldrb	r2, [r7, #31]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
 8002020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4951      	ldr	r1, [pc, #324]	; (8002170 <DrawTable+0x2fc>)
 800202a:	4618      	mov	r0, r3
 800202c:	f006 fae0 	bl	80085f0 <siprintf>
		ST7735_DrawChar7x11(sx+5+indx_col*w,sy+4+h,CHR[0],TXT_COLOR,BGR_COLOR);
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	7eba      	ldrb	r2, [r7, #26]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	b2da      	uxtb	r2, r3
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	4413      	add	r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3305      	adds	r3, #5
 8002042:	b2d8      	uxtb	r0, r3
 8002044:	7d7a      	ldrb	r2, [r7, #21]
 8002046:	7efb      	ldrb	r3, [r7, #27]
 8002048:	4413      	add	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3304      	adds	r3, #4
 800204e:	b2d9      	uxtb	r1, r3
 8002050:	7c3a      	ldrb	r2, [r7, #16]
 8002052:	2311      	movs	r3, #17
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f24f 73df 	movw	r3, #63455	; 0xf7df
 800205a:	f001 fa3b 	bl	80034d4 <ST7735_DrawChar7x11>
	for(indx_col=0; indx_col<col; indx_col++)
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	3301      	adds	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
 8002064:	7ffa      	ldrb	r2, [r7, #31]
 8002066:	7e7b      	ldrb	r3, [r7, #25]
 8002068:	429a      	cmp	r2, r3
 800206a:	d3ce      	bcc.n	800200a <DrawTable+0x196>
	}

	for(indx_col=0; indx_col<col; indx_col++)
 800206c:	2300      	movs	r3, #0
 800206e:	77fb      	strb	r3, [r7, #31]
 8002070:	e030      	b.n	80020d4 <DrawTable+0x260>
	{
		memset(CHR,0,sizeof(CHR));
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	2203      	movs	r2, #3
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fab0 	bl	80085e0 <memset>
		sprintf(CHR, "%d ", (*Env).DataForTest[1][indx_col]);
 8002080:	7ffa      	ldrb	r2, [r7, #31]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8002088:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4937      	ldr	r1, [pc, #220]	; (8002170 <DrawTable+0x2fc>)
 8002092:	4618      	mov	r0, r3
 8002094:	f006 faac 	bl	80085f0 <siprintf>
//		ST7735_DrawString7x11(sx+5+indx_col*w,sy+4+3*h,CHR,TXT_COLOR,BGR_COLOR);
		ST7735_DrawChar7x11(sx+5+indx_col*w,sy+4+3*h,CHR[0],TXT_COLOR,BGR_COLOR);
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	7eba      	ldrb	r2, [r7, #26]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	4413      	add	r3, r2
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3305      	adds	r3, #5
 80020aa:	b2d8      	uxtb	r0, r3
 80020ac:	7efb      	ldrb	r3, [r7, #27]
 80020ae:	461a      	mov	r2, r3
 80020b0:	0052      	lsls	r2, r2, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	7d7b      	ldrb	r3, [r7, #21]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3304      	adds	r3, #4
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	7c3a      	ldrb	r2, [r7, #16]
 80020c2:	2311      	movs	r3, #17
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80020ca:	f001 fa03 	bl	80034d4 <ST7735_DrawChar7x11>
	for(indx_col=0; indx_col<col; indx_col++)
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	3301      	adds	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
 80020d4:	7ffa      	ldrb	r2, [r7, #31]
 80020d6:	7e7b      	ldrb	r3, [r7, #25]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3ca      	bcc.n	8002072 <DrawTable+0x1fe>
	}
	for(indx_col=0; indx_col<NCheckLine; indx_col++)
 80020dc:	2300      	movs	r3, #0
 80020de:	77fb      	strb	r3, [r7, #31]
 80020e0:	e033      	b.n	800214a <DrawTable+0x2d6>
	{
		if( (*Env).CheckLine[indx_col] == 1)
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	f893 3ce0 	ldrb.w	r3, [r3, #3296]	; 0xce0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d103      	bne.n	80020f8 <DrawTable+0x284>
		{
			color = COLOR565_LAWN_GREEN;
 80020f0:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80020f4:	83bb      	strh	r3, [r7, #28]
 80020f6:	e00c      	b.n	8002112 <DrawTable+0x29e>
		}
		else if((*Env).CheckLine[indx_col] == 2)
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	f893 3ce0 	ldrb.w	r3, [r3, #3296]	; 0xce0
 8002102:	2b02      	cmp	r3, #2
 8002104:	d103      	bne.n	800210e <DrawTable+0x29a>
		{
			color = COLOR565_ORANGE_RED;
 8002106:	f64f 2320 	movw	r3, #64032	; 0xfa20
 800210a:	83bb      	strh	r3, [r7, #28]
 800210c:	e001      	b.n	8002112 <DrawTable+0x29e>
		}
		else
		{
			color = BGR_COLOR;
 800210e:	2311      	movs	r3, #17
 8002110:	83bb      	strh	r3, [r7, #28]
		}
		ST7735_DrawString7x11(sx+5+indx_col*w,sy+4+2*h,"*",color,BGR_COLOR);
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	7eba      	ldrb	r2, [r7, #26]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	b2da      	uxtb	r2, r3
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	4413      	add	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3305      	adds	r3, #5
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	7efb      	ldrb	r3, [r7, #27]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	7d7b      	ldrb	r3, [r7, #21]
 800212e:	4413      	add	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3304      	adds	r3, #4
 8002134:	b2d9      	uxtb	r1, r3
 8002136:	8bba      	ldrh	r2, [r7, #28]
 8002138:	2311      	movs	r3, #17
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <DrawTable+0x300>)
 8002140:	f001 fa5c 	bl	80035fc <ST7735_DrawString7x11>
	for(indx_col=0; indx_col<NCheckLine; indx_col++)
 8002144:	7ffb      	ldrb	r3, [r7, #31]
 8002146:	3301      	adds	r3, #1
 8002148:	77fb      	strb	r3, [r7, #31]
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	2b07      	cmp	r3, #7
 800214e:	d9c8      	bls.n	80020e2 <DrawTable+0x26e>
	}
	memset((*Env).CheckLine, 0 ,sizeof((*Env).CheckLine));  // очистить CheckLine до следующего теста
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8002156:	2208      	movs	r2, #8
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f006 fa40 	bl	80085e0 <memset>

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	08008f64 	.word	0x08008f64
 800216c:	08008f68 	.word	0x08008f68
 8002170:	08008f5c 	.word	0x08008f5c
 8002174:	08008f60 	.word	0x08008f60

08002178 <CheckConnect>:


uint8_t CheckConnect(typeEnv *Env)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	uint8_t in_addr=0, out_addr=0;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	2300      	movs	r3, #0
 8002186:	73bb      	strb	r3, [r7, #14]
	uint32_t connect=0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]

	Init_Output_Input_GPIO();
 800218c:	f7fe fb42 	bl	8000814 <Init_Output_Input_GPIO>

	GPIO_WriteBit(GPIOA, LL_GPIO_PIN_11, SET);// включить out
 8002190:	2201      	movs	r2, #1
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <CheckConnect+0xb8>)
 8002194:	4827      	ldr	r0, [pc, #156]	; (8002234 <CheckConnect+0xbc>)
 8002196:	f7fe fb6b 	bl	8000870 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOB, OUT_EN_Pin, RESET);// включить мультиплексор выходной
 800219a:	2200      	movs	r2, #0
 800219c:	4926      	ldr	r1, [pc, #152]	; (8002238 <CheckConnect+0xc0>)
 800219e:	4827      	ldr	r0, [pc, #156]	; (800223c <CheckConnect+0xc4>)
 80021a0:	f7fe fb66 	bl	8000870 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, IN_EN_Pin, RESET);// включить мультиплексор входной
 80021a4:	2200      	movs	r2, #0
 80021a6:	4926      	ldr	r1, [pc, #152]	; (8002240 <CheckConnect+0xc8>)
 80021a8:	4822      	ldr	r0, [pc, #136]	; (8002234 <CheckConnect+0xbc>)
 80021aa:	f7fe fb61 	bl	8000870 <GPIO_WriteBit>
	for( out_addr=0; out_addr<NCheckLine; out_addr++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	73bb      	strb	r3, [r7, #14]
 80021b2:	e01f      	b.n	80021f4 <CheckConnect+0x7c>
	{
		MuxSetOUT_Addr(out_addr);	// установить номер выхода X1
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f896 	bl	80022e8 <MuxSetOUT_Addr>
		for( in_addr=0; in_addr<NCheckLine; in_addr++)
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e012      	b.n	80021e8 <CheckConnect+0x70>
		{
			MuxSetIN_Addr(in_addr);	// установить номер входа X2
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 f85d 	bl	8002284 <MuxSetIN_Addr>
			HAL_Delay(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f001 fbf8 	bl	80039c0 <HAL_Delay>
			connect += LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0); //считать in
 80021d0:	f240 1101 	movw	r1, #257	; 0x101
 80021d4:	4817      	ldr	r0, [pc, #92]	; (8002234 <CheckConnect+0xbc>)
 80021d6:	f7ff fbd9 	bl	800198c <LL_GPIO_IsInputPinSet>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4413      	add	r3, r2
 80021e0:	60bb      	str	r3, [r7, #8]
		for( in_addr=0; in_addr<NCheckLine; in_addr++)
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	3301      	adds	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d9e9      	bls.n	80021c2 <CheckConnect+0x4a>
	for( out_addr=0; out_addr<NCheckLine; out_addr++)
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	3301      	adds	r3, #1
 80021f2:	73bb      	strb	r3, [r7, #14]
 80021f4:	7bbb      	ldrb	r3, [r7, #14]
 80021f6:	2b07      	cmp	r3, #7
 80021f8:	d9dc      	bls.n	80021b4 <CheckConnect+0x3c>
		}
	}
	GPIO_WriteBit(GPIOA, IN_EN_Pin, SET);// вЫключить мультиплексор входной
 80021fa:	2201      	movs	r2, #1
 80021fc:	4910      	ldr	r1, [pc, #64]	; (8002240 <CheckConnect+0xc8>)
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <CheckConnect+0xbc>)
 8002200:	f7fe fb36 	bl	8000870 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOB, OUT_EN_Pin, SET);// вЫключить мультиплексор выходной
 8002204:	2201      	movs	r2, #1
 8002206:	490c      	ldr	r1, [pc, #48]	; (8002238 <CheckConnect+0xc0>)
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <CheckConnect+0xc4>)
 800220a:	f7fe fb31 	bl	8000870 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, LL_GPIO_PIN_11, RESET);// вЫключить out
 800220e:	2200      	movs	r2, #0
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <CheckConnect+0xb8>)
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <CheckConnect+0xbc>)
 8002214:	f7fe fb2c 	bl	8000870 <GPIO_WriteBit>
	if( connect != 0)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <CheckConnect+0xae>
	{
		Init_Output_Input_Alter();
 800221e:	f7fe facf 	bl	80007c0 <Init_Output_Input_Alter>
		return 1;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <CheckConnect+0xb0>
	}
	return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	04080008 	.word	0x04080008
 8002234:	40010800 	.word	0x40010800
 8002238:	04800080 	.word	0x04800080
 800223c:	40010c00 	.word	0x40010c00
 8002240:	04100010 	.word	0x04100010

08002244 <Sound>:

void Sound(uint32_t freq)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, freq*2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4619      	mov	r1, r3
 8002252:	480a      	ldr	r0, [pc, #40]	; (800227c <Sound+0x38>)
 8002254:	f7ff fb50 	bl	80018f8 <LL_TIM_SetAutoReload>
	LL_TIM_EnableCounter(TIM3);
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <Sound+0x38>)
 800225a:	f7ff fb2f 	bl	80018bc <LL_TIM_EnableCounter>
	f_sound = 1;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <Sound+0x3c>)
 8002260:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800226a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800226e:	461a      	mov	r2, r3
 8002270:	2301      	movs	r3, #1
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40000400 	.word	0x40000400
 8002280:	20000da4 	.word	0x20000da4

08002284 <MuxSetIN_Addr>:
{
	LL_GPIO_ResetOutputPin(GPIOA, IN_EN_Pin);
}

void MuxSetIN_Addr(uint8_t addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_A_Pin, mask);
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	461a      	mov	r2, r3
 800229e:	490e      	ldr	r1, [pc, #56]	; (80022d8 <MuxSetIN_Addr+0x54>)
 80022a0:	480e      	ldr	r0, [pc, #56]	; (80022dc <MuxSetIN_Addr+0x58>)
 80022a2:	f7fe fae5 	bl	8000870 <GPIO_WriteBit>
mask= addr & 0x02;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_B_Pin, mask);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	461a      	mov	r2, r3
 80022b2:	490b      	ldr	r1, [pc, #44]	; (80022e0 <MuxSetIN_Addr+0x5c>)
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <MuxSetIN_Addr+0x58>)
 80022b6:	f7fe fadb 	bl	8000870 <GPIO_WriteBit>
mask= addr & 0x04;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_C_Pin, mask);
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4907      	ldr	r1, [pc, #28]	; (80022e4 <MuxSetIN_Addr+0x60>)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MuxSetIN_Addr+0x58>)
 80022ca:	f7fe fad1 	bl	8000870 <GPIO_WriteBit>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	04010001 	.word	0x04010001
 80022dc:	40010800 	.word	0x40010800
 80022e0:	04020002 	.word	0x04020002
 80022e4:	04040004 	.word	0x04040004

080022e8 <MuxSetOUT_Addr>:


void MuxSetOUT_Addr(uint8_t addr)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_A_Pin, mask);
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	461a      	mov	r2, r3
 8002302:	490e      	ldr	r1, [pc, #56]	; (800233c <MuxSetOUT_Addr+0x54>)
 8002304:	480e      	ldr	r0, [pc, #56]	; (8002340 <MuxSetOUT_Addr+0x58>)
 8002306:	f7fe fab3 	bl	8000870 <GPIO_WriteBit>
mask= addr & 0x02;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_B_Pin, mask);
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	461a      	mov	r2, r3
 8002316:	490b      	ldr	r1, [pc, #44]	; (8002344 <MuxSetOUT_Addr+0x5c>)
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <MuxSetOUT_Addr+0x58>)
 800231a:	f7fe faa9 	bl	8000870 <GPIO_WriteBit>
mask= addr & 0x04;
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_C_Pin, mask);
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	461a      	mov	r2, r3
 800232a:	4907      	ldr	r1, [pc, #28]	; (8002348 <MuxSetOUT_Addr+0x60>)
 800232c:	4804      	ldr	r0, [pc, #16]	; (8002340 <MuxSetOUT_Addr+0x58>)
 800232e:	f7fe fa9f 	bl	8000870 <GPIO_WriteBit>

}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	04100010 	.word	0x04100010
 8002340:	40010c00 	.word	0x40010c00
 8002344:	04200020 	.word	0x04200020
 8002348:	04400040 	.word	0x04400040

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4906      	ldr	r1, [pc, #24]	; (800239c <__NVIC_EnableIRQ+0x34>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_APB1_GRP1_EnableClock>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <LL_APB2_GRP1_EnableClock>:
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4313      	orrs	r3, r2
 800249a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <LL_TIM_SetOnePulseMode>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0208 	bic.w	r2, r3, #8
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <LL_TIM_EnableARRPreload>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_TIM_DisableARRPreload>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <LL_TIM_OC_DisableFast>:
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d01c      	beq.n	8002562 <LL_TIM_OC_DisableFast+0x4a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d017      	beq.n	800255e <LL_TIM_OC_DisableFast+0x46>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d012      	beq.n	800255a <LL_TIM_OC_DisableFast+0x42>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d00d      	beq.n	8002556 <LL_TIM_OC_DisableFast+0x3e>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002540:	d007      	beq.n	8002552 <LL_TIM_OC_DisableFast+0x3a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d101      	bne.n	800254e <LL_TIM_OC_DisableFast+0x36>
 800254a:	2305      	movs	r3, #5
 800254c:	e00a      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 800254e:	2306      	movs	r3, #6
 8002550:	e008      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 8002552:	2304      	movs	r3, #4
 8002554:	e006      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 8002556:	2303      	movs	r3, #3
 8002558:	e004      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 800255a:	2302      	movs	r3, #2
 800255c:	e002      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_TIM_OC_DisableFast+0x4c>
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3318      	adds	r3, #24
 800256a:	4619      	mov	r1, r3
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <LL_TIM_OC_DisableFast+0x80>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	440b      	add	r3, r1
 8002574:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <LL_TIM_OC_DisableFast+0x84>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	4619      	mov	r1, r3
 8002582:	2304      	movs	r3, #4
 8002584:	408b      	lsls	r3, r1
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	080090dc 	.word	0x080090dc
 800259c:	080090e4 	.word	0x080090e4

080025a0 <LL_TIM_OC_EnablePreload>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d01c      	beq.n	80025ea <LL_TIM_OC_EnablePreload+0x4a>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d017      	beq.n	80025e6 <LL_TIM_OC_EnablePreload+0x46>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d012      	beq.n	80025e2 <LL_TIM_OC_EnablePreload+0x42>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d00d      	beq.n	80025de <LL_TIM_OC_EnablePreload+0x3e>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d007      	beq.n	80025da <LL_TIM_OC_EnablePreload+0x3a>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d101      	bne.n	80025d6 <LL_TIM_OC_EnablePreload+0x36>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e00a      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e008      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_TIM_OC_EnablePreload+0x4c>
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3318      	adds	r3, #24
 80025f2:	4619      	mov	r1, r3
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LL_TIM_OC_EnablePreload+0x80>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	440b      	add	r3, r1
 80025fc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <LL_TIM_OC_EnablePreload+0x84>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	4619      	mov	r1, r3
 800260a:	2308      	movs	r3, #8
 800260c:	408b      	lsls	r3, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	080090dc 	.word	0x080090dc
 8002624:	080090e4 	.word	0x080090e4

08002628 <LL_TIM_OC_DisablePreload>:
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d01c      	beq.n	8002672 <LL_TIM_OC_DisablePreload+0x4a>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d017      	beq.n	800266e <LL_TIM_OC_DisablePreload+0x46>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d012      	beq.n	800266a <LL_TIM_OC_DisablePreload+0x42>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d00d      	beq.n	8002666 <LL_TIM_OC_DisablePreload+0x3e>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002650:	d007      	beq.n	8002662 <LL_TIM_OC_DisablePreload+0x3a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d101      	bne.n	800265e <LL_TIM_OC_DisablePreload+0x36>
 800265a:	2305      	movs	r3, #5
 800265c:	e00a      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 800265e:	2306      	movs	r3, #6
 8002660:	e008      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_TIM_OC_DisablePreload+0x4c>
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3318      	adds	r3, #24
 800267a:	4619      	mov	r1, r3
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <LL_TIM_OC_DisablePreload+0x80>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	440b      	add	r3, r1
 8002684:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <LL_TIM_OC_DisablePreload+0x84>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	4619      	mov	r1, r3
 8002692:	2308      	movs	r3, #8
 8002694:	408b      	lsls	r3, r1
 8002696:	43db      	mvns	r3, r3
 8002698:	401a      	ands	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	080090dc 	.word	0x080090dc
 80026ac:	080090e4 	.word	0x080090e4

080026b0 <LL_TIM_IC_SetActiveInput>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d01c      	beq.n	80026fc <LL_TIM_IC_SetActiveInput+0x4c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d017      	beq.n	80026f8 <LL_TIM_IC_SetActiveInput+0x48>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d012      	beq.n	80026f4 <LL_TIM_IC_SetActiveInput+0x44>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d00d      	beq.n	80026f0 <LL_TIM_IC_SetActiveInput+0x40>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026da:	d007      	beq.n	80026ec <LL_TIM_IC_SetActiveInput+0x3c>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d101      	bne.n	80026e8 <LL_TIM_IC_SetActiveInput+0x38>
 80026e4:	2305      	movs	r3, #5
 80026e6:	e00a      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026e8:	2306      	movs	r3, #6
 80026ea:	e008      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e006      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026f0:	2303      	movs	r3, #3
 80026f2:	e004      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e002      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_TIM_IC_SetActiveInput+0x4e>
 80026fc:	2300      	movs	r3, #0
 80026fe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3318      	adds	r3, #24
 8002704:	4619      	mov	r1, r3
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <LL_TIM_IC_SetActiveInput+0x90>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	440b      	add	r3, r1
 800270e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	490b      	ldr	r1, [pc, #44]	; (8002744 <LL_TIM_IC_SetActiveInput+0x94>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	4619      	mov	r1, r3
 800271c:	2303      	movs	r3, #3
 800271e:	408b      	lsls	r3, r1
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	7df9      	ldrb	r1, [r7, #23]
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <LL_TIM_IC_SetActiveInput+0x94>)
 800272c:	5c41      	ldrb	r1, [r0, r1]
 800272e:	408b      	lsls	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	080090dc 	.word	0x080090dc
 8002744:	080090ec 	.word	0x080090ec

08002748 <LL_TIM_IC_SetPrescaler>:
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d01c      	beq.n	8002794 <LL_TIM_IC_SetPrescaler+0x4c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d017      	beq.n	8002790 <LL_TIM_IC_SetPrescaler+0x48>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d012      	beq.n	800278c <LL_TIM_IC_SetPrescaler+0x44>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d00d      	beq.n	8002788 <LL_TIM_IC_SetPrescaler+0x40>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002772:	d007      	beq.n	8002784 <LL_TIM_IC_SetPrescaler+0x3c>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d101      	bne.n	8002780 <LL_TIM_IC_SetPrescaler+0x38>
 800277c:	2305      	movs	r3, #5
 800277e:	e00a      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 8002780:	2306      	movs	r3, #6
 8002782:	e008      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 8002784:	2304      	movs	r3, #4
 8002786:	e006      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 8002788:	2303      	movs	r3, #3
 800278a:	e004      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 800278c:	2302      	movs	r3, #2
 800278e:	e002      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_TIM_IC_SetPrescaler+0x4e>
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3318      	adds	r3, #24
 800279c:	4619      	mov	r1, r3
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <LL_TIM_IC_SetPrescaler+0x90>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	440b      	add	r3, r1
 80027a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <LL_TIM_IC_SetPrescaler+0x94>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	4619      	mov	r1, r3
 80027b4:	230c      	movs	r3, #12
 80027b6:	408b      	lsls	r3, r1
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	7df9      	ldrb	r1, [r7, #23]
 80027c2:	4806      	ldr	r0, [pc, #24]	; (80027dc <LL_TIM_IC_SetPrescaler+0x94>)
 80027c4:	5c41      	ldrb	r1, [r0, r1]
 80027c6:	408b      	lsls	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	080090dc 	.word	0x080090dc
 80027dc:	080090ec 	.word	0x080090ec

080027e0 <LL_TIM_IC_SetFilter>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d01c      	beq.n	800282c <LL_TIM_IC_SetFilter+0x4c>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d017      	beq.n	8002828 <LL_TIM_IC_SetFilter+0x48>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d012      	beq.n	8002824 <LL_TIM_IC_SetFilter+0x44>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d00d      	beq.n	8002820 <LL_TIM_IC_SetFilter+0x40>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280a:	d007      	beq.n	800281c <LL_TIM_IC_SetFilter+0x3c>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d101      	bne.n	8002818 <LL_TIM_IC_SetFilter+0x38>
 8002814:	2305      	movs	r3, #5
 8002816:	e00a      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 8002818:	2306      	movs	r3, #6
 800281a:	e008      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 800281c:	2304      	movs	r3, #4
 800281e:	e006      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 8002820:	2303      	movs	r3, #3
 8002822:	e004      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 8002824:	2302      	movs	r3, #2
 8002826:	e002      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_TIM_IC_SetFilter+0x4e>
 800282c:	2300      	movs	r3, #0
 800282e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3318      	adds	r3, #24
 8002834:	4619      	mov	r1, r3
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <LL_TIM_IC_SetFilter+0x90>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	440b      	add	r3, r1
 800283e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	490b      	ldr	r1, [pc, #44]	; (8002874 <LL_TIM_IC_SetFilter+0x94>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	4619      	mov	r1, r3
 800284c:	23f0      	movs	r3, #240	; 0xf0
 800284e:	408b      	lsls	r3, r1
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	7df9      	ldrb	r1, [r7, #23]
 800285a:	4806      	ldr	r0, [pc, #24]	; (8002874 <LL_TIM_IC_SetFilter+0x94>)
 800285c:	5c41      	ldrb	r1, [r0, r1]
 800285e:	408b      	lsls	r3, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	080090dc 	.word	0x080090dc
 8002874:	080090ec 	.word	0x080090ec

08002878 <LL_TIM_IC_SetPolarity>:
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d01c      	beq.n	80028c4 <LL_TIM_IC_SetPolarity+0x4c>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d017      	beq.n	80028c0 <LL_TIM_IC_SetPolarity+0x48>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b10      	cmp	r3, #16
 8002894:	d012      	beq.n	80028bc <LL_TIM_IC_SetPolarity+0x44>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d00d      	beq.n	80028b8 <LL_TIM_IC_SetPolarity+0x40>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d007      	beq.n	80028b4 <LL_TIM_IC_SetPolarity+0x3c>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028aa:	d101      	bne.n	80028b0 <LL_TIM_IC_SetPolarity+0x38>
 80028ac:	2305      	movs	r3, #5
 80028ae:	e00a      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028b0:	2306      	movs	r3, #6
 80028b2:	e008      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e006      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028b8:	2303      	movs	r3, #3
 80028ba:	e004      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028bc:	2302      	movs	r3, #2
 80028be:	e002      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_TIM_IC_SetPolarity+0x4e>
 80028c4:	2300      	movs	r3, #0
 80028c6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <LL_TIM_IC_SetPolarity+0x80>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	4619      	mov	r1, r3
 80028d4:	230a      	movs	r3, #10
 80028d6:	408b      	lsls	r3, r1
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	4906      	ldr	r1, [pc, #24]	; (80028f8 <LL_TIM_IC_SetPolarity+0x80>)
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	4619      	mov	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	408b      	lsls	r3, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	080090f4 	.word	0x080090f4

080028fc <LL_TIM_SetTriggerOutput>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_TIM_SetSlaveMode>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 0207 	bic.w	r2, r3, #7
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <LL_TIM_SetTriggerInput>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_TIM_EnableMasterSlaveMode>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_TIM_DisableMasterSlaveMode>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60da      	str	r2, [r3, #12]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80029f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029fa:	6053      	str	r3, [r2, #4]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40010000 	.word	0x40010000

08002a08 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b098      	sub	sp, #96	; 0x60
 8002a0c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a22:	2220      	movs	r2, #32
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f005 fdda 	bl	80085e0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002a4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a50:	f7ff fd1a 	bl	8002488 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a54:	f7ff fc7a 	bl	800234c <__NVIC_GetPriorityGrouping>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fcc8 	bl	80023f4 <NVIC_EncodePriority>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4619      	mov	r1, r3
 8002a68:	201a      	movs	r0, #26
 8002a6a:	f7ff fc99 	bl	80023a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002a6e:	201a      	movs	r0, #26
 8002a70:	f7ff fc7a 	bl	8002368 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 71;
 8002a74:	2347      	movs	r3, #71	; 0x47
 8002a76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 4;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 19;
 8002a86:	2313      	movs	r3, #19
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4832      	ldr	r0, [pc, #200]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002a92:	f001 fc0b 	bl	80042ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002a96:	4831      	ldr	r0, [pc, #196]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002a98:	f7ff fd2f 	bl	80024fa <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8002a9c:	2330      	movs	r3, #48	; 0x30
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002abc:	461a      	mov	r2, r3
 8002abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ac2:	4826      	ldr	r0, [pc, #152]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002ac4:	f001 fc92 	bl	80043ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8002ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002acc:	4823      	ldr	r0, [pc, #140]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002ace:	f7ff fd23 	bl	8002518 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM1, LL_TIM_ONEPULSEMODE_SINGLE);
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4821      	ldr	r0, [pc, #132]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002ad6:	f7ff fcef 	bl	80024b8 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR3);
 8002ada:	2130      	movs	r1, #48	; 0x30
 8002adc:	481f      	ldr	r0, [pc, #124]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002ade:	f7ff ff31 	bl	8002944 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 8002ae2:	2106      	movs	r1, #6
 8002ae4:	481d      	ldr	r0, [pc, #116]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002ae6:	f7ff ff1b 	bl	8002920 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 8002aea:	481c      	ldr	r0, [pc, #112]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002aec:	f7ff ff5a 	bl	80029a4 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 8002af0:	481a      	ldr	r0, [pc, #104]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002af2:	f7ff ff66 	bl	80029c2 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002af6:	2100      	movs	r1, #0
 8002af8:	4818      	ldr	r0, [pc, #96]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002afa:	f7ff feff 	bl	80028fc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002afe:	4817      	ldr	r0, [pc, #92]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002b00:	f7ff ff41 	bl	8002986 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8002b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <MX_TIM1_Init+0x154>)
 8002b2e:	f001 fc95 	bl	800445c <LL_TIM_BDTR_Init>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002b32:	2004      	movs	r0, #4
 8002b34:	f7ff fca8 	bl	8002488 <LL_APB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_TIM1_Init+0x158>)
 8002b3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b3c:	2309      	movs	r3, #9
 8002b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b40:	2302      	movs	r3, #2
 8002b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	463b      	mov	r3, r7
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_TIM1_Init+0x15c>)
 8002b4e:	f001 f94b 	bl	8003de8 <LL_GPIO_Init>

}
 8002b52:	bf00      	nop
 8002b54:	3760      	adds	r7, #96	; 0x60
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	04080008 	.word	0x04080008
 8002b64:	40010800 	.word	0x40010800

08002b68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7e:	463b      	mov	r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff fc63 	bl	8002458 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002b92:	2004      	movs	r0, #4
 8002b94:	f7ff fc78 	bl	8002488 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002b98:	f240 1301 	movw	r3, #257	; 0x101
 8002b9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4826      	ldr	r0, [pc, #152]	; (8002c40 <MX_TIM2_Init+0xd8>)
 8002ba8:	f001 f91e 	bl	8003de8 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002bac:	f7ff fbce 	bl	800234c <__NVIC_GetPriorityGrouping>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fc1c 	bl	80023f4 <NVIC_EncodePriority>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	201c      	movs	r0, #28
 8002bc2:	f7ff fbed 	bl	80023a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002bc6:	201c      	movs	r0, #28
 8002bc8:	f7ff fbce 	bl	8002368 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 71;
 8002bcc:	2347      	movs	r3, #71	; 0x47
 8002bce:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 60000;
 8002bd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bd8:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002be8:	f001 fb60 	bl	80042ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002bec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bf0:	f7ff fc83 	bl	80024fa <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bfa:	f7ff fe7f 	bl	80028fc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002bfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c02:	f7ff fec0 	bl	8002986 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c10:	f7ff fd4e 	bl	80026b0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2101      	movs	r1, #1
 8002c18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c1c:	f7ff fd94 	bl	8002748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2101      	movs	r1, #1
 8002c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c28:	f7ff fdda 	bl	80027e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_FALLING);
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	2101      	movs	r1, #1
 8002c30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c34:	f7ff fe20 	bl	8002878 <LL_TIM_IC_SetPolarity>

}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40010800 	.word	0x40010800

08002c44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b092      	sub	sp, #72	; 0x48
 8002c48:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	2220      	movs	r2, #32
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f005 fcbc 	bl	80085e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
 8002c74:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f7ff fbee 	bl	8002458 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 71;
 8002c7c:	2347      	movs	r3, #71	; 0x47
 8002c7e:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 499;
 8002c84:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c92:	4619      	mov	r1, r3
 8002c94:	481c      	ldr	r0, [pc, #112]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002c96:	f001 fb09 	bl	80042ac <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002c9a:	481b      	ldr	r0, [pc, #108]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002c9c:	f7ff fc1e 	bl	80024dc <LL_TIM_EnableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8002ca0:	2330      	movs	r3, #48	; 0x30
 8002ca2:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4812      	ldr	r0, [pc, #72]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002cbe:	f001 fb95 	bl	80043ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4810      	ldr	r0, [pc, #64]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002cc6:	f7ff fc27 	bl	8002518 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	480e      	ldr	r0, [pc, #56]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002cce:	f7ff fe15 	bl	80028fc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <MX_TIM3_Init+0xc4>)
 8002cd4:	f7ff fe57 	bl	8002986 <LL_TIM_DisableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002cd8:	2008      	movs	r0, #8
 8002cda:	f7ff fbd5 	bl	8002488 <LL_APB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002cde:	f241 0310 	movw	r3, #4112	; 0x1010
 8002ce2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ce4:	2309      	movs	r3, #9
 8002ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_TIM3_Init+0xc8>)
 8002cf6:	f001 f877 	bl	8003de8 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial_TIM3();
 8002cfa:	f7ff fe71 	bl	80029e0 <LL_GPIO_AF_RemapPartial_TIM3>

}
 8002cfe:	bf00      	nop
 8002d00:	3748      	adds	r7, #72	; 0x48
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40010c00 	.word	0x40010c00

08002d10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b092      	sub	sp, #72	; 0x48
 8002d14:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fc56 	bl	80085e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002d42:	2004      	movs	r0, #4
 8002d44:	f7ff fb88 	bl	8002458 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d48:	f7ff fb00 	bl	800234c <__NVIC_GetPriorityGrouping>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fb4e 	bl	80023f4 <NVIC_EncodePriority>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	201e      	movs	r0, #30
 8002d5e:	f7ff fb1f 	bl	80023a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002d62:	201e      	movs	r0, #30
 8002d64:	f7ff fb00 	bl	8002368 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 71;
 8002d68:	2347      	movs	r3, #71	; 0x47
 8002d6a:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 199;
 8002d70:	23c7      	movs	r3, #199	; 0xc7
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4821      	ldr	r0, [pc, #132]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002d80:	f001 fa94 	bl	80042ac <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8002d84:	481f      	ldr	r0, [pc, #124]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002d86:	f7ff fba9 	bl	80024dc <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	481d      	ldr	r0, [pc, #116]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002d8e:	f7ff fc07 	bl	80025a0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002d92:	2360      	movs	r3, #96	; 0x60
 8002d94:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	461a      	mov	r2, r3
 8002dac:	2110      	movs	r1, #16
 8002dae:	4815      	ldr	r0, [pc, #84]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002db0:	f001 fb1c 	bl	80043ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8002db4:	2110      	movs	r1, #16
 8002db6:	4813      	ldr	r0, [pc, #76]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002db8:	f7ff fbae 	bl	8002518 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM4, LL_TIM_ONEPULSEMODE_SINGLE);
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	4811      	ldr	r0, [pc, #68]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002dc0:	f7ff fb7a 	bl	80024b8 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_ENABLE);
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	480f      	ldr	r0, [pc, #60]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002dc8:	f7ff fd98 	bl	80028fc <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM4);
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002dce:	f7ff fdcb 	bl	8002968 <LL_TIM_EnableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <MX_TIM4_Init+0xf4>)
 8002dd6:	f7ff fc27 	bl	8002628 <LL_TIM_OC_DisablePreload>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002dda:	2008      	movs	r0, #8
 8002ddc:	f7ff fb54 	bl	8002488 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002de0:	f248 0380 	movw	r3, #32896	; 0x8080
 8002de4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002de6:	2309      	movs	r3, #9
 8002de8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dea:	2302      	movs	r3, #2
 8002dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	463b      	mov	r3, r7
 8002df4:	4619      	mov	r1, r3
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <MX_TIM4_Init+0xf8>)
 8002df8:	f000 fff6 	bl	8003de8 <LL_GPIO_Init>

}
 8002dfc:	bf00      	nop
 8002dfe:	3748      	adds	r7, #72	; 0x48
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40010c00 	.word	0x40010c00

08002e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e0e:	e003      	b.n	8002e18 <LoopCopyDataInit>

08002e10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e16:	3104      	adds	r1, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e20:	d3f6      	bcc.n	8002e10 <CopyDataInit>
  ldr r2, =_sbss
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e24:	e002      	b.n	8002e2c <LoopFillZerobss>

08002e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e28:	f842 3b04 	str.w	r3, [r2], #4

08002e2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e30:	d3f9      	bcc.n	8002e26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e32:	f7fe fd3d 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e36:	f005 fb8b 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e3a:	f7fd fe33 	bl	8000aa4 <main>
  bx lr
 8002e3e:	4770      	bx	lr
  ldr r3, =_sidata
 8002e40:	08009c38 	.word	0x08009c38
  ldr r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e48:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8002e4c:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8002e50:	20001268 	.word	0x20001268

08002e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC1_2_IRQHandler>
	...

08002e58 <ST7735_write>:

uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte);


void ST7735_write(uint8_t data)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
CS_LOW_ST7735  ;
 8002e62:	2200      	movs	r2, #0
 8002e64:	2110      	movs	r1, #16
 8002e66:	4808      	ldr	r0, [pc, #32]	; (8002e88 <ST7735_write+0x30>)
 8002e68:	f000 fed4 	bl	8003c14 <HAL_GPIO_WritePin>
LL_SPI_TransmitReceive(SPI1, data);
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4806      	ldr	r0, [pc, #24]	; (8002e8c <ST7735_write+0x34>)
 8002e72:	f7fe facb 	bl	800140c <LL_SPI_TransmitReceive>
CS_HIGH_ST7735 ;
 8002e76:	2201      	movs	r2, #1
 8002e78:	2110      	movs	r1, #16
 8002e7a:	4803      	ldr	r0, [pc, #12]	; (8002e88 <ST7735_write+0x30>)
 8002e7c:	f000 feca 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010800 	.word	0x40010800
 8002e8c:	40013000 	.word	0x40013000

08002e90 <ST7735_SendData>:
#define ST7735_Send(x) ST7735_write(x)

void ST7735_SendData(uint8_t data)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
	A0_HIGH_ST7735 ; //A0_HIGH;
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <ST7735_SendData+0x24>)
 8002ea0:	f000 feb8 	bl	8003c14 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ffd6 	bl	8002e58 <ST7735_write>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40010800 	.word	0x40010800

08002eb8 <ST7735_SendCmd>:

void ST7735_SendCmd(uint8_t cmd)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
	A0_LOW_ST7735 ; //A0_LOW;
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <ST7735_SendCmd+0x24>)
 8002ec8:	f000 fea4 	bl	8003c14 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ffc2 	bl	8002e58 <ST7735_write>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010800 	.word	0x40010800

08002ee0 <HAL_ST7735_Init>:

void HAL_ST7735_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
/*#1*/
    CS_HIGH_ST7735 ;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	489d      	ldr	r0, [pc, #628]	; (8003160 <HAL_ST7735_Init+0x280>)
 8002eea:	f000 fe93 	bl	8003c14 <HAL_GPIO_WritePin>
	RESET_HIGH_ST7735 ;
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	489b      	ldr	r0, [pc, #620]	; (8003160 <HAL_ST7735_Init+0x280>)
 8002ef4:	f000 fe8e 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f000 fd61 	bl	80039c0 <HAL_Delay>
	RESET_LOW_ST7735 ;
 8002efe:	2200      	movs	r2, #0
 8002f00:	2102      	movs	r1, #2
 8002f02:	4897      	ldr	r0, [pc, #604]	; (8003160 <HAL_ST7735_Init+0x280>)
 8002f04:	f000 fe86 	bl	8003c14 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002f08:	200a      	movs	r0, #10
 8002f0a:	f000 fd59 	bl	80039c0 <HAL_Delay>
	RESET_HIGH_ST7735 ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2102      	movs	r1, #2
 8002f12:	4893      	ldr	r0, [pc, #588]	; (8003160 <HAL_ST7735_Init+0x280>)
 8002f14:	f000 fe7e 	bl	8003c14 <HAL_GPIO_WritePin>
    CS_LOW_ST7735 ;
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2110      	movs	r1, #16
 8002f1c:	4890      	ldr	r0, [pc, #576]	; (8003160 <HAL_ST7735_Init+0x280>)
 8002f1e:	f000 fe79 	bl	8003c14 <HAL_GPIO_WritePin>
	
	ST7735_SendCmd(ST7735_SWRESET);// программный ресет
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7ff ffc8 	bl	8002eb8 <ST7735_SendCmd>
	HAL_Delay(150);
 8002f28:	2096      	movs	r0, #150	; 0x96
 8002f2a:	f000 fd49 	bl	80039c0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_SLPOUT); // выход из спящего режима
 8002f2e:	2011      	movs	r0, #17
 8002f30:	f7ff ffc2 	bl	8002eb8 <ST7735_SendCmd>
	HAL_Delay(500);
 8002f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f38:	f000 fd42 	bl	80039c0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_FRMCTR1);//FRMCTR1 (B1h): Frame Rate Control (In normal mode/ Full colors)
 8002f3c:	20b1      	movs	r0, #177	; 0xb1
 8002f3e:	f7ff ffbb 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7ff ffa4 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002f48:	202c      	movs	r0, #44	; 0x2c
 8002f4a:	f7ff ffa1 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002f4e:	202d      	movs	r0, #45	; 0x2d
 8002f50:	f7ff ff9e 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR2);//Frame Rate Control (In Idle mode/ 8-colors)
 8002f54:	20b2      	movs	r0, #178	; 0xb2
 8002f56:	f7ff ffaf 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7ff ff98 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002f60:	202c      	movs	r0, #44	; 0x2c
 8002f62:	f7ff ff95 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002f66:	202d      	movs	r0, #45	; 0x2d
 8002f68:	f7ff ff92 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR3);//Frame Rate Control (In Partial mode/ full colors)
 8002f6c:	20b3      	movs	r0, #179	; 0xb3
 8002f6e:	f7ff ffa3 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff ff8c 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002f78:	202c      	movs	r0, #44	; 0x2c
 8002f7a:	f7ff ff89 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002f7e:	202d      	movs	r0, #45	; 0x2d
 8002f80:	f7ff ff86 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x01);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff ff83 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	f7ff ff80 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002f90:	202d      	movs	r0, #45	; 0x2d
 8002f92:	f7ff ff7d 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVCTR); //  Display Inversion Control
 8002f96:	20b4      	movs	r0, #180	; 0xb4
 8002f98:	f7ff ff8e 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x07);
 8002f9c:	2007      	movs	r0, #7
 8002f9e:	f7ff ff77 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR1);
 8002fa2:	20c0      	movs	r0, #192	; 0xc0
 8002fa4:	f7ff ff88 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0xA2);
 8002fa8:	20a2      	movs	r0, #162	; 0xa2
 8002faa:	f7ff ff71 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x02);
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f7ff ff6e 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x84);
 8002fb4:	2084      	movs	r0, #132	; 0x84
 8002fb6:	f7ff ff6b 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR2);
 8002fba:	20c1      	movs	r0, #193	; 0xc1
 8002fbc:	f7ff ff7c 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0xC5);
 8002fc0:	20c5      	movs	r0, #197	; 0xc5
 8002fc2:	f7ff ff65 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR3);
 8002fc6:	20c2      	movs	r0, #194	; 0xc2
 8002fc8:	f7ff ff76 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x0A);
 8002fcc:	200a      	movs	r0, #10
 8002fce:	f7ff ff5f 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff ff5c 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR4);
 8002fd8:	20c3      	movs	r0, #195	; 0xc3
 8002fda:	f7ff ff6d 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8002fde:	208a      	movs	r0, #138	; 0x8a
 8002fe0:	f7ff ff56 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2A);
 8002fe4:	202a      	movs	r0, #42	; 0x2a
 8002fe6:	f7ff ff53 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR5);
 8002fea:	20c4      	movs	r0, #196	; 0xc4
 8002fec:	f7ff ff64 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8002ff0:	208a      	movs	r0, #138	; 0x8a
 8002ff2:	f7ff ff4d 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0xEE);
 8002ff6:	20ee      	movs	r0, #238	; 0xee
 8002ff8:	f7ff ff4a 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_VMCTR1);
 8002ffc:	20c5      	movs	r0, #197	; 0xc5
 8002ffe:	f7ff ff5b 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x0E);
 8003002:	200e      	movs	r0, #14
 8003004:	f7ff ff44 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVOFF);
 8003008:	2020      	movs	r0, #32
 800300a:	f7ff ff55 	bl	8002eb8 <ST7735_SendCmd>
	
	ST7735_SendCmd(ST7735_MADCTL);	//
 800300e:	2036      	movs	r0, #54	; 0x36
 8003010:	f7ff ff52 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0xC8);			// RGB =1 => BGR color filter panel)
 8003014:	20c8      	movs	r0, #200	; 0xc8
 8003016:	f7ff ff3b 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_COLMOD);
 800301a:	203a      	movs	r0, #58	; 0x3a
 800301c:	f7ff ff4c 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x05);
 8003020:	2005      	movs	r0, #5
 8003022:	f7ff ff35 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_CASET);
 8003026:	202a      	movs	r0, #42	; 0x2a
 8003028:	f7ff ff46 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7ff ff2f 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8003032:	2000      	movs	r0, #0
 8003034:	f7ff ff2c 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7ff ff29 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x7F);
 800303e:	207f      	movs	r0, #127	; 0x7f
 8003040:	f7ff ff26 	bl	8002e90 <ST7735_SendData>

	ST7735_SendCmd(ST7735_RASET);
 8003044:	202b      	movs	r0, #43	; 0x2b
 8003046:	f7ff ff37 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f7ff ff20 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff ff1d 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff ff1a 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x9F);
 800305c:	209f      	movs	r0, #159	; 0x9f
 800305e:	f7ff ff17 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRP1);
 8003062:	20e0      	movs	r0, #224	; 0xe0
 8003064:	f7ff ff28 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x02);
 8003068:	2002      	movs	r0, #2
 800306a:	f7ff ff11 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x1c);
 800306e:	201c      	movs	r0, #28
 8003070:	f7ff ff0e 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x07);
 8003074:	2007      	movs	r0, #7
 8003076:	f7ff ff0b 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x12);
 800307a:	2012      	movs	r0, #18
 800307c:	f7ff ff08 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x37);
 8003080:	2037      	movs	r0, #55	; 0x37
 8003082:	f7ff ff05 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x32);
 8003086:	2032      	movs	r0, #50	; 0x32
 8003088:	f7ff ff02 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x29);
 800308c:	2029      	movs	r0, #41	; 0x29
 800308e:	f7ff feff 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2d);
 8003092:	202d      	movs	r0, #45	; 0x2d
 8003094:	f7ff fefc 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x29);
 8003098:	2029      	movs	r0, #41	; 0x29
 800309a:	f7ff fef9 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x25);
 800309e:	2025      	movs	r0, #37	; 0x25
 80030a0:	f7ff fef6 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2B);
 80030a4:	202b      	movs	r0, #43	; 0x2b
 80030a6:	f7ff fef3 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x39);	
 80030aa:	2039      	movs	r0, #57	; 0x39
 80030ac:	f7ff fef0 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7ff feed 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x01);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f7ff feea 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x03);
 80030bc:	2003      	movs	r0, #3
 80030be:	f7ff fee7 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x10);
 80030c2:	2010      	movs	r0, #16
 80030c4:	f7ff fee4 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRN1);
 80030c8:	20e1      	movs	r0, #225	; 0xe1
 80030ca:	f7ff fef5 	bl	8002eb8 <ST7735_SendCmd>
	ST7735_SendData(0x03);
 80030ce:	2003      	movs	r0, #3
 80030d0:	f7ff fede 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x1d);
 80030d4:	201d      	movs	r0, #29
 80030d6:	f7ff fedb 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x07);
 80030da:	2007      	movs	r0, #7
 80030dc:	f7ff fed8 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x06);
 80030e0:	2006      	movs	r0, #6
 80030e2:	f7ff fed5 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2E);
 80030e6:	202e      	movs	r0, #46	; 0x2e
 80030e8:	f7ff fed2 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	f7ff fecf 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x29);
 80030f2:	2029      	movs	r0, #41	; 0x29
 80030f4:	f7ff fecc 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80030f8:	202d      	movs	r0, #45	; 0x2d
 80030fa:	f7ff fec9 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2E);
 80030fe:	202e      	movs	r0, #46	; 0x2e
 8003100:	f7ff fec6 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8003104:	202e      	movs	r0, #46	; 0x2e
 8003106:	f7ff fec3 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x37);
 800310a:	2037      	movs	r0, #55	; 0x37
 800310c:	f7ff fec0 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x3F);	
 8003110:	203f      	movs	r0, #63	; 0x3f
 8003112:	f7ff febd 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7ff feba 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x00);
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff feb7 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x02);
 8003122:	2002      	movs	r0, #2
 8003124:	f7ff feb4 	bl	8002e90 <ST7735_SendData>
	ST7735_SendData(0x10);
 8003128:	2010      	movs	r0, #16
 800312a:	f7ff feb1 	bl	8002e90 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_NORON);//  Normal Display Mode On
 800312e:	2013      	movs	r0, #19
 8003130:	f7ff fec2 	bl	8002eb8 <ST7735_SendCmd>
	HAL_Delay(10);
 8003134:	200a      	movs	r0, #10
 8003136:	f000 fc43 	bl	80039c0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_DISPON); // Display On
 800313a:	2029      	movs	r0, #41	; 0x29
 800313c:	f7ff febc 	bl	8002eb8 <ST7735_SendCmd>
	HAL_Delay(100);
 8003140:	2064      	movs	r0, #100	; 0x64
 8003142:	f000 fc3d 	bl	80039c0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_MADCTL);  // Memory Data Access Control
 8003146:	2036      	movs	r0, #54	; 0x36
 8003148:	f7ff feb6 	bl	8002eb8 <ST7735_SendCmd>
#ifdef VERTICAL
	ST7735_SendData(0x00);		    // Parameter D7 D6 D5 D4 D3  D2 D1 D0
									//			 MY MX MV ML RGB MH x  x
#endif									//           0  1  1  0   0  0  0  0   -> 0x60 - rotate display 90
	ST7735_SendData(0x60);
 800314c:	2060      	movs	r0, #96	; 0x60
 800314e:	f7ff fe9f 	bl	8002e90 <ST7735_SendData>

	CS_HIGH_ST7735 ;
 8003152:	2201      	movs	r2, #1
 8003154:	2110      	movs	r1, #16
 8003156:	4802      	ldr	r0, [pc, #8]	; (8003160 <HAL_ST7735_Init+0x280>)
 8003158:	f000 fd5c 	bl	8003c14 <HAL_GPIO_WritePin>

}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40010800 	.word	0x40010800

08003164 <ST7735_AddrSet>:




void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4604      	mov	r4, r0
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4623      	mov	r3, r4
 8003174:	80fb      	strh	r3, [r7, #6]
 8003176:	4603      	mov	r3, r0
 8003178:	80bb      	strh	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	807b      	strh	r3, [r7, #2]
 800317e:	4613      	mov	r3, r2
 8003180:	803b      	strh	r3, [r7, #0]
  ST7735_SendCmd(ST7735_CASET); // Column address set
 8003182:	202a      	movs	r0, #42	; 0x2a
 8003184:	f7ff fe98 	bl	8002eb8 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8003188:	2201      	movs	r2, #1
 800318a:	2108      	movs	r1, #8
 800318c:	4818      	ldr	r0, [pc, #96]	; (80031f0 <ST7735_AddrSet+0x8c>)
 800318e:	f000 fd41 	bl	8003c14 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7ff fe60 	bl	8002e58 <ST7735_write>
	ST7735_write(XS);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe5b 	bl	8002e58 <ST7735_write>
	ST7735_write(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7ff fe58 	bl	8002e58 <ST7735_write>
	ST7735_write(XE);
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe53 	bl	8002e58 <ST7735_write>

  ST7735_SendCmd(ST7735_RASET); // Row address set
 80031b2:	202b      	movs	r0, #43	; 0x2b
 80031b4:	f7ff fe80 	bl	8002eb8 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 80031b8:	2201      	movs	r2, #1
 80031ba:	2108      	movs	r1, #8
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <ST7735_AddrSet+0x8c>)
 80031be:	f000 fd29 	bl	8003c14 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7ff fe48 	bl	8002e58 <ST7735_write>
	ST7735_write(YS);
 80031c8:	88bb      	ldrh	r3, [r7, #4]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fe43 	bl	8002e58 <ST7735_write>
	ST7735_write(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7ff fe40 	bl	8002e58 <ST7735_write>
	ST7735_write(YE);
 80031d8:	883b      	ldrh	r3, [r7, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe3b 	bl	8002e58 <ST7735_write>

  ST7735_SendCmd(ST7735_RAMWR); // Memory write
 80031e2:	202c      	movs	r0, #44	; 0x2c
 80031e4:	f7ff fe68 	bl	8002eb8 <ST7735_SendCmd>
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	40010800 	.word	0x40010800

080031f4 <ST7735_Clear>:

void ST7735_Clear(uint16_t Color)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]

	uint16_t i;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	b29b      	uxth	r3, r3
 8003208:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(0,0,WIDTH+1,HEIGHT+1);
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	22a0      	movs	r2, #160	; 0xa0
 800320e:	2100      	movs	r1, #0
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff ffa7 	bl	8003164 <ST7735_AddrSet>
	A0_HIGH_ST7735 ;
 8003216:	2201      	movs	r2, #1
 8003218:	2108      	movs	r1, #8
 800321a:	480c      	ldr	r0, [pc, #48]	; (800324c <ST7735_Clear+0x58>)
 800321c:	f000 fcfa 	bl	8003c14 <HAL_GPIO_WritePin>
	for(i=0;i<20480;i++)
 8003220:	2300      	movs	r3, #0
 8003222:	81fb      	strh	r3, [r7, #14]
 8003224:	e00a      	b.n	800323c <ST7735_Clear+0x48>
	{
		ST7735_write(CH);
 8003226:	7b3b      	ldrb	r3, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fe15 	bl	8002e58 <ST7735_write>
		ST7735_write(CL);
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fe11 	bl	8002e58 <ST7735_write>
	for(i=0;i<20480;i++)
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	81fb      	strh	r3, [r7, #14]
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003242:	d3f0      	bcc.n	8003226 <ST7735_Clear+0x32>
	}
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40010800 	.word	0x40010800

08003250 <ST7735_DrawHLine>:
	ST7735_Send(CH);
	ST7735_Send(CL);
}

void ST7735_DrawHLine(uint8_t x,uint8_t x1,uint8_t y,uint16_t Color)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	4604      	mov	r4, r0
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4623      	mov	r3, r4
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	4603      	mov	r3, r0
 8003264:	71bb      	strb	r3, [r7, #6]
 8003266:	460b      	mov	r3, r1
 8003268:	717b      	strb	r3, [r7, #5]
 800326a:	4613      	mov	r3, r2
 800326c:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x1,y);
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	b298      	uxth	r0, r3
 800327e:	797b      	ldrb	r3, [r7, #5]
 8003280:	b299      	uxth	r1, r3
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	b29a      	uxth	r2, r3
 8003286:	797b      	ldrb	r3, [r7, #5]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f7ff ff6b 	bl	8003164 <ST7735_AddrSet>
	len = x1-x;
 800328e:	79bb      	ldrb	r3, [r7, #6]
 8003290:	b29a      	uxth	r2, r3
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	b29b      	uxth	r3, r3
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 800329a:	2201      	movs	r2, #1
 800329c:	2108      	movs	r1, #8
 800329e:	480c      	ldr	r0, [pc, #48]	; (80032d0 <ST7735_DrawHLine+0x80>)
 80032a0:	f000 fcb8 	bl	8003c14 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	81fb      	strh	r3, [r7, #14]
 80032a8:	e00a      	b.n	80032c0 <ST7735_DrawHLine+0x70>
	{
		ST7735_Send(CH);
 80032aa:	7b3b      	ldrb	r3, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fdd3 	bl	8002e58 <ST7735_write>
		ST7735_Send(CL);
 80032b2:	7b7b      	ldrb	r3, [r7, #13]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fdcf 	bl	8002e58 <ST7735_write>
	for(i=0;i<len;i++)
 80032ba:	89fb      	ldrh	r3, [r7, #14]
 80032bc:	3301      	adds	r3, #1
 80032be:	81fb      	strh	r3, [r7, #14]
 80032c0:	89fa      	ldrh	r2, [r7, #14]
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d3f0      	bcc.n	80032aa <ST7735_DrawHLine+0x5a>
	}
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	40010800 	.word	0x40010800

080032d4 <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x,uint8_t y,uint8_t y1,uint16_t Color)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4623      	mov	r3, r4
 80032e4:	71fb      	strb	r3, [r7, #7]
 80032e6:	4603      	mov	r3, r0
 80032e8:	71bb      	strb	r3, [r7, #6]
 80032ea:	460b      	mov	r3, r1
 80032ec:	717b      	strb	r3, [r7, #5]
 80032ee:	4613      	mov	r3, r2
 80032f0:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x,y1);
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	b298      	uxth	r0, r3
 8003302:	79bb      	ldrb	r3, [r7, #6]
 8003304:	b299      	uxth	r1, r3
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	b29a      	uxth	r2, r3
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f7ff ff29 	bl	8003164 <ST7735_AddrSet>
	len = y1-y;
 8003312:	797b      	ldrb	r3, [r7, #5]
 8003314:	b29a      	uxth	r2, r3
 8003316:	79bb      	ldrb	r3, [r7, #6]
 8003318:	b29b      	uxth	r3, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 800331e:	2201      	movs	r2, #1
 8003320:	2108      	movs	r1, #8
 8003322:	480c      	ldr	r0, [pc, #48]	; (8003354 <ST7735_DrawVLine+0x80>)
 8003324:	f000 fc76 	bl	8003c14 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8003328:	2300      	movs	r3, #0
 800332a:	81fb      	strh	r3, [r7, #14]
 800332c:	e00a      	b.n	8003344 <ST7735_DrawVLine+0x70>
	{
		ST7735_Send(CH);
 800332e:	7b3b      	ldrb	r3, [r7, #12]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fd91 	bl	8002e58 <ST7735_write>
		ST7735_Send(CL);
 8003336:	7b7b      	ldrb	r3, [r7, #13]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fd8d 	bl	8002e58 <ST7735_write>
	for(i=0;i<len;i++)
 800333e:	89fb      	ldrh	r3, [r7, #14]
 8003340:	3301      	adds	r3, #1
 8003342:	81fb      	strh	r3, [r7, #14]
 8003344:	89fa      	ldrh	r2, [r7, #14]
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3f0      	bcc.n	800332e <ST7735_DrawVLine+0x5a>
	}
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40010800 	.word	0x40010800

08003358 <ST7735_DrawChar>:
		ST7735_Send(array[i]);
	}
}

void ST7735_DrawChar(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4623      	mov	r3, r4
 8003368:	71fb      	strb	r3, [r7, #7]
 800336a:	4603      	mov	r3, r0
 800336c:	71bb      	strb	r3, [r7, #6]
 800336e:	460b      	mov	r3, r1
 8003370:	717b      	strb	r3, [r7, #5]
 8003372:	4613      	mov	r3, r2
 8003374:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[5];
	
	CL = color & 0xFF;
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	757b      	strb	r3, [r7, #21]
	CH = (color>>8) & 0xFF;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	b29b      	uxth	r3, r3
 8003380:	753b      	strb	r3, [r7, #20]
	
	BCL = background_color & 0xFF;
 8003382:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003384:	74fb      	strb	r3, [r7, #19]
	BCH = (background_color>>8) & 0xFF;
 8003386:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	b29b      	uxth	r3, r3
 800338c:	74bb      	strb	r3, [r7, #18]
	
	memcpy(buffer,&Font5x7[(chr-32)*5],5);
 800338e:	797b      	ldrb	r3, [r7, #5]
 8003390:	f1a3 0220 	sub.w	r2, r3, #32
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	4a34      	ldr	r2, [pc, #208]	; (800346c <ST7735_DrawChar+0x114>)
 800339c:	441a      	add	r2, r3
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	6810      	ldr	r0, [r2, #0]
 80033a4:	6018      	str	r0, [r3, #0]
 80033a6:	7912      	ldrb	r2, [r2, #4]
 80033a8:	711a      	strb	r2, [r3, #4]
	ST7735_AddrSet(x,y,x+5,y+7);	// определяем область памяти в которую будем записывать
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	b298      	uxth	r0, r3
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	b299      	uxth	r1, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3305      	adds	r3, #5
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	79bb      	ldrb	r3, [r7, #6]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3307      	adds	r3, #7
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f7ff fecf 	bl	8003164 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 80033c6:	2201      	movs	r2, #1
 80033c8:	2108      	movs	r1, #8
 80033ca:	4829      	ldr	r0, [pc, #164]	; (8003470 <ST7735_DrawChar+0x118>)
 80033cc:	f000 fc22 	bl	8003c14 <HAL_GPIO_WritePin>
	for(i=0;i<7;i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	75fb      	strb	r3, [r7, #23]
 80033d4:	e032      	b.n	800343c <ST7735_DrawChar+0xe4>
	{
		for(j=0;j<5;j++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	75bb      	strb	r3, [r7, #22]
 80033da:	e021      	b.n	8003420 <ST7735_DrawChar+0xc8>
		{
			if((buffer[j] & (1<<i))==0) // если в этом пикселе нет символа то закрашиваем цветом background_color
 80033dc:	7dbb      	ldrb	r3, [r7, #22]
 80033de:	f107 0218 	add.w	r2, r7, #24
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80033e8:	461a      	mov	r2, r3
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	fa42 f303 	asr.w	r3, r2, r3
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <ST7735_DrawChar+0xb2>
			{
				ST7735_Send(BCH);
 80033f8:	7cbb      	ldrb	r3, [r7, #18]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fd2c 	bl	8002e58 <ST7735_write>
				ST7735_Send(BCL);
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fd28 	bl	8002e58 <ST7735_write>
 8003408:	e007      	b.n	800341a <ST7735_DrawChar+0xc2>
			}
			else						// иначе цветом символа  color
			{
				ST7735_Send(CH);
 800340a:	7d3b      	ldrb	r3, [r7, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fd23 	bl	8002e58 <ST7735_write>
				ST7735_Send(CL);
 8003412:	7d7b      	ldrb	r3, [r7, #21]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fd1f 	bl	8002e58 <ST7735_write>
		for(j=0;j<5;j++)
 800341a:	7dbb      	ldrb	r3, [r7, #22]
 800341c:	3301      	adds	r3, #1
 800341e:	75bb      	strb	r3, [r7, #22]
 8003420:	7dbb      	ldrb	r3, [r7, #22]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d9da      	bls.n	80033dc <ST7735_DrawChar+0x84>
			}
		}
		ST7735_Send(BCH);
 8003426:	7cbb      	ldrb	r3, [r7, #18]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fd15 	bl	8002e58 <ST7735_write>
		ST7735_Send(BCL);
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fd11 	bl	8002e58 <ST7735_write>
	for(i=0;i<7;i++)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	3301      	adds	r3, #1
 800343a:	75fb      	strb	r3, [r7, #23]
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d9c9      	bls.n	80033d6 <ST7735_DrawChar+0x7e>
	}
	for(i=0;i<5;i++)
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
 8003446:	e00a      	b.n	800345e <ST7735_DrawChar+0x106>
	{
		ST7735_Send(BCH);
 8003448:	7cbb      	ldrb	r3, [r7, #18]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fd04 	bl	8002e58 <ST7735_write>
		ST7735_Send(BCL);
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fd00 	bl	8002e58 <ST7735_write>
	for(i=0;i<5;i++)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	3301      	adds	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d9f1      	bls.n	8003448 <ST7735_DrawChar+0xf0>
	}
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	080090fc 	.word	0x080090fc
 8003470:	40010800 	.word	0x40010800

08003474 <ST7735_DrawString>:

void ST7735_DrawString(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af02      	add	r7, sp, #8
 800347a:	603a      	str	r2, [r7, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
 8003482:	460b      	mov	r3, r1
 8003484:	71bb      	strb	r3, [r7, #6]
 8003486:	4613      	mov	r3, r2
 8003488:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 800348e:	e016      	b.n	80034be <ST7735_DrawString+0x4a>
	{
		ST7735_DrawChar(x+(6*i),y,chr[i],color,background_color);
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	461a      	mov	r2, r3
 8003494:	0052      	lsls	r2, r2, #1
 8003496:	4413      	add	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	b2da      	uxtb	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4413      	add	r3, r2
 80034a0:	b2d8      	uxtb	r0, r3
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	88bc      	ldrh	r4, [r7, #4]
 80034ac:	79b9      	ldrb	r1, [r7, #6]
 80034ae:	8c3b      	ldrh	r3, [r7, #32]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4623      	mov	r3, r4
 80034b4:	f7ff ff50 	bl	8003358 <ST7735_DrawChar>
		i++;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3301      	adds	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e2      	bne.n	8003490 <ST7735_DrawString+0x1c>
	}
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd90      	pop	{r4, r7, pc}
	...

080034d4 <ST7735_DrawChar7x11>:



void ST7735_DrawChar7x11(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4604      	mov	r4, r0
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	71fb      	strb	r3, [r7, #7]
 80034e6:	4603      	mov	r3, r0
 80034e8:	71bb      	strb	r3, [r7, #6]
 80034ea:	460b      	mov	r3, r1
 80034ec:	717b      	strb	r3, [r7, #5]
 80034ee:	4613      	mov	r3, r2
 80034f0:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[11];	// содержит код символа uint8_t chr
	
	CL = color & 0xFF;
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	777b      	strb	r3, [r7, #29]
	CH = (color>>8) & 0xFF;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	773b      	strb	r3, [r7, #28]
	
	BCL = background_color & 0xFF;
 80034fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003500:	76fb      	strb	r3, [r7, #27]
	BCH = (background_color>>8) & 0xFF;
 8003502:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	76bb      	strb	r3, [r7, #26]
	
	memcpy(buffer,&Font7x11[(chr-32)*11],11);	// 32 - символ пробела - с него начинаются символы алфавита ASCII;
 800350a:	797b      	ldrb	r3, [r7, #5]
 800350c:	f1a3 0220 	sub.w	r2, r3, #32
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <ST7735_DrawChar7x11+0x120>)
 800351c:	441a      	add	r2, r3
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	6851      	ldr	r1, [r2, #4]
 8003526:	c303      	stmia	r3!, {r0, r1}
 8003528:	8911      	ldrh	r1, [r2, #8]
 800352a:	7a92      	ldrb	r2, [r2, #10]
 800352c:	8019      	strh	r1, [r3, #0]
 800352e:	709a      	strb	r2, [r3, #2]
												//таблица шрифтов начинается с символа пробела
												// копируем от начала символа, в таблице шрифтов, 11 элементов,
												//из 11 элементов состоит один символ шрифта
	ST7735_AddrSet(x,y,x+7,y+11);
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	b298      	uxth	r0, r3
 8003534:	79bb      	ldrb	r3, [r7, #6]
 8003536:	b299      	uxth	r1, r3
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	b29b      	uxth	r3, r3
 800353c:	3307      	adds	r3, #7
 800353e:	b29a      	uxth	r2, r3
 8003540:	79bb      	ldrb	r3, [r7, #6]
 8003542:	b29b      	uxth	r3, r3
 8003544:	330b      	adds	r3, #11
 8003546:	b29b      	uxth	r3, r3
 8003548:	f7ff fe0c 	bl	8003164 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 800354c:	2201      	movs	r2, #1
 800354e:	2108      	movs	r1, #8
 8003550:	4829      	ldr	r0, [pc, #164]	; (80035f8 <ST7735_DrawChar7x11+0x124>)
 8003552:	f000 fb5f 	bl	8003c14 <HAL_GPIO_WritePin>
	for(j=0;j<11;j++)
 8003556:	2300      	movs	r3, #0
 8003558:	77bb      	strb	r3, [r7, #30]
 800355a:	e032      	b.n	80035c2 <ST7735_DrawChar7x11+0xee>
	{
		for(i=0;i<7;i++)
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e021      	b.n	80035a6 <ST7735_DrawChar7x11+0xd2>
		{
			if((buffer[j] & (1<<i))==0)
 8003562:	7fbb      	ldrb	r3, [r7, #30]
 8003564:	f107 0220 	add.w	r2, r7, #32
 8003568:	4413      	add	r3, r2
 800356a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800356e:	461a      	mov	r2, r3
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	fa42 f303 	asr.w	r3, r2, r3
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <ST7735_DrawChar7x11+0xbc>
			{
				ST7735_write(BCH);
 800357e:	7ebb      	ldrb	r3, [r7, #26]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fc69 	bl	8002e58 <ST7735_write>
				ST7735_write(BCL);
 8003586:	7efb      	ldrb	r3, [r7, #27]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fc65 	bl	8002e58 <ST7735_write>
 800358e:	e007      	b.n	80035a0 <ST7735_DrawChar7x11+0xcc>
			}
			else
			{
				ST7735_write(CH);
 8003590:	7f3b      	ldrb	r3, [r7, #28]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fc60 	bl	8002e58 <ST7735_write>
				ST7735_write(CL);
 8003598:	7f7b      	ldrb	r3, [r7, #29]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc5c 	bl	8002e58 <ST7735_write>
		for(i=0;i<7;i++)
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
 80035a2:	3301      	adds	r3, #1
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d9da      	bls.n	8003562 <ST7735_DrawChar7x11+0x8e>
			}			
		}
		ST7735_write(BCH);
 80035ac:	7ebb      	ldrb	r3, [r7, #26]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fc52 	bl	8002e58 <ST7735_write>
		ST7735_write(BCL);
 80035b4:	7efb      	ldrb	r3, [r7, #27]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fc4e 	bl	8002e58 <ST7735_write>
	for(j=0;j<11;j++)
 80035bc:	7fbb      	ldrb	r3, [r7, #30]
 80035be:	3301      	adds	r3, #1
 80035c0:	77bb      	strb	r3, [r7, #30]
 80035c2:	7fbb      	ldrb	r3, [r7, #30]
 80035c4:	2b0a      	cmp	r3, #10
 80035c6:	d9c9      	bls.n	800355c <ST7735_DrawChar7x11+0x88>
	}
	for(i=0;i<8;i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e00a      	b.n	80035e4 <ST7735_DrawChar7x11+0x110>
	{
		ST7735_write(BCH);
 80035ce:	7ebb      	ldrb	r3, [r7, #26]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fc41 	bl	8002e58 <ST7735_write>
		ST7735_write(BCL);
 80035d6:	7efb      	ldrb	r3, [r7, #27]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fc3d 	bl	8002e58 <ST7735_write>
	for(i=0;i<8;i++)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	3301      	adds	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d9f1      	bls.n	80035ce <ST7735_DrawChar7x11+0xfa>
	}
}
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	080092dc 	.word	0x080092dc
 80035f8:	40010800 	.word	0x40010800

080035fc <ST7735_DrawString7x11>:

void ST7735_DrawString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b087      	sub	sp, #28
 8003600:	af02      	add	r7, sp, #8
 8003602:	603a      	str	r2, [r7, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
 800360a:	460b      	mov	r3, r1
 800360c:	71bb      	strb	r3, [r7, #6]
 800360e:	4613      	mov	r3, r2
 8003610:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8003616:	e013      	b.n	8003640 <ST7735_DrawString7x11+0x44>
	{
		ST7735_DrawChar7x11(x+(8*i),y,chr[i],color,background_color);
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	b2da      	uxtb	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	4413      	add	r3, r2
 8003622:	b2d8      	uxtb	r0, r3
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4413      	add	r3, r2
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	88bc      	ldrh	r4, [r7, #4]
 800362e:	79b9      	ldrb	r1, [r7, #6]
 8003630:	8c3b      	ldrh	r3, [r7, #32]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4623      	mov	r3, r4
 8003636:	f7ff ff4d 	bl	80034d4 <ST7735_DrawChar7x11>
		i++;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3301      	adds	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	4413      	add	r3, r2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <ST7735_DrawString7x11+0x1c>
	}
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}

08003654 <ST7735_DrawNString7x11>:

void ST7735_DrawNString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color, uint8_t n)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af02      	add	r7, sp, #8
 800365a:	603a      	str	r2, [r7, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
 8003662:	460b      	mov	r3, r1
 8003664:	71bb      	strb	r3, [r7, #6]
 8003666:	4613      	mov	r3, r2
 8003668:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
	uint8_t CHR=0;
 800366e:	2300      	movs	r3, #0
 8003670:	73bb      	strb	r3, [r7, #14]
	while(n-- != 0)
 8003672:	e01a      	b.n	80036aa <ST7735_DrawNString7x11+0x56>
	{
		//ST7735_DrawChar7x11(x+(8*i),y, *chr++,color,background_color);
		CHR = chr[i];
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	73bb      	strb	r3, [r7, #14]
		if(CHR == '\0') CHR=0x20;
 800367e:	7bbb      	ldrb	r3, [r7, #14]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <ST7735_DrawNString7x11+0x34>
 8003684:	2320      	movs	r3, #32
 8003686:	73bb      	strb	r3, [r7, #14]
		ST7735_DrawChar7x11(x+(8*i),y,CHR,color,background_color);
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	b2da      	uxtb	r2, r3
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	4413      	add	r3, r2
 8003692:	b2d8      	uxtb	r0, r3
 8003694:	88bc      	ldrh	r4, [r7, #4]
 8003696:	7bba      	ldrb	r2, [r7, #14]
 8003698:	79b9      	ldrb	r1, [r7, #6]
 800369a:	8c3b      	ldrh	r3, [r7, #32]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4623      	mov	r3, r4
 80036a0:	f7ff ff18 	bl	80034d4 <ST7735_DrawChar7x11>
		i++;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	3301      	adds	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
	while(n-- != 0)
 80036aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1dd      	bne.n	8003674 <ST7735_DrawNString7x11+0x20>
	}
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle (uint8_t x,uint8_t y,uint8_t w,uint8_t h,uint16_t Color)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4604      	mov	r4, r0
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	71fb      	strb	r3, [r7, #7]
 80036d2:	4603      	mov	r3, r0
 80036d4:	71bb      	strb	r3, [r7, #6]
 80036d6:	460b      	mov	r3, r1
 80036d8:	717b      	strb	r3, [r7, #5]
 80036da:	4613      	mov	r3, r2
 80036dc:	713b      	strb	r3, [r7, #4]
	ST7735_DrawHLine(x,x+w,y,Color);
 80036de:	79fa      	ldrb	r2, [r7, #7]
 80036e0:	797b      	ldrb	r3, [r7, #5]
 80036e2:	4413      	add	r3, r2
 80036e4:	b2d9      	uxtb	r1, r3
 80036e6:	8b3b      	ldrh	r3, [r7, #24]
 80036e8:	79ba      	ldrb	r2, [r7, #6]
 80036ea:	79f8      	ldrb	r0, [r7, #7]
 80036ec:	f7ff fdb0 	bl	8003250 <ST7735_DrawHLine>
	ST7735_DrawVLine(x+w,y,y+h+1,Color);
 80036f0:	79fa      	ldrb	r2, [r7, #7]
 80036f2:	797b      	ldrb	r3, [r7, #5]
 80036f4:	4413      	add	r3, r2
 80036f6:	b2d8      	uxtb	r0, r3
 80036f8:	79ba      	ldrb	r2, [r7, #6]
 80036fa:	793b      	ldrb	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3301      	adds	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	8b3b      	ldrh	r3, [r7, #24]
 8003706:	79b9      	ldrb	r1, [r7, #6]
 8003708:	f7ff fde4 	bl	80032d4 <ST7735_DrawVLine>
	ST7735_DrawHLine(x,x+w,y+h,Color);
 800370c:	79fa      	ldrb	r2, [r7, #7]
 800370e:	797b      	ldrb	r3, [r7, #5]
 8003710:	4413      	add	r3, r2
 8003712:	b2d9      	uxtb	r1, r3
 8003714:	79ba      	ldrb	r2, [r7, #6]
 8003716:	793b      	ldrb	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	b2da      	uxtb	r2, r3
 800371c:	8b3b      	ldrh	r3, [r7, #24]
 800371e:	79f8      	ldrb	r0, [r7, #7]
 8003720:	f7ff fd96 	bl	8003250 <ST7735_DrawHLine>
	ST7735_DrawVLine(x,y,y+h,Color);
 8003724:	79ba      	ldrb	r2, [r7, #6]
 8003726:	793b      	ldrb	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	b2da      	uxtb	r2, r3
 800372c:	8b3b      	ldrh	r3, [r7, #24]
 800372e:	79b9      	ldrb	r1, [r7, #6]
 8003730:	79f8      	ldrb	r0, [r7, #7]
 8003732:	f7ff fdcf 	bl	80032d4 <ST7735_DrawVLine>
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
	...

08003740 <ST7735_ListBox_Draw>:
		ST7735_Send(BCL);
	}
}
//ListBox
void ST7735_ListBox_Draw(ST7735_ListBox* lb)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
	uint8_t BCH,BCL,SCH,SCL;
	uint16_t tmp,i, item, BGCol;
	
	ST7735_DrawRectangle(lb->x,lb->y,lb->w,lb->h,lb->BorderColor);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7818      	ldrb	r0, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7859      	ldrb	r1, [r3, #1]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	78da      	ldrb	r2, [r3, #3]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	789c      	ldrb	r4, [r3, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	889b      	ldrh	r3, [r3, #4]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4623      	mov	r3, r4
 8003760:	f7ff ffae 	bl	80036c0 <ST7735_DrawRectangle>
	ST7735_DrawRectangle(lb->x+2,lb->y+2,lb->w-4,lb->h-4,lb->BorderColor);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	3302      	adds	r3, #2
 800376a:	b2d8      	uxtb	r0, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	3302      	adds	r3, #2
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	78db      	ldrb	r3, [r3, #3]
 8003778:	3b04      	subs	r3, #4
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	789b      	ldrb	r3, [r3, #2]
 8003780:	3b04      	subs	r3, #4
 8003782:	b2dc      	uxtb	r4, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	889b      	ldrh	r3, [r3, #4]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4623      	mov	r3, r4
 800378c:	f7ff ff98 	bl	80036c0 <ST7735_DrawRectangle>

	ST7735_AddrSet(lb->x+1,lb->y+1,lb->x+lb->w-1,lb->y+lb->h-1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	b298      	uxth	r0, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	b299      	uxth	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29c      	uxth	r4, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	789b      	ldrb	r3, [r3, #2]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4622      	mov	r2, r4
 80037ce:	f7ff fcc9 	bl	8003164 <ST7735_AddrSet>
	tmp = lb->w * lb->h;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	7892      	ldrb	r2, [r2, #2]
 80037dc:	b292      	uxth	r2, r2
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	827b      	strh	r3, [r7, #18]
	
	BCL = lb->BackgroundColor & 0xFF;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	88db      	ldrh	r3, [r3, #6]
 80037e8:	747b      	strb	r3, [r7, #17]
	BCH = (lb->BackgroundColor>>8) & 0xFF;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	88db      	ldrh	r3, [r3, #6]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	743b      	strb	r3, [r7, #16]
	SCL = lb->SelectedItemColor & 0xFF;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	895b      	ldrh	r3, [r3, #10]
 80037f8:	73fb      	strb	r3, [r7, #15]
	SCH = (lb->SelectedItemColor>>8) & 0xFF;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	895b      	ldrh	r3, [r3, #10]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	b29b      	uxth	r3, r3
 8003802:	73bb      	strb	r3, [r7, #14]
	A0_HIGH_ST7735;
 8003804:	2201      	movs	r2, #1
 8003806:	2108      	movs	r1, #8
 8003808:	4825      	ldr	r0, [pc, #148]	; (80038a0 <ST7735_ListBox_Draw+0x160>)
 800380a:	f000 fa03 	bl	8003c14 <HAL_GPIO_WritePin>
	
	for(i=0;i<lb->items_count;i++)
 800380e:	2300      	movs	r3, #0
 8003810:	82fb      	strh	r3, [r7, #22]
 8003812:	e03b      	b.n	800388c <ST7735_ListBox_Draw+0x14c>
	{
		if(lb->items[i].visible == 1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	8afb      	ldrh	r3, [r7, #22]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	791b      	ldrb	r3, [r3, #4]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d130      	bne.n	8003886 <ST7735_ListBox_Draw+0x146>
		{
			BGCol = lb->BackgroundColor;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	88db      	ldrh	r3, [r3, #6]
 8003828:	82bb      	strh	r3, [r7, #20]
			uint16_t ty = lb->y + (LINE_HEIGTH*i)+5;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	b29a      	uxth	r2, r3
 8003830:	8afb      	ldrh	r3, [r7, #22]
 8003832:	4619      	mov	r1, r3
 8003834:	0049      	lsls	r1, r1, #1
 8003836:	4419      	add	r1, r3
 8003838:	0089      	lsls	r1, r1, #2
 800383a:	440b      	add	r3, r1
 800383c:	b29b      	uxth	r3, r3
 800383e:	4413      	add	r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	3305      	adds	r3, #5
 8003844:	81bb      	strh	r3, [r7, #12]
			if(lb->items[i].selected)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	8afb      	ldrh	r3, [r7, #22]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	795b      	ldrb	r3, [r3, #5]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <ST7735_ListBox_Draw+0x11c>
			{
			 BGCol = lb->SelectedItemColor;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	895b      	ldrh	r3, [r3, #10]
 800385a:	82bb      	strh	r3, [r7, #20]
			}
			ST7735_DrawNString7x11(lb->x+9,ty,(uint8_t *)lb->items[i].text,lb->ItemTextColor,BGCol, FILENAME_SIZE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3309      	adds	r3, #9
 8003862:	b2d8      	uxtb	r0, r3
 8003864:	89bb      	ldrh	r3, [r7, #12]
 8003866:	b2d9      	uxtb	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	8afb      	ldrh	r3, [r7, #22]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	891c      	ldrh	r4, [r3, #8]
 8003878:	230d      	movs	r3, #13
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	8abb      	ldrh	r3, [r7, #20]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4623      	mov	r3, r4
 8003882:	f7ff fee7 	bl	8003654 <ST7735_DrawNString7x11>
	for(i=0;i<lb->items_count;i++)
 8003886:	8afb      	ldrh	r3, [r7, #22]
 8003888:	3301      	adds	r3, #1
 800388a:	82fb      	strh	r3, [r7, #22]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7c1b      	ldrb	r3, [r3, #16]
 8003890:	b29b      	uxth	r3, r3
 8003892:	8afa      	ldrh	r2, [r7, #22]
 8003894:	429a      	cmp	r2, r3
 8003896:	d3bd      	bcc.n	8003814 <ST7735_ListBox_Draw+0xd4>
		}
	}
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	40010800 	.word	0x40010800

080038a4 <ST7735_ListBox_StructInit>:
{
	return lb->items[lb->SelectedItemIndex];
}

void ST7735_ListBox_StructInit(ST7735_ListBox* lb,uint8_t x,uint8_t y,ST7735_ListBox_Item* items,uint8_t item_count)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	72fb      	strb	r3, [r7, #11]
 80038b2:	4613      	mov	r3, r2
 80038b4:	72bb      	strb	r3, [r7, #10]
	lb->items = items;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
	lb->items_count = item_count;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	7e3a      	ldrb	r2, [r7, #24]
 80038c0:	741a      	strb	r2, [r3, #16]
	lb->SelectedItemIndex = 0;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	745a      	strb	r2, [r3, #17]
	lb->w = WIDTH;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	229f      	movs	r2, #159	; 0x9f
 80038cc:	70da      	strb	r2, [r3, #3]
	lb->h = item_count *LINE_HEIGTH+7;
 80038ce:	7e3b      	ldrb	r3, [r7, #24]
 80038d0:	461a      	mov	r2, r3
 80038d2:	0052      	lsls	r2, r2, #1
 80038d4:	441a      	add	r2, r3
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	4413      	add	r3, r2
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3307      	adds	r3, #7
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	709a      	strb	r2, [r3, #2]
	lb->x = x;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	7afa      	ldrb	r2, [r7, #11]
 80038e8:	701a      	strb	r2, [r3, #0]
	lb->y = y;///////////////смещение вниз от верхнего края на 15 пикселей
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	7aba      	ldrb	r2, [r7, #10]
 80038ee:	705a      	strb	r2, [r3, #1]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_Init+0x28>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a07      	ldr	r2, [pc, #28]	; (8003924 <HAL_Init+0x28>)
 8003906:	f043 0310 	orr.w	r3, r3, #16
 800390a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800390c:	2003      	movs	r0, #3
 800390e:	f000 f929 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003912:	2000      	movs	r0, #0
 8003914:	f000 f808 	bl	8003928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003918:	f7fd fd9a 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40022000 	.word	0x40022000

08003928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_InitTick+0x54>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_InitTick+0x58>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f958 	bl	8003bfc <HAL_SYSTICK_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00e      	b.n	8003974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d80a      	bhi.n	8003972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800395c:	2200      	movs	r2, #0
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f000 f91e 	bl	8003ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003968:	4a06      	ldr	r2, [pc, #24]	; (8003984 <HAL_InitTick+0x5c>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	2000000c 	.word	0x2000000c
 8003980:	20000014 	.word	0x20000014
 8003984:	20000010 	.word	0x20000010

08003988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_IncTick+0x1c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_IncTick+0x20>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4413      	add	r3, r2
 8003998:	4a03      	ldr	r2, [pc, #12]	; (80039a8 <HAL_IncTick+0x20>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000014 	.word	0x20000014
 80039a8:	20000df4 	.word	0x20000df4

080039ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return uwTick;
 80039b0:	4b02      	ldr	r3, [pc, #8]	; (80039bc <HAL_GetTick+0x10>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000df4 	.word	0x20000df4

080039c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff fff0 	bl	80039ac <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d005      	beq.n	80039e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_Delay+0x40>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039e6:	bf00      	nop
 80039e8:	f7ff ffe0 	bl	80039ac <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d8f7      	bhi.n	80039e8 <HAL_Delay+0x28>
  {
  }
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000014 	.word	0x20000014

08003a04 <__NVIC_SetPriorityGrouping>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_GetPriorityGrouping>:
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_SetPriority>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db0a      	blt.n	8003a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <__NVIC_SetPriority+0x4c>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a90:	e00a      	b.n	8003aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <__NVIC_SetPriority+0x50>)
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	3b04      	subs	r3, #4
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	761a      	strb	r2, [r3, #24]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <NVIC_EncodePriority>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f1c3 0307 	rsb	r3, r3, #7
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf28      	it	cs
 8003ada:	2304      	movcs	r3, #4
 8003adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d902      	bls.n	8003aec <NVIC_EncodePriority+0x30>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3b03      	subs	r3, #3
 8003aea:	e000      	b.n	8003aee <NVIC_EncodePriority+0x32>
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	401a      	ands	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	43d9      	mvns	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	4313      	orrs	r3, r2
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff90 	bl	8003a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	d00f      	beq.n	8003b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d00c      	beq.n	8003b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d009      	beq.n	8003b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d006      	beq.n	8003b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d003      	beq.n	8003b92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003b8a:	2192      	movs	r1, #146	; 0x92
 8003b8c:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003b8e:	f7fd f937 	bl	8000e00 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff36 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08008f6c 	.word	0x08008f6c

08003ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d903      	bls.n	8003bc4 <HAL_NVIC_SetPriority+0x20>
 8003bbc:	21aa      	movs	r1, #170	; 0xaa
 8003bbe:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <HAL_NVIC_SetPriority+0x54>)
 8003bc0:	f7fd f91e 	bl	8000e00 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b0f      	cmp	r3, #15
 8003bc8:	d903      	bls.n	8003bd2 <HAL_NVIC_SetPriority+0x2e>
 8003bca:	21ab      	movs	r1, #171	; 0xab
 8003bcc:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <HAL_NVIC_SetPriority+0x54>)
 8003bce:	f7fd f917 	bl	8000e00 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd2:	f7ff ff3b 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f7ff ff6d 	bl	8003abc <NVIC_EncodePriority>
 8003be2:	4602      	mov	r2, r0
 8003be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff3c 	bl	8003a68 <__NVIC_SetPriority>
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08008f6c 	.word	0x08008f6c

08003bfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff8b 	bl	8003b20 <SysTick_Config>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_GPIO_WritePin+0x20>
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_GPIO_WritePin+0x2a>
 8003c34:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003c38:	480e      	ldr	r0, [pc, #56]	; (8003c74 <HAL_GPIO_WritePin+0x60>)
 8003c3a:	f7fd f8e1 	bl	8000e00 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003c3e:	787b      	ldrb	r3, [r7, #1]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_WritePin+0x40>
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d004      	beq.n	8003c54 <HAL_GPIO_WritePin+0x40>
 8003c4a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003c4e:	4809      	ldr	r0, [pc, #36]	; (8003c74 <HAL_GPIO_WritePin+0x60>)
 8003c50:	f7fd f8d6 	bl	8000e00 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	611a      	str	r2, [r3, #16]
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	08008fa8 	.word	0x08008fa8

08003c78 <LL_GPIO_SetPinMode>:
{
 8003c78:	b490      	push	{r4, r7}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0e1b      	lsrs	r3, r3, #24
 8003c8c:	4413      	add	r3, r2
 8003c8e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	210f      	movs	r1, #15
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
  return result;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	6023      	str	r3, [r4, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc90      	pop	{r4, r7}
 8003cda:	4770      	bx	lr

08003cdc <LL_GPIO_SetPinSpeed>:
{
 8003cdc:	b490      	push	{r4, r7}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	0e1b      	lsrs	r3, r3, #24
 8003cf0:	4413      	add	r3, r2
 8003cf2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	613b      	str	r3, [r7, #16]
  return result;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	401a      	ands	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	61bb      	str	r3, [r7, #24]
  return result;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	6023      	str	r3, [r4, #0]
}
 8003d36:	bf00      	nop
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc90      	pop	{r4, r7}
 8003d3e:	4770      	bx	lr

08003d40 <LL_GPIO_SetPinOutputType>:
{
 8003d40:	b490      	push	{r4, r7}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	0e1b      	lsrs	r3, r3, #24
 8003d54:	4413      	add	r3, r2
 8003d56:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	613b      	str	r3, [r7, #16]
  return result;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	2104      	movs	r1, #4
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	61bb      	str	r3, [r7, #24]
  return result;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	6023      	str	r3, [r4, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc90      	pop	{r4, r7}
 8003da2:	4770      	bx	lr

08003da4 <LL_GPIO_SetPinPull>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	613b      	str	r3, [r7, #16]
  return result;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	408b      	lsls	r3, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	60da      	str	r2, [r3, #12]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a62      	ldr	r2, [pc, #392]	; (8003f80 <LL_GPIO_Init+0x198>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <LL_GPIO_Init+0x3a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a61      	ldr	r2, [pc, #388]	; (8003f84 <LL_GPIO_Init+0x19c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <LL_GPIO_Init+0x3a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <LL_GPIO_Init+0x1a0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <LL_GPIO_Init+0x3a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a5f      	ldr	r2, [pc, #380]	; (8003f8c <LL_GPIO_Init+0x1a4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <LL_GPIO_Init+0x3a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <LL_GPIO_Init+0x1a8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <LL_GPIO_Init+0x3a>
 8003e1a:	21a3      	movs	r1, #163	; 0xa3
 8003e1c:	485d      	ldr	r0, [pc, #372]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003e1e:	f7fc ffef 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <LL_GPIO_Init+0x52>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <LL_GPIO_Init+0x5a>
 8003e3a:	21a4      	movs	r1, #164	; 0xa4
 8003e3c:	4855      	ldr	r0, [pc, #340]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003e3e:	f7fc ffdf 	bl	8000e00 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	60fb      	str	r3, [r7, #12]
  return result;
 8003e58:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003e62:	e080      	b.n	8003f66 <LL_GPIO_Init+0x17e>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003e64:	2201      	movs	r2, #1
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d076      	beq.n	8003f60 <LL_GPIO_Init+0x178>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	d806      	bhi.n	8003e86 <LL_GPIO_Init+0x9e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003e78:	f240 1201 	movw	r2, #257	; 0x101
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e008      	b.n	8003e98 <LL_GPIO_Init+0xb0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b08      	subs	r3, #8
 8003e8a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e96:	61bb      	str	r3, [r7, #24]
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <LL_GPIO_Init+0xe0>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d00f      	beq.n	8003ec8 <LL_GPIO_Init+0xe0>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d00b      	beq.n	8003ec8 <LL_GPIO_Init+0xe0>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d007      	beq.n	8003ec8 <LL_GPIO_Init+0xe0>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b09      	cmp	r3, #9
 8003ebe:	d003      	beq.n	8003ec8 <LL_GPIO_Init+0xe0>
 8003ec0:	21bd      	movs	r1, #189	; 0xbd
 8003ec2:	4834      	ldr	r0, [pc, #208]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003ec4:	f7fc ff9c 	bl	8000e00 <assert_failed>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <LL_GPIO_Init+0xf8>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <LL_GPIO_Init+0xf8>
 8003ed8:	21be      	movs	r1, #190	; 0xbe
 8003eda:	482e      	ldr	r0, [pc, #184]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003edc:	f7fc ff90 	bl	8000e00 <assert_failed>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff5b 	bl	8003da4 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff febe 	bl	8003c78 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d003      	beq.n	8003f0c <LL_GPIO_Init+0x124>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b09      	cmp	r3, #9
 8003f0a:	d129      	bne.n	8003f60 <LL_GPIO_Init+0x178>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d00b      	beq.n	8003f2c <LL_GPIO_Init+0x144>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <LL_GPIO_Init+0x144>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d003      	beq.n	8003f2c <LL_GPIO_Init+0x144>
 8003f24:	21c9      	movs	r1, #201	; 0xc9
 8003f26:	481b      	ldr	r0, [pc, #108]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003f28:	f7fc ff6a 	bl	8000e00 <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <LL_GPIO_Init+0x15c>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d003      	beq.n	8003f44 <LL_GPIO_Init+0x15c>
 8003f3c:	21ca      	movs	r1, #202	; 0xca
 8003f3e:	4815      	ldr	r0, [pc, #84]	; (8003f94 <LL_GPIO_Init+0x1ac>)
 8003f40:	f7fc ff5e 	bl	8000e00 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fec5 	bl	8003cdc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	69b9      	ldr	r1, [r7, #24]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fef0 	bl	8003d40 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f47f af78 	bne.w	8003e64 <LL_GPIO_Init+0x7c>
  }
  return (SUCCESS);
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40010800 	.word	0x40010800
 8003f84:	40010c00 	.word	0x40010c00
 8003f88:	40011000 	.word	0x40011000
 8003f8c:	40011400 	.word	0x40011400
 8003f90:	40011800 	.word	0x40011800
 8003f94:	08008fe4 	.word	0x08008fe4

08003f98 <LL_SPI_IsEnabled>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d101      	bne.n	8003fb0 <LL_SPI_IsEnabled+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_SPI_IsEnabled+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <LL_SPI_SetCRCPolynomial>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	611a      	str	r2, [r3, #16]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
	...

08003fdc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a77      	ldr	r2, [pc, #476]	; (80041cc <LL_SPI_Init+0x1f0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <LL_SPI_Init+0x26>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <LL_SPI_Init+0x1f4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <LL_SPI_Init+0x26>
 8003ffa:	21b7      	movs	r1, #183	; 0xb7
 8003ffc:	4875      	ldr	r0, [pc, #468]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8003ffe:	f7fc feff 	bl	8000e00 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <LL_SPI_Init+0x54>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d00d      	beq.n	8004030 <LL_SPI_Init+0x54>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	d008      	beq.n	8004030 <LL_SPI_Init+0x54>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004026:	d003      	beq.n	8004030 <LL_SPI_Init+0x54>
 8004028:	21ba      	movs	r1, #186	; 0xba
 800402a:	486a      	ldr	r0, [pc, #424]	; (80041d4 <LL_SPI_Init+0x1f8>)
 800402c:	f7fc fee8 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004038:	d007      	beq.n	800404a <LL_SPI_Init+0x6e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <LL_SPI_Init+0x6e>
 8004042:	21bb      	movs	r1, #187	; 0xbb
 8004044:	4863      	ldr	r0, [pc, #396]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8004046:	f7fc fedb 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <LL_SPI_Init+0x88>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d003      	beq.n	8004064 <LL_SPI_Init+0x88>
 800405c:	21bc      	movs	r1, #188	; 0xbc
 800405e:	485d      	ldr	r0, [pc, #372]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8004060:	f7fc fece 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <LL_SPI_Init+0xa0>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d003      	beq.n	800407c <LL_SPI_Init+0xa0>
 8004074:	21bd      	movs	r1, #189	; 0xbd
 8004076:	4857      	ldr	r0, [pc, #348]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8004078:	f7fc fec2 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <LL_SPI_Init+0xb8>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d003      	beq.n	8004094 <LL_SPI_Init+0xb8>
 800408c:	21be      	movs	r1, #190	; 0xbe
 800408e:	4851      	ldr	r0, [pc, #324]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8004090:	f7fc feb6 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d00c      	beq.n	80040b8 <LL_SPI_Init+0xdc>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <LL_SPI_Init+0xdc>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ae:	d003      	beq.n	80040b8 <LL_SPI_Init+0xdc>
 80040b0:	21bf      	movs	r1, #191	; 0xbf
 80040b2:	4848      	ldr	r0, [pc, #288]	; (80041d4 <LL_SPI_Init+0x1f8>)
 80040b4:	f7fc fea4 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01f      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d01b      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d017      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d013      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d00f      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b28      	cmp	r3, #40	; 0x28
 80040e6:	d00b      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d007      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b38      	cmp	r3, #56	; 0x38
 80040f6:	d003      	beq.n	8004100 <LL_SPI_Init+0x124>
 80040f8:	21c0      	movs	r1, #192	; 0xc0
 80040fa:	4836      	ldr	r0, [pc, #216]	; (80041d4 <LL_SPI_Init+0x1f8>)
 80040fc:	f7fc fe80 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d007      	beq.n	8004118 <LL_SPI_Init+0x13c>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <LL_SPI_Init+0x13c>
 8004110:	21c1      	movs	r1, #193	; 0xc1
 8004112:	4830      	ldr	r0, [pc, #192]	; (80041d4 <LL_SPI_Init+0x1f8>)
 8004114:	f7fc fe74 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d007      	beq.n	8004132 <LL_SPI_Init+0x156>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <LL_SPI_Init+0x156>
 800412a:	21c2      	movs	r1, #194	; 0xc2
 800412c:	4829      	ldr	r0, [pc, #164]	; (80041d4 <LL_SPI_Init+0x1f8>)
 800412e:	f7fc fe67 	bl	8000e00 <assert_failed>

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff30 	bl	8003f98 <LL_SPI_IsEnabled>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d141      	bne.n	80041c2 <LL_SPI_Init+0x1e6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004146:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	6852      	ldr	r2, [r2, #4]
 8004152:	4311      	orrs	r1, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	4311      	orrs	r1, r2
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	4311      	orrs	r1, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	6912      	ldr	r2, [r2, #16]
 8004164:	4311      	orrs	r1, r2
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	6952      	ldr	r2, [r2, #20]
 800416a:	4311      	orrs	r1, r2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	6992      	ldr	r2, [r2, #24]
 8004170:	4311      	orrs	r1, r2
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	69d2      	ldr	r2, [r2, #28]
 8004176:	4311      	orrs	r1, r2
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6a12      	ldr	r2, [r2, #32]
 800417c:	430a      	orrs	r2, r1
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 0204 	bic.w	r2, r3, #4
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	d10d      	bne.n	80041be <LL_SPI_Init+0x1e2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <LL_SPI_Init+0x1d6>
 80041aa:	21e5      	movs	r1, #229	; 0xe5
 80041ac:	4809      	ldr	r0, [pc, #36]	; (80041d4 <LL_SPI_Init+0x1f8>)
 80041ae:	f7fc fe27 	bl	8000e00 <assert_failed>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff feff 	bl	8003fbc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40013000 	.word	0x40013000
 80041d0:	40003800 	.word	0x40003800
 80041d4:	0800901c 	.word	0x0800901c

080041d8 <LL_TIM_SetPrescaler>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <LL_TIM_SetAutoReload>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <LL_TIM_SetRepetitionCounter>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <LL_TIM_OC_SetCompareCH1>:
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <LL_TIM_OC_SetCompareCH2>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_TIM_OC_SetCompareCH3>:
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <LL_TIM_OC_SetCompareCH4>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	615a      	str	r2, [r3, #20]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a48      	ldr	r2, [pc, #288]	; (80043dc <LL_TIM_Init+0x130>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d010      	beq.n	80042e0 <LL_TIM_Init+0x34>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d00c      	beq.n	80042e0 <LL_TIM_Init+0x34>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a45      	ldr	r2, [pc, #276]	; (80043e0 <LL_TIM_Init+0x134>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d008      	beq.n	80042e0 <LL_TIM_Init+0x34>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a44      	ldr	r2, [pc, #272]	; (80043e4 <LL_TIM_Init+0x138>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <LL_TIM_Init+0x34>
 80042d6:	f240 1149 	movw	r1, #329	; 0x149
 80042da:	4843      	ldr	r0, [pc, #268]	; (80043e8 <LL_TIM_Init+0x13c>)
 80042dc:	f7fc fd90 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d014      	beq.n	8004312 <LL_TIM_Init+0x66>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d010      	beq.n	8004312 <LL_TIM_Init+0x66>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d00c      	beq.n	8004312 <LL_TIM_Init+0x66>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d008      	beq.n	8004312 <LL_TIM_Init+0x66>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d004      	beq.n	8004312 <LL_TIM_Init+0x66>
 8004308:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800430c:	4836      	ldr	r0, [pc, #216]	; (80043e8 <LL_TIM_Init+0x13c>)
 800430e:	f7fc fd77 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <LL_TIM_Init+0x8c>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004322:	d009      	beq.n	8004338 <LL_TIM_Init+0x8c>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d004      	beq.n	8004338 <LL_TIM_Init+0x8c>
 800432e:	f240 114b 	movw	r1, #331	; 0x14b
 8004332:	482d      	ldr	r0, [pc, #180]	; (80043e8 <LL_TIM_Init+0x13c>)
 8004334:	f7fc fd64 	bl	8000e00 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <LL_TIM_Init+0x130>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <LL_TIM_Init+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <LL_TIM_Init+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <LL_TIM_Init+0x134>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <LL_TIM_Init+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <LL_TIM_Init+0x138>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d106      	bne.n	800436c <LL_TIM_Init+0xc0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <LL_TIM_Init+0x130>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00b      	beq.n	800438c <LL_TIM_Init+0xe0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d007      	beq.n	800438c <LL_TIM_Init+0xe0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <LL_TIM_Init+0x134>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <LL_TIM_Init+0xe0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <LL_TIM_Init+0x138>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d106      	bne.n	800439a <LL_TIM_Init+0xee>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ff23 	bl	80041f2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff10 	bl	80041d8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <LL_TIM_Init+0x130>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d105      	bne.n	80043cc <LL_TIM_Init+0x120>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff20 	bl	800420c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff5e 	bl	800428e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	08009054 	.word	0x08009054

080043ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d012      	beq.n	8004428 <LL_TIM_OC_Init+0x3c>
 8004402:	2b10      	cmp	r3, #16
 8004404:	d802      	bhi.n	800440c <LL_TIM_OC_Init+0x20>
 8004406:	2b01      	cmp	r3, #1
 8004408:	d007      	beq.n	800441a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800440a:	e022      	b.n	8004452 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800440c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004410:	d011      	beq.n	8004436 <LL_TIM_OC_Init+0x4a>
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d015      	beq.n	8004444 <LL_TIM_OC_Init+0x58>
      break;
 8004418:	e01b      	b.n	8004452 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f8cf 	bl	80045c0 <OC1Config>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e014      	b.n	8004452 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9be 	bl	80047ac <OC2Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]
      break;
 8004434:	e00d      	b.n	8004452 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fab1 	bl	80049a0 <OC3Config>
 800443e:	4603      	mov	r3, r0
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	e006      	b.n	8004452 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fba4 	bl	8004b94 <OC4Config>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]
      break;
 8004450:	bf00      	nop
  }

  return result;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <LL_TIM_BDTR_Init+0x15c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <LL_TIM_BDTR_Init+0x20>
 8004472:	f240 21bf 	movw	r1, #703	; 0x2bf
 8004476:	4851      	ldr	r0, [pc, #324]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 8004478:	f7fc fcc2 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <LL_TIM_BDTR_Init+0x3c>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d004      	beq.n	8004498 <LL_TIM_BDTR_Init+0x3c>
 800448e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8004492:	484a      	ldr	r0, [pc, #296]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 8004494:	f7fc fcb4 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <LL_TIM_BDTR_Init+0x58>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a8:	d004      	beq.n	80044b4 <LL_TIM_BDTR_Init+0x58>
 80044aa:	f240 21c1 	movw	r1, #705	; 0x2c1
 80044ae:	4843      	ldr	r0, [pc, #268]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 80044b0:	f7fc fca6 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <LL_TIM_BDTR_Init+0x88>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d00e      	beq.n	80044e4 <LL_TIM_BDTR_Init+0x88>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ce:	d009      	beq.n	80044e4 <LL_TIM_BDTR_Init+0x88>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	d004      	beq.n	80044e4 <LL_TIM_BDTR_Init+0x88>
 80044da:	f240 21c2 	movw	r1, #706	; 0x2c2
 80044de:	4837      	ldr	r0, [pc, #220]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 80044e0:	f7fc fc8e 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	89db      	ldrh	r3, [r3, #14]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <LL_TIM_BDTR_Init+0xa4>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	89db      	ldrh	r3, [r3, #14]
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f4:	d004      	beq.n	8004500 <LL_TIM_BDTR_Init+0xa4>
 80044f6:	f240 21c3 	movw	r1, #707	; 0x2c3
 80044fa:	4830      	ldr	r0, [pc, #192]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 80044fc:	f7fc fc80 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <LL_TIM_BDTR_Init+0xc0>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004510:	d004      	beq.n	800451c <LL_TIM_BDTR_Init+0xc0>
 8004512:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8004516:	4829      	ldr	r0, [pc, #164]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 8004518:	f7fc fc72 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <LL_TIM_BDTR_Init+0xdc>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d004      	beq.n	8004538 <LL_TIM_BDTR_Init+0xdc>
 800452e:	f240 21c5 	movw	r1, #709	; 0x2c5
 8004532:	4822      	ldr	r0, [pc, #136]	; (80045bc <LL_TIM_BDTR_Init+0x160>)
 8004534:	f7fc fc64 	bl	8000e00 <assert_failed>

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	7b12      	ldrb	r2, [r2, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	89d2      	ldrh	r2, [r2, #14]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	08009054 	.word	0x08009054

080045c0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a73      	ldr	r2, [pc, #460]	; (800479c <OC1Config+0x1dc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d010      	beq.n	80045f4 <OC1Config+0x34>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d00c      	beq.n	80045f4 <OC1Config+0x34>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a70      	ldr	r2, [pc, #448]	; (80047a0 <OC1Config+0x1e0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d008      	beq.n	80045f4 <OC1Config+0x34>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a6f      	ldr	r2, [pc, #444]	; (80047a4 <OC1Config+0x1e4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <OC1Config+0x34>
 80045ea:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80045ee:	486e      	ldr	r0, [pc, #440]	; (80047a8 <OC1Config+0x1e8>)
 80045f0:	f7fc fc06 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <OC1Config+0x7e>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b10      	cmp	r3, #16
 8004602:	d01c      	beq.n	800463e <OC1Config+0x7e>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b20      	cmp	r3, #32
 800460a:	d018      	beq.n	800463e <OC1Config+0x7e>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d014      	beq.n	800463e <OC1Config+0x7e>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d010      	beq.n	800463e <OC1Config+0x7e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d00c      	beq.n	800463e <OC1Config+0x7e>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d008      	beq.n	800463e <OC1Config+0x7e>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b70      	cmp	r3, #112	; 0x70
 8004632:	d004      	beq.n	800463e <OC1Config+0x7e>
 8004634:	f240 21f5 	movw	r1, #757	; 0x2f5
 8004638:	485b      	ldr	r0, [pc, #364]	; (80047a8 <OC1Config+0x1e8>)
 800463a:	f7fc fbe1 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <OC1Config+0x98>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d004      	beq.n	8004658 <OC1Config+0x98>
 800464e:	f240 21f6 	movw	r1, #758	; 0x2f6
 8004652:	4855      	ldr	r0, [pc, #340]	; (80047a8 <OC1Config+0x1e8>)
 8004654:	f7fc fbd4 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <OC1Config+0xb2>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d004      	beq.n	8004672 <OC1Config+0xb2>
 8004668:	f240 21f7 	movw	r1, #759	; 0x2f7
 800466c:	484e      	ldr	r0, [pc, #312]	; (80047a8 <OC1Config+0x1e8>)
 800466e:	f7fc fbc7 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <OC1Config+0xcc>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d004      	beq.n	800468c <OC1Config+0xcc>
 8004682:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8004686:	4848      	ldr	r0, [pc, #288]	; (80047a8 <OC1Config+0x1e8>)
 8004688:	f7fc fbba 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <OC1Config+0xe6>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d004      	beq.n	80046a6 <OC1Config+0xe6>
 800469c:	f240 21f9 	movw	r1, #761	; 0x2f9
 80046a0:	4841      	ldr	r0, [pc, #260]	; (80047a8 <OC1Config+0x1e8>)
 80046a2:	f7fc fbad 	bl	8000e00 <assert_failed>

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0201 	bic.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 0202 	bic.w	r2, r3, #2
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <OC1Config+0x1dc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d13a      	bne.n	8004774 <OC1Config+0x1b4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <OC1Config+0x15a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d004      	beq.n	800471a <OC1Config+0x15a>
 8004710:	f240 3115 	movw	r1, #789	; 0x315
 8004714:	4824      	ldr	r0, [pc, #144]	; (80047a8 <OC1Config+0x1e8>)
 8004716:	f7fc fb73 	bl	8000e00 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <OC1Config+0x176>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d004      	beq.n	8004736 <OC1Config+0x176>
 800472c:	f240 3116 	movw	r1, #790	; 0x316
 8004730:	481d      	ldr	r0, [pc, #116]	; (80047a8 <OC1Config+0x1e8>)
 8004732:	f7fc fb65 	bl	8000e00 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 0208 	bic.w	r2, r3, #8
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0204 	bic.w	r2, r3, #4
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fd4d 	bl	8004226 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	08009054 	.word	0x08009054

080047ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(TIMx));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a75      	ldr	r2, [pc, #468]	; (8004990 <OC2Config+0x1e4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d010      	beq.n	80047e0 <OC2Config+0x34>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d00c      	beq.n	80047e0 <OC2Config+0x34>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a72      	ldr	r2, [pc, #456]	; (8004994 <OC2Config+0x1e8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d008      	beq.n	80047e0 <OC2Config+0x34>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a71      	ldr	r2, [pc, #452]	; (8004998 <OC2Config+0x1ec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <OC2Config+0x34>
 80047d6:	f240 3143 	movw	r1, #835	; 0x343
 80047da:	4870      	ldr	r0, [pc, #448]	; (800499c <OC2Config+0x1f0>)
 80047dc:	f7fc fb10 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <OC2Config+0x7e>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d01c      	beq.n	800482a <OC2Config+0x7e>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d018      	beq.n	800482a <OC2Config+0x7e>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d014      	beq.n	800482a <OC2Config+0x7e>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d010      	beq.n	800482a <OC2Config+0x7e>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d00c      	beq.n	800482a <OC2Config+0x7e>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d008      	beq.n	800482a <OC2Config+0x7e>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b70      	cmp	r3, #112	; 0x70
 800481e:	d004      	beq.n	800482a <OC2Config+0x7e>
 8004820:	f44f 7151 	mov.w	r1, #836	; 0x344
 8004824:	485d      	ldr	r0, [pc, #372]	; (800499c <OC2Config+0x1f0>)
 8004826:	f7fc faeb 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <OC2Config+0x98>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d004      	beq.n	8004844 <OC2Config+0x98>
 800483a:	f240 3145 	movw	r1, #837	; 0x345
 800483e:	4857      	ldr	r0, [pc, #348]	; (800499c <OC2Config+0x1f0>)
 8004840:	f7fc fade 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <OC2Config+0xb2>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d004      	beq.n	800485e <OC2Config+0xb2>
 8004854:	f240 3146 	movw	r1, #838	; 0x346
 8004858:	4850      	ldr	r0, [pc, #320]	; (800499c <OC2Config+0x1f0>)
 800485a:	f7fc fad1 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <OC2Config+0xcc>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d004      	beq.n	8004878 <OC2Config+0xcc>
 800486e:	f240 3147 	movw	r1, #839	; 0x347
 8004872:	484a      	ldr	r0, [pc, #296]	; (800499c <OC2Config+0x1f0>)
 8004874:	f7fc fac4 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <OC2Config+0xe6>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d004      	beq.n	8004892 <OC2Config+0xe6>
 8004888:	f44f 7152 	mov.w	r1, #840	; 0x348
 800488c:	4843      	ldr	r0, [pc, #268]	; (800499c <OC2Config+0x1f0>)
 800488e:	f7fc fab7 	bl	8000e00 <assert_failed>

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0220 	bic.w	r2, r3, #32
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a29      	ldr	r2, [pc, #164]	; (8004990 <OC2Config+0x1e4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d13b      	bne.n	8004968 <OC2Config+0x1bc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <OC2Config+0x160>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d004      	beq.n	800490c <OC2Config+0x160>
 8004902:	f44f 7159 	mov.w	r1, #868	; 0x364
 8004906:	4825      	ldr	r0, [pc, #148]	; (800499c <OC2Config+0x1f0>)
 8004908:	f7fc fa7a 	bl	8000e00 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <OC2Config+0x17c>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491c:	d004      	beq.n	8004928 <OC2Config+0x17c>
 800491e:	f240 3165 	movw	r1, #869	; 0x365
 8004922:	481e      	ldr	r0, [pc, #120]	; (800499c <OC2Config+0x1f0>)
 8004924:	f7fc fa6c 	bl	8000e00 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fc60 	bl	8004240 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	08009054 	.word	0x08009054

080049a0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC3_INSTANCE(TIMx));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a75      	ldr	r2, [pc, #468]	; (8004b84 <OC3Config+0x1e4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d010      	beq.n	80049d4 <OC3Config+0x34>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d00c      	beq.n	80049d4 <OC3Config+0x34>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a72      	ldr	r2, [pc, #456]	; (8004b88 <OC3Config+0x1e8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d008      	beq.n	80049d4 <OC3Config+0x34>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a71      	ldr	r2, [pc, #452]	; (8004b8c <OC3Config+0x1ec>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <OC3Config+0x34>
 80049ca:	f240 3192 	movw	r1, #914	; 0x392
 80049ce:	4870      	ldr	r0, [pc, #448]	; (8004b90 <OC3Config+0x1f0>)
 80049d0:	f7fc fa16 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <OC3Config+0x7e>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d01c      	beq.n	8004a1e <OC3Config+0x7e>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d018      	beq.n	8004a1e <OC3Config+0x7e>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d014      	beq.n	8004a1e <OC3Config+0x7e>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d010      	beq.n	8004a1e <OC3Config+0x7e>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b50      	cmp	r3, #80	; 0x50
 8004a02:	d00c      	beq.n	8004a1e <OC3Config+0x7e>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d008      	beq.n	8004a1e <OC3Config+0x7e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b70      	cmp	r3, #112	; 0x70
 8004a12:	d004      	beq.n	8004a1e <OC3Config+0x7e>
 8004a14:	f240 3193 	movw	r1, #915	; 0x393
 8004a18:	485d      	ldr	r0, [pc, #372]	; (8004b90 <OC3Config+0x1f0>)
 8004a1a:	f7fc f9f1 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <OC3Config+0x98>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d004      	beq.n	8004a38 <OC3Config+0x98>
 8004a2e:	f44f 7165 	mov.w	r1, #916	; 0x394
 8004a32:	4857      	ldr	r0, [pc, #348]	; (8004b90 <OC3Config+0x1f0>)
 8004a34:	f7fc f9e4 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <OC3Config+0xb2>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d004      	beq.n	8004a52 <OC3Config+0xb2>
 8004a48:	f240 3195 	movw	r1, #917	; 0x395
 8004a4c:	4850      	ldr	r0, [pc, #320]	; (8004b90 <OC3Config+0x1f0>)
 8004a4e:	f7fc f9d7 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <OC3Config+0xcc>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d004      	beq.n	8004a6c <OC3Config+0xcc>
 8004a62:	f240 3196 	movw	r1, #918	; 0x396
 8004a66:	484a      	ldr	r0, [pc, #296]	; (8004b90 <OC3Config+0x1f0>)
 8004a68:	f7fc f9ca 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <OC3Config+0xe6>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d004      	beq.n	8004a86 <OC3Config+0xe6>
 8004a7c:	f240 3197 	movw	r1, #919	; 0x397
 8004a80:	4843      	ldr	r0, [pc, #268]	; (8004b90 <OC3Config+0x1f0>)
 8004a82:	f7fc f9bd 	bl	8000e00 <assert_failed>

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <OC3Config+0x1e4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d13b      	bne.n	8004b5a <OC3Config+0x1ba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <OC3Config+0x15e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af2:	d004      	beq.n	8004afe <OC3Config+0x15e>
 8004af4:	f240 31b3 	movw	r1, #947	; 0x3b3
 8004af8:	4825      	ldr	r0, [pc, #148]	; (8004b90 <OC3Config+0x1f0>)
 8004afa:	f7fc f981 	bl	8000e00 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <OC3Config+0x17a>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	d004      	beq.n	8004b1a <OC3Config+0x17a>
 8004b10:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8004b14:	481e      	ldr	r0, [pc, #120]	; (8004b90 <OC3Config+0x1f0>)
 8004b16:	f7fc f973 	bl	8000e00 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	015b      	lsls	r3, r3, #5
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fb74 	bl	800425a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	08009054 	.word	0x08009054

08004b94 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <OC4Config+0x1b4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d010      	beq.n	8004bc8 <OC4Config+0x34>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d00c      	beq.n	8004bc8 <OC4Config+0x34>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a66      	ldr	r2, [pc, #408]	; (8004d4c <OC4Config+0x1b8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d008      	beq.n	8004bc8 <OC4Config+0x34>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <OC4Config+0x1bc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <OC4Config+0x34>
 8004bbe:	f240 31e1 	movw	r1, #993	; 0x3e1
 8004bc2:	4864      	ldr	r0, [pc, #400]	; (8004d54 <OC4Config+0x1c0>)
 8004bc4:	f7fc f91c 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <OC4Config+0x7e>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d01c      	beq.n	8004c12 <OC4Config+0x7e>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d018      	beq.n	8004c12 <OC4Config+0x7e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d014      	beq.n	8004c12 <OC4Config+0x7e>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d010      	beq.n	8004c12 <OC4Config+0x7e>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b50      	cmp	r3, #80	; 0x50
 8004bf6:	d00c      	beq.n	8004c12 <OC4Config+0x7e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d008      	beq.n	8004c12 <OC4Config+0x7e>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b70      	cmp	r3, #112	; 0x70
 8004c06:	d004      	beq.n	8004c12 <OC4Config+0x7e>
 8004c08:	f240 31e2 	movw	r1, #994	; 0x3e2
 8004c0c:	4851      	ldr	r0, [pc, #324]	; (8004d54 <OC4Config+0x1c0>)
 8004c0e:	f7fc f8f7 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <OC4Config+0x98>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d004      	beq.n	8004c2c <OC4Config+0x98>
 8004c22:	f240 31e3 	movw	r1, #995	; 0x3e3
 8004c26:	484b      	ldr	r0, [pc, #300]	; (8004d54 <OC4Config+0x1c0>)
 8004c28:	f7fc f8ea 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <OC4Config+0xb2>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d004      	beq.n	8004c46 <OC4Config+0xb2>
 8004c3c:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8004c40:	4844      	ldr	r0, [pc, #272]	; (8004d54 <OC4Config+0x1c0>)
 8004c42:	f7fc f8dd 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <OC4Config+0xcc>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d004      	beq.n	8004c60 <OC4Config+0xcc>
 8004c56:	f240 31e5 	movw	r1, #997	; 0x3e5
 8004c5a:	483e      	ldr	r0, [pc, #248]	; (8004d54 <OC4Config+0x1c0>)
 8004c5c:	f7fc f8d0 	bl	8000e00 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <OC4Config+0xe6>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d004      	beq.n	8004c7a <OC4Config+0xe6>
 8004c70:	f240 31e6 	movw	r1, #998	; 0x3e6
 8004c74:	4837      	ldr	r0, [pc, #220]	; (8004d54 <OC4Config+0x1c0>)
 8004c76:	f7fc f8c3 	bl	8000e00 <assert_failed>

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	031b      	lsls	r3, r3, #12
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <OC4Config+0x1b4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d123      	bne.n	8004d20 <OC4Config+0x18c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <OC4Config+0x160>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce8:	d004      	beq.n	8004cf4 <OC4Config+0x160>
 8004cea:	f240 4102 	movw	r1, #1026	; 0x402
 8004cee:	4819      	ldr	r0, [pc, #100]	; (8004d54 <OC4Config+0x1c0>)
 8004cf0:	f7fc f886 	bl	8000e00 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <OC4Config+0x17c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d04:	d004      	beq.n	8004d10 <OC4Config+0x17c>
 8004d06:	f240 4103 	movw	r1, #1027	; 0x403
 8004d0a:	4812      	ldr	r0, [pc, #72]	; (8004d54 <OC4Config+0x1c0>)
 8004d0c:	f7fc f878 	bl	8000e00 <assert_failed>

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	019b      	lsls	r3, r3, #6
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fa9e 	bl	8004274 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	08009054 	.word	0x08009054

08004d58 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004d60:	4a03      	ldr	r2, [pc, #12]	; (8004d70 <LL_SetSystemCoreClock+0x18>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	2000000c 	.word	0x2000000c

08004d74 <MX_FATFS_Init>:
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path);

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d78:	4904      	ldr	r1, [pc, #16]	; (8004d8c <MX_FATFS_Init+0x18>)
 8004d7a:	4805      	ldr	r0, [pc, #20]	; (8004d90 <MX_FATFS_Init+0x1c>)
 8004d7c:	f003 fbd2 	bl	8008524 <FATFS_LinkDriver>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <MX_FATFS_Init+0x20>)
 8004d86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000df8 	.word	0x20000df8
 8004d90:	20000018 	.word	0x20000018
 8004d94:	20000dfc 	.word	0x20000dfc

08004d98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
	...

08004da8 <FS_GetFileList>:

/* USER CODE BEGIN Application */

uint8_t FS_GetFileList(typeEnv *Env)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	6018      	str	r0, [r3, #0]
	DIR dir;
	FRESULT fs_result;
	FILINFO fs_info;
	char* path ="";
 8004db4:	4b51      	ldr	r3, [pc, #324]	; (8004efc <FS_GetFileList+0x154>)
 8004db6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t cnt_file=0, indx=0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t start_list=0, end_list=0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	fs_result = f_opendir (&dir, path);
 8004dd2:	f107 0320 	add.w	r3, r7, #32
 8004dd6:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f003 fa6a 	bl	80082b4 <f_opendir>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if(fs_result != FR_OK)
 8004de6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <FS_GetFileList+0x4a>
	{ return 1; }
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07e      	b.n	8004ef0 <FS_GetFileList+0x148>

	start_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX ;
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	end_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX + (ITEM_ON_PAGE_MAX);
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	memset( &(Env->Menu.FileList[0][0]), 0, sizeof(Env->Menu.FileList));
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2275      	movs	r2, #117	; 0x75
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 fbdc 	bl	80085e0 <memset>

	for (;;)
	{
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 8004e28:	f107 0208 	add.w	r2, r7, #8
 8004e2c:	f107 0320 	add.w	r3, r7, #32
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fae5 	bl	8008402 <f_readdir>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (fs_result != FR_OK || fs_info.fname[0] == 0 ){ break;} /* Останов цикла при ошибке или при достижении конца списка директории */
 8004e3e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d14e      	bne.n	8004ee4 <FS_GetFileList+0x13c>
 8004e46:	f107 0308 	add.w	r3, r7, #8
 8004e4a:	7a5b      	ldrb	r3, [r3, #9]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d049      	beq.n	8004ee4 <FS_GetFileList+0x13c>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	7a5b      	ldrb	r3, [r3, #9]
 8004e56:	2b2e      	cmp	r3, #46	; 0x2e
 8004e58:	d040      	beq.n	8004edc <FS_GetFileList+0x134>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	7a1b      	ldrb	r3, [r3, #8]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d13b      	bne.n	8004ee0 <FS_GetFileList+0x138>
		else
		{   /* Это файл. Заносим название в список файлов */
			if(cnt_file >= start_list && cnt_file < end_list)
 8004e68:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004e6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d327      	bcc.n	8004ec4 <FS_GetFileList+0x11c>
 8004e74:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004e78:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d221      	bcs.n	8004ec4 <FS_GetFileList+0x11c>
			{
				strncpy( &(Env->Menu.FileList[indx][0]),  fs_info.fname, strlen(fs_info.fname));
 8004e80:	1d39      	adds	r1, r7, #4
 8004e82:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	680a      	ldr	r2, [r1, #0]
 8004e92:	18d4      	adds	r4, r2, r3
 8004e94:	f107 0308 	add.w	r3, r7, #8
 8004e98:	3309      	adds	r3, #9
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb f956 	bl	800014c <strlen>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f107 0308 	add.w	r3, r7, #8
 8004ea6:	3309      	adds	r3, #9
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f003 fbc8 	bl	8008640 <strncpy>
				indx++;
 8004eb0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				Env->Menu.NmbrOnPageFiles=indx;
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004ec2:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			cnt_file++;
 8004ec4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		}
		Env->Menu.NmbrAllFiles=cnt_file;
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004eda:	e7a5      	b.n	8004e28 <FS_GetFileList+0x80>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8004edc:	bf00      	nop
 8004ede:	e7a3      	b.n	8004e28 <FS_GetFileList+0x80>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8004ee0:	bf00      	nop
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 8004ee2:	e7a1      	b.n	8004e28 <FS_GetFileList+0x80>
	}

	f_closedir(&dir);
 8004ee4:	f107 0320 	add.w	r3, r7, #32
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f003 fa65 	bl	80083b8 <f_closedir>
	return 0;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd90      	pop	{r4, r7, pc}
 8004efa:	bf00      	nop
 8004efc:	0800908c 	.word	0x0800908c

08004f00 <FS_ReadCSVFile>:
 *
 * Чтение файла универсальной настройки
 * вызывается в   Menu(typeEnv *Env)
 *
 ************************************ */
uint8_t FS_ReadCSVFile(typeEnv *Env){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	1d3b      	adds	r3, r7, #4
 8004f0a:	6018      	str	r0, [r3, #0]
	char *FileName = (*Env).FileNameForTest;
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8004f14:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	char *p_start=0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	char *p_end=0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	FIL fs_file;
	FRESULT fs_result=0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
	uint32_t byteRead=0;
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

	fs_result = f_open(&fs_file, FileName, FA_READ);
 8004f32:	f107 030c 	add.w	r3, r7, #12
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f002 fd61 	bl	8007a04 <f_open>
 8004f42:	4603      	mov	r3, r0
 8004f44:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
	if(fs_result != FR_OK)
 8004f48:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <FS_ReadCSVFile+0x76>
		{
		memset((*Env).Status , 0, sizeof((*Env).Status ));
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8004f58:	2218      	movs	r2, #24
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f003 fb3f 	bl	80085e0 <memset>
		strcpy((*Env).Status , 'FS_ERR_OPEN_FILE');// конец файла
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8004f6a:	492d      	ldr	r1, [pc, #180]	; (8005020 <FS_ReadCSVFile+0x120>)
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f003 fb5f 	bl	8008630 <strcpy>
		return 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e04e      	b.n	8005014 <FS_ReadCSVFile+0x114>
		}
	// читаем всесь файл в буфер
	fs_result = f_read(&fs_file, (*Env).CSVBuf, sizeof((*Env).CSVBuf), &byteRead);
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f203 71f4 	addw	r1, r3, #2036	; 0x7f4
 8004f7e:	f107 0308 	add.w	r3, r7, #8
 8004f82:	f107 000c 	add.w	r0, r7, #12
 8004f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f8a:	f002 ff46 	bl	8007e1a <f_read>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
	f_close(&fs_file);
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f003 f963 	bl	8008264 <f_close>
	if(fs_result != FR_OK)
 8004f9e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d012      	beq.n	8004fcc <FS_ReadCSVFile+0xcc>
		{
		memset((*Env).Status , 0, sizeof((*Env).Status ));
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8004fae:	2218      	movs	r2, #24
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f003 fb14 	bl	80085e0 <memset>
		strcpy((*Env).Status , 'FS_ERR_READ_FILE');
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8004fc0:	4917      	ldr	r1, [pc, #92]	; (8005020 <FS_ReadCSVFile+0x120>)
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f003 fb34 	bl	8008630 <strcpy>
		return 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e023      	b.n	8005014 <FS_ReadCSVFile+0x114>
		}

	if(byteRead !=FILE_SIZE)
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd6:	d008      	beq.n	8004fea <FS_ReadCSVFile+0xea>
		{
			(*Env).RealDataSize = byteRead;
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f883 2ce8 	strb.w	r2, [r3, #3304]	; 0xce8
 8004fe8:	e010      	b.n	800500c <FS_ReadCSVFile+0x10c>
		}
	else{
		memset((*Env).Status , 0, sizeof((*Env).Status ));
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8004ff2:	2218      	movs	r2, #24
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f003 faf2 	bl	80085e0 <memset>
		strcpy((*Env).Status , 'FS_EOF');// конец файла
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 8005004:	4907      	ldr	r1, [pc, #28]	; (8005024 <FS_ReadCSVFile+0x124>)
 8005006:	4618      	mov	r0, r3
 8005008:	f003 fb12 	bl	8008630 <strcpy>
	}
	ParseCSVBuf(Env);
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	f7fb f8ce 	bl	80001b0 <ParseCSVBuf>
}
 8005014:	4618      	mov	r0, r3
 8005016:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	46494c45 	.word	0x46494c45
 8005024:	5f454f46 	.word	0x5f454f46

08005028 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fa05 	bl	8005444 <USER_SPI_initialize>
 800503a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fad7 	bl	8005604 <USER_SPI_status>
 8005056:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005070:	7bf8      	ldrb	r0, [r7, #15]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	f000 fad8 	bl	800562c <USER_SPI_read>
 800507c:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8005096:	7bf8      	ldrb	r0, [r7, #15]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	f000 fb2b 	bl	80056f8 <USER_SPI_write>
 80050a2:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	603a      	str	r2, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
 80050b8:	460b      	mov	r3, r1
 80050ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80050bc:	79b9      	ldrb	r1, [r7, #6]
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fb94 	bl	80057f0 <USER_SPI_ioctl>
 80050c8:	4603      	mov	r3, r0
//   n res;
  /* USER CODE END IOCTL */
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <LL_SPI_SetBaudRatePrescaler>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <LL_GPIO_SetOutputPin>:
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29a      	uxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <LL_GPIO_ResetOutputPin>:
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	615a      	str	r2, [r3, #20]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
	...

08005134 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800513c:	f7fe fc36 	bl	80039ac <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <SPI_Timer_On+0x20>)
 8005144:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <SPI_Timer_On+0x24>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6013      	str	r3, [r2, #0]
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000125c 	.word	0x2000125c
 8005158:	20001260 	.word	0x20001260

0800515c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005160:	f7fe fc24 	bl	80039ac <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <SPI_Timer_Status+0x24>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SPI_Timer_Status+0x28>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	bf34      	ite	cc
 8005174:	2301      	movcc	r3, #1
 8005176:	2300      	movcs	r3, #0
 8005178:	b2db      	uxtb	r3, r3
}
 800517a:	4618      	mov	r0, r3
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	2000125c 	.word	0x2000125c
 8005184:	20001260 	.word	0x20001260

08005188 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
  //  HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
	rxDat = LL_SPI_TransmitReceive(SPI1, dat);
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	4619      	mov	r1, r3
 8005196:	4805      	ldr	r0, [pc, #20]	; (80051ac <xchg_spi+0x24>)
 8005198:	f7fc f938 	bl	800140c <LL_SPI_TransmitReceive>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
	return rxDat;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40013000 	.word	0x40013000

080051b0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e00a      	b.n	80051d6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	18d4      	adds	r4, r2, r3
 80051c6:	20ff      	movs	r0, #255	; 0xff
 80051c8:	f7ff ffde 	bl	8005188 <xchg_spi>
 80051cc:	4603      	mov	r3, r0
 80051ce:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d3f0      	bcc.n	80051c0 <rcvr_spi_multi+0x10>
	}
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd90      	pop	{r4, r7, pc}

080051e6 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e009      	b.n	800520a <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ffc2 	bl	8005188 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3f1      	bcc.n	80051f6 <xmit_spi_multi+0x10>
	}
}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005222:	f7fe fbc3 	bl	80039ac <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800522c:	20ff      	movs	r0, #255	; 0xff
 800522e:	f7ff ffab 	bl	8005188 <xchg_spi>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2bff      	cmp	r3, #255	; 0xff
 800523a:	d007      	beq.n	800524c <wait_ready+0x32>
 800523c:	f7fe fbb6 	bl	80039ac <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	429a      	cmp	r2, r3
 800524a:	d8ef      	bhi.n	800522c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2bff      	cmp	r3, #255	; 0xff
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005264:	f240 2102 	movw	r1, #514	; 0x202
 8005268:	4803      	ldr	r0, [pc, #12]	; (8005278 <despiselect+0x18>)
 800526a:	f7ff ff44 	bl	80050f6 <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800526e:	20ff      	movs	r0, #255	; 0xff
 8005270:	f7ff ff8a 	bl	8005188 <xchg_spi>

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010c00 	.word	0x40010c00

0800527c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005280:	f240 2102 	movw	r1, #514	; 0x202
 8005284:	4809      	ldr	r0, [pc, #36]	; (80052ac <spiselect+0x30>)
 8005286:	f7ff ff45 	bl	8005114 <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800528a:	20ff      	movs	r0, #255	; 0xff
 800528c:	f7ff ff7c 	bl	8005188 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005294:	f7ff ffc1 	bl	800521a <wait_ready>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <spiselect+0x26>
 800529e:	2301      	movs	r3, #1
 80052a0:	e002      	b.n	80052a8 <spiselect+0x2c>

	despiselect();
 80052a2:	f7ff ffdd 	bl	8005260 <despiselect>
	return 0;	/* Timeout */
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40010c00 	.word	0x40010c00

080052b0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80052ba:	20c8      	movs	r0, #200	; 0xc8
 80052bc:	f7ff ff3a 	bl	8005134 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80052c0:	20ff      	movs	r0, #255	; 0xff
 80052c2:	f7ff ff61 	bl	8005188 <xchg_spi>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2bff      	cmp	r3, #255	; 0xff
 80052ce:	d104      	bne.n	80052da <rcvr_datablock+0x2a>
 80052d0:	f7ff ff44 	bl	800515c <SPI_Timer_Status>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f2      	bne.n	80052c0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2bfe      	cmp	r3, #254	; 0xfe
 80052de:	d001      	beq.n	80052e4 <rcvr_datablock+0x34>
 80052e0:	2300      	movs	r3, #0
 80052e2:	e00a      	b.n	80052fa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff ff62 	bl	80051b0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80052ec:	20ff      	movs	r0, #255	; 0xff
 80052ee:	f7ff ff4b 	bl	8005188 <xchg_spi>
 80052f2:	20ff      	movs	r0, #255	; 0xff
 80052f4:	f7ff ff48 	bl	8005188 <xchg_spi>

	return 1;						/* Function succeeded */
 80052f8:	2301      	movs	r3, #1
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800530e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005312:	f7ff ff82 	bl	800521a <wait_ready>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <xmit_datablock+0x1e>
 800531c:	2300      	movs	r3, #0
 800531e:	e01e      	b.n	800535e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff30 	bl	8005188 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2bfd      	cmp	r3, #253	; 0xfd
 800532c:	d016      	beq.n	800535c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800532e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ff57 	bl	80051e6 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005338:	20ff      	movs	r0, #255	; 0xff
 800533a:	f7ff ff25 	bl	8005188 <xchg_spi>
 800533e:	20ff      	movs	r0, #255	; 0xff
 8005340:	f7ff ff22 	bl	8005188 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005344:	20ff      	movs	r0, #255	; 0xff
 8005346:	f7ff ff1f 	bl	8005188 <xchg_spi>
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2b05      	cmp	r3, #5
 8005356:	d001      	beq.n	800535c <xmit_datablock+0x5a>
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <xmit_datablock+0x5c>
	}
	return 1;
 800535c:	2301      	movs	r3, #1
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	4603      	mov	r3, r0
 800536e:	6039      	str	r1, [r7, #0]
 8005370:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	2b00      	cmp	r3, #0
 8005378:	da0e      	bge.n	8005398 <send_cmd+0x32>
		cmd &= 0x7F;
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005380:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005382:	2100      	movs	r1, #0
 8005384:	2037      	movs	r0, #55	; 0x37
 8005386:	f7ff ffee 	bl	8005366 <send_cmd>
 800538a:	4603      	mov	r3, r0
 800538c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d901      	bls.n	8005398 <send_cmd+0x32>
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	e051      	b.n	800543c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d008      	beq.n	80053b0 <send_cmd+0x4a>
		despiselect();
 800539e:	f7ff ff5f 	bl	8005260 <despiselect>
		if (!spiselect()) return 0xFF;
 80053a2:	f7ff ff6b 	bl	800527c <spiselect>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <send_cmd+0x4a>
 80053ac:	23ff      	movs	r3, #255	; 0xff
 80053ae:	e045      	b.n	800543c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fee5 	bl	8005188 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fedf 	bl	8005188 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fed9 	bl	8005188 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fed3 	bl	8005188 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fece 	bl	8005188 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <send_cmd+0x94>
 80053f6:	2395      	movs	r3, #149	; 0x95
 80053f8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d101      	bne.n	8005404 <send_cmd+0x9e>
 8005400:	2387      	movs	r3, #135	; 0x87
 8005402:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff febe 	bl	8005188 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d102      	bne.n	8005418 <send_cmd+0xb2>
 8005412:	20ff      	movs	r0, #255	; 0xff
 8005414:	f7ff feb8 	bl	8005188 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005418:	230a      	movs	r3, #10
 800541a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800541c:	20ff      	movs	r0, #255	; 0xff
 800541e:	f7ff feb3 	bl	8005188 <xchg_spi>
 8005422:	4603      	mov	r3, r0
 8005424:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da05      	bge.n	800543a <send_cmd+0xd4>
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3b01      	subs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <send_cmd+0xb6>

	return res;							/* Return received response */
 800543a:	7bbb      	ldrb	r3, [r7, #14]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <USER_SPI_initialize+0x14>
 8005454:	2301      	movs	r3, #1
 8005456:	e0ca      	b.n	80055ee <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005458:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <USER_SPI_initialize+0x2a>
 8005466:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e0bf      	b.n	80055ee <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 800546e:	2130      	movs	r1, #48	; 0x30
 8005470:	4862      	ldr	r0, [pc, #392]	; (80055fc <USER_SPI_initialize+0x1b8>)
 8005472:	f7ff fe2e 	bl	80050d2 <LL_SPI_SetBaudRatePrescaler>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005476:	230a      	movs	r3, #10
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	e005      	b.n	8005488 <USER_SPI_initialize+0x44>
 800547c:	20ff      	movs	r0, #255	; 0xff
 800547e:	f7ff fe83 	bl	8005188 <xchg_spi>
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	3b01      	subs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f6      	bne.n	800547c <USER_SPI_initialize+0x38>

	ty = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005492:	2100      	movs	r1, #0
 8005494:	2000      	movs	r0, #0
 8005496:	f7ff ff66 	bl	8005366 <send_cmd>
 800549a:	4603      	mov	r3, r0
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 808b 	bne.w	80055b8 <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80054a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054a6:	f7ff fe45 	bl	8005134 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80054aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054ae:	2008      	movs	r0, #8
 80054b0:	f7ff ff59 	bl	8005366 <send_cmd>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d151      	bne.n	800555e <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	e00d      	b.n	80054dc <USER_SPI_initialize+0x98>
 80054c0:	7bfc      	ldrb	r4, [r7, #15]
 80054c2:	20ff      	movs	r0, #255	; 0xff
 80054c4:	f7ff fe60 	bl	8005188 <xchg_spi>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4423      	add	r3, r4
 80054d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	3301      	adds	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d9ee      	bls.n	80054c0 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80054e2:	7abb      	ldrb	r3, [r7, #10]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d167      	bne.n	80055b8 <USER_SPI_initialize+0x174>
 80054e8:	7afb      	ldrb	r3, [r7, #11]
 80054ea:	2baa      	cmp	r3, #170	; 0xaa
 80054ec:	d164      	bne.n	80055b8 <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80054ee:	bf00      	nop
 80054f0:	f7ff fe34 	bl	800515c <SPI_Timer_Status>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <USER_SPI_initialize+0xc6>
 80054fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054fe:	20a9      	movs	r0, #169	; 0xa9
 8005500:	f7ff ff31 	bl	8005366 <send_cmd>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f2      	bne.n	80054f0 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800550a:	f7ff fe27 	bl	800515c <SPI_Timer_Status>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d051      	beq.n	80055b8 <USER_SPI_initialize+0x174>
 8005514:	2100      	movs	r1, #0
 8005516:	203a      	movs	r0, #58	; 0x3a
 8005518:	f7ff ff25 	bl	8005366 <send_cmd>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d14a      	bne.n	80055b8 <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
 8005526:	e00d      	b.n	8005544 <USER_SPI_initialize+0x100>
 8005528:	7bfc      	ldrb	r4, [r7, #15]
 800552a:	20ff      	movs	r0, #255	; 0xff
 800552c:	f7ff fe2c 	bl	8005188 <xchg_spi>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	f107 0310 	add.w	r3, r7, #16
 8005538:	4423      	add	r3, r4
 800553a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	3301      	adds	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d9ee      	bls.n	8005528 <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800554a:	7a3b      	ldrb	r3, [r7, #8]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <USER_SPI_initialize+0x114>
 8005554:	230c      	movs	r3, #12
 8005556:	e000      	b.n	800555a <USER_SPI_initialize+0x116>
 8005558:	2304      	movs	r3, #4
 800555a:	737b      	strb	r3, [r7, #13]
 800555c:	e02c      	b.n	80055b8 <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800555e:	2100      	movs	r1, #0
 8005560:	20a9      	movs	r0, #169	; 0xa9
 8005562:	f7ff ff00 	bl	8005366 <send_cmd>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d804      	bhi.n	8005576 <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800556c:	2302      	movs	r3, #2
 800556e:	737b      	strb	r3, [r7, #13]
 8005570:	23a9      	movs	r3, #169	; 0xa9
 8005572:	73bb      	strb	r3, [r7, #14]
 8005574:	e003      	b.n	800557e <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005576:	2301      	movs	r3, #1
 8005578:	737b      	strb	r3, [r7, #13]
 800557a:	2301      	movs	r3, #1
 800557c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800557e:	bf00      	nop
 8005580:	f7ff fdec 	bl	800515c <SPI_Timer_Status>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <USER_SPI_initialize+0x156>
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fee9 	bl	8005366 <send_cmd>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f2      	bne.n	8005580 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800559a:	f7ff fddf 	bl	800515c <SPI_Timer_Status>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <USER_SPI_initialize+0x170>
 80055a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055a8:	2010      	movs	r0, #16
 80055aa:	f7ff fedc 	bl	8005366 <send_cmd>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <USER_SPI_initialize+0x174>
				ty = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80055b8:	4a11      	ldr	r2, [pc, #68]	; (8005600 <USER_SPI_initialize+0x1bc>)
 80055ba:	7b7b      	ldrb	r3, [r7, #13]
 80055bc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80055be:	f7ff fe4f 	bl	8005260 <despiselect>

	if (ty) {			/* OK */
 80055c2:	7b7b      	ldrb	r3, [r7, #13]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 80055c8:	2118      	movs	r1, #24
 80055ca:	480c      	ldr	r0, [pc, #48]	; (80055fc <USER_SPI_initialize+0x1b8>)
 80055cc:	f7ff fd81 	bl	80050d2 <LL_SPI_SetBaudRatePrescaler>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e002      	b.n	80055e8 <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <USER_SPI_initialize+0x1b4>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2000002c 	.word	0x2000002c
 80055fc:	40013000 	.word	0x40013000
 8005600:	20000dbc 	.word	0x20000dbc

08005604 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USER_SPI_status+0x14>
 8005614:	2301      	movs	r3, #1
 8005616:	e002      	b.n	800561e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <USER_SPI_status+0x24>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	2000002c 	.word	0x2000002c

0800562c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <USER_SPI_read+0x1c>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <USER_SPI_read+0x20>
 8005648:	2304      	movs	r3, #4
 800564a:	e04d      	b.n	80056e8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800564c:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <USER_SPI_read+0xc4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <USER_SPI_read+0x32>
 800565a:	2303      	movs	r3, #3
 800565c:	e044      	b.n	80056e8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800565e:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <USER_SPI_read+0xc8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <USER_SPI_read+0x44>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	025b      	lsls	r3, r3, #9
 800566e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d111      	bne.n	800569a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	2011      	movs	r0, #17
 800567a:	f7ff fe74 	bl	8005366 <send_cmd>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d129      	bne.n	80056d8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005688:	68b8      	ldr	r0, [r7, #8]
 800568a:	f7ff fe11 	bl	80052b0 <rcvr_datablock>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d021      	beq.n	80056d8 <USER_SPI_read+0xac>
			count = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	e01e      	b.n	80056d8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	2012      	movs	r0, #18
 800569e:	f7ff fe62 	bl	8005366 <send_cmd>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d117      	bne.n	80056d8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80056a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ac:	68b8      	ldr	r0, [r7, #8]
 80056ae:	f7ff fdff 	bl	80052b0 <rcvr_datablock>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <USER_SPI_read+0xa2>
				buff += 512;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ed      	bne.n	80056a8 <USER_SPI_read+0x7c>
 80056cc:	e000      	b.n	80056d0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80056ce:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80056d0:	2100      	movs	r1, #0
 80056d2:	200c      	movs	r0, #12
 80056d4:	f7ff fe47 	bl	8005366 <send_cmd>
		}
	}
	despiselect();
 80056d8:	f7ff fdc2 	bl	8005260 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bf14      	ite	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	2300      	moveq	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	2000002c 	.word	0x2000002c
 80056f4:	20000dbc 	.word	0x20000dbc

080056f8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <USER_SPI_write+0x1c>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <USER_SPI_write+0x20>
 8005714:	2304      	movs	r3, #4
 8005716:	e063      	b.n	80057e0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005718:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <USER_SPI_write+0xf0>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <USER_SPI_write+0x32>
 8005726:	2303      	movs	r3, #3
 8005728:	e05a      	b.n	80057e0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <USER_SPI_write+0xf0>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USER_SPI_write+0x44>
 8005738:	2302      	movs	r3, #2
 800573a:	e051      	b.n	80057e0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800573c:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <USER_SPI_write+0xf4>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <USER_SPI_write+0x56>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	025b      	lsls	r3, r3, #9
 800574c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	2018      	movs	r0, #24
 8005758:	f7ff fe05 	bl	8005366 <send_cmd>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d136      	bne.n	80057d0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005762:	21fe      	movs	r1, #254	; 0xfe
 8005764:	68b8      	ldr	r0, [r7, #8]
 8005766:	f7ff fdcc 	bl	8005302 <xmit_datablock>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02f      	beq.n	80057d0 <USER_SPI_write+0xd8>
			count = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	e02c      	b.n	80057d0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005776:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <USER_SPI_write+0xf4>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f003 0306 	and.w	r3, r3, #6
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <USER_SPI_write+0x92>
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	2097      	movs	r0, #151	; 0x97
 8005786:	f7ff fdee 	bl	8005366 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	2019      	movs	r0, #25
 800578e:	f7ff fdea 	bl	8005366 <send_cmd>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11b      	bne.n	80057d0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005798:	21fc      	movs	r1, #252	; 0xfc
 800579a:	68b8      	ldr	r0, [r7, #8]
 800579c:	f7ff fdb1 	bl	8005302 <xmit_datablock>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <USER_SPI_write+0xc4>
				buff += 512;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1ee      	bne.n	8005798 <USER_SPI_write+0xa0>
 80057ba:	e000      	b.n	80057be <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80057bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80057be:	21fd      	movs	r1, #253	; 0xfd
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7ff fd9e 	bl	8005302 <xmit_datablock>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <USER_SPI_write+0xd8>
 80057cc:	2301      	movs	r3, #1
 80057ce:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80057d0:	f7ff fd46 	bl	8005260 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2000002c 	.word	0x2000002c
 80057ec:	20000dbc 	.word	0x20000dbc

080057f0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08c      	sub	sp, #48	; 0x30
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	603a      	str	r2, [r7, #0]
 80057fa:	71fb      	strb	r3, [r7, #7]
 80057fc:	460b      	mov	r3, r1
 80057fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <USER_SPI_ioctl+0x1a>
 8005806:	2304      	movs	r3, #4
 8005808:	e15a      	b.n	8005ac0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800580a:	4baf      	ldr	r3, [pc, #700]	; (8005ac8 <USER_SPI_ioctl+0x2d8>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <USER_SPI_ioctl+0x2c>
 8005818:	2303      	movs	r3, #3
 800581a:	e151      	b.n	8005ac0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005822:	79bb      	ldrb	r3, [r7, #6]
 8005824:	2b04      	cmp	r3, #4
 8005826:	f200 8136 	bhi.w	8005a96 <USER_SPI_ioctl+0x2a6>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <USER_SPI_ioctl+0x40>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005845 	.word	0x08005845
 8005834:	08005859 	.word	0x08005859
 8005838:	08005a97 	.word	0x08005a97
 800583c:	08005905 	.word	0x08005905
 8005840:	080059fb 	.word	0x080059fb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005844:	f7ff fd1a 	bl	800527c <spiselect>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8127 	beq.w	8005a9e <USER_SPI_ioctl+0x2ae>
 8005850:	2300      	movs	r3, #0
 8005852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005856:	e122      	b.n	8005a9e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005858:	2100      	movs	r1, #0
 800585a:	2009      	movs	r0, #9
 800585c:	f7ff fd83 	bl	8005366 <send_cmd>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 811d 	bne.w	8005aa2 <USER_SPI_ioctl+0x2b2>
 8005868:	f107 030c 	add.w	r3, r7, #12
 800586c:	2110      	movs	r1, #16
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fd1e 	bl	80052b0 <rcvr_datablock>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8113 	beq.w	8005aa2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800587c:	7b3b      	ldrb	r3, [r7, #12]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d111      	bne.n	80058aa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005886:	7d7b      	ldrb	r3, [r7, #21]
 8005888:	461a      	mov	r2, r3
 800588a:	7d3b      	ldrb	r3, [r7, #20]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	4413      	add	r3, r2
 8005890:	461a      	mov	r2, r3
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800589a:	4413      	add	r3, r2
 800589c:	3301      	adds	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	029a      	lsls	r2, r3, #10
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e028      	b.n	80058fc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80058aa:	7c7b      	ldrb	r3, [r7, #17]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	7d7b      	ldrb	r3, [r7, #21]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	3302      	adds	r3, #2
 80058ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80058d2:	7d3b      	ldrb	r3, [r7, #20]
 80058d4:	099b      	lsrs	r3, r3, #6
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	7cfb      	ldrb	r3, [r7, #19]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	7cbb      	ldrb	r3, [r7, #18]
 80058e2:	029b      	lsls	r3, r3, #10
 80058e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058e8:	4413      	add	r3, r2
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80058ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058f2:	3b09      	subs	r3, #9
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	409a      	lsls	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005902:	e0ce      	b.n	8005aa2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005904:	4b71      	ldr	r3, [pc, #452]	; (8005acc <USER_SPI_ioctl+0x2dc>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d031      	beq.n	8005974 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005910:	2100      	movs	r1, #0
 8005912:	208d      	movs	r0, #141	; 0x8d
 8005914:	f7ff fd27 	bl	8005366 <send_cmd>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 80c3 	bne.w	8005aa6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005920:	20ff      	movs	r0, #255	; 0xff
 8005922:	f7ff fc31 	bl	8005188 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005926:	f107 030c 	add.w	r3, r7, #12
 800592a:	2110      	movs	r1, #16
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fcbf 	bl	80052b0 <rcvr_datablock>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80b6 	beq.w	8005aa6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800593a:	2330      	movs	r3, #48	; 0x30
 800593c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005940:	e007      	b.n	8005952 <USER_SPI_ioctl+0x162>
 8005942:	20ff      	movs	r0, #255	; 0xff
 8005944:	f7ff fc20 	bl	8005188 <xchg_spi>
 8005948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800594c:	3b01      	subs	r3, #1
 800594e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005952:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f3      	bne.n	8005942 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800595a:	7dbb      	ldrb	r3, [r7, #22]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	b2db      	uxtb	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	2310      	movs	r3, #16
 8005964:	fa03 f202 	lsl.w	r2, r3, r2
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005972:	e098      	b.n	8005aa6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005974:	2100      	movs	r1, #0
 8005976:	2009      	movs	r0, #9
 8005978:	f7ff fcf5 	bl	8005366 <send_cmd>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 8091 	bne.w	8005aa6 <USER_SPI_ioctl+0x2b6>
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	2110      	movs	r1, #16
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fc90 	bl	80052b0 <rcvr_datablock>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8087 	beq.w	8005aa6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <USER_SPI_ioctl+0x2dc>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80059a4:	7dbb      	ldrb	r3, [r7, #22]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80059ac:	7dfa      	ldrb	r2, [r7, #23]
 80059ae:	09d2      	lsrs	r2, r2, #7
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	4413      	add	r3, r2
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	7e7b      	ldrb	r3, [r7, #25]
 80059b8:	099b      	lsrs	r3, r3, #6
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e013      	b.n	80059f2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	109b      	asrs	r3, r3, #2
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	3301      	adds	r3, #1
 80059d6:	7dfa      	ldrb	r2, [r7, #23]
 80059d8:	00d2      	lsls	r2, r2, #3
 80059da:	f002 0218 	and.w	r2, r2, #24
 80059de:	7df9      	ldrb	r1, [r7, #23]
 80059e0:	0949      	lsrs	r1, r1, #5
 80059e2:	b2c9      	uxtb	r1, r1
 80059e4:	440a      	add	r2, r1
 80059e6:	3201      	adds	r2, #1
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80059f8:	e055      	b.n	8005aa6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80059fa:	4b34      	ldr	r3, [pc, #208]	; (8005acc <USER_SPI_ioctl+0x2dc>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 0306 	and.w	r3, r3, #6
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d051      	beq.n	8005aaa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a06:	f107 020c 	add.w	r2, r7, #12
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	210b      	movs	r1, #11
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff feee 	bl	80057f0 <USER_SPI_ioctl>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d149      	bne.n	8005aae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a1a:	7b3b      	ldrb	r3, [r7, #12]
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <USER_SPI_ioctl+0x23e>
 8005a24:	7dbb      	ldrb	r3, [r7, #22]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d041      	beq.n	8005ab2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005a3e:	4b23      	ldr	r3, [pc, #140]	; (8005acc <USER_SPI_ioctl+0x2dc>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	025b      	lsls	r3, r3, #9
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	025b      	lsls	r3, r3, #9
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a58:	2020      	movs	r0, #32
 8005a5a:	f7ff fc84 	bl	8005366 <send_cmd>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d128      	bne.n	8005ab6 <USER_SPI_ioctl+0x2c6>
 8005a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a66:	2021      	movs	r0, #33	; 0x21
 8005a68:	f7ff fc7d 	bl	8005366 <send_cmd>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d121      	bne.n	8005ab6 <USER_SPI_ioctl+0x2c6>
 8005a72:	2100      	movs	r1, #0
 8005a74:	2026      	movs	r0, #38	; 0x26
 8005a76:	f7ff fc76 	bl	8005366 <send_cmd>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11a      	bne.n	8005ab6 <USER_SPI_ioctl+0x2c6>
 8005a80:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a84:	f7ff fbc9 	bl	800521a <wait_ready>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d013      	beq.n	8005ab6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005a94:	e00f      	b.n	8005ab6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005a96:	2304      	movs	r3, #4
 8005a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a9c:	e00c      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8005a9e:	bf00      	nop
 8005aa0:	e00a      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8005aa2:	bf00      	nop
 8005aa4:	e008      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8005aa6:	bf00      	nop
 8005aa8:	e006      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005aaa:	bf00      	nop
 8005aac:	e004      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <USER_SPI_ioctl+0x2c8>
		break;
 8005ab6:	bf00      	nop
	}

	despiselect();
 8005ab8:	f7ff fbd2 	bl	8005260 <despiselect>

	return res;
 8005abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2000002c 	.word	0x2000002c
 8005acc:	20000dbc 	.word	0x20000dbc

08005ad0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <disk_status+0x30>)
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	79fa      	ldrb	r2, [r7, #7]
 8005ae8:	4905      	ldr	r1, [pc, #20]	; (8005b00 <disk_status+0x30>)
 8005aea:	440a      	add	r2, r1
 8005aec:	7a12      	ldrb	r2, [r2, #8]
 8005aee:	4610      	mov	r0, r2
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000de0 	.word	0x20000de0

08005b04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;// =0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <disk_initialize+0x48>)
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d111      	bne.n	8005b40 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <disk_initialize+0x48>)
 8005b20:	2101      	movs	r1, #1
 8005b22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);// stat = 1
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <disk_initialize+0x48>)
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	79fa      	ldrb	r2, [r7, #7]
 8005b32:	4906      	ldr	r1, [pc, #24]	; (8005b4c <disk_initialize+0x48>)
 8005b34:	440a      	add	r2, r1
 8005b36:	7a12      	ldrb	r2, [r2, #8]
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000de0 	.word	0x20000de0

08005b50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <disk_read+0x3c>)
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	689c      	ldr	r4, [r3, #8]
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	4a07      	ldr	r2, [pc, #28]	; (8005b8c <disk_read+0x3c>)
 8005b70:	4413      	add	r3, r2
 8005b72:	7a18      	ldrb	r0, [r3, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	47a0      	blx	r4
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd90      	pop	{r4, r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000de0 	.word	0x20000de0

08005b90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <disk_write+0x3c>)
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	68dc      	ldr	r4, [r3, #12]
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	4a07      	ldr	r2, [pc, #28]	; (8005bcc <disk_write+0x3c>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	7a18      	ldrb	r0, [r3, #8]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	47a0      	blx	r4
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000de0 	.word	0x20000de0

08005bd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	603a      	str	r2, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <disk_ioctl+0x38>)
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	79fa      	ldrb	r2, [r7, #7]
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <disk_ioctl+0x38>)
 8005bf0:	440a      	add	r2, r1
 8005bf2:	7a10      	ldrb	r0, [r2, #8]
 8005bf4:	79b9      	ldrb	r1, [r7, #6]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4798      	blx	r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  return res;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000de0 	.word	0x20000de0

08005c0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005c20:	e007      	b.n	8005c32 <mem_cpy+0x26>
		*d++ = *s++;
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	1c53      	adds	r3, r2, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	6179      	str	r1, [r7, #20]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f2      	bne.n	8005c22 <mem_cpy+0x16>
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005c56:	e005      	b.n	8005c64 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	617a      	str	r2, [r7, #20]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f4      	bne.n	8005c58 <mem_set+0x12>
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005c90:	bf00      	nop
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <mem_cmp+0x40>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	61fa      	str	r2, [r7, #28]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	61ba      	str	r2, [r7, #24]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	1acb      	subs	r3, r1, r3
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ec      	beq.n	8005c92 <mem_cmp+0x1a>
	return r;
 8005cb8:	697b      	ldr	r3, [r7, #20]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005cce:	e002      	b.n	8005cd6 <chk_chr+0x12>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <chk_chr+0x26>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d1f2      	bne.n	8005cd0 <chk_chr+0xc>
	return *str;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	781b      	ldrb	r3, [r3, #0]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e038      	b.n	8005d7e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005d0c:	492f      	ldr	r1, [pc, #188]	; (8005dcc <chk_lock+0xd4>)
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d029      	beq.n	8005d74 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005d20:	492a      	ldr	r1, [pc, #168]	; (8005dcc <chk_lock+0xd4>)
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11e      	bne.n	8005d78 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005d3a:	4924      	ldr	r1, [pc, #144]	; (8005dcc <chk_lock+0xd4>)
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	3304      	adds	r3, #4
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d110      	bne.n	8005d78 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005d56:	491d      	ldr	r1, [pc, #116]	; (8005dcc <chk_lock+0xd4>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3308      	adds	r3, #8
 8005d66:	881a      	ldrh	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d102      	bne.n	8005d78 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005d72:	e007      	b.n	8005d84 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005d74:	2301      	movs	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d9c3      	bls.n	8005d0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d109      	bne.n	8005d9e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <chk_lock+0x9e>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d101      	bne.n	8005d9a <chk_lock+0xa2>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e013      	b.n	8005dc2 <chk_lock+0xca>
 8005d9a:	2312      	movs	r3, #18
 8005d9c:	e011      	b.n	8005dc2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <chk_lock+0xc4>
 8005da4:	4909      	ldr	r1, [pc, #36]	; (8005dcc <chk_lock+0xd4>)
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	330a      	adds	r3, #10
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d101      	bne.n	8005dc0 <chk_lock+0xc8>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	e000      	b.n	8005dc2 <chk_lock+0xca>
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	20000dc8 	.word	0x20000dc8

08005dd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	e002      	b.n	8005de2 <enq_lock+0x12>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d809      	bhi.n	8005dfc <enq_lock+0x2c>
 8005de8:	490a      	ldr	r1, [pc, #40]	; (8005e14 <enq_lock+0x44>)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ef      	bne.n	8005ddc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	bf14      	ite	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	2300      	moveq	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000dc8 	.word	0x20000dc8

08005e18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e02b      	b.n	8005e80 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005e28:	4955      	ldr	r1, [pc, #340]	; (8005f80 <inc_lock+0x168>)
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d11b      	bne.n	8005e7a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005e42:	494f      	ldr	r1, [pc, #316]	; (8005f80 <inc_lock+0x168>)
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3304      	adds	r3, #4
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d10d      	bne.n	8005e7a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005e5e:	4948      	ldr	r1, [pc, #288]	; (8005f80 <inc_lock+0x168>)
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	881a      	ldrh	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d006      	beq.n	8005e88 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d9d0      	bls.n	8005e28 <inc_lock+0x10>
 8005e86:	e000      	b.n	8005e8a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005e88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d145      	bne.n	8005f1c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <inc_lock+0x84>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d809      	bhi.n	8005eb6 <inc_lock+0x9e>
 8005ea2:	4937      	ldr	r1, [pc, #220]	; (8005f80 <inc_lock+0x168>)
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1ef      	bne.n	8005e96 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d101      	bne.n	8005ec0 <inc_lock+0xa8>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e05a      	b.n	8005f76 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005ec6:	482e      	ldr	r0, [pc, #184]	; (8005f80 <inc_lock+0x168>)
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4403      	add	r3, r0
 8005ed4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005edc:	4828      	ldr	r0, [pc, #160]	; (8005f80 <inc_lock+0x168>)
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4403      	add	r3, r0
 8005eea:	3304      	adds	r3, #4
 8005eec:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005ef4:	4922      	ldr	r1, [pc, #136]	; (8005f80 <inc_lock+0x168>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	3308      	adds	r3, #8
 8005f04:	4602      	mov	r2, r0
 8005f06:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005f08:	491d      	ldr	r1, [pc, #116]	; (8005f80 <inc_lock+0x168>)
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	330a      	adds	r3, #10
 8005f18:	2200      	movs	r2, #0
 8005f1a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <inc_lock+0x124>
 8005f22:	4917      	ldr	r1, [pc, #92]	; (8005f80 <inc_lock+0x168>)
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	330a      	adds	r3, #10
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <inc_lock+0x124>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e01c      	b.n	8005f76 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <inc_lock+0x142>
 8005f42:	490f      	ldr	r1, [pc, #60]	; (8005f80 <inc_lock+0x168>)
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	330a      	adds	r3, #10
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	b299      	uxth	r1, r3
 8005f58:	e001      	b.n	8005f5e <inc_lock+0x146>
 8005f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f5e:	4808      	ldr	r0, [pc, #32]	; (8005f80 <inc_lock+0x168>)
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4403      	add	r3, r0
 8005f6c:	330a      	adds	r3, #10
 8005f6e:	460a      	mov	r2, r1
 8005f70:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	20000dc8 	.word	0x20000dc8

08005f84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d82e      	bhi.n	8005ff6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005f98:	491b      	ldr	r1, [pc, #108]	; (8006008 <dec_lock+0x84>)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	330a      	adds	r3, #10
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d101      	bne.n	8005fb8 <dec_lock+0x34>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <dec_lock+0x40>
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005fc4:	4910      	ldr	r1, [pc, #64]	; (8006008 <dec_lock+0x84>)
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	330a      	adds	r3, #10
 8005fd4:	89fa      	ldrh	r2, [r7, #14]
 8005fd6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d108      	bne.n	8005ff0 <dec_lock+0x6c>
 8005fde:	490a      	ldr	r1, [pc, #40]	; (8006008 <dec_lock+0x84>)
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	737b      	strb	r3, [r7, #13]
 8005ff4:	e001      	b.n	8005ffa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ffa:	7b7b      	ldrb	r3, [r7, #13]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000dc8 	.word	0x20000dc8

0800600c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e016      	b.n	8006048 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800601a:	490f      	ldr	r1, [pc, #60]	; (8006058 <clear_lock+0x4c>)
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	429a      	cmp	r2, r3
 800602e:	d108      	bne.n	8006042 <clear_lock+0x36>
 8006030:	4909      	ldr	r1, [pc, #36]	; (8006058 <clear_lock+0x4c>)
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d9e5      	bls.n	800601a <clear_lock+0xe>
	}
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr
 8006058:	20000dc8 	.word	0x20000dc8

0800605c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800606e:	2b00      	cmp	r3, #0
 8006070:	d038      	beq.n	80060e4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006078:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	2301      	movs	r3, #1
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	f7ff fd83 	bl	8005b90 <disk_write>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e026      	b.n	80060e4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d218      	bcs.n	80060e4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e010      	b.n	80060de <sync_window+0x82>
					wsect += fs->fsize;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4413      	add	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	2301      	movs	r3, #1
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	f7ff fd5c 	bl	8005b90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3b01      	subs	r3, #1
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d8eb      	bhi.n	80060bc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d01b      	beq.n	8006140 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ffa7 	bl	800605c <sync_window>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d113      	bne.n	8006140 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	2301      	movs	r3, #1
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	f7ff fd14 	bl	8005b50 <disk_read>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff ff82 	bl	800605c <sync_window>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 809b 	bne.w	800629a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800616a:	2b03      	cmp	r3, #3
 800616c:	f040 8088 	bne.w	8006280 <sync_fs+0x136>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006176:	2b01      	cmp	r3, #1
 8006178:	f040 8082 	bne.w	8006280 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fd5e 	bl	8005c46 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2255      	movs	r2, #85	; 0x55
 800618e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	22aa      	movs	r2, #170	; 0xaa
 8006196:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2252      	movs	r2, #82	; 0x52
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2252      	movs	r2, #82	; 0x52
 80061a4:	705a      	strb	r2, [r3, #1]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2261      	movs	r2, #97	; 0x61
 80061aa:	709a      	strb	r2, [r3, #2]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2241      	movs	r2, #65	; 0x41
 80061b0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2272      	movs	r2, #114	; 0x72
 80061b6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2272      	movs	r2, #114	; 0x72
 80061be:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2241      	movs	r2, #65	; 0x41
 80061c6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2261      	movs	r2, #97	; 0x61
 80061ce:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800620a:	0e1b      	lsrs	r3, r3, #24
 800620c:	b2da      	uxtb	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800621a:	b2da      	uxtb	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006228:	b29b      	uxth	r3, r3
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	b2da      	uxtb	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2da      	uxtb	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800624c:	0e1b      	lsrs	r3, r3, #24
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006272:	2301      	movs	r3, #1
 8006274:	f7ff fc8c 	bl	8005b90 <disk_write>
			fs->fsi_flag = 0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fca0 	bl	8005bd0 <disk_ioctl>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8006296:	2301      	movs	r3, #1
 8006298:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	3b02      	subs	r3, #2
 80062b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062ba:	3b02      	subs	r3, #2
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d301      	bcc.n	80062c6 <clust2sect+0x22>
 80062c2:	2300      	movs	r3, #0
 80062c4:	e00a      	b.n	80062dc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80062cc:	461a      	mov	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	fb03 f202 	mul.w	r2, r3, r2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80062da:	4413      	add	r3, r2
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d905      	bls.n	8006302 <get_fat+0x1c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <get_fat+0x22>
		val = 1;	/* Internal error */
 8006302:	2301      	movs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e0a0      	b.n	800644a <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006314:	2b02      	cmp	r3, #2
 8006316:	d044      	beq.n	80063a2 <get_fat+0xbc>
 8006318:	2b03      	cmp	r3, #3
 800631a:	d063      	beq.n	80063e4 <get_fat+0xfe>
 800631c:	2b01      	cmp	r3, #1
 800631e:	f040 808a 	bne.w	8006436 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	0a5b      	lsrs	r3, r3, #9
 800633a:	4413      	add	r3, r2
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff fed5 	bl	80060ee <move_window>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d178      	bne.n	800643c <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	60fa      	str	r2, [r7, #12]
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	0a5b      	lsrs	r3, r3, #9
 8006364:	4413      	add	r3, r2
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fec0 	bl	80060ee <move_window>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d165      	bne.n	8006440 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	5cd3      	ldrb	r3, [r2, r3]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	4313      	orrs	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <get_fat+0xb2>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	e002      	b.n	800639e <get_fat+0xb8>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639e:	617b      	str	r3, [r7, #20]
			break;
 80063a0:	e053      	b.n	800644a <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	4413      	add	r3, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fe9c 	bl	80060ee <move_window>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d143      	bne.n	8006444 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	4413      	add	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3301      	adds	r3, #1
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	b21a      	sxth	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b21b      	sxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b21b      	sxth	r3, r3
 80063de:	b29b      	uxth	r3, r3
 80063e0:	617b      	str	r3, [r7, #20]
			break;
 80063e2:	e032      	b.n	800644a <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	4413      	add	r3, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fe7b 	bl	80060ee <move_window>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d124      	bne.n	8006448 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4413      	add	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3303      	adds	r3, #3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	061a      	lsls	r2, r3, #24
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3302      	adds	r3, #2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	4313      	orrs	r3, r2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	3201      	adds	r2, #1
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	0212      	lsls	r2, r2, #8
 8006426:	4313      	orrs	r3, r2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006432:	617b      	str	r3, [r7, #20]
			break;
 8006434:	e009      	b.n	800644a <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e006      	b.n	800644a <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800643c:	bf00      	nop
 800643e:	e004      	b.n	800644a <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006448:	bf00      	nop
		}
	}

	return val;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d905      	bls.n	8006472 <put_fat+0x1e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <put_fat+0x24>
		res = FR_INT_ERR;
 8006472:	2302      	movs	r3, #2
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e0f3      	b.n	8006660 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800647e:	2b02      	cmp	r3, #2
 8006480:	d074      	beq.n	800656c <put_fat+0x118>
 8006482:	2b03      	cmp	r3, #3
 8006484:	f000 8099 	beq.w	80065ba <put_fat+0x166>
 8006488:	2b01      	cmp	r3, #1
 800648a:	f040 80df 	bne.w	800664c <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	0a5b      	lsrs	r3, r3, #9
 80064a6:	4413      	add	r3, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fe1f 	bl	80060ee <move_window>
 80064b0:	4603      	mov	r3, r0
 80064b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 80cb 	bne.w	8006652 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	617a      	str	r2, [r7, #20]
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <put_fat+0x9e>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	b25a      	sxtb	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e001      	b.n	80064f6 <put_fat+0xa2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	0a5b      	lsrs	r3, r3, #9
 800650c:	4413      	add	r3, r2
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fdec 	bl	80060ee <move_window>
 8006516:	4603      	mov	r3, r0
 8006518:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 809a 	bne.w	8006656 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <put_fat+0xec>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e00e      	b.n	800655e <put_fat+0x10a>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b25b      	sxtb	r3, r3
 8006546:	f023 030f 	bic.w	r3, r3, #15
 800654a:	b25a      	sxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	b25b      	sxtb	r3, r3
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	b25b      	sxtb	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b25b      	sxtb	r3, r3
 800655c:	b2db      	uxtb	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800656a:	e079      	b.n	8006660 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	4413      	add	r3, r2
 8006578:	4619      	mov	r1, r3
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fdb7 	bl	80060ee <move_window>
 8006580:	4603      	mov	r3, r0
 8006582:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006584:	7ffb      	ldrb	r3, [r7, #31]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d167      	bne.n	800665a <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	b2da      	uxtb	r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80065b8:	e052      	b.n	8006660 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	4413      	add	r3, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fd90 	bl	80060ee <move_window>
 80065ce:	4603      	mov	r3, r0
 80065d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065d2:	7ffb      	ldrb	r3, [r7, #31]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d142      	bne.n	800665e <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3303      	adds	r3, #3
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	061a      	lsls	r2, r3, #24
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	3302      	adds	r3, #2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	4313      	orrs	r3, r2
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	3201      	adds	r2, #1
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	0212      	lsls	r2, r2, #8
 8006600:	4313      	orrs	r3, r2
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4313      	orrs	r3, r2
 8006610:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	b29b      	uxth	r3, r3
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b29a      	uxth	r2, r3
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3301      	adds	r3, #1
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0c1a      	lsrs	r2, r3, #16
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	3302      	adds	r3, #2
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0e1a      	lsrs	r2, r3, #24
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3303      	adds	r3, #3
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800664a:	e009      	b.n	8006660 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 800664c:	2302      	movs	r3, #2
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e006      	b.n	8006660 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006652:	bf00      	nop
 8006654:	e004      	b.n	8006660 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <put_fat+0x20c>
			if (res != FR_OK) break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <put_fat+0x20c>
			if (res != FR_OK) break;
 800665e:	bf00      	nop
		}
	}

	return res;
 8006660:	7ffb      	ldrb	r3, [r7, #31]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d905      	bls.n	8006686 <remove_chain+0x1c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <remove_chain+0x22>
		res = FR_INT_ERR;
 8006686:	2302      	movs	r3, #2
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e043      	b.n	8006714 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006690:	e036      	b.n	8006700 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fe26 	bl	80062e6 <get_fat>
 800669a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d035      	beq.n	800670e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d102      	bne.n	80066ae <remove_chain+0x44>
 80066a8:	2302      	movs	r3, #2
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e032      	b.n	8006714 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d102      	bne.n	80066bc <remove_chain+0x52>
 80066b6:	2301      	movs	r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]
 80066ba:	e02b      	b.n	8006714 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80066bc:	2200      	movs	r2, #0
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fec7 	bl	8006454 <put_fat>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d120      	bne.n	8006712 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d00f      	beq.n	80066fc <remove_chain+0x92>
				fs->free_clust++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d3c2      	bcc.n	8006692 <remove_chain+0x28>
 800670c:	e002      	b.n	8006714 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006712:	bf00      	nop
		}
	}

	return res;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b086      	sub	sp, #24
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006734:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <create_chain+0x2a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d31c      	bcc.n	8006782 <create_chain+0x64>
 8006748:	2301      	movs	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e019      	b.n	8006782 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff fdc8 	bl	80062e6 <get_fat>
 8006756:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d801      	bhi.n	8006762 <create_chain+0x44>
 800675e:	2301      	movs	r3, #1
 8006760:	e076      	b.n	8006850 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d101      	bne.n	800676e <create_chain+0x50>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	e070      	b.n	8006850 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	429a      	cmp	r2, r3
 8006778:	d201      	bcs.n	800677e <create_chain+0x60>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	e068      	b.n	8006850 <create_chain+0x132>
		scl = clst;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3301      	adds	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	429a      	cmp	r2, r3
 8006796:	d307      	bcc.n	80067a8 <create_chain+0x8a>
			ncl = 2;
 8006798:	2302      	movs	r3, #2
 800679a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d901      	bls.n	80067a8 <create_chain+0x8a>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e053      	b.n	8006850 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fd9b 	bl	80062e6 <get_fat>
 80067b0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00e      	beq.n	80067d6 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d002      	beq.n	80067c6 <create_chain+0xa8>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <create_chain+0xac>
			return cs;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	e042      	b.n	8006850 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d1d9      	bne.n	8006786 <create_chain+0x68>
 80067d2:	2300      	movs	r3, #0
 80067d4:	e03c      	b.n	8006850 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80067d6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80067d8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fe38 	bl	8006454 <put_fat>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <create_chain+0xe4>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fe2b 	bl	8006454 <put_fat>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11a      	bne.n	800683e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d018      	beq.n	800684e <create_chain+0x130>
			fs->free_clust--;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006822:	1e5a      	subs	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800683c:	e007      	b.n	800684e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d102      	bne.n	800684a <create_chain+0x12c>
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	e000      	b.n	800684c <create_chain+0x12e>
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800684e:	697b      	ldr	r3, [r7, #20]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006868:	3304      	adds	r3, #4
 800686a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	0a5b      	lsrs	r3, r3, #9
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006876:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800687a:	fbb3 f3f2 	udiv	r3, r3, r2
 800687e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	613a      	str	r2, [r7, #16]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <clmt_clust+0x3c>
 8006890:	2300      	movs	r3, #0
 8006892:	e010      	b.n	80068b6 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d307      	bcc.n	80068ac <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	3304      	adds	r3, #4
 80068a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068aa:	e7e9      	b.n	8006880 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80068ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80068da:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d007      	beq.n	80068f2 <dir_sdi+0x32>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d301      	bcc.n	80068f6 <dir_sdi+0x36>
		return FR_INT_ERR;
 80068f2:	2302      	movs	r3, #2
 80068f4:	e074      	b.n	80069e0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10c      	bne.n	8006916 <dir_sdi+0x56>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006902:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006906:	2b03      	cmp	r3, #3
 8006908:	d105      	bne.n	8006916 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006910:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006914:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d111      	bne.n	8006940 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006922:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006926:	461a      	mov	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4293      	cmp	r3, r2
 800692c:	d301      	bcc.n	8006932 <dir_sdi+0x72>
			return FR_INT_ERR;
 800692e:	2302      	movs	r3, #2
 8006930:	e056      	b.n	80069e0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006938:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	e032      	b.n	80069a6 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006946:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800694e:	e01e      	b.n	800698e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fcc4 	bl	80062e6 <get_fat>
 800695e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d101      	bne.n	800696c <dir_sdi+0xac>
 8006968:	2301      	movs	r3, #1
 800696a:	e039      	b.n	80069e0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d907      	bls.n	8006982 <dir_sdi+0xc2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006978:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	429a      	cmp	r2, r3
 8006980:	d301      	bcc.n	8006986 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8006982:	2302      	movs	r3, #2
 8006984:	e02c      	b.n	80069e0 <dir_sdi+0x120>
			idx -= ic;
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d2dc      	bcs.n	8006950 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800699c:	6979      	ldr	r1, [r7, #20]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fc80 	bl	80062a4 <clust2sect>
 80069a4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <dir_sdi+0xf8>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e013      	b.n	80069e0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	091a      	lsrs	r2, r3, #4
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	441a      	add	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069cc:	461a      	mov	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	015b      	lsls	r3, r3, #5
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <dir_next+0x26>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <dir_next+0x2a>
		return FR_NO_FILE;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	e0dd      	b.n	8006bce <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f040 80c6 	bne.w	8006baa <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a3c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006a40:	461a      	mov	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	f0c0 80b0 	bcc.w	8006baa <dir_next+0x1c2>
				return FR_NO_FILE;
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	e0bf      	b.n	8006bce <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006a58:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006a5c:	3a01      	subs	r2, #1
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 80a2 	bne.w	8006baa <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7ff fc36 	bl	80062e6 <get_fat>
 8006a7a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d801      	bhi.n	8006a86 <dir_next+0x9e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e0a3      	b.n	8006bce <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d101      	bne.n	8006a92 <dir_next+0xaa>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e09d      	b.n	8006bce <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d374      	bcc.n	8006b8c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <dir_next+0xc4>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	e090      	b.n	8006bce <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7ff fe2f 	bl	800671e <create_chain>
 8006ac0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <dir_next+0xe4>
 8006ac8:	2307      	movs	r3, #7
 8006aca:	e080      	b.n	8006bce <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <dir_next+0xee>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e07b      	b.n	8006bce <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d101      	bne.n	8006ae2 <dir_next+0xfa>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e075      	b.n	8006bce <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fab7 	bl	800605c <sync_window>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <dir_next+0x110>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e06a      	b.n	8006bce <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff f89e 	bl	8005c46 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7ff fbc3 	bl	80062a4 <clust2sect>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e01b      	b.n	8006b62 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff fa8d 	bl	800605c <sync_window>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <dir_next+0x164>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e040      	b.n	8006bce <dir_next+0x1e6>
						dp->fs->winsect++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b52:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006b56:	3201      	adds	r2, #1
 8006b58:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b68:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d3da      	bcc.n	8006b2a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b7a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	1a8a      	subs	r2, r1, r2
 8006b88:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fb81 	bl	80062a4 <clust2sect>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	015b      	lsls	r3, r3, #5
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd90      	pop	{r4, r7, pc}

08006bd6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006be0:	2100      	movs	r1, #0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fe6c 	bl	80068c0 <dir_sdi>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d131      	bne.n	8006c56 <dir_alloc+0x80>
		n = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7ff fa72 	bl	80060ee <move_window>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11f      	bne.n	8006c54 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2be5      	cmp	r3, #229	; 0xe5
 8006c1e:	d005      	beq.n	8006c2c <dir_alloc+0x56>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d102      	bne.n	8006c40 <dir_alloc+0x6a>
 8006c3a:	e00c      	b.n	8006c56 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fed0 	bl	80069e8 <dir_next>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0d1      	beq.n	8006bf6 <dir_alloc+0x20>
 8006c52:	e000      	b.n	8006c56 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006c54:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d101      	bne.n	8006c60 <dir_alloc+0x8a>
 8006c5c:	2307      	movs	r3, #7
 8006c5e:	73fb      	strb	r3, [r7, #15]
	return res;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	331b      	adds	r3, #27
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b21a      	sxth	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	331a      	adds	r3, #26
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	b21b      	sxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b21b      	sxth	r3, r3
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d10f      	bne.n	8006cb8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3315      	adds	r3, #21
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b21b      	sxth	r3, r3
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

	return cl;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	331a      	adds	r3, #26
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	331b      	adds	r3, #27
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	0c1a      	lsrs	r2, r3, #16
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	0c1b      	lsrs	r3, r3, #16
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3315      	adds	r3, #21
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fdd0 	bl	80068c0 <dir_sdi>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <dir_find+0x1e>
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	e03b      	b.n	8006da6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7ff f9d6 	bl	80060ee <move_window>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d128      	bne.n	8006d9e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d52:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <dir_find+0x56>
 8006d60:	2304      	movs	r3, #4
 8006d62:	75fb      	strb	r3, [r7, #23]
 8006d64:	e01e      	b.n	8006da4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	330b      	adds	r3, #11
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <dir_find+0x7a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d7a:	220b      	movs	r2, #11
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7fe ff7a 	bl	8005c78 <mem_cmp>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fe2b 	bl	80069e8 <dir_next>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0c8      	beq.n	8006d2e <dir_find+0x1e>
 8006d9c:	e002      	b.n	8006da4 <dir_find+0x94>
		if (res != FR_OK) break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <dir_find+0x94>
			break;
 8006da2:	bf00      	nop

	return res;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8006db8:	2304      	movs	r3, #4
 8006dba:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8006dbc:	e03f      	b.n	8006e3e <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7ff f98e 	bl	80060ee <move_window>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d136      	bne.n	8006e4a <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006de2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <dir_read+0x48>
 8006df0:	2304      	movs	r3, #4
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	e02e      	b.n	8006e54 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	330b      	adds	r3, #11
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e00:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2be5      	cmp	r3, #229	; 0xe5
 8006e06:	d011      	beq.n	8006e2c <dir_read+0x7e>
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0c:	d00e      	beq.n	8006e2c <dir_read+0x7e>
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d00b      	beq.n	8006e2c <dir_read+0x7e>
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	bf0c      	ite	eq
 8006e1e:	2301      	moveq	r3, #1
 8006e20:	2300      	movne	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d010      	beq.n	8006e4e <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fdda 	bl	80069e8 <dir_next>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <dir_read+0xa4>
	while (dp->sect) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1ba      	bne.n	8006dbe <dir_read+0x10>
 8006e48:	e004      	b.n	8006e54 <dir_read+0xa6>
		if (res != FR_OK) break;
 8006e4a:	bf00      	nop
 8006e4c:	e002      	b.n	8006e54 <dir_read+0xa6>
			break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <dir_read+0xa6>
		if (res != FR_OK) break;
 8006e52:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <dir_read+0xb4>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006e74:	2101      	movs	r1, #1
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fead 	bl	8006bd6 <dir_alloc>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d126      	bne.n	8006ed4 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7ff f92a 	bl	80060ee <move_window>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d117      	bne.n	8006ed4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eaa:	2220      	movs	r2, #32
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fec9 	bl	8005c46 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006ec0:	220b      	movs	r2, #11
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f7fe fea2 	bl	8005c0c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	3309      	adds	r3, #9
 8006eec:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05a      	beq.n	8006fae <get_fileinfo+0xd0>
		dir = dp->dir;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006efe:	60bb      	str	r3, [r7, #8]
		i = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006f04:	e01c      	b.n	8006f40 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	617a      	str	r2, [r7, #20]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	4413      	add	r3, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d100      	bne.n	8006f1c <get_fileinfo+0x3e>
 8006f1a:	e011      	b.n	8006f40 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d101      	bne.n	8006f26 <get_fileinfo+0x48>
 8006f22:	23e5      	movs	r3, #229	; 0xe5
 8006f24:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b09      	cmp	r3, #9
 8006f2a:	d104      	bne.n	8006f36 <get_fileinfo+0x58>
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	613a      	str	r2, [r7, #16]
 8006f32:	222e      	movs	r2, #46	; 0x2e
 8006f34:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	613a      	str	r2, [r7, #16]
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b0a      	cmp	r3, #10
 8006f44:	d9df      	bls.n	8006f06 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	7ada      	ldrb	r2, [r3, #11]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	331f      	adds	r3, #31
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	061a      	lsls	r2, r3, #24
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	331e      	adds	r3, #30
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	041b      	lsls	r3, r3, #16
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	321d      	adds	r2, #29
 8006f64:	7812      	ldrb	r2, [r2, #0]
 8006f66:	0212      	lsls	r2, r2, #8
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	321c      	adds	r2, #28
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3319      	adds	r3, #25
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	b21a      	sxth	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3318      	adds	r3, #24
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3317      	adds	r3, #23
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	b21a      	sxth	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3316      	adds	r3, #22
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b21b      	sxth	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b21b      	sxth	r3, r3
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8006fb4:	bf00      	nop
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr
	...

08006fc0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e002      	b.n	8006fd8 <create_name+0x18>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b2f      	cmp	r3, #47	; 0x2f
 8006fde:	d0f8      	beq.n	8006fd2 <create_name+0x12>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b5c      	cmp	r3, #92	; 0x5c
 8006fe6:	d0f4      	beq.n	8006fd2 <create_name+0x12>
	sfn = dp->fn;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006fee:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006ff0:	220b      	movs	r2, #11
 8006ff2:	2120      	movs	r1, #32
 8006ff4:	68b8      	ldr	r0, [r7, #8]
 8006ff6:	f7fe fe26 	bl	8005c46 <mem_set>
	si = i = b = 0; ni = 8;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	2308      	movs	r3, #8
 8007008:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	617a      	str	r2, [r7, #20]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007018:	7fbb      	ldrb	r3, [r7, #30]
 800701a:	2b20      	cmp	r3, #32
 800701c:	d953      	bls.n	80070c6 <create_name+0x106>
 800701e:	7fbb      	ldrb	r3, [r7, #30]
 8007020:	2b2f      	cmp	r3, #47	; 0x2f
 8007022:	d050      	beq.n	80070c6 <create_name+0x106>
 8007024:	7fbb      	ldrb	r3, [r7, #30]
 8007026:	2b5c      	cmp	r3, #92	; 0x5c
 8007028:	d04d      	beq.n	80070c6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800702a:	7fbb      	ldrb	r3, [r7, #30]
 800702c:	2b2e      	cmp	r3, #46	; 0x2e
 800702e:	d003      	beq.n	8007038 <create_name+0x78>
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	429a      	cmp	r2, r3
 8007036:	d30f      	bcc.n	8007058 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b08      	cmp	r3, #8
 800703c:	d102      	bne.n	8007044 <create_name+0x84>
 800703e:	7fbb      	ldrb	r3, [r7, #30]
 8007040:	2b2e      	cmp	r3, #46	; 0x2e
 8007042:	d001      	beq.n	8007048 <create_name+0x88>
 8007044:	2306      	movs	r3, #6
 8007046:	e073      	b.n	8007130 <create_name+0x170>
			i = 8; ni = 11;
 8007048:	2308      	movs	r3, #8
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	230b      	movs	r3, #11
 800704e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e035      	b.n	80070c4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007058:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da08      	bge.n	8007072 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	f043 0303 	orr.w	r3, r3, #3
 8007066:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007068:	7fbb      	ldrb	r3, [r7, #30]
 800706a:	3b80      	subs	r3, #128	; 0x80
 800706c:	4a32      	ldr	r2, [pc, #200]	; (8007138 <create_name+0x178>)
 800706e:	5cd3      	ldrb	r3, [r2, r3]
 8007070:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007072:	7fbb      	ldrb	r3, [r7, #30]
 8007074:	4619      	mov	r1, r3
 8007076:	4831      	ldr	r0, [pc, #196]	; (800713c <create_name+0x17c>)
 8007078:	f7fe fe24 	bl	8005cc4 <chk_chr>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <create_name+0xc6>
				return FR_INVALID_NAME;
 8007082:	2306      	movs	r3, #6
 8007084:	e054      	b.n	8007130 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007086:	7fbb      	ldrb	r3, [r7, #30]
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d907      	bls.n	800709c <create_name+0xdc>
 800708c:	7fbb      	ldrb	r3, [r7, #30]
 800708e:	2b5a      	cmp	r3, #90	; 0x5a
 8007090:	d804      	bhi.n	800709c <create_name+0xdc>
				b |= 2;
 8007092:	7ffb      	ldrb	r3, [r7, #31]
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	77fb      	strb	r3, [r7, #31]
 800709a:	e00c      	b.n	80070b6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800709c:	7fbb      	ldrb	r3, [r7, #30]
 800709e:	2b60      	cmp	r3, #96	; 0x60
 80070a0:	d909      	bls.n	80070b6 <create_name+0xf6>
 80070a2:	7fbb      	ldrb	r3, [r7, #30]
 80070a4:	2b7a      	cmp	r3, #122	; 0x7a
 80070a6:	d806      	bhi.n	80070b6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	7fbb      	ldrb	r3, [r7, #30]
 80070b2:	3b20      	subs	r3, #32
 80070b4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	613a      	str	r2, [r7, #16]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	7fba      	ldrb	r2, [r7, #30]
 80070c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80070c4:	e7a1      	b.n	800700a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	441a      	add	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80070d0:	7fbb      	ldrb	r3, [r7, #30]
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d801      	bhi.n	80070da <create_name+0x11a>
 80070d6:	2304      	movs	r3, #4
 80070d8:	e000      	b.n	80070dc <create_name+0x11c>
 80070da:	2300      	movs	r3, #0
 80070dc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <create_name+0x128>
 80070e4:	2306      	movs	r3, #6
 80070e6:	e023      	b.n	8007130 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2be5      	cmp	r3, #229	; 0xe5
 80070ee:	d102      	bne.n	80070f6 <create_name+0x136>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2205      	movs	r2, #5
 80070f4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d102      	bne.n	8007102 <create_name+0x142>
 80070fc:	7ffb      	ldrb	r3, [r7, #31]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007102:	7ffb      	ldrb	r3, [r7, #31]
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d103      	bne.n	8007114 <create_name+0x154>
 800710c:	7fbb      	ldrb	r3, [r7, #30]
 800710e:	f043 0310 	orr.w	r3, r3, #16
 8007112:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007114:	7ffb      	ldrb	r3, [r7, #31]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	2b04      	cmp	r3, #4
 800711c:	d103      	bne.n	8007126 <create_name+0x166>
 800711e:	7fbb      	ldrb	r3, [r7, #30]
 8007120:	f043 0308 	orr.w	r3, r3, #8
 8007124:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	330b      	adds	r3, #11
 800712a:	7fba      	ldrb	r2, [r7, #30]
 800712c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800712e:	2300      	movs	r3, #0
#endif
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08009b1c 	.word	0x08009b1c
 800713c:	08009098 	.word	0x08009098

08007140 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b2f      	cmp	r3, #47	; 0x2f
 8007150:	d003      	beq.n	800715a <follow_path+0x1a>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b5c      	cmp	r3, #92	; 0x5c
 8007158:	d102      	bne.n	8007160 <follow_path+0x20>
		path++;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b1f      	cmp	r3, #31
 800716e:	d80a      	bhi.n	8007186 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff fba4 	bl	80068c0 <dir_sdi>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007184:	e045      	b.n	8007212 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007186:	463b      	mov	r3, r7
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff ff18 	bl	8006fc0 <create_name>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d136      	bne.n	8007208 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fdb8 	bl	8006d10 <dir_find>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80071aa:	7adb      	ldrb	r3, [r3, #11]
 80071ac:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d128      	bne.n	800720c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d123      	bne.n	800720c <follow_path+0xcc>
 80071c4:	2305      	movs	r3, #5
 80071c6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80071c8:	e020      	b.n	800720c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11d      	bne.n	8007210 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071da:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	330b      	adds	r3, #11
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80071ea:	2305      	movs	r3, #5
 80071ec:	73fb      	strb	r3, [r7, #15]
 80071ee:	e010      	b.n	8007212 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff fd36 	bl	8006c6a <ld_clust>
 80071fe:	4602      	mov	r2, r0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007206:	e7be      	b.n	8007186 <follow_path+0x46>
			if (res != FR_OK) break;
 8007208:	bf00      	nop
 800720a:	e002      	b.n	8007212 <follow_path+0xd2>
				break;
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007210:	bf00      	nop
		}
	}

	return res;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007224:	f04f 33ff 	mov.w	r3, #4294967295
 8007228:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d031      	beq.n	8007296 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e002      	b.n	8007240 <get_ldnumber+0x24>
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	3301      	adds	r3, #1
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b20      	cmp	r3, #32
 8007246:	d903      	bls.n	8007250 <get_ldnumber+0x34>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b3a      	cmp	r3, #58	; 0x3a
 800724e:	d1f4      	bne.n	800723a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b3a      	cmp	r3, #58	; 0x3a
 8007256:	d11c      	bne.n	8007292 <get_ldnumber+0x76>
			tp = *path;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	60fa      	str	r2, [r7, #12]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	3b30      	subs	r3, #48	; 0x30
 8007268:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b09      	cmp	r3, #9
 800726e:	d80e      	bhi.n	800728e <get_ldnumber+0x72>
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	429a      	cmp	r2, r3
 8007276:	d10a      	bne.n	800728e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <get_ldnumber+0x72>
					vol = (int)i;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	e002      	b.n	8007298 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007296:	693b      	ldr	r3, [r7, #16]
}
 8007298:	4618      	mov	r0, r3
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
	...

080072a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fe ff13 	bl	80060ee <move_window>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <check_fs+0x2e>
		return 3;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e04a      	b.n	8007368 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072d8:	3301      	adds	r3, #1
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	b21a      	sxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	4a20      	ldr	r2, [pc, #128]	; (8007370 <check_fs+0xcc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d001      	beq.n	80072f6 <check_fs+0x52>
		return 2;
 80072f2:	2302      	movs	r3, #2
 80072f4:	e038      	b.n	8007368 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3336      	adds	r3, #54	; 0x36
 80072fa:	3303      	adds	r3, #3
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	061a      	lsls	r2, r3, #24
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3336      	adds	r3, #54	; 0x36
 8007304:	3302      	adds	r3, #2
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	4313      	orrs	r3, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	3236      	adds	r2, #54	; 0x36
 8007310:	3201      	adds	r2, #1
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	0212      	lsls	r2, r2, #8
 8007316:	4313      	orrs	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800731e:	4313      	orrs	r3, r2
 8007320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <check_fs+0xd0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <check_fs+0x8a>
		return 0;
 800732a:	2300      	movs	r3, #0
 800732c:	e01c      	b.n	8007368 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3352      	adds	r3, #82	; 0x52
 8007332:	3303      	adds	r3, #3
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	061a      	lsls	r2, r3, #24
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3352      	adds	r3, #82	; 0x52
 800733c:	3302      	adds	r3, #2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	041b      	lsls	r3, r3, #16
 8007342:	4313      	orrs	r3, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	3252      	adds	r2, #82	; 0x52
 8007348:	3201      	adds	r2, #1
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	0212      	lsls	r2, r2, #8
 800734e:	4313      	orrs	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007356:	4313      	orrs	r3, r2
 8007358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800735c:	4a05      	ldr	r2, [pc, #20]	; (8007374 <check_fs+0xd0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <check_fs+0xc2>
		return 0;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <check_fs+0xc4>

	return 1;
 8007366:	2301      	movs	r3, #1
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	ffffaa55 	.word	0xffffaa55
 8007374:	00544146 	.word	0x00544146

08007378 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b096      	sub	sp, #88	; 0x58
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800738c:	68b8      	ldr	r0, [r7, #8]
 800738e:	f7ff ff45 	bl	800721c <get_ldnumber>
 8007392:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;//vol=0
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	2b00      	cmp	r3, #0
 8007398:	da01      	bge.n	800739e <find_volume+0x26>
 800739a:	230b      	movs	r3, #11
 800739c:	e2aa      	b.n	80078f4 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800739e:	4a9e      	ldr	r2, [pc, #632]	; (8007618 <find_volume+0x2a0>)
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <find_volume+0x3a>
 80073ae:	230c      	movs	r3, #12
 80073b0:	e2a0      	b.n	80078f4 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01b      	beq.n	80073fa <find_volume+0x82>
		stat = disk_status(fs->drv);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fb81 	bl	8005ad0 <disk_status>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10c      	bne.n	80073fa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <find_volume+0x7e>
 80073e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80073f2:	230a      	movs	r3, #10
 80073f4:	e27e      	b.n	80078f4 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 80073f6:	2300      	movs	r3, #0
 80073f8:	e27c      	b.n	80078f4 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fb76 	bl	8005b04 <disk_initialize>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800741e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800742a:	2303      	movs	r3, #3
 800742c:	e262      	b.n	80078f4 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <find_volume+0xcc>
 8007434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007440:	230a      	movs	r3, #10
 8007442:	e257      	b.n	80078f4 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800744a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800744c:	f7ff ff2a 	bl	80072a4 <check_fs>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800745a:	2b01      	cmp	r3, #1
 800745c:	d155      	bne.n	800750a <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800745e:	2300      	movs	r3, #0
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
 8007462:	e029      	b.n	80074b8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800746e:	4413      	add	r3, r2
 8007470:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	3304      	adds	r3, #4
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d012      	beq.n	80074a2 <find_volume+0x12a>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	330b      	adds	r3, #11
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	061a      	lsls	r2, r3, #24
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	330a      	adds	r3, #10
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	4313      	orrs	r3, r2
 800748e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007490:	3209      	adds	r2, #9
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	0212      	lsls	r2, r2, #8
 8007496:	4313      	orrs	r3, r2
 8007498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749a:	3208      	adds	r2, #8
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	431a      	orrs	r2, r3
 80074a0:	e000      	b.n	80074a4 <find_volume+0x12c>
 80074a2:	2200      	movs	r2, #0
 80074a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80074ac:	440b      	add	r3, r1
 80074ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80074b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b4:	3301      	adds	r3, #1
 80074b6:	643b      	str	r3, [r7, #64]	; 0x40
 80074b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d9d2      	bls.n	8007464 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80074be:	2300      	movs	r3, #0
 80074c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80074c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <find_volume+0x156>
 80074c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ca:	3b01      	subs	r3, #1
 80074cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80074ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80074d6:	4413      	add	r3, r2
 80074d8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074dc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80074de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <find_volume+0x178>
 80074e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074e8:	f7ff fedc 	bl	80072a4 <check_fs>
 80074ec:	4603      	mov	r3, r0
 80074ee:	e000      	b.n	80074f2 <find_volume+0x17a>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80074f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <find_volume+0x192>
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	3301      	adds	r3, #1
 8007502:	643b      	str	r3, [r7, #64]	; 0x40
 8007504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007506:	2b03      	cmp	r3, #3
 8007508:	d9e1      	bls.n	80074ce <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800750a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800750e:	2b03      	cmp	r3, #3
 8007510:	d101      	bne.n	8007516 <find_volume+0x19e>
 8007512:	2301      	movs	r3, #1
 8007514:	e1ee      	b.n	80078f4 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <find_volume+0x1aa>
 800751e:	230d      	movs	r3, #13
 8007520:	e1e8      	b.n	80078f4 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	7b1b      	ldrb	r3, [r3, #12]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b21a      	sxth	r2, r3
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	7adb      	ldrb	r3, [r3, #11]
 800752e:	b21b      	sxth	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b21b      	sxth	r3, r3
 8007534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007538:	d001      	beq.n	800753e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800753a:	230d      	movs	r3, #13
 800753c:	e1da      	b.n	80078f4 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	7ddb      	ldrb	r3, [r3, #23]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b21a      	sxth	r2, r3
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	7d9b      	ldrb	r3, [r3, #22]
 800754a:	b21b      	sxth	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b21b      	sxth	r3, r3
 8007550:	b29b      	uxth	r3, r3
 8007552:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d112      	bne.n	8007580 <find_volume+0x208>
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007560:	061a      	lsls	r2, r3, #24
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	4313      	orrs	r3, r2
 800756c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800756e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007572:	0212      	lsls	r2, r2, #8
 8007574:	4313      	orrs	r3, r2
 8007576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007578:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800757c:	4313      	orrs	r3, r2
 800757e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007584:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	7c1a      	ldrb	r2, [r3, #16]
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007598:	2b01      	cmp	r3, #1
 800759a:	d006      	beq.n	80075aa <find_volume+0x232>
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d001      	beq.n	80075aa <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80075a6:	230d      	movs	r3, #13
 80075a8:	e1a4      	b.n	80078f4 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80075b0:	461a      	mov	r2, r3
 80075b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
 80075b8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	7b5a      	ldrb	r2, [r3, #13]
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <find_volume+0x26c>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80075d4:	461a      	mov	r2, r3
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80075dc:	3b01      	subs	r3, #1
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 80075e4:	230d      	movs	r3, #13
 80075e6:	e185      	b.n	80078f4 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80075e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ea:	7c9b      	ldrb	r3, [r3, #18]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	b21a      	sxth	r2, r3
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	7c5b      	ldrb	r3, [r3, #17]
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b21b      	sxth	r3, r3
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8007612:	230d      	movs	r3, #13
 8007614:	e16e      	b.n	80078f4 <find_volume+0x57c>
 8007616:	bf00      	nop
 8007618:	20000dc0 	.word	0x20000dc0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	7d1b      	ldrb	r3, [r3, #20]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	b21a      	sxth	r2, r3
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	7cdb      	ldrb	r3, [r3, #19]
 8007628:	b21b      	sxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b21b      	sxth	r3, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007634:	2b00      	cmp	r3, #0
 8007636:	d112      	bne.n	800765e <find_volume+0x2e6>
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800763e:	061a      	lsls	r2, r3, #24
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	4313      	orrs	r3, r2
 800764a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800764c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007650:	0212      	lsls	r2, r2, #8
 8007652:	4313      	orrs	r3, r2
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	f892 2020 	ldrb.w	r2, [r2, #32]
 800765a:	4313      	orrs	r3, r2
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	7bdb      	ldrb	r3, [r3, #15]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b21a      	sxth	r2, r3
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	7b9b      	ldrb	r3, [r3, #14]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <find_volume+0x304>
 8007678:	230d      	movs	r3, #13
 800767a:	e13b      	b.n	80078f4 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800767c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	4413      	add	r3, r2
 8007682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007684:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007688:	0912      	lsrs	r2, r2, #4
 800768a:	b292      	uxth	r2, r2
 800768c:	4413      	add	r3, r2
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	429a      	cmp	r2, r3
 8007696:	d201      	bcs.n	800769c <find_volume+0x324>
 8007698:	230d      	movs	r3, #13
 800769a:	e12b      	b.n	80078f4 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800769c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <find_volume+0x340>
 80076b4:	230d      	movs	r3, #13
 80076b6:	e11d      	b.n	80078f4 <find_volume+0x57c>
	fmt = FS_FAT12;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d902      	bls.n	80076ce <find_volume+0x356>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d902      	bls.n	80076de <find_volume+0x366>
 80076d8:	2303      	movs	r3, #3
 80076da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	1c9a      	adds	r2, r3, #2
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80076f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f4:	441a      	add	r2, r3
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80076fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	441a      	add	r2, r3
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800770c:	2b03      	cmp	r3, #3
 800770e:	d121      	bne.n	8007754 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <find_volume+0x3a6>
 800771a:	230d      	movs	r3, #13
 800771c:	e0ea      	b.n	80078f4 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	4313      	orrs	r3, r2
 8007730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007732:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007736:	0212      	lsls	r2, r2, #8
 8007738:	4313      	orrs	r3, r2
 800773a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800773c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007740:	431a      	orrs	r2, r3
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	647b      	str	r3, [r7, #68]	; 0x44
 8007752:	e025      	b.n	80077a0 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <find_volume+0x3ea>
 800775e:	230d      	movs	r3, #13
 8007760:	e0c8      	b.n	80078f4 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	441a      	add	r2, r3
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007776:	2b02      	cmp	r3, #2
 8007778:	d104      	bne.n	8007784 <find_volume+0x40c>
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	e00c      	b.n	800779e <find_volume+0x426>
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	085a      	lsrs	r2, r3, #1
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800779e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80077ac:	0a5b      	lsrs	r3, r3, #9
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d201      	bcs.n	80077b6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 80077b2:	230d      	movs	r3, #13
 80077b4:	e09e      	b.n	80078f4 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	2280      	movs	r2, #128	; 0x80
 80077d0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80077d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d177      	bne.n	80078cc <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	b21a      	sxth	r2, r3
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b21b      	sxth	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d16a      	bne.n	80078cc <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 80077f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f8:	3301      	adds	r3, #1
 80077fa:	4619      	mov	r1, r3
 80077fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077fe:	f7fe fc76 	bl	80060ee <move_window>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d161      	bne.n	80078cc <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	b21a      	sxth	r2, r3
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007820:	b21b      	sxth	r3, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	b21b      	sxth	r3, r3
 8007826:	4a35      	ldr	r2, [pc, #212]	; (80078fc <find_volume+0x584>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d14f      	bne.n	80078cc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	78db      	ldrb	r3, [r3, #3]
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	789b      	ldrb	r3, [r3, #2]
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	4313      	orrs	r3, r2
 800783a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783c:	7852      	ldrb	r2, [r2, #1]
 800783e:	0212      	lsls	r2, r2, #8
 8007840:	4313      	orrs	r3, r2
 8007842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	4313      	orrs	r3, r2
 8007848:	4a2d      	ldr	r2, [pc, #180]	; (8007900 <find_volume+0x588>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d13e      	bne.n	80078cc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007854:	061a      	lsls	r2, r3, #24
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	4313      	orrs	r3, r2
 8007860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007862:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007866:	0212      	lsls	r2, r2, #8
 8007868:	4313      	orrs	r3, r2
 800786a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800786c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007870:	4313      	orrs	r3, r2
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <find_volume+0x58c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d129      	bne.n	80078cc <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800787e:	061a      	lsls	r2, r3, #24
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	4313      	orrs	r3, r2
 800788a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800788c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007890:	0212      	lsls	r2, r2, #8
 8007892:	4313      	orrs	r3, r2
 8007894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007896:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800789a:	431a      	orrs	r2, r3
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80078a8:	061a      	lsls	r2, r3, #24
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80078b0:	041b      	lsls	r3, r3, #16
 80078b2:	4313      	orrs	r3, r2
 80078b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078b6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80078ba:	0212      	lsls	r2, r2, #8
 80078bc:	4313      	orrs	r3, r2
 80078be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80078c4:	431a      	orrs	r2, r3
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80078d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <find_volume+0x590>)
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <find_volume+0x590>)
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <find_volume+0x590>)
 80078e4:	881a      	ldrh	r2, [r3, #0]
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80078ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ee:	f7fe fb8d 	bl	800600c <clear_lock>
#endif

	return FR_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3758      	adds	r7, #88	; 0x58
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	ffffaa55 	.word	0xffffaa55
 8007900:	41615252 	.word	0x41615252
 8007904:	61417272 	.word	0x61417272
 8007908:	20000dc4 	.word	0x20000dc4

0800790c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d022      	beq.n	8007964 <validate+0x58>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01d      	beq.n	8007964 <validate+0x58>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800792e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <validate+0x58>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800793c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007946:	429a      	cmp	r2, r3
 8007948:	d10c      	bne.n	8007964 <validate+0x58>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007950:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe f8bb 	bl	8005ad0 <disk_status>
 800795a:	4603      	mov	r3, r0
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007964:	2309      	movs	r3, #9
 8007966:	e000      	b.n	800796a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007986:	f107 0310 	add.w	r3, r7, #16
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fc46 	bl	800721c <get_ldnumber>
 8007990:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da01      	bge.n	800799c <f_mount+0x28>
 8007998:	230b      	movs	r3, #11
 800799a:	e02d      	b.n	80079f8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800799c:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <f_mount+0x8c>)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80079ac:	69b8      	ldr	r0, [r7, #24]
 80079ae:	f7fe fb2d 	bl	800600c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	490d      	ldr	r1, [pc, #52]	; (8007a00 <f_mount+0x8c>)
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <f_mount+0x6a>
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <f_mount+0x6e>
 80079de:	2300      	movs	r3, #0
 80079e0:	e00a      	b.n	80079f8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80079e2:	f107 0108 	add.w	r1, r7, #8
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	2200      	movs	r2, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fcc3 	bl	8007378 <find_volume>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000dc0 	.word	0x20000dc0

08007a04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	f107 0308 	add.w	r3, r7, #8
 8007a16:	6019      	str	r1, [r3, #0]
 8007a18:	1dfb      	adds	r3, r7, #7
 8007a1a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <f_open+0x26>
 8007a26:	2309      	movs	r3, #9
 8007a28:	e1f2      	b.n	8007e10 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8007a2a:	f107 030c 	add.w	r3, r7, #12
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007a36:	1dfb      	adds	r3, r7, #7
 8007a38:	1dfa      	adds	r2, r7, #7
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	f002 021f 	and.w	r2, r2, #31
 8007a40:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007a42:	1dfb      	adds	r3, r7, #7
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	f107 0320 	add.w	r3, r7, #32
 8007a54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fc8d 	bl	8007378 <find_volume>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007a64:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 81cf 	bne.w	8007e0c <f_open+0x408>
		INIT_BUF(dj);
 8007a6e:	f107 0320 	add.w	r3, r7, #32
 8007a72:	f107 0214 	add.w	r2, r7, #20
 8007a76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	f107 0320 	add.w	r3, r7, #32
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fb5a 	bl	8007140 <follow_path>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8007a92:	f107 0320 	add.w	r3, r7, #32
 8007a96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a9a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a9e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d11a      	bne.n	8007adc <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8007aa6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8007aae:	2306      	movs	r3, #6
 8007ab0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007ab4:	e012      	b.n	8007adc <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ab6:	1dfb      	adds	r3, r7, #7
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f023 0301 	bic.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bf14      	ite	ne
 8007ac2:	2301      	movne	r3, #1
 8007ac4:	2300      	moveq	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f107 0320 	add.w	r3, r7, #32
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe f911 	bl	8005cf8 <chk_lock>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007adc:	1dfb      	adds	r3, r7, #7
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 031c 	and.w	r3, r3, #28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80cc 	beq.w	8007c82 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8007aea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01f      	beq.n	8007b32 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007af2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d10e      	bne.n	8007b18 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007afa:	f7fe f969 	bl	8005dd0 <enq_lock>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <f_open+0x10e>
 8007b04:	f107 0320 	add.w	r3, r7, #32
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f9af 	bl	8006e6c <dir_register>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	e000      	b.n	8007b14 <f_open+0x110>
 8007b12:	2312      	movs	r3, #18
 8007b14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b18:	1dfb      	adds	r3, r7, #7
 8007b1a:	1dfa      	adds	r2, r7, #7
 8007b1c:	7812      	ldrb	r2, [r2, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007b24:	f107 0320 	add.w	r3, r7, #32
 8007b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b2c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007b30:	e014      	b.n	8007b5c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b36:	330b      	adds	r3, #11
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 0311 	and.w	r3, r3, #17
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <f_open+0x146>
					res = FR_DENIED;
 8007b42:	2307      	movs	r3, #7
 8007b44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007b48:	e008      	b.n	8007b5c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007b4a:	1dfb      	adds	r3, r7, #7
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <f_open+0x158>
						res = FR_EXIST;
 8007b56:	2308      	movs	r3, #8
 8007b58:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b5c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 80af 	bne.w	8007cc4 <f_open+0x2c0>
 8007b66:	1dfb      	adds	r3, r7, #7
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80a8 	beq.w	8007cc4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8007b74:	f7fd f910 	bl	8004d98 <get_fattime>
 8007b78:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007b7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b80:	330e      	adds	r3, #14
 8007b82:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b98:	330f      	adds	r3, #15
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007ba2:	0c1a      	lsrs	r2, r3, #16
 8007ba4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007ba8:	3310      	adds	r3, #16
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007bb2:	0e1a      	lsrs	r2, r3, #24
 8007bb4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007bb8:	3311      	adds	r3, #17
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007bbe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007bc2:	330b      	adds	r3, #11
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007bc8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007bcc:	331c      	adds	r3, #28
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007bd6:	331d      	adds	r3, #29
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007be0:	331e      	adds	r3, #30
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007bea:	331f      	adds	r3, #31
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007bf0:	f107 0320 	add.w	r3, r7, #32
 8007bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bf8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff f834 	bl	8006c6a <ld_clust>
 8007c02:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8007c06:	2100      	movs	r1, #0
 8007c08:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007c0c:	f7ff f85a 	bl	8006cc4 <st_clust>
				dj.fs->wflag = 1;
 8007c10:	f107 0320 	add.w	r3, r7, #32
 8007c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8007c1e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d04e      	beq.n	8007cc4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8007c26:	f107 0320 	add.w	r3, r7, #32
 8007c2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c2e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007c32:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007c36:	f107 0320 	add.w	r3, r7, #32
 8007c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c3e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fd11 	bl	800666a <remove_chain>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007c4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d136      	bne.n	8007cc4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c56:	f107 0320 	add.w	r3, r7, #32
 8007c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c5e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007c62:	3a01      	subs	r2, #1
 8007c64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8007c68:	f107 0320 	add.w	r3, r7, #32
 8007c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c70:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe fa3a 	bl	80060ee <move_window>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007c80:	e020      	b.n	8007cc4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007c82:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11c      	bne.n	8007cc4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007c8a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007c8e:	330b      	adds	r3, #11
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <f_open+0x29e>
					res = FR_NO_FILE;
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007ca0:	e010      	b.n	8007cc4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007ca2:	1dfb      	adds	r3, r7, #7
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <f_open+0x2c0>
 8007cae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007cb2:	330b      	adds	r3, #11
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <f_open+0x2c0>
						res = FR_DENIED;
 8007cbe:	2307      	movs	r3, #7
 8007cc0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007cc4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d13d      	bne.n	8007d48 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ccc:	1dfb      	adds	r3, r7, #7
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8007cd8:	1dfb      	adds	r3, r7, #7
 8007cda:	1dfa      	adds	r2, r7, #7
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	f042 0220 	orr.w	r2, r2, #32
 8007ce2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007ce4:	f107 0320 	add.w	r3, r7, #32
 8007ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cec:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007cf0:	f107 030c 	add.w	r3, r7, #12
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007d04:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d08:	1dfb      	adds	r3, r7, #7
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f107 0320 	add.w	r3, r7, #32
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe f878 	bl	8005e18 <inc_lock>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f107 030c 	add.w	r3, r7, #12
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <f_open+0x344>
 8007d42:	2302      	movs	r3, #2
 8007d44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007d48:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d15d      	bne.n	8007e0c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8007d50:	f107 030c 	add.w	r3, r7, #12
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	1dfa      	adds	r2, r7, #7
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007d6a:	f107 0320 	add.w	r3, r7, #32
 8007d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d72:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe ff77 	bl	8006c6a <ld_clust>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f107 030c 	add.w	r3, r7, #12
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007d88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007d8c:	331f      	adds	r3, #31
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	061a      	lsls	r2, r3, #24
 8007d92:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007d96:	331e      	adds	r3, #30
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007da2:	321d      	adds	r2, #29
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	0212      	lsls	r2, r2, #8
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007dae:	321c      	adds	r2, #28
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007dbe:	f107 030c 	add.w	r3, r7, #12
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007dca:	f107 030c 	add.w	r3, r7, #12
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007dd6:	f107 030c 	add.w	r3, r7, #12
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007de2:	f107 0320 	add.w	r3, r7, #32
 8007de6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007dea:	f107 030c 	add.w	r3, r7, #12
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dfe:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007e0c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b08c      	sub	sp, #48	; 0x30
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fd6a 	bl	800790c <validate>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007e3c:	7ffb      	ldrb	r3, [r7, #31]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <f_read+0x2c>
 8007e42:	7ffb      	ldrb	r3, [r7, #31]
 8007e44:	e150      	b.n	80080e8 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007e56:	e147      	b.n	80080e8 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007e66:	2307      	movs	r3, #7
 8007e68:	e13e      	b.n	80080e8 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f240 812d 	bls.w	80080de <f_read+0x2c4>
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007e88:	e129      	b.n	80080de <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f040 80f2 	bne.w	800807e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eaa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d139      	bne.n	8007f30 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ece:	e018      	b.n	8007f02 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7fe fcb8 	bl	8006858 <clmt_clust>
 8007ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007eea:	e00a      	b.n	8007f02 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7fe f9f3 	bl	80062e6 <get_fat>
 8007f00:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d805      	bhi.n	8007f14 <f_read+0xfa>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f10:	2302      	movs	r3, #2
 8007f12:	e0e9      	b.n	80080e8 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d105      	bne.n	8007f28 <f_read+0x10e>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f24:	2301      	movs	r3, #1
 8007f26:	e0df      	b.n	80080e8 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fe f9b0 	bl	80062a4 <clust2sect>
 8007f44:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <f_read+0x13e>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f54:	2302      	movs	r3, #2
 8007f56:	e0c7      	b.n	80080e8 <f_read+0x2ce>
			sect += csect;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	0a5b      	lsrs	r3, r3, #9
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d046      	beq.n	8007ffa <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007f6c:	7dfa      	ldrb	r2, [r7, #23]
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	4413      	add	r3, r2
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007f78:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d908      	bls.n	8007f92 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f86:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f98:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	6a39      	ldr	r1, [r7, #32]
 8007fa2:	f7fd fdd5 	bl	8005b50 <disk_read>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e097      	b.n	80080e8 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d015      	beq.n	8007ff2 <f_read+0x1d8>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d90d      	bls.n	8007ff2 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	025b      	lsls	r3, r3, #9
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fd fe0d 	bl	8005c0c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	025b      	lsls	r3, r3, #9
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007ff8:	e05b      	b.n	80080b2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	429a      	cmp	r2, r3
 8008004:	d037      	beq.n	8008076 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800800c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01d      	beq.n	8008050 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800801a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008026:	2301      	movs	r3, #1
 8008028:	f7fd fdb2 	bl	8005b90 <disk_write>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800803a:	2301      	movs	r3, #1
 800803c:	e054      	b.n	80080e8 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008048:	b2da      	uxtb	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008056:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	2301      	movs	r3, #1
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	f7fd fd76 	bl	8005b50 <disk_read>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008072:	2301      	movs	r3, #1
 8008074:	e038      	b.n	80080e8 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008088:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800808e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d901      	bls.n	800809a <f_read+0x280>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80080a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080aa:	4619      	mov	r1, r3
 80080ac:	6a38      	ldr	r0, [r7, #32]
 80080ae:	f7fd fdad 	bl	8005c0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	4413      	add	r3, r2
 80080b8:	623b      	str	r3, [r7, #32]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	441a      	add	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f aed2 	bne.w	8007e8a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3730      	adds	r7, #48	; 0x30
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fc07 	bl	800790c <validate>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 80a8 	bne.w	800825a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80a0 	beq.w	800825a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d019      	beq.n	800815c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800812e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800813a:	2301      	movs	r3, #1
 800813c:	f7fd fd28 	bl	8005b90 <disk_write>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008146:	2301      	movs	r3, #1
 8008148:	e088      	b.n	800825c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fd ffbf 	bl	80060ee <move_window>
 8008170:	4603      	mov	r3, r0
 8008172:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d16f      	bne.n	800825a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008180:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	330b      	adds	r3, #11
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	330b      	adds	r3, #11
 800818c:	f042 0220 	orr.w	r2, r2, #32
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	331c      	adds	r3, #28
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	331d      	adds	r3, #29
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80081bc:	0c1a      	lsrs	r2, r3, #16
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	331e      	adds	r3, #30
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80081cc:	0e1a      	lsrs	r2, r3, #24
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	331f      	adds	r3, #31
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081dc:	4619      	mov	r1, r3
 80081de:	6938      	ldr	r0, [r7, #16]
 80081e0:	f7fe fd70 	bl	8006cc4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80081e4:	f7fc fdd8 	bl	8004d98 <get_fattime>
 80081e8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3316      	adds	r3, #22
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3317      	adds	r3, #23
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	0c1a      	lsrs	r2, r3, #16
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	3318      	adds	r3, #24
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	0e1a      	lsrs	r2, r3, #24
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	3319      	adds	r3, #25
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3312      	adds	r3, #18
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3313      	adds	r3, #19
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008232:	f023 0320 	bic.w	r3, r3, #32
 8008236:	b2da      	uxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008250:	4618      	mov	r0, r3
 8008252:	f7fd ff7a 	bl	800614a <sync_fs>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ff3f 	bl	80080f0 <f_sync>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d116      	bne.n	80082aa <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fb45 	bl	800790c <validate>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10e      	bne.n	80082aa <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd fe76 	bl	8005f84 <dec_lock>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <f_opendir+0x14>
 80082c4:	2309      	movs	r3, #9
 80082c6:	e073      	b.n	80083b0 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80082c8:	4639      	mov	r1, r7
 80082ca:	f107 0318 	add.w	r3, r7, #24
 80082ce:	2200      	movs	r2, #0
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff f851 	bl	8007378 <find_volume>
 80082d6:	4603      	mov	r3, r0
 80082d8:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80082da:	7ffb      	ldrb	r3, [r7, #31]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d15f      	bne.n	80083a0 <f_opendir+0xec>
		dp->fs = fs;
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f107 020c 	add.w	r2, r7, #12
 80082ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fe ff22 	bl	8007140 <follow_path>
 80082fc:	4603      	mov	r3, r0
 80082fe:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8008300:	7ffb      	ldrb	r3, [r7, #31]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d147      	bne.n	8008396 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800830c:	2b00      	cmp	r3, #0
 800830e:	d017      	beq.n	8008340 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008316:	330b      	adds	r3, #11
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0310 	and.w	r3, r3, #16
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fe fc9c 	bl	8006c6a <ld_clust>
 8008332:	4602      	mov	r2, r0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800833a:	e001      	b.n	8008340 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800833c:	2305      	movs	r3, #5
 800833e:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8008340:	7ffb      	ldrb	r3, [r7, #31]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d127      	bne.n	8008396 <f_opendir+0xe2>
				dp->id = fs->id;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe fab3 	bl	80068c0 <dir_sdi>
 800835a:	4603      	mov	r3, r0
 800835c:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800835e:	7ffb      	ldrb	r3, [r7, #31]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d118      	bne.n	8008396 <f_opendir+0xe2>
					if (dp->sclust) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00f      	beq.n	800838e <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800836e:	2100      	movs	r1, #0
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7fd fd51 	bl	8005e18 <inc_lock>
 8008376:	4602      	mov	r2, r0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8008388:	2312      	movs	r3, #18
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e003      	b.n	8008396 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008396:	7ffb      	ldrb	r3, [r7, #31]
 8008398:	2b04      	cmp	r3, #4
 800839a:	d101      	bne.n	80083a0 <f_opendir+0xec>
 800839c:	2305      	movs	r3, #5
 800839e:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80083a0:	7ffb      	ldrb	r3, [r7, #31]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <f_opendir+0xfa>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 80083ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff faa3 	bl	800790c <validate>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d113      	bne.n	80083f8 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fd fdcf 	bl	8005f84 <dec_lock>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d103      	bne.n	80083f8 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff fa7d 	bl	800790c <validate>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d133      	bne.n	8008484 <f_readdir+0x82>
		if (!fno) {
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fe fa4b 	bl	80068c0 <dir_sdi>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
 800842e:	e029      	b.n	8008484 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7fe fcb6 	bl	8006dae <dir_read>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d105      	bne.n	8008458 <f_readdir+0x56>
				dp->sect = 0;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d112      	bne.n	8008484 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7fe fd3c 	bl	8006ede <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008466:	2100      	movs	r1, #0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7fe fabd 	bl	80069e8 <dir_next>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2b04      	cmp	r3, #4
 8008476:	d105      	bne.n	8008484 <f_readdir+0x82>
					dp->sect = 0;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800849e:	2301      	movs	r3, #1
 80084a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084a8:	7a5b      	ldrb	r3, [r3, #9]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d831      	bhi.n	8008514 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084b0:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084b2:	7a5b      	ldrb	r3, [r3, #9]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	4b19      	ldr	r3, [pc, #100]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084ba:	2100      	movs	r1, #0
 80084bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084c0:	7a5b      	ldrb	r3, [r3, #9]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	4a16      	ldr	r2, [pc, #88]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084d0:	7a5b      	ldrb	r3, [r3, #9]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084d8:	4413      	add	r3, r2
 80084da:	79fa      	ldrb	r2, [r7, #7]
 80084dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084e0:	7a5b      	ldrb	r3, [r3, #9]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	b2d1      	uxtb	r1, r2
 80084e8:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <FATFS_LinkDriverEx+0x90>)
 80084ea:	7251      	strb	r1, [r2, #9]
 80084ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084ee:	7dbb      	ldrb	r3, [r7, #22]
 80084f0:	3330      	adds	r3, #48	; 0x30
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	3301      	adds	r3, #1
 80084fc:	223a      	movs	r2, #58	; 0x3a
 80084fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3302      	adds	r3, #2
 8008504:	222f      	movs	r2, #47	; 0x2f
 8008506:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	3303      	adds	r3, #3
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
}
 8008516:	4618      	mov	r0, r3
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr
 8008520:	20000de0 	.word	0x20000de0

08008524 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ffac 	bl	8008490 <FATFS_LinkDriverEx>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000030 	.word	0x20000030

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	2500      	movs	r5, #0
 8008554:	4e0c      	ldr	r6, [pc, #48]	; (8008588 <__libc_init_array+0x38>)
 8008556:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008558:	1ba4      	subs	r4, r4, r6
 800855a:	10a4      	asrs	r4, r4, #2
 800855c:	42a5      	cmp	r5, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	f000 fcae 	bl	8008ec0 <_init>
 8008564:	2500      	movs	r5, #0
 8008566:	4e0a      	ldr	r6, [pc, #40]	; (8008590 <__libc_init_array+0x40>)
 8008568:	4c0a      	ldr	r4, [pc, #40]	; (8008594 <__libc_init_array+0x44>)
 800856a:	1ba4      	subs	r4, r4, r6
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	42a5      	cmp	r5, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008578:	4798      	blx	r3
 800857a:	3501      	adds	r5, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008582:	4798      	blx	r3
 8008584:	3501      	adds	r5, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	08009c30 	.word	0x08009c30
 800858c:	08009c30 	.word	0x08009c30
 8008590:	08009c30 	.word	0x08009c30
 8008594:	08009c34 	.word	0x08009c34

08008598 <memcpy>:
 8008598:	b510      	push	{r4, lr}
 800859a:	1e43      	subs	r3, r0, #1
 800859c:	440a      	add	r2, r1
 800859e:	4291      	cmp	r1, r2
 80085a0:	d100      	bne.n	80085a4 <memcpy+0xc>
 80085a2:	bd10      	pop	{r4, pc}
 80085a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ac:	e7f7      	b.n	800859e <memcpy+0x6>

080085ae <memmove>:
 80085ae:	4288      	cmp	r0, r1
 80085b0:	b510      	push	{r4, lr}
 80085b2:	eb01 0302 	add.w	r3, r1, r2
 80085b6:	d807      	bhi.n	80085c8 <memmove+0x1a>
 80085b8:	1e42      	subs	r2, r0, #1
 80085ba:	4299      	cmp	r1, r3
 80085bc:	d00a      	beq.n	80085d4 <memmove+0x26>
 80085be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80085c6:	e7f8      	b.n	80085ba <memmove+0xc>
 80085c8:	4283      	cmp	r3, r0
 80085ca:	d9f5      	bls.n	80085b8 <memmove+0xa>
 80085cc:	1881      	adds	r1, r0, r2
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	42d3      	cmn	r3, r2
 80085d2:	d100      	bne.n	80085d6 <memmove+0x28>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80085de:	e7f7      	b.n	80085d0 <memmove+0x22>

080085e0 <memset>:
 80085e0:	4603      	mov	r3, r0
 80085e2:	4402      	add	r2, r0
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d100      	bne.n	80085ea <memset+0xa>
 80085e8:	4770      	bx	lr
 80085ea:	f803 1b01 	strb.w	r1, [r3], #1
 80085ee:	e7f9      	b.n	80085e4 <memset+0x4>

080085f0 <siprintf>:
 80085f0:	b40e      	push	{r1, r2, r3}
 80085f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085f6:	b500      	push	{lr}
 80085f8:	b09c      	sub	sp, #112	; 0x70
 80085fa:	ab1d      	add	r3, sp, #116	; 0x74
 80085fc:	9002      	str	r0, [sp, #8]
 80085fe:	9006      	str	r0, [sp, #24]
 8008600:	9107      	str	r1, [sp, #28]
 8008602:	9104      	str	r1, [sp, #16]
 8008604:	4808      	ldr	r0, [pc, #32]	; (8008628 <siprintf+0x38>)
 8008606:	4909      	ldr	r1, [pc, #36]	; (800862c <siprintf+0x3c>)
 8008608:	f853 2b04 	ldr.w	r2, [r3], #4
 800860c:	9105      	str	r1, [sp, #20]
 800860e:	6800      	ldr	r0, [r0, #0]
 8008610:	a902      	add	r1, sp, #8
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	f000 f986 	bl	8008924 <_svfiprintf_r>
 8008618:	2200      	movs	r2, #0
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	b01c      	add	sp, #112	; 0x70
 8008620:	f85d eb04 	ldr.w	lr, [sp], #4
 8008624:	b003      	add	sp, #12
 8008626:	4770      	bx	lr
 8008628:	20000030 	.word	0x20000030
 800862c:	ffff0208 	.word	0xffff0208

08008630 <strcpy>:
 8008630:	4603      	mov	r3, r0
 8008632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008636:	f803 2b01 	strb.w	r2, [r3], #1
 800863a:	2a00      	cmp	r2, #0
 800863c:	d1f9      	bne.n	8008632 <strcpy+0x2>
 800863e:	4770      	bx	lr

08008640 <strncpy>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4604      	mov	r4, r0
 8008644:	3901      	subs	r1, #1
 8008646:	b902      	cbnz	r2, 800864a <strncpy+0xa>
 8008648:	bd70      	pop	{r4, r5, r6, pc}
 800864a:	4623      	mov	r3, r4
 800864c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008650:	1e56      	subs	r6, r2, #1
 8008652:	f803 5b01 	strb.w	r5, [r3], #1
 8008656:	b92d      	cbnz	r5, 8008664 <strncpy+0x24>
 8008658:	4414      	add	r4, r2
 800865a:	42a3      	cmp	r3, r4
 800865c:	d0f4      	beq.n	8008648 <strncpy+0x8>
 800865e:	f803 5b01 	strb.w	r5, [r3], #1
 8008662:	e7fa      	b.n	800865a <strncpy+0x1a>
 8008664:	461c      	mov	r4, r3
 8008666:	4632      	mov	r2, r6
 8008668:	e7ed      	b.n	8008646 <strncpy+0x6>
	...

0800866c <strtok>:
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <strtok+0x50>)
 800866e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	681d      	ldr	r5, [r3, #0]
 8008674:	4606      	mov	r6, r0
 8008676:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008678:	460f      	mov	r7, r1
 800867a:	b9b4      	cbnz	r4, 80086aa <strtok+0x3e>
 800867c:	2050      	movs	r0, #80	; 0x50
 800867e:	f000 f849 	bl	8008714 <malloc>
 8008682:	65a8      	str	r0, [r5, #88]	; 0x58
 8008684:	e9c0 4400 	strd	r4, r4, [r0]
 8008688:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800868c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008690:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008694:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008698:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800869c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80086a0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80086a4:	6184      	str	r4, [r0, #24]
 80086a6:	7704      	strb	r4, [r0, #28]
 80086a8:	6244      	str	r4, [r0, #36]	; 0x24
 80086aa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80086ac:	4639      	mov	r1, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	2301      	movs	r3, #1
 80086b6:	f000 b803 	b.w	80086c0 <__strtok_r>
 80086ba:	bf00      	nop
 80086bc:	20000030 	.word	0x20000030

080086c0 <__strtok_r>:
 80086c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c2:	b918      	cbnz	r0, 80086cc <__strtok_r+0xc>
 80086c4:	6810      	ldr	r0, [r2, #0]
 80086c6:	b908      	cbnz	r0, 80086cc <__strtok_r+0xc>
 80086c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ca:	4620      	mov	r0, r4
 80086cc:	4604      	mov	r4, r0
 80086ce:	460f      	mov	r7, r1
 80086d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086d8:	b91e      	cbnz	r6, 80086e2 <__strtok_r+0x22>
 80086da:	b96d      	cbnz	r5, 80086f8 <__strtok_r+0x38>
 80086dc:	6015      	str	r5, [r2, #0]
 80086de:	4628      	mov	r0, r5
 80086e0:	e7f2      	b.n	80086c8 <__strtok_r+0x8>
 80086e2:	42b5      	cmp	r5, r6
 80086e4:	d1f6      	bne.n	80086d4 <__strtok_r+0x14>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1ef      	bne.n	80086ca <__strtok_r+0xa>
 80086ea:	6014      	str	r4, [r2, #0]
 80086ec:	7003      	strb	r3, [r0, #0]
 80086ee:	e7eb      	b.n	80086c8 <__strtok_r+0x8>
 80086f0:	462b      	mov	r3, r5
 80086f2:	e00d      	b.n	8008710 <__strtok_r+0x50>
 80086f4:	b926      	cbnz	r6, 8008700 <__strtok_r+0x40>
 80086f6:	461c      	mov	r4, r3
 80086f8:	4623      	mov	r3, r4
 80086fa:	460f      	mov	r7, r1
 80086fc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008700:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008704:	42b5      	cmp	r5, r6
 8008706:	d1f5      	bne.n	80086f4 <__strtok_r+0x34>
 8008708:	2d00      	cmp	r5, #0
 800870a:	d0f1      	beq.n	80086f0 <__strtok_r+0x30>
 800870c:	2100      	movs	r1, #0
 800870e:	7021      	strb	r1, [r4, #0]
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e7d9      	b.n	80086c8 <__strtok_r+0x8>

08008714 <malloc>:
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <malloc+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f000 b84f 	b.w	80087bc <_malloc_r>
 800871e:	bf00      	nop
 8008720:	20000030 	.word	0x20000030

08008724 <_free_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4605      	mov	r5, r0
 8008728:	2900      	cmp	r1, #0
 800872a:	d043      	beq.n	80087b4 <_free_r+0x90>
 800872c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008730:	1f0c      	subs	r4, r1, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfb8      	it	lt
 8008736:	18e4      	addlt	r4, r4, r3
 8008738:	f000 fb92 	bl	8008e60 <__malloc_lock>
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <_free_r+0x94>)
 800873e:	6813      	ldr	r3, [r2, #0]
 8008740:	4610      	mov	r0, r2
 8008742:	b933      	cbnz	r3, 8008752 <_free_r+0x2e>
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6014      	str	r4, [r2, #0]
 8008748:	4628      	mov	r0, r5
 800874a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874e:	f000 bb88 	b.w	8008e62 <__malloc_unlock>
 8008752:	42a3      	cmp	r3, r4
 8008754:	d90b      	bls.n	800876e <_free_r+0x4a>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	1862      	adds	r2, r4, r1
 800875a:	4293      	cmp	r3, r2
 800875c:	bf01      	itttt	eq
 800875e:	681a      	ldreq	r2, [r3, #0]
 8008760:	685b      	ldreq	r3, [r3, #4]
 8008762:	1852      	addeq	r2, r2, r1
 8008764:	6022      	streq	r2, [r4, #0]
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	6004      	str	r4, [r0, #0]
 800876a:	e7ed      	b.n	8008748 <_free_r+0x24>
 800876c:	4613      	mov	r3, r2
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	b10a      	cbz	r2, 8008776 <_free_r+0x52>
 8008772:	42a2      	cmp	r2, r4
 8008774:	d9fa      	bls.n	800876c <_free_r+0x48>
 8008776:	6819      	ldr	r1, [r3, #0]
 8008778:	1858      	adds	r0, r3, r1
 800877a:	42a0      	cmp	r0, r4
 800877c:	d10b      	bne.n	8008796 <_free_r+0x72>
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	4401      	add	r1, r0
 8008782:	1858      	adds	r0, r3, r1
 8008784:	4282      	cmp	r2, r0
 8008786:	6019      	str	r1, [r3, #0]
 8008788:	d1de      	bne.n	8008748 <_free_r+0x24>
 800878a:	6810      	ldr	r0, [r2, #0]
 800878c:	6852      	ldr	r2, [r2, #4]
 800878e:	4401      	add	r1, r0
 8008790:	6019      	str	r1, [r3, #0]
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	e7d8      	b.n	8008748 <_free_r+0x24>
 8008796:	d902      	bls.n	800879e <_free_r+0x7a>
 8008798:	230c      	movs	r3, #12
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	e7d4      	b.n	8008748 <_free_r+0x24>
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1821      	adds	r1, r4, r0
 80087a2:	428a      	cmp	r2, r1
 80087a4:	bf01      	itttt	eq
 80087a6:	6811      	ldreq	r1, [r2, #0]
 80087a8:	6852      	ldreq	r2, [r2, #4]
 80087aa:	1809      	addeq	r1, r1, r0
 80087ac:	6021      	streq	r1, [r4, #0]
 80087ae:	6062      	str	r2, [r4, #4]
 80087b0:	605c      	str	r4, [r3, #4]
 80087b2:	e7c9      	b.n	8008748 <_free_r+0x24>
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	20000dec 	.word	0x20000dec

080087bc <_malloc_r>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	1ccd      	adds	r5, r1, #3
 80087c0:	f025 0503 	bic.w	r5, r5, #3
 80087c4:	3508      	adds	r5, #8
 80087c6:	2d0c      	cmp	r5, #12
 80087c8:	bf38      	it	cc
 80087ca:	250c      	movcc	r5, #12
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	4606      	mov	r6, r0
 80087d0:	db01      	blt.n	80087d6 <_malloc_r+0x1a>
 80087d2:	42a9      	cmp	r1, r5
 80087d4:	d903      	bls.n	80087de <_malloc_r+0x22>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	2000      	movs	r0, #0
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	f000 fb3f 	bl	8008e60 <__malloc_lock>
 80087e2:	4a21      	ldr	r2, [pc, #132]	; (8008868 <_malloc_r+0xac>)
 80087e4:	6814      	ldr	r4, [r2, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	b991      	cbnz	r1, 8008810 <_malloc_r+0x54>
 80087ea:	4c20      	ldr	r4, [pc, #128]	; (800886c <_malloc_r+0xb0>)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	b91b      	cbnz	r3, 80087f8 <_malloc_r+0x3c>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 fb17 	bl	8008e24 <_sbrk_r>
 80087f6:	6020      	str	r0, [r4, #0]
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fb12 	bl	8008e24 <_sbrk_r>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d124      	bne.n	800884e <_malloc_r+0x92>
 8008804:	230c      	movs	r3, #12
 8008806:	4630      	mov	r0, r6
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	f000 fb2a 	bl	8008e62 <__malloc_unlock>
 800880e:	e7e4      	b.n	80087da <_malloc_r+0x1e>
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	1b5b      	subs	r3, r3, r5
 8008814:	d418      	bmi.n	8008848 <_malloc_r+0x8c>
 8008816:	2b0b      	cmp	r3, #11
 8008818:	d90f      	bls.n	800883a <_malloc_r+0x7e>
 800881a:	600b      	str	r3, [r1, #0]
 800881c:	18cc      	adds	r4, r1, r3
 800881e:	50cd      	str	r5, [r1, r3]
 8008820:	4630      	mov	r0, r6
 8008822:	f000 fb1e 	bl	8008e62 <__malloc_unlock>
 8008826:	f104 000b 	add.w	r0, r4, #11
 800882a:	1d23      	adds	r3, r4, #4
 800882c:	f020 0007 	bic.w	r0, r0, #7
 8008830:	1ac3      	subs	r3, r0, r3
 8008832:	d0d3      	beq.n	80087dc <_malloc_r+0x20>
 8008834:	425a      	negs	r2, r3
 8008836:	50e2      	str	r2, [r4, r3]
 8008838:	e7d0      	b.n	80087dc <_malloc_r+0x20>
 800883a:	684b      	ldr	r3, [r1, #4]
 800883c:	428c      	cmp	r4, r1
 800883e:	bf16      	itet	ne
 8008840:	6063      	strne	r3, [r4, #4]
 8008842:	6013      	streq	r3, [r2, #0]
 8008844:	460c      	movne	r4, r1
 8008846:	e7eb      	b.n	8008820 <_malloc_r+0x64>
 8008848:	460c      	mov	r4, r1
 800884a:	6849      	ldr	r1, [r1, #4]
 800884c:	e7cc      	b.n	80087e8 <_malloc_r+0x2c>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d005      	beq.n	8008864 <_malloc_r+0xa8>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4630      	mov	r0, r6
 800885c:	f000 fae2 	bl	8008e24 <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d0cf      	beq.n	8008804 <_malloc_r+0x48>
 8008864:	6025      	str	r5, [r4, #0]
 8008866:	e7db      	b.n	8008820 <_malloc_r+0x64>
 8008868:	20000dec 	.word	0x20000dec
 800886c:	20000df0 	.word	0x20000df0

08008870 <__ssputs_r>:
 8008870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	688e      	ldr	r6, [r1, #8]
 8008876:	4682      	mov	sl, r0
 8008878:	429e      	cmp	r6, r3
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	4699      	mov	r9, r3
 8008880:	d837      	bhi.n	80088f2 <__ssputs_r+0x82>
 8008882:	898a      	ldrh	r2, [r1, #12]
 8008884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008888:	d031      	beq.n	80088ee <__ssputs_r+0x7e>
 800888a:	2302      	movs	r3, #2
 800888c:	6825      	ldr	r5, [r4, #0]
 800888e:	6909      	ldr	r1, [r1, #16]
 8008890:	1a6f      	subs	r7, r5, r1
 8008892:	6965      	ldr	r5, [r4, #20]
 8008894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008898:	fb95 f5f3 	sdiv	r5, r5, r3
 800889c:	f109 0301 	add.w	r3, r9, #1
 80088a0:	443b      	add	r3, r7
 80088a2:	429d      	cmp	r5, r3
 80088a4:	bf38      	it	cc
 80088a6:	461d      	movcc	r5, r3
 80088a8:	0553      	lsls	r3, r2, #21
 80088aa:	d530      	bpl.n	800890e <__ssputs_r+0x9e>
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7ff ff85 	bl	80087bc <_malloc_r>
 80088b2:	4606      	mov	r6, r0
 80088b4:	b950      	cbnz	r0, 80088cc <__ssputs_r+0x5c>
 80088b6:	230c      	movs	r3, #12
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	f8ca 3000 	str.w	r3, [sl]
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088cc:	463a      	mov	r2, r7
 80088ce:	6921      	ldr	r1, [r4, #16]
 80088d0:	f7ff fe62 	bl	8008598 <memcpy>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	6126      	str	r6, [r4, #16]
 80088e2:	443e      	add	r6, r7
 80088e4:	6026      	str	r6, [r4, #0]
 80088e6:	464e      	mov	r6, r9
 80088e8:	6165      	str	r5, [r4, #20]
 80088ea:	1bed      	subs	r5, r5, r7
 80088ec:	60a5      	str	r5, [r4, #8]
 80088ee:	454e      	cmp	r6, r9
 80088f0:	d900      	bls.n	80088f4 <__ssputs_r+0x84>
 80088f2:	464e      	mov	r6, r9
 80088f4:	4632      	mov	r2, r6
 80088f6:	4641      	mov	r1, r8
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	f7ff fe58 	bl	80085ae <memmove>
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	2000      	movs	r0, #0
 8008902:	1b9b      	subs	r3, r3, r6
 8008904:	60a3      	str	r3, [r4, #8]
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	441e      	add	r6, r3
 800890a:	6026      	str	r6, [r4, #0]
 800890c:	e7dc      	b.n	80088c8 <__ssputs_r+0x58>
 800890e:	462a      	mov	r2, r5
 8008910:	f000 faa8 	bl	8008e64 <_realloc_r>
 8008914:	4606      	mov	r6, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d1e2      	bne.n	80088e0 <__ssputs_r+0x70>
 800891a:	6921      	ldr	r1, [r4, #16]
 800891c:	4650      	mov	r0, sl
 800891e:	f7ff ff01 	bl	8008724 <_free_r>
 8008922:	e7c8      	b.n	80088b6 <__ssputs_r+0x46>

08008924 <_svfiprintf_r>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	461d      	mov	r5, r3
 800892a:	898b      	ldrh	r3, [r1, #12]
 800892c:	b09d      	sub	sp, #116	; 0x74
 800892e:	061f      	lsls	r7, r3, #24
 8008930:	4680      	mov	r8, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4616      	mov	r6, r2
 8008936:	d50f      	bpl.n	8008958 <_svfiprintf_r+0x34>
 8008938:	690b      	ldr	r3, [r1, #16]
 800893a:	b96b      	cbnz	r3, 8008958 <_svfiprintf_r+0x34>
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	f7ff ff3d 	bl	80087bc <_malloc_r>
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	6120      	str	r0, [r4, #16]
 8008946:	b928      	cbnz	r0, 8008954 <_svfiprintf_r+0x30>
 8008948:	230c      	movs	r3, #12
 800894a:	f8c8 3000 	str.w	r3, [r8]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	e0c8      	b.n	8008ae6 <_svfiprintf_r+0x1c2>
 8008954:	2340      	movs	r3, #64	; 0x40
 8008956:	6163      	str	r3, [r4, #20]
 8008958:	2300      	movs	r3, #0
 800895a:	9309      	str	r3, [sp, #36]	; 0x24
 800895c:	2320      	movs	r3, #32
 800895e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008962:	2330      	movs	r3, #48	; 0x30
 8008964:	f04f 0b01 	mov.w	fp, #1
 8008968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800896c:	9503      	str	r5, [sp, #12]
 800896e:	4637      	mov	r7, r6
 8008970:	463d      	mov	r5, r7
 8008972:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008976:	b10b      	cbz	r3, 800897c <_svfiprintf_r+0x58>
 8008978:	2b25      	cmp	r3, #37	; 0x25
 800897a:	d13e      	bne.n	80089fa <_svfiprintf_r+0xd6>
 800897c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008980:	d00b      	beq.n	800899a <_svfiprintf_r+0x76>
 8008982:	4653      	mov	r3, sl
 8008984:	4632      	mov	r2, r6
 8008986:	4621      	mov	r1, r4
 8008988:	4640      	mov	r0, r8
 800898a:	f7ff ff71 	bl	8008870 <__ssputs_r>
 800898e:	3001      	adds	r0, #1
 8008990:	f000 80a4 	beq.w	8008adc <_svfiprintf_r+0x1b8>
 8008994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008996:	4453      	add	r3, sl
 8008998:	9309      	str	r3, [sp, #36]	; 0x24
 800899a:	783b      	ldrb	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 809d 	beq.w	8008adc <_svfiprintf_r+0x1b8>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	9307      	str	r3, [sp, #28]
 80089b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b4:	931a      	str	r3, [sp, #104]	; 0x68
 80089b6:	462f      	mov	r7, r5
 80089b8:	2205      	movs	r2, #5
 80089ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80089be:	4850      	ldr	r0, [pc, #320]	; (8008b00 <_svfiprintf_r+0x1dc>)
 80089c0:	f000 fa40 	bl	8008e44 <memchr>
 80089c4:	9b04      	ldr	r3, [sp, #16]
 80089c6:	b9d0      	cbnz	r0, 80089fe <_svfiprintf_r+0xda>
 80089c8:	06d9      	lsls	r1, r3, #27
 80089ca:	bf44      	itt	mi
 80089cc:	2220      	movmi	r2, #32
 80089ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089d2:	071a      	lsls	r2, r3, #28
 80089d4:	bf44      	itt	mi
 80089d6:	222b      	movmi	r2, #43	; 0x2b
 80089d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089dc:	782a      	ldrb	r2, [r5, #0]
 80089de:	2a2a      	cmp	r2, #42	; 0x2a
 80089e0:	d015      	beq.n	8008a0e <_svfiprintf_r+0xea>
 80089e2:	462f      	mov	r7, r5
 80089e4:	2000      	movs	r0, #0
 80089e6:	250a      	movs	r5, #10
 80089e8:	9a07      	ldr	r2, [sp, #28]
 80089ea:	4639      	mov	r1, r7
 80089ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f0:	3b30      	subs	r3, #48	; 0x30
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d94d      	bls.n	8008a92 <_svfiprintf_r+0x16e>
 80089f6:	b1b8      	cbz	r0, 8008a28 <_svfiprintf_r+0x104>
 80089f8:	e00f      	b.n	8008a1a <_svfiprintf_r+0xf6>
 80089fa:	462f      	mov	r7, r5
 80089fc:	e7b8      	b.n	8008970 <_svfiprintf_r+0x4c>
 80089fe:	4a40      	ldr	r2, [pc, #256]	; (8008b00 <_svfiprintf_r+0x1dc>)
 8008a00:	463d      	mov	r5, r7
 8008a02:	1a80      	subs	r0, r0, r2
 8008a04:	fa0b f000 	lsl.w	r0, fp, r0
 8008a08:	4318      	orrs	r0, r3
 8008a0a:	9004      	str	r0, [sp, #16]
 8008a0c:	e7d3      	b.n	80089b6 <_svfiprintf_r+0x92>
 8008a0e:	9a03      	ldr	r2, [sp, #12]
 8008a10:	1d11      	adds	r1, r2, #4
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	9103      	str	r1, [sp, #12]
 8008a16:	2a00      	cmp	r2, #0
 8008a18:	db01      	blt.n	8008a1e <_svfiprintf_r+0xfa>
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	e004      	b.n	8008a28 <_svfiprintf_r+0x104>
 8008a1e:	4252      	negs	r2, r2
 8008a20:	f043 0302 	orr.w	r3, r3, #2
 8008a24:	9207      	str	r2, [sp, #28]
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	783b      	ldrb	r3, [r7, #0]
 8008a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2c:	d10c      	bne.n	8008a48 <_svfiprintf_r+0x124>
 8008a2e:	787b      	ldrb	r3, [r7, #1]
 8008a30:	2b2a      	cmp	r3, #42	; 0x2a
 8008a32:	d133      	bne.n	8008a9c <_svfiprintf_r+0x178>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	3702      	adds	r7, #2
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	9203      	str	r2, [sp, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bfb8      	it	lt
 8008a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	4d2e      	ldr	r5, [pc, #184]	; (8008b04 <_svfiprintf_r+0x1e0>)
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	7839      	ldrb	r1, [r7, #0]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f9f8 	bl	8008e44 <memchr>
 8008a54:	b138      	cbz	r0, 8008a66 <_svfiprintf_r+0x142>
 8008a56:	2340      	movs	r3, #64	; 0x40
 8008a58:	1b40      	subs	r0, r0, r5
 8008a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	3701      	adds	r7, #1
 8008a62:	4303      	orrs	r3, r0
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	7839      	ldrb	r1, [r7, #0]
 8008a68:	2206      	movs	r2, #6
 8008a6a:	4827      	ldr	r0, [pc, #156]	; (8008b08 <_svfiprintf_r+0x1e4>)
 8008a6c:	1c7e      	adds	r6, r7, #1
 8008a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a72:	f000 f9e7 	bl	8008e44 <memchr>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d038      	beq.n	8008aec <_svfiprintf_r+0x1c8>
 8008a7a:	4b24      	ldr	r3, [pc, #144]	; (8008b0c <_svfiprintf_r+0x1e8>)
 8008a7c:	bb13      	cbnz	r3, 8008ac4 <_svfiprintf_r+0x1a0>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	f023 0307 	bic.w	r3, r3, #7
 8008a86:	3308      	adds	r3, #8
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8c:	444b      	add	r3, r9
 8008a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a90:	e76d      	b.n	800896e <_svfiprintf_r+0x4a>
 8008a92:	fb05 3202 	mla	r2, r5, r2, r3
 8008a96:	2001      	movs	r0, #1
 8008a98:	460f      	mov	r7, r1
 8008a9a:	e7a6      	b.n	80089ea <_svfiprintf_r+0xc6>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	250a      	movs	r5, #10
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	3701      	adds	r7, #1
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aac:	3a30      	subs	r2, #48	; 0x30
 8008aae:	2a09      	cmp	r2, #9
 8008ab0:	d903      	bls.n	8008aba <_svfiprintf_r+0x196>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0c8      	beq.n	8008a48 <_svfiprintf_r+0x124>
 8008ab6:	9105      	str	r1, [sp, #20]
 8008ab8:	e7c6      	b.n	8008a48 <_svfiprintf_r+0x124>
 8008aba:	fb05 2101 	mla	r1, r5, r1, r2
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	e7f0      	b.n	8008aa6 <_svfiprintf_r+0x182>
 8008ac4:	ab03      	add	r3, sp, #12
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4622      	mov	r2, r4
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <_svfiprintf_r+0x1ec>)
 8008acc:	a904      	add	r1, sp, #16
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f3af 8000 	nop.w
 8008ad4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ad8:	4681      	mov	r9, r0
 8008ada:	d1d6      	bne.n	8008a8a <_svfiprintf_r+0x166>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	065b      	lsls	r3, r3, #25
 8008ae0:	f53f af35 	bmi.w	800894e <_svfiprintf_r+0x2a>
 8008ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae6:	b01d      	add	sp, #116	; 0x74
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	ab03      	add	r3, sp, #12
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	4622      	mov	r2, r4
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <_svfiprintf_r+0x1ec>)
 8008af4:	a904      	add	r1, sp, #16
 8008af6:	4640      	mov	r0, r8
 8008af8:	f000 f882 	bl	8008c00 <_printf_i>
 8008afc:	e7ea      	b.n	8008ad4 <_svfiprintf_r+0x1b0>
 8008afe:	bf00      	nop
 8008b00:	08009b9c 	.word	0x08009b9c
 8008b04:	08009ba2 	.word	0x08009ba2
 8008b08:	08009ba6 	.word	0x08009ba6
 8008b0c:	00000000 	.word	0x00000000
 8008b10:	08008871 	.word	0x08008871

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4691      	mov	r9, r2
 8008b1a:	461f      	mov	r7, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	4606      	mov	r6, r0
 8008b22:	4293      	cmp	r3, r2
 8008b24:	bfb8      	it	lt
 8008b26:	4613      	movlt	r3, r2
 8008b28:	f8c9 3000 	str.w	r3, [r9]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	460c      	mov	r4, r1
 8008b32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b36:	b112      	cbz	r2, 8008b3e <_printf_common+0x2a>
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c9 3000 	str.w	r3, [r9]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b48:	3302      	addmi	r3, #2
 8008b4a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d107      	bne.n	8008b66 <_printf_common+0x52>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	42ab      	cmp	r3, r5
 8008b64:	dc29      	bgt.n	8008bba <_printf_common+0xa6>
 8008b66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	3300      	adds	r3, #0
 8008b6e:	bf18      	it	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	0692      	lsls	r2, r2, #26
 8008b74:	d42e      	bmi.n	8008bd4 <_printf_common+0xc0>
 8008b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	47c0      	blx	r8
 8008b80:	3001      	adds	r0, #1
 8008b82:	d021      	beq.n	8008bc8 <_printf_common+0xb4>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	68e5      	ldr	r5, [r4, #12]
 8008b88:	f003 0306 	and.w	r3, r3, #6
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	bf18      	it	ne
 8008b90:	2500      	movne	r5, #0
 8008b92:	f8d9 2000 	ldr.w	r2, [r9]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	bf08      	it	eq
 8008b9c:	1aad      	subeq	r5, r5, r2
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	6922      	ldr	r2, [r4, #16]
 8008ba2:	bf08      	it	eq
 8008ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfc4      	itt	gt
 8008bac:	1a9b      	subgt	r3, r3, r2
 8008bae:	18ed      	addgt	r5, r5, r3
 8008bb0:	341a      	adds	r4, #26
 8008bb2:	454d      	cmp	r5, r9
 8008bb4:	d11a      	bne.n	8008bec <_printf_common+0xd8>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e008      	b.n	8008bcc <_printf_common+0xb8>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	47c0      	blx	r8
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d103      	bne.n	8008bd0 <_printf_common+0xbc>
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	e7c2      	b.n	8008b5a <_printf_common+0x46>
 8008bd4:	2030      	movs	r0, #48	; 0x30
 8008bd6:	18e1      	adds	r1, r4, r3
 8008bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008be2:	4422      	add	r2, r4
 8008be4:	3302      	adds	r3, #2
 8008be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bea:	e7c4      	b.n	8008b76 <_printf_common+0x62>
 8008bec:	2301      	movs	r3, #1
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	47c0      	blx	r8
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d0e6      	beq.n	8008bc8 <_printf_common+0xb4>
 8008bfa:	f109 0901 	add.w	r9, r9, #1
 8008bfe:	e7d8      	b.n	8008bb2 <_printf_common+0x9e>

08008c00 <_printf_i>:
 8008c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c08:	460c      	mov	r4, r1
 8008c0a:	7e09      	ldrb	r1, [r1, #24]
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	296e      	cmp	r1, #110	; 0x6e
 8008c10:	4617      	mov	r7, r2
 8008c12:	4606      	mov	r6, r0
 8008c14:	4698      	mov	r8, r3
 8008c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c18:	f000 80b3 	beq.w	8008d82 <_printf_i+0x182>
 8008c1c:	d822      	bhi.n	8008c64 <_printf_i+0x64>
 8008c1e:	2963      	cmp	r1, #99	; 0x63
 8008c20:	d036      	beq.n	8008c90 <_printf_i+0x90>
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x3a>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	f000 80b9 	beq.w	8008d9c <_printf_i+0x19c>
 8008c2a:	2958      	cmp	r1, #88	; 0x58
 8008c2c:	f000 8083 	beq.w	8008d36 <_printf_i+0x136>
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c38:	e032      	b.n	8008ca0 <_printf_i+0xa0>
 8008c3a:	2964      	cmp	r1, #100	; 0x64
 8008c3c:	d001      	beq.n	8008c42 <_printf_i+0x42>
 8008c3e:	2969      	cmp	r1, #105	; 0x69
 8008c40:	d1f6      	bne.n	8008c30 <_printf_i+0x30>
 8008c42:	6820      	ldr	r0, [r4, #0]
 8008c44:	6813      	ldr	r3, [r2, #0]
 8008c46:	0605      	lsls	r5, r0, #24
 8008c48:	f103 0104 	add.w	r1, r3, #4
 8008c4c:	d52a      	bpl.n	8008ca4 <_printf_i+0xa4>
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	da03      	bge.n	8008c5e <_printf_i+0x5e>
 8008c56:	222d      	movs	r2, #45	; 0x2d
 8008c58:	425b      	negs	r3, r3
 8008c5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c5e:	486f      	ldr	r0, [pc, #444]	; (8008e1c <_printf_i+0x21c>)
 8008c60:	220a      	movs	r2, #10
 8008c62:	e039      	b.n	8008cd8 <_printf_i+0xd8>
 8008c64:	2973      	cmp	r1, #115	; 0x73
 8008c66:	f000 809d 	beq.w	8008da4 <_printf_i+0x1a4>
 8008c6a:	d808      	bhi.n	8008c7e <_printf_i+0x7e>
 8008c6c:	296f      	cmp	r1, #111	; 0x6f
 8008c6e:	d020      	beq.n	8008cb2 <_printf_i+0xb2>
 8008c70:	2970      	cmp	r1, #112	; 0x70
 8008c72:	d1dd      	bne.n	8008c30 <_printf_i+0x30>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	f043 0320 	orr.w	r3, r3, #32
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	e003      	b.n	8008c86 <_printf_i+0x86>
 8008c7e:	2975      	cmp	r1, #117	; 0x75
 8008c80:	d017      	beq.n	8008cb2 <_printf_i+0xb2>
 8008c82:	2978      	cmp	r1, #120	; 0x78
 8008c84:	d1d4      	bne.n	8008c30 <_printf_i+0x30>
 8008c86:	2378      	movs	r3, #120	; 0x78
 8008c88:	4865      	ldr	r0, [pc, #404]	; (8008e20 <_printf_i+0x220>)
 8008c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c8e:	e055      	b.n	8008d3c <_printf_i+0x13c>
 8008c90:	6813      	ldr	r3, [r2, #0]
 8008c92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c96:	1d19      	adds	r1, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6011      	str	r1, [r2, #0]
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e08c      	b.n	8008dbe <_printf_i+0x1be>
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008caa:	6011      	str	r1, [r2, #0]
 8008cac:	bf18      	it	ne
 8008cae:	b21b      	sxthne	r3, r3
 8008cb0:	e7cf      	b.n	8008c52 <_printf_i+0x52>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1d18      	adds	r0, r3, #4
 8008cb8:	6010      	str	r0, [r2, #0]
 8008cba:	0628      	lsls	r0, r5, #24
 8008cbc:	d501      	bpl.n	8008cc2 <_printf_i+0xc2>
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	e002      	b.n	8008cc8 <_printf_i+0xc8>
 8008cc2:	0668      	lsls	r0, r5, #25
 8008cc4:	d5fb      	bpl.n	8008cbe <_printf_i+0xbe>
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	296f      	cmp	r1, #111	; 0x6f
 8008cca:	bf14      	ite	ne
 8008ccc:	220a      	movne	r2, #10
 8008cce:	2208      	moveq	r2, #8
 8008cd0:	4852      	ldr	r0, [pc, #328]	; (8008e1c <_printf_i+0x21c>)
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd8:	6865      	ldr	r5, [r4, #4]
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	60a5      	str	r5, [r4, #8]
 8008cde:	f2c0 8095 	blt.w	8008e0c <_printf_i+0x20c>
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	f021 0104 	bic.w	r1, r1, #4
 8008ce8:	6021      	str	r1, [r4, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d13d      	bne.n	8008d6a <_printf_i+0x16a>
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f040 808e 	bne.w	8008e10 <_printf_i+0x210>
 8008cf4:	4665      	mov	r5, ip
 8008cf6:	2a08      	cmp	r2, #8
 8008cf8:	d10b      	bne.n	8008d12 <_printf_i+0x112>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	07db      	lsls	r3, r3, #31
 8008cfe:	d508      	bpl.n	8008d12 <_printf_i+0x112>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	bfde      	ittt	le
 8008d08:	2330      	movle	r3, #48	; 0x30
 8008d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d12:	ebac 0305 	sub.w	r3, ip, r5
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	f8cd 8000 	str.w	r8, [sp]
 8008d1c:	463b      	mov	r3, r7
 8008d1e:	aa03      	add	r2, sp, #12
 8008d20:	4621      	mov	r1, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff fef6 	bl	8008b14 <_printf_common>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d14d      	bne.n	8008dc8 <_printf_i+0x1c8>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	b005      	add	sp, #20
 8008d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d36:	4839      	ldr	r0, [pc, #228]	; (8008e1c <_printf_i+0x21c>)
 8008d38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d3c:	6813      	ldr	r3, [r2, #0]
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	1d1d      	adds	r5, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6015      	str	r5, [r2, #0]
 8008d46:	060a      	lsls	r2, r1, #24
 8008d48:	d50b      	bpl.n	8008d62 <_printf_i+0x162>
 8008d4a:	07ca      	lsls	r2, r1, #31
 8008d4c:	bf44      	itt	mi
 8008d4e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d52:	6021      	strmi	r1, [r4, #0]
 8008d54:	b91b      	cbnz	r3, 8008d5e <_printf_i+0x15e>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	f022 0220 	bic.w	r2, r2, #32
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	e7b7      	b.n	8008cd2 <_printf_i+0xd2>
 8008d62:	064d      	lsls	r5, r1, #25
 8008d64:	bf48      	it	mi
 8008d66:	b29b      	uxthmi	r3, r3
 8008d68:	e7ef      	b.n	8008d4a <_printf_i+0x14a>
 8008d6a:	4665      	mov	r5, ip
 8008d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d70:	fb02 3311 	mls	r3, r2, r1, r3
 8008d74:	5cc3      	ldrb	r3, [r0, r3]
 8008d76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d1f5      	bne.n	8008d6c <_printf_i+0x16c>
 8008d80:	e7b9      	b.n	8008cf6 <_printf_i+0xf6>
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	6825      	ldr	r5, [r4, #0]
 8008d86:	1d18      	adds	r0, r3, #4
 8008d88:	6961      	ldr	r1, [r4, #20]
 8008d8a:	6010      	str	r0, [r2, #0]
 8008d8c:	0628      	lsls	r0, r5, #24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	d501      	bpl.n	8008d96 <_printf_i+0x196>
 8008d92:	6019      	str	r1, [r3, #0]
 8008d94:	e002      	b.n	8008d9c <_printf_i+0x19c>
 8008d96:	066a      	lsls	r2, r5, #25
 8008d98:	d5fb      	bpl.n	8008d92 <_printf_i+0x192>
 8008d9a:	8019      	strh	r1, [r3, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4665      	mov	r5, ip
 8008da0:	6123      	str	r3, [r4, #16]
 8008da2:	e7b9      	b.n	8008d18 <_printf_i+0x118>
 8008da4:	6813      	ldr	r3, [r2, #0]
 8008da6:	1d19      	adds	r1, r3, #4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	681d      	ldr	r5, [r3, #0]
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	2100      	movs	r1, #0
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f847 	bl	8008e44 <memchr>
 8008db6:	b108      	cbz	r0, 8008dbc <_printf_i+0x1bc>
 8008db8:	1b40      	subs	r0, r0, r5
 8008dba:	6060      	str	r0, [r4, #4]
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc6:	e7a7      	b.n	8008d18 <_printf_i+0x118>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	462a      	mov	r2, r5
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	47c0      	blx	r8
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d0aa      	beq.n	8008d2c <_printf_i+0x12c>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	079b      	lsls	r3, r3, #30
 8008dda:	d413      	bmi.n	8008e04 <_printf_i+0x204>
 8008ddc:	68e0      	ldr	r0, [r4, #12]
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	4298      	cmp	r0, r3
 8008de2:	bfb8      	it	lt
 8008de4:	4618      	movlt	r0, r3
 8008de6:	e7a3      	b.n	8008d30 <_printf_i+0x130>
 8008de8:	2301      	movs	r3, #1
 8008dea:	464a      	mov	r2, r9
 8008dec:	4639      	mov	r1, r7
 8008dee:	4630      	mov	r0, r6
 8008df0:	47c0      	blx	r8
 8008df2:	3001      	adds	r0, #1
 8008df4:	d09a      	beq.n	8008d2c <_printf_i+0x12c>
 8008df6:	3501      	adds	r5, #1
 8008df8:	68e3      	ldr	r3, [r4, #12]
 8008dfa:	9a03      	ldr	r2, [sp, #12]
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	42ab      	cmp	r3, r5
 8008e00:	dcf2      	bgt.n	8008de8 <_printf_i+0x1e8>
 8008e02:	e7eb      	b.n	8008ddc <_printf_i+0x1dc>
 8008e04:	2500      	movs	r5, #0
 8008e06:	f104 0919 	add.w	r9, r4, #25
 8008e0a:	e7f5      	b.n	8008df8 <_printf_i+0x1f8>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1ac      	bne.n	8008d6a <_printf_i+0x16a>
 8008e10:	7803      	ldrb	r3, [r0, #0]
 8008e12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e1a:	e76c      	b.n	8008cf6 <_printf_i+0xf6>
 8008e1c:	08009bad 	.word	0x08009bad
 8008e20:	08009bbe 	.word	0x08009bbe

08008e24 <_sbrk_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	2300      	movs	r3, #0
 8008e28:	4c05      	ldr	r4, [pc, #20]	; (8008e40 <_sbrk_r+0x1c>)
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	f7f8 fd08 	bl	8001844 <_sbrk>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_sbrk_r+0x1a>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_sbrk_r+0x1a>
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20001264 	.word	0x20001264

08008e44 <memchr>:
 8008e44:	b510      	push	{r4, lr}
 8008e46:	b2c9      	uxtb	r1, r1
 8008e48:	4402      	add	r2, r0
 8008e4a:	4290      	cmp	r0, r2
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	d101      	bne.n	8008e54 <memchr+0x10>
 8008e50:	2300      	movs	r3, #0
 8008e52:	e003      	b.n	8008e5c <memchr+0x18>
 8008e54:	781c      	ldrb	r4, [r3, #0]
 8008e56:	3001      	adds	r0, #1
 8008e58:	428c      	cmp	r4, r1
 8008e5a:	d1f6      	bne.n	8008e4a <memchr+0x6>
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <__malloc_lock>:
 8008e60:	4770      	bx	lr

08008e62 <__malloc_unlock>:
 8008e62:	4770      	bx	lr

08008e64 <_realloc_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	4607      	mov	r7, r0
 8008e68:	4614      	mov	r4, r2
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	b921      	cbnz	r1, 8008e78 <_realloc_r+0x14>
 8008e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e72:	4611      	mov	r1, r2
 8008e74:	f7ff bca2 	b.w	80087bc <_malloc_r>
 8008e78:	b922      	cbnz	r2, 8008e84 <_realloc_r+0x20>
 8008e7a:	f7ff fc53 	bl	8008724 <_free_r>
 8008e7e:	4625      	mov	r5, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e84:	f000 f814 	bl	8008eb0 <_malloc_usable_size_r>
 8008e88:	42a0      	cmp	r0, r4
 8008e8a:	d20f      	bcs.n	8008eac <_realloc_r+0x48>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff fc94 	bl	80087bc <_malloc_r>
 8008e94:	4605      	mov	r5, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d0f2      	beq.n	8008e80 <_realloc_r+0x1c>
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	f7ff fb7b 	bl	8008598 <memcpy>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f7ff fc3d 	bl	8008724 <_free_r>
 8008eaa:	e7e9      	b.n	8008e80 <_realloc_r+0x1c>
 8008eac:	4635      	mov	r5, r6
 8008eae:	e7e7      	b.n	8008e80 <_realloc_r+0x1c>

08008eb0 <_malloc_usable_size_r>:
 8008eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb4:	1f18      	subs	r0, r3, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfbc      	itt	lt
 8008eba:	580b      	ldrlt	r3, [r1, r0]
 8008ebc:	18c0      	addlt	r0, r0, r3
 8008ebe:	4770      	bx	lr

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
