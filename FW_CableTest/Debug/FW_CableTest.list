
FW_CableTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08006e08  08006e08  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e08  08006e08  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000030  08006e40  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08006e40  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b06  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003670  00000000  00000000  00035b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf3c  00000000  00000000  0003aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010de4  00000000  00000000  000569b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c2c7  00000000  00000000  00067798  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c0  00000000  00000000  000f3adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08006170 	.word	0x08006170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08006170 	.word	0x08006170

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	4907      	ldr	r1, [pc, #28]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4313      	orrs	r3, r2
 800016e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4013      	ands	r3, r2
 8000178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8000190:	2040      	movs	r0, #64	; 0x40
 8000192:	f7ff ffe3 	bl	800015c <LL_AHB1_GRP1_EnableClock>

}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Display>:
#include "main.h"

void Display(typeEnv *Env)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b0a6      	sub	sp, #152	; 0x98
 80001a0:	af02      	add	r7, sp, #8
 80001a2:	6078      	str	r0, [r7, #4]
	ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];
	ST7735_ListBox FileList;
	uint32_t selectedFile = Env->Menu.ActiveItem;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80001aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80001b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char EncoderString[12] = "Привет";
 80001b8:	4a3e      	ldr	r2, [pc, #248]	; (80002b4 <Display+0x118>)
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//static uint8_t step=0;
	if(f_RefreshScreen == 1)
 80001c4:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <Display+0x11c>)
 80001c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001ca:	015b      	lsls	r3, r3, #5
 80001cc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001d0:	f043 0314 	orr.w	r3, r3, #20
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d167      	bne.n	80002aa <Display+0x10e>
	{
		f_RefreshScreen = 0;
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <Display+0x11c>)
 80001dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001e0:	015b      	lsls	r3, r3, #5
 80001e2:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001e6:	f043 0314 	orr.w	r3, r3, #20
 80001ea:	461a      	mov	r2, r3
 80001ec:	2300      	movs	r3, #0
 80001ee:	6013      	str	r3, [r2, #0]

		for(uint32_t index =0; index < end_list; index++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80001f6:	e027      	b.n	8000248 <Display+0xac>
			{
				//memset( &(Files_on_SD[index].text), 0, sizeof(Files_on_SD[index].text));
				//strncpy( &(Files_on_SD[index].text),  &(Env->Menu.FileList[index]), FILENAME_SIZE);
				Files_on_SD[index].text  = &(Env->Menu.FileList[index]);
 80001f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	4413      	add	r3, r2
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	441a      	add	r2, r3
 800020a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000214:	440b      	add	r3, r1
 8000216:	f843 2c64 	str.w	r2, [r3, #-100]
				Files_on_SD[index].visible=1;
 800021a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800021e:	00db      	lsls	r3, r3, #3
 8000220:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000224:	4413      	add	r3, r2
 8000226:	2201      	movs	r2, #1
 8000228:	f803 2c60 	strb.w	r2, [r3, #-96]
				Files_on_SD[index].selected=0;
 800022c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000236:	4413      	add	r3, r2
 8000238:	2200      	movs	r2, #0
 800023a:	f803 2c5f 	strb.w	r2, [r3, #-95]
		for(uint32_t index =0; index < end_list; index++)
 800023e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000242:	3301      	adds	r3, #1
 8000244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000248:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800024c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000250:	429a      	cmp	r2, r3
 8000252:	d3d1      	bcc.n	80001f8 <Display+0x5c>
			}
		ST7735_ListBox_StructInit(&FileList,0,9,&Files_on_SD,end_list);
 8000254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000258:	b2db      	uxtb	r3, r3
 800025a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800025e:	f107 0018 	add.w	r0, r7, #24
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	2209      	movs	r2, #9
 8000268:	2100      	movs	r1, #0
 800026a:	f001 fe1b 	bl	8001ea4 <ST7735_ListBox_StructInit>
		Files_on_SD[selectedFile].selected=1;
 800026e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000278:	4413      	add	r3, r2
 800027a:	2201      	movs	r2, #1
 800027c:	f803 2c5f 	strb.w	r2, [r3, #-95]
		FileList.BackgroundColor = (*Env).Menu.BGR_Color;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8000286:	83fb      	strh	r3, [r7, #30]
		FileList.BorderColor	=	(*Env).Menu.BRD_Color;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800028e:	83bb      	strh	r3, [r7, #28]
		FileList.ItemTextColor	=	(*Env).Menu.TXT_Color;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000296:	843b      	strh	r3, [r7, #32]
		FileList.SelectedItemColor	=(*Env).Menu.SEL_Color;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800029e:	847b      	strh	r3, [r7, #34]	; 0x22
		ST7735_ListBox_Draw(&FileList);
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fd4b 	bl	8001d40 <ST7735_ListBox_Draw>
	//ST7735_DrawString7x11(1,1,EncoderString,COLOR565_ALICE_BLUE,COLOR565_DARK_SLATE_BLUE);




}
 80002aa:	bf00      	nop
 80002ac:	3790      	adds	r7, #144	; 0x90
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	08006188 	.word	0x08006188
 80002b8:	20000138 	.word	0x20000138

080002bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c6:	699a      	ldr	r2, [r3, #24]
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002d2:	699a      	ldr	r2, [r3, #24]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4013      	ands	r3, r2
 80002d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002da:	68fb      	ldr	r3, [r7, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	615a      	str	r2, [r3, #20]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
	...

0800030c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000320:	2010      	movs	r0, #16
 8000322:	f7ff ffcb 	bl	80002bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000326:	2020      	movs	r0, #32
 8000328:	f7ff ffc8 	bl	80002bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800032c:	2004      	movs	r0, #4
 800032e:	f7ff ffc5 	bl	80002bc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000332:	2008      	movs	r0, #8
 8000334:	f7ff ffc2 	bl	80002bc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000338:	4931      	ldr	r1, [pc, #196]	; (8000400 <MX_GPIO_Init+0xf4>)
 800033a:	4832      	ldr	r0, [pc, #200]	; (8000404 <MX_GPIO_Init+0xf8>)
 800033c:	f7ff ffd6 	bl	80002ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin|LCD_CS_Pin);
 8000340:	f641 211a 	movw	r1, #6682	; 0x1a1a
 8000344:	4830      	ldr	r0, [pc, #192]	; (8000408 <MX_GPIO_Init+0xfc>)
 8000346:	f7ff ffd1 	bl	80002ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, GREEN_LED_Pin|SD_CS_Pin);
 800034a:	4930      	ldr	r1, [pc, #192]	; (800040c <MX_GPIO_Init+0x100>)
 800034c:	4830      	ldr	r0, [pc, #192]	; (8000410 <MX_GPIO_Init+0x104>)
 800034e:	f7ff ffcd 	bl	80002ec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_GPIO_Init+0xf4>)
 8000354:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000356:	2301      	movs	r3, #1
 8000358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4827      	ldr	r0, [pc, #156]	; (8000404 <MX_GPIO_Init+0xf8>)
 8000368:	f002 f83e 	bl	80023e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 800036c:	f241 2312 	movw	r3, #4626	; 0x1212
 8000370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000376:	2302      	movs	r3, #2
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800037e:	2301      	movs	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4820      	ldr	r0, [pc, #128]	; (8000408 <MX_GPIO_Init+0xfc>)
 8000388:	f002 f82e 	bl	80023e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_A0_Pin;
 800038c:	f640 0308 	movw	r3, #2056	; 0x808
 8000390:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000392:	2301      	movs	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LCD_A0_GPIO_Port, &GPIO_InitStruct);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4819      	ldr	r0, [pc, #100]	; (8000408 <MX_GPIO_Init+0xfc>)
 80003a4:	f002 f820 	bl	80023e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80003a8:	f240 1301 	movw	r3, #257	; 0x101
 80003ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003ae:	2301      	movs	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_GPIO_Init+0x104>)
 80003c4:	f002 f810 	bl	80023e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_GPIO_Init+0x108>)
 80003ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003cc:	2301      	movs	r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <MX_GPIO_Init+0x104>)
 80003de:	f002 f803 	bl	80023e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <MX_GPIO_Init+0x10c>)
 80003e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80003e6:	2308      	movs	r3, #8
 80003e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_GPIO_Init+0xfc>)
 80003f4:	f001 fff8 	bl	80023e8 <LL_GPIO_Init>

}
 80003f8:	bf00      	nop
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	04200020 	.word	0x04200020
 8000404:	40011000 	.word	0x40011000
 8000408:	40010800 	.word	0x40010800
 800040c:	04040105 	.word	0x04040105
 8000410:	40010c00 	.word	0x40010c00
 8000414:	04040004 	.word	0x04040004
 8000418:	04800080 	.word	0x04800080

0800041c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <LL_RCC_HSE_Enable+0x18>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <LL_RCC_HSE_Enable+0x18>)
 8000426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_HSE_IsReady+0x20>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000448:	bf0c      	ite	eq
 800044a:	2301      	moveq	r3, #1
 800044c:	2300      	movne	r3, #0
 800044e:	b2db      	uxtb	r3, r3
}
 8000450:	4618      	mov	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <LL_RCC_SetSysClkSource+0x24>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f023 0203 	bic.w	r2, r3, #3
 800046c:	4904      	ldr	r1, [pc, #16]	; (8000480 <LL_RCC_SetSysClkSource+0x24>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	604b      	str	r3, [r1, #4]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <LL_RCC_GetSysClkSource+0x14>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f003 030c 	and.w	r3, r3, #12
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004ac:	4904      	ldr	r1, [pc, #16]	; (80004c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	604b      	str	r3, [r1, #4]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4313      	orrs	r3, r2
 80004da:	604b      	str	r3, [r1, #4]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	604b      	str	r3, [r1, #4]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_PLL_Enable+0x18>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <LL_RCC_PLL_Enable+0x18>)
 800051e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_PLL_IsReady+0x20>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800053c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000540:	bf0c      	ite	eq
 8000542:	2301      	moveq	r3, #1
 8000544:	2300      	movne	r3, #0
 8000546:	b2db      	uxtb	r3, r3
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	430b      	orrs	r3, r1
 8000570:	4903      	ldr	r1, [pc, #12]	; (8000580 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000572:	4313      	orrs	r3, r2
 8000574:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <LL_FLASH_SetLatency+0x24>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f023 0207 	bic.w	r2, r3, #7
 8000594:	4904      	ldr	r1, [pc, #16]	; (80005a8 <LL_FLASH_SetLatency+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	600b      	str	r3, [r1, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000

080005ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <LL_FLASH_GetLatency+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0307 	and.w	r3, r3, #7
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40022000 	.word	0x40022000

080005c4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 0201 	orr.w	r2, r3, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <LL_GPIO_SetPinMode>:
{
 800061a:	b490      	push	{r4, r7}
 800061c:	b088      	sub	sp, #32
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	461a      	mov	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	0e1b      	lsrs	r3, r3, #24
 800062e:	4413      	add	r3, r2
 8000630:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	fa93 f3a3 	rbit	r3, r3
 800063e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	210f      	movs	r1, #15
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	401a      	ands	r2, r3
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	fa93 f3a3 	rbit	r3, r3
 800065e:	61bb      	str	r3, [r7, #24]
  return result;
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	fab3 f383 	clz	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	fa01 f303 	lsl.w	r3, r1, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	6023      	str	r3, [r4, #0]
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bc90      	pop	{r4, r7}
 800067c:	4770      	bx	lr

0800067e <LL_GPIO_SetPinPull>:
{
 800067e:	b480      	push	{r7}
 8000680:	b087      	sub	sp, #28
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68da      	ldr	r2, [r3, #12]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	43db      	mvns	r3, r3
 8000694:	401a      	ands	r2, r3
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa93 f3a3 	rbit	r3, r3
 80006a2:	613b      	str	r3, [r7, #16]
  return result;
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	408b      	lsls	r3, r1
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	60da      	str	r2, [r3, #12]
}
 80006b8:	bf00      	nop
 80006ba:	371c      	adds	r7, #28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
	...

080006c4 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80006d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006de:	6053      	str	r3, [r2, #4]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40010000 	.word	0x40010000

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80006f2:	af02      	add	r7, sp, #8
	//FIL		fil; 		//File handle
	//FRESULT fres=2;   //Result after operations
	//uint16_t cntTIM3=0;
	//uint32_t DirCount=0;
	//char EncoderString[6] = "Привет";
	char status[20] = "123456";
 80006f4:	1d3a      	adds	r2, r7, #4
 80006f6:	4984      	ldr	r1, [pc, #528]	; (8000908 <main+0x21c>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	c903      	ldmia	r1, {r0, r1}
 80006fc:	6018      	str	r0, [r3, #0]
 80006fe:	3304      	adds	r3, #4
 8000700:	8019      	strh	r1, [r3, #0]
 8000702:	3302      	adds	r3, #2
 8000704:	0c09      	lsrs	r1, r1, #16
 8000706:	7019      	strb	r1, [r3, #0]
 8000708:	1dd3      	adds	r3, r2, #7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	731a      	strb	r2, [r3, #12]
	//uint8_t tick=0;
	Env.Menu.ActiveItem=0;
 8000714:	4b7d      	ldr	r3, [pc, #500]	; (800090c <main+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	Env.Menu.ActivePage=0;
 800071c:	4b7b      	ldr	r3, [pc, #492]	; (800090c <main+0x220>)
 800071e:	2200      	movs	r2, #0
 8000720:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	Env.Menu.BGR_Color = COLOR565_DARK_BLUE;	// background
 8000724:	4b79      	ldr	r3, [pc, #484]	; (800090c <main+0x220>)
 8000726:	2211      	movs	r2, #17
 8000728:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	Env.Menu.TXT_Color	= COLOR565_ALICE_BLUE;	// текст
 800072c:	4b77      	ldr	r3, [pc, #476]	; (800090c <main+0x220>)
 800072e:	f24f 72df 	movw	r2, #63455	; 0xf7df
 8000732:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	Env.Menu.SEL_Color	= COLOR565_BLUE;		// выделение
 8000736:	4b75      	ldr	r3, [pc, #468]	; (800090c <main+0x220>)
 8000738:	221f      	movs	r2, #31
 800073a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	Env.Menu.BRD_Color	= COLOR565_ALICE_BLUE;	// border
 800073e:	4b73      	ldr	r3, [pc, #460]	; (800090c <main+0x220>)
 8000740:	f24f 72df 	movw	r2, #63455	; 0xf7df
 8000744:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	Env.Menu.DANGER_TXT_Color	=COLOR565_WHITE;
 8000748:	4b70      	ldr	r3, [pc, #448]	; (800090c <main+0x220>)
 800074a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800074e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	Env.Menu.DANGER_BGR_Color	=COLOR565_RED;
 8000752:	4b6e      	ldr	r3, [pc, #440]	; (800090c <main+0x220>)
 8000754:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000758:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac


	f_RefreshScreen = 1;
 800075c:	4b6c      	ldr	r3, [pc, #432]	; (8000910 <main+0x224>)
 800075e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000762:	015b      	lsls	r3, r3, #5
 8000764:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000768:	f043 0314 	orr.w	r3, r3, #20
 800076c:	461a      	mov	r2, r3
 800076e:	2301      	movs	r3, #1
 8000770:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f001 fbc3 	bl	8001efc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f8e1 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  LL_SPI_Enable(SPI1);// включить SPI после инициализации
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 800077a:	f7ff fdc7 	bl	800030c <MX_GPIO_Init>
	MX_CRC_Init();
 800077e:	f7ff fd05 	bl	800018c <MX_CRC_Init>
	MX_SPI1_Init();
 8000782:	f000 faa1 	bl	8000cc8 <MX_SPI1_Init>
	LL_SPI_Enable(SPI1);// включить SPI после инициализации
 8000786:	4863      	ldr	r0, [pc, #396]	; (8000914 <main+0x228>)
 8000788:	f7ff ff1c 	bl	80005c4 <LL_SPI_Enable>
	MX_FATFS_Init();
 800078c:	f002 f908 	bl	80029a0 <MX_FATFS_Init>
	MX_TIM3_Init();
 8000790:	f000 fdf2 	bl	8001378 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000794:	2208      	movs	r2, #8
 8000796:	f241 0110 	movw	r1, #4112	; 0x1010
 800079a:	485f      	ldr	r0, [pc, #380]	; (8000918 <main+0x22c>)
 800079c:	f7ff ff3d 	bl	800061a <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_UP);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f241 0110 	movw	r1, #4112	; 0x1010
 80007a6:	485c      	ldr	r0, [pc, #368]	; (8000918 <main+0x22c>)
 80007a8:	f7ff ff69 	bl	800067e <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80007ac:	2208      	movs	r2, #8
 80007ae:	f242 0120 	movw	r1, #8224	; 0x2020
 80007b2:	4859      	ldr	r0, [pc, #356]	; (8000918 <main+0x22c>)
 80007b4:	f7ff ff31 	bl	800061a <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f242 0120 	movw	r1, #8224	; 0x2020
 80007be:	4856      	ldr	r0, [pc, #344]	; (8000918 <main+0x22c>)
 80007c0:	f7ff ff5d 	bl	800067e <LL_GPIO_SetPinPull>
	LL_TIM_SetCounter(TIM3, 0x7fff);
 80007c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80007c8:	4854      	ldr	r0, [pc, #336]	; (800091c <main+0x230>)
 80007ca:	f7ff ff19 	bl	8000600 <LL_TIM_SetCounter>
	LL_GPIO_AF_RemapPartial_TIM3();
 80007ce:	f7ff ff79 	bl	80006c4 <LL_GPIO_AF_RemapPartial_TIM3>
	LL_TIM_EnableCounter(TIM3);
 80007d2:	4852      	ldr	r0, [pc, #328]	; (800091c <main+0x230>)
 80007d4:	f7ff ff05 	bl	80005e2 <LL_TIM_EnableCounter>
	HAL_ST7735_Init();
 80007d8:	f000 feae 	bl	8001538 <HAL_ST7735_Init>
 //Монтируем файловую систему

	if(f_mount(&FatFs, "", 1) != FR_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	2201      	movs	r2, #1
 80007e2:	494f      	ldr	r1, [pc, #316]	; (8000920 <main+0x234>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 fe99 	bl	800551c <f_mount>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d06e      	beq.n	80008ce <main+0x1e2>
	{
		ST7735_Clear(Env.Menu.DANGER_BGR_Color);
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <main+0x220>)
 80007f2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f82c 	bl	8001854 <ST7735_Clear>
		sprintf(status, "SD card" );
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4a49      	ldr	r2, [pc, #292]	; (8000924 <main+0x238>)
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	e883 0003 	stmia.w	r3, {r0, r1}
		ST7735_DrawString7x11(39,1, status,Env.Menu.DANGER_TXT_Color,Env.Menu.DANGER_BGR_Color);
 8000808:	4b40      	ldr	r3, [pc, #256]	; (800090c <main+0x220>)
 800080a:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	; 0xaa
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <main+0x220>)
 8000810:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	2101      	movs	r1, #1
 800081c:	2027      	movs	r0, #39	; 0x27
 800081e:	f001 f9ed 	bl	8001bfc <ST7735_DrawString7x11>
		sprintf(status, "not find" );
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4a40      	ldr	r2, [pc, #256]	; (8000928 <main+0x23c>)
 8000826:	ca07      	ldmia	r2, {r0, r1, r2}
 8000828:	c303      	stmia	r3!, {r0, r1}
 800082a:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(27,LINE_HEIGTH*1, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <main+0x220>)
 800082e:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	; 0xaa
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <main+0x220>)
 8000834:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	460b      	mov	r3, r1
 800083e:	210d      	movs	r1, #13
 8000840:	201b      	movs	r0, #27
 8000842:	f001 f9db 	bl	8001bfc <ST7735_DrawString7x11>
		sprintf(status, "Insert SD card" );
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4a38      	ldr	r2, [pc, #224]	; (800092c <main+0x240>)
 800084a:	461c      	mov	r4, r3
 800084c:	4613      	mov	r3, r2
 800084e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000850:	c407      	stmia	r4!, {r0, r1, r2}
 8000852:	8023      	strh	r3, [r4, #0]
 8000854:	3402      	adds	r4, #2
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	7023      	strb	r3, [r4, #0]
		ST7735_DrawString7x11(8,LINE_HEIGTH*2, status, Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <main+0x220>)
 800085c:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	; 0xaa
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <main+0x220>)
 8000862:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8000866:	1d3a      	adds	r2, r7, #4
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	460b      	mov	r3, r1
 800086c:	211a      	movs	r1, #26
 800086e:	2008      	movs	r0, #8
 8000870:	f001 f9c4 	bl	8001bfc <ST7735_DrawString7x11>
		sprintf(status, "and reboot" );
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <main+0x244>)
 8000878:	ca07      	ldmia	r2, {r0, r1, r2}
 800087a:	c303      	stmia	r3!, {r0, r1}
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	3302      	adds	r3, #2
 8000880:	0c12      	lsrs	r2, r2, #16
 8000882:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(29,LINE_HEIGTH*3, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <main+0x220>)
 8000886:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	; 0xaa
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <main+0x220>)
 800088c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8000890:	1d3a      	adds	r2, r7, #4
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	460b      	mov	r3, r1
 8000896:	2127      	movs	r1, #39	; 0x27
 8000898:	201d      	movs	r0, #29
 800089a:	f001 f9af 	bl	8001bfc <ST7735_DrawString7x11>
		sprintf(status, "device" );
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4a24      	ldr	r2, [pc, #144]	; (8000934 <main+0x248>)
 80008a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	3304      	adds	r3, #4
 80008aa:	8019      	strh	r1, [r3, #0]
 80008ac:	3302      	adds	r3, #2
 80008ae:	0c0a      	lsrs	r2, r1, #16
 80008b0:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(42,LINE_HEIGTH*4, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <main+0x220>)
 80008b4:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	; 0xaa
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <main+0x220>)
 80008ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80008be:	1d3a      	adds	r2, r7, #4
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	460b      	mov	r3, r1
 80008c4:	2134      	movs	r1, #52	; 0x34
 80008c6:	202a      	movs	r0, #42	; 0x2a
 80008c8:	f001 f998 	bl	8001bfc <ST7735_DrawString7x11>
		while(1);
 80008cc:	e7fe      	b.n	80008cc <main+0x1e0>
								}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ST7735_Clear(Env.Menu.BGR_Color);
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main+0x220>)
 80008d0:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 ffbd 	bl	8001854 <ST7735_Clear>
	FS_GetFileList( &Env);
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <main+0x220>)
 80008dc:	f002 f87a 	bl	80029d4 <FS_GetFileList>
	Env.Menu.NmbrAllPages = (uint32_t)(Env.Menu.NmbrAllFiles/ITEM_ON_PAGE_MAX);
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <main+0x220>)
 80008e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <main+0x24c>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <main+0x220>)
 80008f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  while (1)
  {
	Menu(&Env);
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <main+0x220>)
 80008f6:	f000 f895 	bl	8000a24 <Menu>
	Test(&Env);
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <main+0x220>)
 80008fc:	f000 fb98 	bl	8001030 <Test>
	Display(&Env);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <main+0x220>)
 8000902:	f7ff fc4b 	bl	800019c <Display>
	Menu(&Env);
 8000906:	e7f5      	b.n	80008f4 <main+0x208>
 8000908:	080061d4 	.word	0x080061d4
 800090c:	2000007c 	.word	0x2000007c
 8000910:	20000138 	.word	0x20000138
 8000914:	40013000 	.word	0x40013000
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40000400 	.word	0x40000400
 8000920:	08006198 	.word	0x08006198
 8000924:	0800619c 	.word	0x0800619c
 8000928:	080061a4 	.word	0x080061a4
 800092c:	080061b0 	.word	0x080061b0
 8000930:	080061c0 	.word	0x080061c0
 8000934:	080061cc 	.word	0x080061cc
 8000938:	ba2e8ba3 	.word	0xba2e8ba3

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff fe1f 	bl	8000584 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000946:	bf00      	nop
 8000948:	f7ff fe30 	bl	80005ac <LL_FLASH_GetLatency>
 800094c:	4603      	mov	r3, r0
 800094e:	2b02      	cmp	r3, #2
 8000950:	d1fa      	bne.n	8000948 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000952:	f7ff fd63 	bl	800041c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000956:	bf00      	nop
 8000958:	f7ff fd6e 	bl	8000438 <LL_RCC_HSE_IsReady>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d1fa      	bne.n	8000958 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000962:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000966:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800096a:	f7ff fdf3 	bl	8000554 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800096e:	f7ff fdd1 	bl	8000514 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000972:	bf00      	nop
 8000974:	f7ff fddc 	bl	8000530 <LL_RCC_PLL_IsReady>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d1fa      	bne.n	8000974 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fd8c 	bl	800049c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000984:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000988:	f7ff fd9c 	bl	80004c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fdad 	bl	80004ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fd62 	bl	800045c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000998:	bf00      	nop
 800099a:	f7ff fd73 	bl	8000484 <LL_RCC_GetSysClkSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d1fa      	bne.n	800099a <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <SystemClock_Config+0x84>)
 80009a6:	f001 ffed 	bl	8002984 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	2000      	movs	r0, #0
 80009ac:	f001 fabc 	bl	8001f28 <HAL_InitTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009b6:	f000 f805 	bl	80009c4 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	044aa200 	.word	0x044aa200

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ca:	e7fe      	b.n	80009ca <Error_Handler+0x6>

080009cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <LL_GPIO_IsInputPinSet>:
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	43da      	mvns	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <Menu>:
uint8_t FS_ReadFile(typeEnv *Env);
void ParseString(char  *str_in, char *data_out);

const uint16_t  COLORS565[140] = {0xF7DF, 0xFF5A, 0x07FF, 0x7FFA, 0xF7FF, 0xF7BB, 0xFF38, 0x0, 0xFF59, 0x001F, 0x895C, 0xA145, 0xDDD0, 0x5CF4, 0x7FE0, 0xD343, 0xFBEA, 0x64BD, 0xFFDB, 0xD8A7, 0x07FF, 0x11, 0x451, 0xBC21, 0xAD55, 0x320, 0xBDAD, 0x8811, 0x5345, 0xFC60, 0x9999, 0x8800, 0xECAF, 0x8DF1, 0x49F1, 0x2A69, 0x067A, 0x901A, 0xF8B2, 0x05FF, 0x6B4D, 0x1C9F, 0xB104, 0xFFDE, 0x2444, 0xF81F, 0xDEFB, 0xFFDF, 0xFEA0, 0xDD24, 0x8410, 0x400, 0xAFE5, 0xF7FE, 0xFB56, 0xCAEB, 0x4810, 0xFFFE, 0xF731, 0xE73F, 0xFF9E, 0x7FE0, 0xFFD9, 0xAEDC, 0xF410, 0xE7FF, 0xFFDA, 0xD69A, 0x9772, 0xFDB8, 0xFD0F, 0x2595, 0x867F, 0x7453, 0xB63B, 0xFFFC, 0x7, 0x3666, 0xFF9C, 0xF81F, 0x8000, 0x6675, 0x19, 0xBABA, 0x939B, 0x3D8E, 0x7B5D, 0x07D3, 0x4E99, 0xC0B0, 0x18CE, 0xF7FF, 0xFF3C, 0xFF36, 0xFEF5, 0x10, 0xFFBC, 0x8400, 0x6C64, 0xFD20, 0xFA20, 0xDB9A, 0xEF55, 0x9FD3, 0xAF7D, 0xDB92, 0xFF7A, 0xFED7, 0xCC27, 0xFE19, 0xDD1B, 0xB71C, 0x8010, 0xF800, 0xBC71, 0x435C, 0x8A22, 0xFC0E, 0xF52C, 0x2C4A, 0xFFBD, 0xA285, 0xC618, 0x867D, 0x6AD9, 0x7412, 0xFFDF, 0x07EF, 0x4416, 0xD5B1, 0x410, 0xDDFB, 0xFB08, 0x471A, 0xEC1D, 0xF6F6, 0xFFFF, 0xF7BE, 0xFFE0, 0x9E66 };
void Menu(typeEnv *Env)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
	static uint32_t EncoderCount=0x7fff;
	uint32_t currentCount = LL_TIM_GetCounter(TIM3);
 8000a2c:	4871      	ldr	r0, [pc, #452]	; (8000bf4 <Menu+0x1d0>)
 8000a2e:	f7ff ffd7 	bl	80009e0 <LL_TIM_GetCounter>
 8000a32:	6238      	str	r0, [r7, #32]
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a3a:	61fb      	str	r3, [r7, #28]
	short int ActiveItem = (*Env).Menu.ActiveItem;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8000a42:	84fb      	strh	r3, [r7, #38]	; 0x26
	short int ActivePage = (*Env).Menu.ActivePage;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8000a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
	char *fileName = (*Env).FileNameForTest;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000a52:	61bb      	str	r3, [r7, #24]
	static uint8_t but_latch=0, but_press=0, indx=0;

	char String[FILENAME_SIZE];


	if(f_EncoderRead == 1)
 8000a54:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <Menu+0x1d4>)
 8000a56:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a5a:	015b      	lsls	r3, r3, #5
 8000a5c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000a60:	f043 0318 	orr.w	r3, r3, #24
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	f040 80bf 	bne.w	8000bea <Menu+0x1c6>
	{
		f_EncoderRead = 0;
 8000a6c:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <Menu+0x1d4>)
 8000a6e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a72:	015b      	lsls	r3, r3, #5
 8000a74:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000a78:	f043 0318 	orr.w	r3, r3, #24
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2300      	movs	r3, #0
 8000a80:	6013      	str	r3, [r2, #0]
		if(EncoderCount != currentCount  	)
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <Menu+0x1d8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6a3a      	ldr	r2, [r7, #32]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d066      	beq.n	8000b5a <Menu+0x136>
			{
				if(EncoderCount > currentCount  	)
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <Menu+0x1d8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6a3a      	ldr	r2, [r7, #32]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d21e      	bcs.n	8000ad4 <Menu+0xb0>
				{
					ActiveItem++;
 8000a96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
					if(ActiveItem >= end_list)
 8000aa2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d830      	bhi.n	8000b0e <Menu+0xea>
						{
						ActiveItem = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	84fb      	strh	r3, [r7, #38]	; 0x26
						ActivePage++;
 8000ab0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	84bb      	strh	r3, [r7, #36]	; 0x24
						if(ActivePage > Env->Menu.NmbrAllPages) {ActivePage = Env->Menu.NmbrAllPages;}
 8000abc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d921      	bls.n	8000b0e <Menu+0xea>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ad2:	e01c      	b.n	8000b0e <Menu+0xea>
						}
				}
				else if (EncoderCount < currentCount )
 8000ad4:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <Menu+0x1d8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d917      	bls.n	8000b0e <Menu+0xea>
				{
					ActiveItem--;
 8000ade:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
					if(ActiveItem < 0)
 8000aea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da0d      	bge.n	8000b0e <Menu+0xea>
						{
							ActiveItem = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	84fb      	strh	r3, [r7, #38]	; 0x26
							ActivePage--;
 8000af6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	84bb      	strh	r3, [r7, #36]	; 0x24
							if(ActivePage < 0) {ActivePage = 0;}
 8000b02:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da01      	bge.n	8000b0e <Menu+0xea>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
						}
				}

				if(ActivePage != (*Env).Menu.ActivePage)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8000b14:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d00c      	beq.n	8000b36 <Menu+0x112>
				{
					(*Env).Menu.ActivePage = ActivePage;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b20:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
					FS_GetFileList(Env);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f001 ff55 	bl	80029d4 <FS_GetFileList>
					ST7735_Clear((*Env).Menu.BGR_Color);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fe8f 	bl	8001854 <ST7735_Clear>
				}
				EncoderCount = currentCount;
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <Menu+0x1d8>)
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	6013      	str	r3, [r2, #0]
				(*Env).Menu.ActiveItem = ActiveItem;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b40:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
				f_RefreshScreen = 1;
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <Menu+0x1d4>)
 8000b46:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000b50:	f043 0314 	orr.w	r3, r3, #20
 8000b54:	461a      	mov	r2, r3
 8000b56:	2301      	movs	r3, #1
 8000b58:	6013      	str	r3, [r2, #0]
			}

					/* обработка кнопки */
					but_latch = LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin);
 8000b5a:	4929      	ldr	r1, [pc, #164]	; (8000c00 <Menu+0x1dc>)
 8000b5c:	4829      	ldr	r0, [pc, #164]	; (8000c04 <Menu+0x1e0>)
 8000b5e:	f7ff ff4a 	bl	80009f6 <LL_GPIO_IsInputPinSet>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <Menu+0x1e4>)
 8000b68:	701a      	strb	r2, [r3, #0]
					if( but_latch == 0 )
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <Menu+0x1e4>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <Menu+0x154>
					{
						but_press=1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <Menu+0x1e8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
					}
					if( but_latch==1 &&  but_press ==1)
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <Menu+0x1e4>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d134      	bne.n	8000bea <Menu+0x1c6>
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <Menu+0x1e8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d130      	bne.n	8000bea <Menu+0x1c6>
					{
						but_press=0;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <Menu+0x1e8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
						(*Env).FileNameForTest = &(*Env).Menu.FileList[ActiveItem][0];// указателю отдаем адрес
 8000b8e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	441a      	add	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						FS_ReadFile(Env);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f001 ffc4 	bl	8002b34 <FS_ReadFile>

						//strncpy(&String, ((*Env).FileNameForTest), FILENAME_SIZE);
						//sprintf(&String,"COLORS565[%d] ", indx);
						//ST7735_DrawString7x11(1,15,String,COLORS565[indx++],COLORS565[indx]);
						static uint8_t step=0;
						ST7735_DrawChar(1,0,'A',(*Env).Menu.TXT_Color,(*Env).Menu.BGR_Color);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	2241      	movs	r2, #65	; 0x41
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fef9 	bl	80019b8 <ST7735_DrawChar>
						ST7735_DrawChar(11,0, step++,(*Env).Menu.TXT_Color,(*Env).Menu.BGR_Color);
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <Menu+0x1ec>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	1c53      	adds	r3, r2, #1
 8000bcc:	b2d9      	uxtb	r1, r3
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <Menu+0x1ec>)
 8000bd0:	7019      	strb	r1, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	460b      	mov	r3, r1
 8000be2:	2100      	movs	r1, #0
 8000be4:	200b      	movs	r0, #11
 8000be6:	f000 fee7 	bl	80019b8 <ST7735_DrawChar>
					}

	}

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40000400 	.word	0x40000400
 8000bf8:	20000138 	.word	0x20000138
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	04800080 	.word	0x04800080
 8000c04:	40010800 	.word	0x40010800
 8000c08:	2000004c 	.word	0x2000004c
 8000c0c:	2000004d 	.word	0x2000004d
 8000c10:	2000004e 	.word	0x2000004e

08000c14 <LL_APB2_GRP1_EnableClock>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c1e:	699a      	ldr	r2, [r3, #24]
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c2a:	699a      	ldr	r2, [r3, #24]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d101      	bne.n	8000c5c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d101      	bne.n	8000c80 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	b2db      	uxtb	r3, r3
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	330c      	adds	r3, #12
 8000cb4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
	...

08000cc8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b090      	sub	sp, #64	; 0x40
 8000ccc:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 fa2c 	bl	8006134 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000cea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cee:	f7ff ff91 	bl	8000c14 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f7ff ff8e 	bl	8000c14 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000cf8:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000cfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cfe:	2309      	movs	r3, #9
 8000d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MX_SPI1_Init+0xa0>)
 8000d10:	f001 fb6a 	bl	80023e8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000d14:	f244 0340 	movw	r3, #16448	; 0x4040
 8000d18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4811      	ldr	r0, [pc, #68]	; (8000d68 <MX_SPI1_Init+0xa0>)
 8000d24:	f001 fb60 	bl	80023e8 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000d2c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d30:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8000d44:	2330      	movs	r3, #48	; 0x30
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000d50:	230a      	movs	r3, #10
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_SPI1_Init+0xa4>)
 8000d5c:	f001 fc3e 	bl	80025dc <LL_SPI_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3740      	adds	r7, #64	; 0x40
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40013000 	.word	0x40013000

08000d70 <LL_SPI_TransmitReceive>:

/* USER CODE BEGIN 1 */
uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	while(	LL_SPI_IsActiveFlag_TXE(SPIx) == RESET	);
 8000d7c:	bf00      	nop
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff72 	bl	8000c68 <LL_SPI_IsActiveFlag_TXE>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f9      	beq.n	8000d7e <LL_SPI_TransmitReceive+0xe>
	LL_SPI_TransmitData8(SPIx, TxByte);
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff88 	bl	8000ca4 <LL_SPI_TransmitData8>

	while(	LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET	);
 8000d94:	bf00      	nop
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff54 	bl	8000c44 <LL_SPI_IsActiveFlag_RXNE>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f9      	beq.n	8000d96 <LL_SPI_TransmitReceive+0x26>
	return LL_SPI_ReceiveData8(SPIx);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff72 	bl	8000c8c <LL_SPI_ReceiveData8>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_MspInit+0x60>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_MspInit+0x60>)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000

08000e18 <LL_GPIO_TogglePin>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4013      	ands	r3, r2
 8000e36:	041a      	lsls	r2, r3, #16
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	400b      	ands	r3, r1
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f001 f877 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_1ms();
 8000e9a:	f000 f803 	bl	8000ea4 <timer_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <timer_1ms>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void timer_1ms(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if (    (f_1ms = !f_1ms)==0        )
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <timer_1ms+0x38>)
 8000eaa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf0c      	ite	eq
 8000eba:	2301      	moveq	r3, #1
 8000ebc:	2300      	movne	r3, #0
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <timer_1ms+0x38>)
 8000ec2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ec6:	015b      	lsls	r3, r3, #5
 8000ec8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <timer_1ms+0x34>
	  {
	   Flags_1ms();
 8000ed4:	f000 f804 	bl	8000ee0 <Flags_1ms>
	  }
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000138 	.word	0x20000138

08000ee0 <Flags_1ms>:

void Flags_1ms(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	f_1ms = 1; // user flag every 1 ms
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <Flags_1ms+0x38>)
 8000ee6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000eea:	015b      	lsls	r3, r3, #5
 8000eec:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]


	  if (--t_10ms == 0x00)
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <Flags_1ms+0x3c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <Flags_1ms+0x3c>)
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <Flags_1ms+0x3c>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <Flags_1ms+0x34>
	    {
	      t_10ms = cl_ms10;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <Flags_1ms+0x3c>)
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	801a      	strh	r2, [r3, #0]
	      Flags_10msec();
 8000f10:	f000 f806 	bl	8000f20 <Flags_10msec>
	    }
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000138 	.word	0x20000138
 8000f1c:	20000004 	.word	0x20000004

08000f20 <Flags_10msec>:

void Flags_10msec()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	f_10ms = 1;		// user flag every 10 ms
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <Flags_10msec+0x54>)
 8000f26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	461a      	mov	r2, r3
 8000f36:	2301      	movs	r3, #1
 8000f38:	6013      	str	r3, [r2, #0]
	f_EncoderRead=1;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <Flags_10msec+0x54>)
 8000f3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f40:	015b      	lsls	r3, r3, #5
 8000f42:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f46:	f043 0318 	orr.w	r3, r3, #24
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]
	  if (--t_100ms == 0x00)
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <Flags_10msec+0x58>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <Flags_10msec+0x58>)
 8000f5a:	801a      	strh	r2, [r3, #0]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <Flags_10msec+0x58>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <Flags_10msec+0x4e>
		{
		  t_100ms = cl_ms100;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <Flags_10msec+0x58>)
 8000f66:	220a      	movs	r2, #10
 8000f68:	801a      	strh	r2, [r3, #0]
		  Flags_100ms();
 8000f6a:	f000 f807 	bl	8000f7c <Flags_100ms>
		}
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000138 	.word	0x20000138
 8000f78:	20000006 	.word	0x20000006

08000f7c <Flags_100ms>:

void Flags_100ms(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	f_100ms = 1;		// user flag every 100 ms
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <Flags_100ms+0x3c>)
 8000f82:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f86:	015b      	lsls	r3, r3, #5
 8000f88:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	461a      	mov	r2, r3
 8000f92:	2301      	movs	r3, #1
 8000f94:	6013      	str	r3, [r2, #0]
	//f_EncoderRead = 1;
	  if (--t_sec == 0x00)
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <Flags_100ms+0x40>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <Flags_100ms+0x40>)
 8000fa0:	801a      	strh	r2, [r3, #0]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <Flags_100ms+0x40>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d104      	bne.n	8000fb4 <Flags_100ms+0x38>
		{
		  t_sec = cl_sec;
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <Flags_100ms+0x40>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	801a      	strh	r2, [r3, #0]
		  Flags_1s();
 8000fb0:	f000 f806 	bl	8000fc0 <Flags_1s>
		}
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000138 	.word	0x20000138
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <Flags_1s>:

void Flags_1s(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	f_1sec = 1;		// user flag every 1 sec
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <Flags_1s+0x58>)
 8000fc6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fd0:	f043 030c 	orr.w	r3, r3, #12
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_0);
 8000fda:	f240 1101 	movw	r1, #257	; 0x101
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <Flags_1s+0x5c>)
 8000fe0:	f7ff ff1a 	bl	8000e18 <LL_GPIO_TogglePin>
	if (--t_min == 0x00)
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <Flags_1s+0x60>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <Flags_1s+0x60>)
 8000fee:	801a      	strh	r2, [r3, #0]
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <Flags_1s+0x60>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10d      	bne.n	8001014 <Flags_1s+0x54>
			{
				f_1min = 1;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <Flags_1s+0x58>)
 8000ffa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	461a      	mov	r2, r3
 800100a:	2301      	movs	r3, #1
 800100c:	6013      	str	r3, [r2, #0]
				t_min = cl_min;
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <Flags_1s+0x60>)
 8001010:	223c      	movs	r2, #60	; 0x3c
 8001012:	801a      	strh	r2, [r3, #0]

			}
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000138 	.word	0x20000138
 800101c:	40010c00 	.word	0x40010c00
 8001020:	2000000a 	.word	0x2000000a

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <Test>:
 *      Author: aalexeev
 */
#include "main.h"

void Test(typeEnv *Env)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <LL_APB1_GRP1_EnableClock>:
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104e:	69da      	ldr	r2, [r3, #28]
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <LL_APB2_GRP1_EnableClock>:
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4313      	orrs	r3, r2
 8001086:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <LL_TIM_DisableARRPreload>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d01c      	beq.n	8001110 <LL_TIM_IC_SetActiveInput+0x4c>
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d017      	beq.n	800110c <LL_TIM_IC_SetActiveInput+0x48>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d012      	beq.n	8001108 <LL_TIM_IC_SetActiveInput+0x44>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b40      	cmp	r3, #64	; 0x40
 80010e6:	d00d      	beq.n	8001104 <LL_TIM_IC_SetActiveInput+0x40>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ee:	d007      	beq.n	8001100 <LL_TIM_IC_SetActiveInput+0x3c>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f6:	d101      	bne.n	80010fc <LL_TIM_IC_SetActiveInput+0x38>
 80010f8:	2305      	movs	r3, #5
 80010fa:	e00a      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 80010fc:	2306      	movs	r3, #6
 80010fe:	e008      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 8001100:	2304      	movs	r3, #4
 8001102:	e006      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 8001104:	2303      	movs	r3, #3
 8001106:	e004      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 8001108:	2302      	movs	r3, #2
 800110a:	e002      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_TIM_IC_SetActiveInput+0x4e>
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3318      	adds	r3, #24
 8001118:	4619      	mov	r1, r3
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LL_TIM_IC_SetActiveInput+0x90>)
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	440b      	add	r3, r1
 8001122:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	490b      	ldr	r1, [pc, #44]	; (8001158 <LL_TIM_IC_SetActiveInput+0x94>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	4619      	mov	r1, r3
 8001130:	2303      	movs	r3, #3
 8001132:	408b      	lsls	r3, r1
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	7df9      	ldrb	r1, [r7, #23]
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <LL_TIM_IC_SetActiveInput+0x94>)
 8001140:	5c41      	ldrb	r1, [r0, r1]
 8001142:	408b      	lsls	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	08006350 	.word	0x08006350
 8001158:	08006358 	.word	0x08006358

0800115c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d01c      	beq.n	80011a8 <LL_TIM_IC_SetPrescaler+0x4c>
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d017      	beq.n	80011a4 <LL_TIM_IC_SetPrescaler+0x48>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d012      	beq.n	80011a0 <LL_TIM_IC_SetPrescaler+0x44>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d00d      	beq.n	800119c <LL_TIM_IC_SetPrescaler+0x40>
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001186:	d007      	beq.n	8001198 <LL_TIM_IC_SetPrescaler+0x3c>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d101      	bne.n	8001194 <LL_TIM_IC_SetPrescaler+0x38>
 8001190:	2305      	movs	r3, #5
 8001192:	e00a      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 8001194:	2306      	movs	r3, #6
 8001196:	e008      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 8001198:	2304      	movs	r3, #4
 800119a:	e006      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 800119c:	2303      	movs	r3, #3
 800119e:	e004      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e002      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <LL_TIM_IC_SetPrescaler+0x4e>
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3318      	adds	r3, #24
 80011b0:	4619      	mov	r1, r3
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LL_TIM_IC_SetPrescaler+0x90>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	440b      	add	r3, r1
 80011ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	490b      	ldr	r1, [pc, #44]	; (80011f0 <LL_TIM_IC_SetPrescaler+0x94>)
 80011c4:	5ccb      	ldrb	r3, [r1, r3]
 80011c6:	4619      	mov	r1, r3
 80011c8:	230c      	movs	r3, #12
 80011ca:	408b      	lsls	r3, r1
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	7df9      	ldrb	r1, [r7, #23]
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <LL_TIM_IC_SetPrescaler+0x94>)
 80011d8:	5c41      	ldrb	r1, [r0, r1]
 80011da:	408b      	lsls	r3, r1
 80011dc:	431a      	orrs	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	08006350 	.word	0x08006350
 80011f0:	08006358 	.word	0x08006358

080011f4 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d01c      	beq.n	8001240 <LL_TIM_IC_SetFilter+0x4c>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d017      	beq.n	800123c <LL_TIM_IC_SetFilter+0x48>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d012      	beq.n	8001238 <LL_TIM_IC_SetFilter+0x44>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b40      	cmp	r3, #64	; 0x40
 8001216:	d00d      	beq.n	8001234 <LL_TIM_IC_SetFilter+0x40>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800121e:	d007      	beq.n	8001230 <LL_TIM_IC_SetFilter+0x3c>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001226:	d101      	bne.n	800122c <LL_TIM_IC_SetFilter+0x38>
 8001228:	2305      	movs	r3, #5
 800122a:	e00a      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 800122c:	2306      	movs	r3, #6
 800122e:	e008      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 8001230:	2304      	movs	r3, #4
 8001232:	e006      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 8001234:	2303      	movs	r3, #3
 8001236:	e004      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_TIM_IC_SetFilter+0x4e>
 8001240:	2300      	movs	r3, #0
 8001242:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3318      	adds	r3, #24
 8001248:	4619      	mov	r1, r3
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LL_TIM_IC_SetFilter+0x90>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	440b      	add	r3, r1
 8001252:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	490b      	ldr	r1, [pc, #44]	; (8001288 <LL_TIM_IC_SetFilter+0x94>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	4619      	mov	r1, r3
 8001260:	23f0      	movs	r3, #240	; 0xf0
 8001262:	408b      	lsls	r3, r1
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	7df9      	ldrb	r1, [r7, #23]
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <LL_TIM_IC_SetFilter+0x94>)
 8001270:	5c41      	ldrb	r1, [r0, r1]
 8001272:	408b      	lsls	r3, r1
 8001274:	431a      	orrs	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	08006350 	.word	0x08006350
 8001288:	08006358 	.word	0x08006358

0800128c <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d01c      	beq.n	80012d8 <LL_TIM_IC_SetPolarity+0x4c>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d017      	beq.n	80012d4 <LL_TIM_IC_SetPolarity+0x48>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d012      	beq.n	80012d0 <LL_TIM_IC_SetPolarity+0x44>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b40      	cmp	r3, #64	; 0x40
 80012ae:	d00d      	beq.n	80012cc <LL_TIM_IC_SetPolarity+0x40>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b6:	d007      	beq.n	80012c8 <LL_TIM_IC_SetPolarity+0x3c>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d101      	bne.n	80012c4 <LL_TIM_IC_SetPolarity+0x38>
 80012c0:	2305      	movs	r3, #5
 80012c2:	e00a      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012c4:	2306      	movs	r3, #6
 80012c6:	e008      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e006      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012cc:	2303      	movs	r3, #3
 80012ce:	e004      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <LL_TIM_IC_SetPolarity+0x4e>
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	490a      	ldr	r1, [pc, #40]	; (800130c <LL_TIM_IC_SetPolarity+0x80>)
 80012e4:	5ccb      	ldrb	r3, [r1, r3]
 80012e6:	4619      	mov	r1, r3
 80012e8:	230a      	movs	r3, #10
 80012ea:	408b      	lsls	r3, r1
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	4906      	ldr	r1, [pc, #24]	; (800130c <LL_TIM_IC_SetPolarity+0x80>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	408b      	lsls	r3, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	08006360 	.word	0x08006360

08001310 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	609a      	str	r2, [r3, #8]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	605a      	str	r2, [r3, #4]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
	...

08001378 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800139c:	2002      	movs	r0, #2
 800139e:	f7ff fe51 	bl	8001044 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80013a2:	2008      	movs	r0, #8
 80013a4:	f7ff fe66 	bl	8001074 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80013a8:	f243 0330 	movw	r3, #12336	; 0x3030
 80013ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80013ae:	2304      	movs	r3, #4
 80013b0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4829      	ldr	r0, [pc, #164]	; (800145c <MX_TIM3_Init+0xe4>)
 80013b8:	f001 f816 	bl	80023e8 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);	// LL_TIM_ENCODERMODE_X2_TI1	LL_TIM_ENCODERMODE_X4_TI12
 80013bc:	2101      	movs	r1, #1
 80013be:	4828      	ldr	r0, [pc, #160]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013c0:	f7ff ffa6 	bl	8001310 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80013c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c8:	2101      	movs	r1, #1
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013cc:	f7ff fe7a 	bl	80010c4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV2);
 80013d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013d4:	2101      	movs	r1, #1
 80013d6:	4822      	ldr	r0, [pc, #136]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013d8:	f7ff fec0 	bl	800115c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV32_N8);
 80013dc:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80013e0:	2101      	movs	r1, #1
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013e4:	f7ff ff06 	bl	80011f4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013ee:	f7ff ff4d 	bl	800128c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80013f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f6:	2110      	movs	r1, #16
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <MX_TIM3_Init+0xe8>)
 80013fa:	f7ff fe63 	bl	80010c4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV2);
 80013fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001402:	2110      	movs	r1, #16
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001406:	f7ff fea9 	bl	800115c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV32_N8);
 800140a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800140e:	2110      	movs	r1, #16
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001412:	f7ff feef 	bl	80011f4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_TIM3_Init+0xe8>)
 800141c:	f7ff ff36 	bl	800128c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142c:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <MX_TIM3_Init+0xe8>)
 800143a:	f001 fa03 	bl	8002844 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001440:	f7ff fe30 	bl	80010a4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001444:	2100      	movs	r1, #0
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_TIM3_Init+0xe8>)
 8001448:	f7ff ff74 	bl	8001334 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_TIM3_Init+0xe8>)
 800144e:	f7ff ff83 	bl	8001358 <LL_TIM_DisableMasterSlaveMode>

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40000400 	.word	0x40000400

08001464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001464:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001466:	e003      	b.n	8001470 <LoopCopyDataInit>

08001468 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800146a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800146c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800146e:	3104      	adds	r1, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001474:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001476:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001478:	d3f6      	bcc.n	8001468 <CopyDataInit>
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800147c:	e002      	b.n	8001484 <LoopFillZerobss>

0800147e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001480:	f842 3b04 	str.w	r3, [r2], #4

08001484 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001486:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001488:	d3f9      	bcc.n	800147e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800148a:	f7ff fdcb 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f004 fe2d 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001492:	f7ff f92b 	bl	80006ec <main>
  bx lr
 8001496:	4770      	bx	lr
  ldr r3, =_sidata
 8001498:	08006e10 	.word	0x08006e10
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014a0:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 80014a4:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 80014a8:	200005ac 	.word	0x200005ac

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <ST7735_write>:

uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte);


void ST7735_write(uint8_t data)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
CS_LOW_ST7735  ;
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <ST7735_write+0x30>)
 80014c0:	f000 fea8 	bl	8002214 <HAL_GPIO_WritePin>
LL_SPI_TransmitReceive(SPI1, data);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <ST7735_write+0x34>)
 80014ca:	f7ff fc51 	bl	8000d70 <LL_SPI_TransmitReceive>
CS_HIGH_ST7735 ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	2110      	movs	r1, #16
 80014d2:	4803      	ldr	r0, [pc, #12]	; (80014e0 <ST7735_write+0x30>)
 80014d4:	f000 fe9e 	bl	8002214 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40013000 	.word	0x40013000

080014e8 <ST7735_SendData>:
#define ST7735_Send(x) ST7735_write(x)

void ST7735_SendData(uint8_t data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	A0_HIGH_ST7735 ; //A0_HIGH;
 80014f2:	2201      	movs	r2, #1
 80014f4:	2108      	movs	r1, #8
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <ST7735_SendData+0x24>)
 80014f8:	f000 fe8c 	bl	8002214 <HAL_GPIO_WritePin>
	ST7735_write(data);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffd6 	bl	80014b0 <ST7735_write>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40010800 	.word	0x40010800

08001510 <ST7735_SendCmd>:

void ST7735_SendCmd(uint8_t cmd)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	A0_LOW_ST7735 ; //A0_LOW;
 800151a:	2200      	movs	r2, #0
 800151c:	2108      	movs	r1, #8
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <ST7735_SendCmd+0x24>)
 8001520:	f000 fe78 	bl	8002214 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffc2 	bl	80014b0 <ST7735_write>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010800 	.word	0x40010800

08001538 <HAL_ST7735_Init>:

void HAL_ST7735_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
/*#1*/
    CS_HIGH_ST7735 ;
 800153c:	2201      	movs	r2, #1
 800153e:	2110      	movs	r1, #16
 8001540:	489f      	ldr	r0, [pc, #636]	; (80017c0 <HAL_ST7735_Init+0x288>)
 8001542:	f000 fe67 	bl	8002214 <HAL_GPIO_WritePin>
	RESET_HIGH_ST7735 ;
 8001546:	2201      	movs	r2, #1
 8001548:	2102      	movs	r1, #2
 800154a:	489d      	ldr	r0, [pc, #628]	; (80017c0 <HAL_ST7735_Init+0x288>)
 800154c:	f000 fe62 	bl	8002214 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001550:	200a      	movs	r0, #10
 8001552:	f000 fd35 	bl	8001fc0 <HAL_Delay>
	RESET_LOW_ST7735 ;
 8001556:	2200      	movs	r2, #0
 8001558:	2102      	movs	r1, #2
 800155a:	4899      	ldr	r0, [pc, #612]	; (80017c0 <HAL_ST7735_Init+0x288>)
 800155c:	f000 fe5a 	bl	8002214 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f000 fd2d 	bl	8001fc0 <HAL_Delay>
	RESET_HIGH_ST7735 ;
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4895      	ldr	r0, [pc, #596]	; (80017c0 <HAL_ST7735_Init+0x288>)
 800156c:	f000 fe52 	bl	8002214 <HAL_GPIO_WritePin>
    CS_LOW_ST7735 ;
 8001570:	2200      	movs	r2, #0
 8001572:	2110      	movs	r1, #16
 8001574:	4892      	ldr	r0, [pc, #584]	; (80017c0 <HAL_ST7735_Init+0x288>)
 8001576:	f000 fe4d 	bl	8002214 <HAL_GPIO_WritePin>
	
	ST7735_SendCmd(ST7735_SWRESET);// программный ресет
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff ffc8 	bl	8001510 <ST7735_SendCmd>
	HAL_Delay(150);
 8001580:	2096      	movs	r0, #150	; 0x96
 8001582:	f000 fd1d 	bl	8001fc0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_SLPOUT); // выход из спящего режима
 8001586:	2011      	movs	r0, #17
 8001588:	f7ff ffc2 	bl	8001510 <ST7735_SendCmd>
	HAL_Delay(500);
 800158c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001590:	f000 fd16 	bl	8001fc0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_FRMCTR1);//FRMCTR1 (B1h): Frame Rate Control (In normal mode/ Full colors)
 8001594:	20b1      	movs	r0, #177	; 0xb1
 8001596:	f7ff ffbb 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff ffa4 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80015a0:	202c      	movs	r0, #44	; 0x2c
 80015a2:	f7ff ffa1 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80015a6:	202d      	movs	r0, #45	; 0x2d
 80015a8:	f7ff ff9e 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR2);//Frame Rate Control (In Idle mode/ 8-colors)
 80015ac:	20b2      	movs	r0, #178	; 0xb2
 80015ae:	f7ff ffaf 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff ff98 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80015b8:	202c      	movs	r0, #44	; 0x2c
 80015ba:	f7ff ff95 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80015be:	202d      	movs	r0, #45	; 0x2d
 80015c0:	f7ff ff92 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR3);//Frame Rate Control (In Partial mode/ full colors)
 80015c4:	20b3      	movs	r0, #179	; 0xb3
 80015c6:	f7ff ffa3 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff ff8c 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80015d0:	202c      	movs	r0, #44	; 0x2c
 80015d2:	f7ff ff89 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80015d6:	202d      	movs	r0, #45	; 0x2d
 80015d8:	f7ff ff86 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x01);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff ff83 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80015e2:	202c      	movs	r0, #44	; 0x2c
 80015e4:	f7ff ff80 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80015e8:	202d      	movs	r0, #45	; 0x2d
 80015ea:	f7ff ff7d 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVCTR); //  Display Inversion Control
 80015ee:	20b4      	movs	r0, #180	; 0xb4
 80015f0:	f7ff ff8e 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x07);
 80015f4:	2007      	movs	r0, #7
 80015f6:	f7ff ff77 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR1);
 80015fa:	20c0      	movs	r0, #192	; 0xc0
 80015fc:	f7ff ff88 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0xA2);
 8001600:	20a2      	movs	r0, #162	; 0xa2
 8001602:	f7ff ff71 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x02);
 8001606:	2002      	movs	r0, #2
 8001608:	f7ff ff6e 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x84);
 800160c:	2084      	movs	r0, #132	; 0x84
 800160e:	f7ff ff6b 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR2);
 8001612:	20c1      	movs	r0, #193	; 0xc1
 8001614:	f7ff ff7c 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0xC5);
 8001618:	20c5      	movs	r0, #197	; 0xc5
 800161a:	f7ff ff65 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR3);
 800161e:	20c2      	movs	r0, #194	; 0xc2
 8001620:	f7ff ff76 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x0A);
 8001624:	200a      	movs	r0, #10
 8001626:	f7ff ff5f 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff ff5c 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR4);
 8001630:	20c3      	movs	r0, #195	; 0xc3
 8001632:	f7ff ff6d 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8001636:	208a      	movs	r0, #138	; 0x8a
 8001638:	f7ff ff56 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2A);
 800163c:	202a      	movs	r0, #42	; 0x2a
 800163e:	f7ff ff53 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR5);
 8001642:	20c4      	movs	r0, #196	; 0xc4
 8001644:	f7ff ff64 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8001648:	208a      	movs	r0, #138	; 0x8a
 800164a:	f7ff ff4d 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0xEE);
 800164e:	20ee      	movs	r0, #238	; 0xee
 8001650:	f7ff ff4a 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_VMCTR1);
 8001654:	20c5      	movs	r0, #197	; 0xc5
 8001656:	f7ff ff5b 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x0E);
 800165a:	200e      	movs	r0, #14
 800165c:	f7ff ff44 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVOFF);
 8001660:	2020      	movs	r0, #32
 8001662:	f7ff ff55 	bl	8001510 <ST7735_SendCmd>
	
	ST7735_SendCmd(ST7735_MADCTL);	//
 8001666:	2036      	movs	r0, #54	; 0x36
 8001668:	f7ff ff52 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0xC8);			// RGB =1 => BGR color filter panel)
 800166c:	20c8      	movs	r0, #200	; 0xc8
 800166e:	f7ff ff3b 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_COLMOD);
 8001672:	203a      	movs	r0, #58	; 0x3a
 8001674:	f7ff ff4c 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x05);
 8001678:	2005      	movs	r0, #5
 800167a:	f7ff ff35 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_CASET);
 800167e:	202a      	movs	r0, #42	; 0x2a
 8001680:	f7ff ff46 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ff2f 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ff2c 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff ff29 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x7F);
 8001696:	207f      	movs	r0, #127	; 0x7f
 8001698:	f7ff ff26 	bl	80014e8 <ST7735_SendData>

	ST7735_SendCmd(ST7735_RASET);
 800169c:	202b      	movs	r0, #43	; 0x2b
 800169e:	f7ff ff37 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ff20 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff ff1d 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff ff1a 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x9F);
 80016b4:	209f      	movs	r0, #159	; 0x9f
 80016b6:	f7ff ff17 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRP1);
 80016ba:	20e0      	movs	r0, #224	; 0xe0
 80016bc:	f7ff ff28 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x02);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff ff11 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x1c);
 80016c6:	201c      	movs	r0, #28
 80016c8:	f7ff ff0e 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x07);
 80016cc:	2007      	movs	r0, #7
 80016ce:	f7ff ff0b 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x12);
 80016d2:	2012      	movs	r0, #18
 80016d4:	f7ff ff08 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x37);
 80016d8:	2037      	movs	r0, #55	; 0x37
 80016da:	f7ff ff05 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x32);
 80016de:	2032      	movs	r0, #50	; 0x32
 80016e0:	f7ff ff02 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x29);
 80016e4:	2029      	movs	r0, #41	; 0x29
 80016e6:	f7ff feff 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2d);
 80016ea:	202d      	movs	r0, #45	; 0x2d
 80016ec:	f7ff fefc 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x29);
 80016f0:	2029      	movs	r0, #41	; 0x29
 80016f2:	f7ff fef9 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x25);
 80016f6:	2025      	movs	r0, #37	; 0x25
 80016f8:	f7ff fef6 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2B);
 80016fc:	202b      	movs	r0, #43	; 0x2b
 80016fe:	f7ff fef3 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x39);	
 8001702:	2039      	movs	r0, #57	; 0x39
 8001704:	f7ff fef0 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff feed 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x01);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff feea 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x03);
 8001714:	2003      	movs	r0, #3
 8001716:	f7ff fee7 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x10);
 800171a:	2010      	movs	r0, #16
 800171c:	f7ff fee4 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRN1);
 8001720:	20e1      	movs	r0, #225	; 0xe1
 8001722:	f7ff fef5 	bl	8001510 <ST7735_SendCmd>
	ST7735_SendData(0x03);
 8001726:	2003      	movs	r0, #3
 8001728:	f7ff fede 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x1d);
 800172c:	201d      	movs	r0, #29
 800172e:	f7ff fedb 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x07);
 8001732:	2007      	movs	r0, #7
 8001734:	f7ff fed8 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x06);
 8001738:	2006      	movs	r0, #6
 800173a:	f7ff fed5 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2E);
 800173e:	202e      	movs	r0, #46	; 0x2e
 8001740:	f7ff fed2 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001744:	202c      	movs	r0, #44	; 0x2c
 8001746:	f7ff fecf 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x29);
 800174a:	2029      	movs	r0, #41	; 0x29
 800174c:	f7ff fecc 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8001750:	202d      	movs	r0, #45	; 0x2d
 8001752:	f7ff fec9 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8001756:	202e      	movs	r0, #46	; 0x2e
 8001758:	f7ff fec6 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x2E);
 800175c:	202e      	movs	r0, #46	; 0x2e
 800175e:	f7ff fec3 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x37);
 8001762:	2037      	movs	r0, #55	; 0x37
 8001764:	f7ff fec0 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x3F);	
 8001768:	203f      	movs	r0, #63	; 0x3f
 800176a:	f7ff febd 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff feba 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff feb7 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x02);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff feb4 	bl	80014e8 <ST7735_SendData>
	ST7735_SendData(0x10);
 8001780:	2010      	movs	r0, #16
 8001782:	f7ff feb1 	bl	80014e8 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_NORON);//  Normal Display Mode On
 8001786:	2013      	movs	r0, #19
 8001788:	f7ff fec2 	bl	8001510 <ST7735_SendCmd>
	HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 fc17 	bl	8001fc0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_DISPON); // Display On
 8001792:	2029      	movs	r0, #41	; 0x29
 8001794:	f7ff febc 	bl	8001510 <ST7735_SendCmd>
	HAL_Delay(100);
 8001798:	2064      	movs	r0, #100	; 0x64
 800179a:	f000 fc11 	bl	8001fc0 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_MADCTL);  // Memory Data Access Control
 800179e:	2036      	movs	r0, #54	; 0x36
 80017a0:	f7ff feb6 	bl	8001510 <ST7735_SendCmd>
#ifdef VERTICAL
	ST7735_SendData(0x00);		    // Parameter D7 D6 D5 D4 D3  D2 D1 D0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fe9f 	bl	80014e8 <ST7735_SendData>
									//			 MY MX MV ML RGB MH x  x
#endif									//           0  1  1  0   0  0  0  0   -> 0x60 - rotate display 90
	ST7735_SendData(0x60);
 80017aa:	2060      	movs	r0, #96	; 0x60
 80017ac:	f7ff fe9c 	bl	80014e8 <ST7735_SendData>

	CS_HIGH_ST7735 ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	2110      	movs	r1, #16
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <HAL_ST7735_Init+0x288>)
 80017b6:	f000 fd2d 	bl	8002214 <HAL_GPIO_WritePin>

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <ST7735_AddrSet>:




void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4604      	mov	r4, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	4603      	mov	r3, r0
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]
 80017de:	4613      	mov	r3, r2
 80017e0:	803b      	strh	r3, [r7, #0]
  ST7735_SendCmd(ST7735_CASET); // Column address set
 80017e2:	202a      	movs	r0, #42	; 0x2a
 80017e4:	f7ff fe94 	bl	8001510 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	2108      	movs	r1, #8
 80017ec:	4818      	ldr	r0, [pc, #96]	; (8001850 <ST7735_AddrSet+0x8c>)
 80017ee:	f000 fd11 	bl	8002214 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fe5c 	bl	80014b0 <ST7735_write>
	ST7735_write(XS);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fe57 	bl	80014b0 <ST7735_write>
	ST7735_write(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fe54 	bl	80014b0 <ST7735_write>
	ST7735_write(XE);
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe4f 	bl	80014b0 <ST7735_write>

  ST7735_SendCmd(ST7735_RASET); // Row address set
 8001812:	202b      	movs	r0, #43	; 0x2b
 8001814:	f7ff fe7c 	bl	8001510 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8001818:	2201      	movs	r2, #1
 800181a:	2108      	movs	r1, #8
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <ST7735_AddrSet+0x8c>)
 800181e:	f000 fcf9 	bl	8002214 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fe44 	bl	80014b0 <ST7735_write>
	ST7735_write(YS);
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe3f 	bl	80014b0 <ST7735_write>
	ST7735_write(0x00);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fe3c 	bl	80014b0 <ST7735_write>
	ST7735_write(YE);
 8001838:	883b      	ldrh	r3, [r7, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe37 	bl	80014b0 <ST7735_write>

  ST7735_SendCmd(ST7735_RAMWR); // Memory write
 8001842:	202c      	movs	r0, #44	; 0x2c
 8001844:	f7ff fe64 	bl	8001510 <ST7735_SendCmd>
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	40010800 	.word	0x40010800

08001854 <ST7735_Clear>:

void ST7735_Clear(uint16_t Color)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	//	ST7735_Send(Color);


	uint16_t i;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	b29b      	uxth	r3, r3
 8001868:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(0,0,WIDTH+1,HEIGHT+1);
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff ffa7 	bl	80017c4 <ST7735_AddrSet>
	A0_HIGH_ST7735 ;
 8001876:	2201      	movs	r2, #1
 8001878:	2108      	movs	r1, #8
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <ST7735_Clear+0x58>)
 800187c:	f000 fcca 	bl	8002214 <HAL_GPIO_WritePin>
	for(i=0;i<20480;i++)
 8001880:	2300      	movs	r3, #0
 8001882:	81fb      	strh	r3, [r7, #14]
 8001884:	e00a      	b.n	800189c <ST7735_Clear+0x48>
	{
		ST7735_write(CH);
 8001886:	7b3b      	ldrb	r3, [r7, #12]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe11 	bl	80014b0 <ST7735_write>
		ST7735_write(CL);
 800188e:	7b7b      	ldrb	r3, [r7, #13]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe0d 	bl	80014b0 <ST7735_write>
	for(i=0;i<20480;i++)
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	3301      	adds	r3, #1
 800189a:	81fb      	strh	r3, [r7, #14]
 800189c:	89fb      	ldrh	r3, [r7, #14]
 800189e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80018a2:	d3f0      	bcc.n	8001886 <ST7735_Clear+0x32>
	}
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40010800 	.word	0x40010800

080018b0 <ST7735_DrawHLine>:
	ST7735_Send(CH);
	ST7735_Send(CL);
}

void ST7735_DrawHLine(uint8_t x,uint8_t x1,uint8_t y,uint16_t Color)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	4603      	mov	r3, r0
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	717b      	strb	r3, [r7, #5]
 80018ca:	4613      	mov	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x1,y);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	b298      	uxth	r0, r3
 80018de:	797b      	ldrb	r3, [r7, #5]
 80018e0:	b299      	uxth	r1, r3
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	797b      	ldrb	r3, [r7, #5]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f7ff ff6b 	bl	80017c4 <ST7735_AddrSet>
	len = x1-x;
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 80018fa:	2201      	movs	r2, #1
 80018fc:	2108      	movs	r1, #8
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <ST7735_DrawHLine+0x80>)
 8001900:	f000 fc88 	bl	8002214 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8001904:	2300      	movs	r3, #0
 8001906:	81fb      	strh	r3, [r7, #14]
 8001908:	e00a      	b.n	8001920 <ST7735_DrawHLine+0x70>
	{
		ST7735_Send(CH);
 800190a:	7b3b      	ldrb	r3, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fdcf 	bl	80014b0 <ST7735_write>
		ST7735_Send(CL);
 8001912:	7b7b      	ldrb	r3, [r7, #13]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fdcb 	bl	80014b0 <ST7735_write>
	for(i=0;i<len;i++)
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	3301      	adds	r3, #1
 800191e:	81fb      	strh	r3, [r7, #14]
 8001920:	89fa      	ldrh	r2, [r7, #14]
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	429a      	cmp	r2, r3
 8001926:	d3f0      	bcc.n	800190a <ST7735_DrawHLine+0x5a>
	}
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	40010800 	.word	0x40010800

08001934 <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x,uint8_t y,uint8_t y1,uint16_t Color)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x,y1);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	b298      	uxth	r0, r3
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	b299      	uxth	r1, r3
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	b29a      	uxth	r2, r3
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	b29b      	uxth	r3, r3
 800196e:	f7ff ff29 	bl	80017c4 <ST7735_AddrSet>
	len = y1-y;
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	b29a      	uxth	r2, r3
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	b29b      	uxth	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 800197e:	2201      	movs	r2, #1
 8001980:	2108      	movs	r1, #8
 8001982:	480c      	ldr	r0, [pc, #48]	; (80019b4 <ST7735_DrawVLine+0x80>)
 8001984:	f000 fc46 	bl	8002214 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8001988:	2300      	movs	r3, #0
 800198a:	81fb      	strh	r3, [r7, #14]
 800198c:	e00a      	b.n	80019a4 <ST7735_DrawVLine+0x70>
	{
		ST7735_Send(CH);
 800198e:	7b3b      	ldrb	r3, [r7, #12]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fd8d 	bl	80014b0 <ST7735_write>
		ST7735_Send(CL);
 8001996:	7b7b      	ldrb	r3, [r7, #13]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd89 	bl	80014b0 <ST7735_write>
	for(i=0;i<len;i++)
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	3301      	adds	r3, #1
 80019a2:	81fb      	strh	r3, [r7, #14]
 80019a4:	89fa      	ldrh	r2, [r7, #14]
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3f0      	bcc.n	800198e <ST7735_DrawVLine+0x5a>
	}
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	40010800 	.word	0x40010800

080019b8 <ST7735_DrawChar>:
		ST7735_Send(array[i]);
	}
}

void ST7735_DrawChar(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	4603      	mov	r3, r0
 80019cc:	71bb      	strb	r3, [r7, #6]
 80019ce:	460b      	mov	r3, r1
 80019d0:	717b      	strb	r3, [r7, #5]
 80019d2:	4613      	mov	r3, r2
 80019d4:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[5];
	
	CL = color & 0xFF;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	757b      	strb	r3, [r7, #21]
	CH = (color>>8) & 0xFF;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	753b      	strb	r3, [r7, #20]
	
	BCL = background_color & 0xFF;
 80019e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019e4:	74fb      	strb	r3, [r7, #19]
	BCH = (background_color>>8) & 0xFF;
 80019e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	74bb      	strb	r3, [r7, #18]
	
	memcpy(buffer,&Font5x7[(chr-32)*5],5);
 80019ee:	797b      	ldrb	r3, [r7, #5]
 80019f0:	f1a3 0220 	sub.w	r2, r3, #32
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	4a34      	ldr	r2, [pc, #208]	; (8001acc <ST7735_DrawChar+0x114>)
 80019fc:	441a      	add	r2, r3
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	6810      	ldr	r0, [r2, #0]
 8001a04:	6018      	str	r0, [r3, #0]
 8001a06:	7912      	ldrb	r2, [r2, #4]
 8001a08:	711a      	strb	r2, [r3, #4]
	ST7735_AddrSet(x,y,x+5,y+7);	// определяем область памяти в которую будем записывать
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b299      	uxth	r1, r3
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3305      	adds	r3, #5
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3307      	adds	r3, #7
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f7ff fecf 	bl	80017c4 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 8001a26:	2201      	movs	r2, #1
 8001a28:	2108      	movs	r1, #8
 8001a2a:	4829      	ldr	r0, [pc, #164]	; (8001ad0 <ST7735_DrawChar+0x118>)
 8001a2c:	f000 fbf2 	bl	8002214 <HAL_GPIO_WritePin>
	for(i=0;i<7;i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]
 8001a34:	e032      	b.n	8001a9c <ST7735_DrawChar+0xe4>
	{
		for(j=0;j<5;j++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	75bb      	strb	r3, [r7, #22]
 8001a3a:	e021      	b.n	8001a80 <ST7735_DrawChar+0xc8>
		{
			if((buffer[j] & (1<<i))==0) // если в этом пикселе нет символа то закрашиваем цветом background_color
 8001a3c:	7dbb      	ldrb	r3, [r7, #22]
 8001a3e:	f107 0218 	add.w	r2, r7, #24
 8001a42:	4413      	add	r3, r2
 8001a44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	fa42 f303 	asr.w	r3, r2, r3
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d108      	bne.n	8001a6a <ST7735_DrawChar+0xb2>
			{
				ST7735_Send(BCH);
 8001a58:	7cbb      	ldrb	r3, [r7, #18]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd28 	bl	80014b0 <ST7735_write>
				ST7735_Send(BCL);
 8001a60:	7cfb      	ldrb	r3, [r7, #19]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fd24 	bl	80014b0 <ST7735_write>
 8001a68:	e007      	b.n	8001a7a <ST7735_DrawChar+0xc2>
			}
			else						// иначе цветом символа  color
			{
				ST7735_Send(CH);
 8001a6a:	7d3b      	ldrb	r3, [r7, #20]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd1f 	bl	80014b0 <ST7735_write>
				ST7735_Send(CL);
 8001a72:	7d7b      	ldrb	r3, [r7, #21]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd1b 	bl	80014b0 <ST7735_write>
		for(j=0;j<5;j++)
 8001a7a:	7dbb      	ldrb	r3, [r7, #22]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	75bb      	strb	r3, [r7, #22]
 8001a80:	7dbb      	ldrb	r3, [r7, #22]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d9da      	bls.n	8001a3c <ST7735_DrawChar+0x84>
			}
		}
		ST7735_Send(BCH);
 8001a86:	7cbb      	ldrb	r3, [r7, #18]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fd11 	bl	80014b0 <ST7735_write>
		ST7735_Send(BCL);
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd0d 	bl	80014b0 <ST7735_write>
	for(i=0;i<7;i++)
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d9c9      	bls.n	8001a36 <ST7735_DrawChar+0x7e>
	}
	for(i=0;i<5;i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	e00a      	b.n	8001abe <ST7735_DrawChar+0x106>
	{
		ST7735_Send(BCH);
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fd00 	bl	80014b0 <ST7735_write>
		ST7735_Send(BCL);
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fcfc 	bl	80014b0 <ST7735_write>
	for(i=0;i<5;i++)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	3301      	adds	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d9f1      	bls.n	8001aa8 <ST7735_DrawChar+0xf0>
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	08006368 	.word	0x08006368
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <ST7735_DrawChar7x11>:


void ST7735_DrawChar7x11(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4604      	mov	r4, r0
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71bb      	strb	r3, [r7, #6]
 8001aea:	460b      	mov	r3, r1
 8001aec:	717b      	strb	r3, [r7, #5]
 8001aee:	4613      	mov	r3, r2
 8001af0:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[11];	// содержит код символа uint8_t chr
	
	CL = color & 0xFF;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	777b      	strb	r3, [r7, #29]
	CH = (color>>8) & 0xFF;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	773b      	strb	r3, [r7, #28]
	
	BCL = background_color & 0xFF;
 8001afe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b00:	76fb      	strb	r3, [r7, #27]
	BCH = (background_color>>8) & 0xFF;
 8001b02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	76bb      	strb	r3, [r7, #26]
	
	memcpy(buffer,&Font7x11[(chr-32)*11],11);	// 32 - символ пробела - с него начинаются символы алфавита ASCII;
 8001b0a:	797b      	ldrb	r3, [r7, #5]
 8001b0c:	f1a3 0220 	sub.w	r2, r3, #32
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <ST7735_DrawChar7x11+0x120>)
 8001b1c:	441a      	add	r2, r3
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	6810      	ldr	r0, [r2, #0]
 8001b24:	6851      	ldr	r1, [r2, #4]
 8001b26:	c303      	stmia	r3!, {r0, r1}
 8001b28:	8911      	ldrh	r1, [r2, #8]
 8001b2a:	7a92      	ldrb	r2, [r2, #10]
 8001b2c:	8019      	strh	r1, [r3, #0]
 8001b2e:	709a      	strb	r2, [r3, #2]
												//таблица шрифтов начинается с символа пробела
												// копируем от начала символа, в таблице шрифтов, 11 элементов,
												//из 11 элементов состоит один символ шрифта
	ST7735_AddrSet(x,y,x+7,y+11);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	b298      	uxth	r0, r3
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	b299      	uxth	r1, r3
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3307      	adds	r3, #7
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	330b      	adds	r3, #11
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f7ff fe3c 	bl	80017c4 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2108      	movs	r1, #8
 8001b50:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <ST7735_DrawChar7x11+0x124>)
 8001b52:	f000 fb5f 	bl	8002214 <HAL_GPIO_WritePin>
	for(j=0;j<11;j++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	77bb      	strb	r3, [r7, #30]
 8001b5a:	e032      	b.n	8001bc2 <ST7735_DrawChar7x11+0xee>
	{
		for(i=0;i<7;i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
 8001b60:	e021      	b.n	8001ba6 <ST7735_DrawChar7x11+0xd2>
		{
			if((buffer[j] & (1<<i))==0)
 8001b62:	7fbb      	ldrb	r3, [r7, #30]
 8001b64:	f107 0220 	add.w	r2, r7, #32
 8001b68:	4413      	add	r3, r2
 8001b6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
 8001b72:	fa42 f303 	asr.w	r3, r2, r3
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <ST7735_DrawChar7x11+0xbc>
			{
				ST7735_write(BCH);
 8001b7e:	7ebb      	ldrb	r3, [r7, #26]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fc95 	bl	80014b0 <ST7735_write>
				ST7735_write(BCL);
 8001b86:	7efb      	ldrb	r3, [r7, #27]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fc91 	bl	80014b0 <ST7735_write>
 8001b8e:	e007      	b.n	8001ba0 <ST7735_DrawChar7x11+0xcc>
			}
			else
			{
				ST7735_write(CH);
 8001b90:	7f3b      	ldrb	r3, [r7, #28]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc8c 	bl	80014b0 <ST7735_write>
				ST7735_write(CL);
 8001b98:	7f7b      	ldrb	r3, [r7, #29]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fc88 	bl	80014b0 <ST7735_write>
		for(i=0;i<7;i++)
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d9da      	bls.n	8001b62 <ST7735_DrawChar7x11+0x8e>
			}			
		}
		ST7735_write(BCH);
 8001bac:	7ebb      	ldrb	r3, [r7, #26]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fc7e 	bl	80014b0 <ST7735_write>
		ST7735_write(BCL);
 8001bb4:	7efb      	ldrb	r3, [r7, #27]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc7a 	bl	80014b0 <ST7735_write>
	for(j=0;j<11;j++)
 8001bbc:	7fbb      	ldrb	r3, [r7, #30]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	77bb      	strb	r3, [r7, #30]
 8001bc2:	7fbb      	ldrb	r3, [r7, #30]
 8001bc4:	2b0a      	cmp	r3, #10
 8001bc6:	d9c9      	bls.n	8001b5c <ST7735_DrawChar7x11+0x88>
	}
	for(i=0;i<8;i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
 8001bcc:	e00a      	b.n	8001be4 <ST7735_DrawChar7x11+0x110>
	{
		ST7735_write(BCH);
 8001bce:	7ebb      	ldrb	r3, [r7, #26]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fc6d 	bl	80014b0 <ST7735_write>
		ST7735_write(BCL);
 8001bd6:	7efb      	ldrb	r3, [r7, #27]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc69 	bl	80014b0 <ST7735_write>
	for(i=0;i<8;i++)
 8001bde:	7ffb      	ldrb	r3, [r7, #31]
 8001be0:	3301      	adds	r3, #1
 8001be2:	77fb      	strb	r3, [r7, #31]
 8001be4:	7ffb      	ldrb	r3, [r7, #31]
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d9f1      	bls.n	8001bce <ST7735_DrawChar7x11+0xfa>
	}
}
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08006548 	.word	0x08006548
 8001bf8:	40010800 	.word	0x40010800

08001bfc <ST7735_DrawString7x11>:

void ST7735_DrawString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	603a      	str	r2, [r7, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8001c16:	e013      	b.n	8001c40 <ST7735_DrawString7x11+0x44>
	{
		ST7735_DrawChar7x11(x+(8*i),y,chr[i],color,background_color);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4413      	add	r3, r2
 8001c22:	b2d8      	uxtb	r0, r3
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	88bc      	ldrh	r4, [r7, #4]
 8001c2e:	79b9      	ldrb	r1, [r7, #6]
 8001c30:	8c3b      	ldrh	r3, [r7, #32]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4623      	mov	r3, r4
 8001c36:	f7ff ff4d 	bl	8001ad4 <ST7735_DrawChar7x11>
		i++;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e5      	bne.n	8001c18 <ST7735_DrawString7x11+0x1c>
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <ST7735_DrawNString7x11>:

void ST7735_DrawNString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color, uint8_t n)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	603a      	str	r2, [r7, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
 8001c62:	460b      	mov	r3, r1
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t CHR=0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73bb      	strb	r3, [r7, #14]
	while(n-- != 0)
 8001c72:	e01a      	b.n	8001caa <ST7735_DrawNString7x11+0x56>
	{
		//ST7735_DrawChar7x11(x+(8*i),y, *chr++,color,background_color);
		CHR = chr[i];
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	73bb      	strb	r3, [r7, #14]
		if(CHR == '\0') CHR=0x20;
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <ST7735_DrawNString7x11+0x34>
 8001c84:	2320      	movs	r3, #32
 8001c86:	73bb      	strb	r3, [r7, #14]
		ST7735_DrawChar7x11(x+(8*i),y,CHR,color,background_color);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4413      	add	r3, r2
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	88bc      	ldrh	r4, [r7, #4]
 8001c96:	7bba      	ldrb	r2, [r7, #14]
 8001c98:	79b9      	ldrb	r1, [r7, #6]
 8001c9a:	8c3b      	ldrh	r3, [r7, #32]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	f7ff ff18 	bl	8001ad4 <ST7735_DrawChar7x11>
		i++;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
	while(n-- != 0)
 8001caa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cae:	1e5a      	subs	r2, r3, #1
 8001cb0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1dd      	bne.n	8001c74 <ST7735_DrawNString7x11+0x20>
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}

08001cc0 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle (uint8_t x,uint8_t y,uint8_t w,uint8_t h,uint16_t Color)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71bb      	strb	r3, [r7, #6]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	717b      	strb	r3, [r7, #5]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	713b      	strb	r3, [r7, #4]
	ST7735_DrawHLine(x,x+w,y,Color);
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2d9      	uxtb	r1, r3
 8001ce6:	8b3b      	ldrh	r3, [r7, #24]
 8001ce8:	79ba      	ldrb	r2, [r7, #6]
 8001cea:	79f8      	ldrb	r0, [r7, #7]
 8001cec:	f7ff fde0 	bl	80018b0 <ST7735_DrawHLine>
	ST7735_DrawVLine(x+w,y,y+h+1,Color);
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	797b      	ldrb	r3, [r7, #5]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b2d8      	uxtb	r0, r3
 8001cf8:	79ba      	ldrb	r2, [r7, #6]
 8001cfa:	793b      	ldrb	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8b3b      	ldrh	r3, [r7, #24]
 8001d06:	79b9      	ldrb	r1, [r7, #6]
 8001d08:	f7ff fe14 	bl	8001934 <ST7735_DrawVLine>
	ST7735_DrawHLine(x,x+w,y+h,Color);
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	797b      	ldrb	r3, [r7, #5]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	79ba      	ldrb	r2, [r7, #6]
 8001d16:	793b      	ldrb	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	8b3b      	ldrh	r3, [r7, #24]
 8001d1e:	79f8      	ldrb	r0, [r7, #7]
 8001d20:	f7ff fdc6 	bl	80018b0 <ST7735_DrawHLine>
	ST7735_DrawVLine(x,y,y+h,Color);
 8001d24:	79ba      	ldrb	r2, [r7, #6]
 8001d26:	793b      	ldrb	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	8b3b      	ldrh	r3, [r7, #24]
 8001d2e:	79b9      	ldrb	r1, [r7, #6]
 8001d30:	79f8      	ldrb	r0, [r7, #7]
 8001d32:	f7ff fdff 	bl	8001934 <ST7735_DrawVLine>
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd90      	pop	{r4, r7, pc}
	...

08001d40 <ST7735_ListBox_Draw>:
		ST7735_Send(BCL);
	}
}
//ListBox
void ST7735_ListBox_Draw(ST7735_ListBox* lb)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	6078      	str	r0, [r7, #4]
	uint8_t BCH,BCL,SCH,SCL;
	uint16_t tmp,i, item, BGCol;
	
	ST7735_DrawRectangle(lb->x,lb->y,lb->w,lb->h,lb->BorderColor);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7818      	ldrb	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7859      	ldrb	r1, [r3, #1]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	78da      	ldrb	r2, [r3, #3]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	789c      	ldrb	r4, [r3, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	4623      	mov	r3, r4
 8001d60:	f7ff ffae 	bl	8001cc0 <ST7735_DrawRectangle>
	ST7735_DrawRectangle(lb->x+2,lb->y+2,lb->w-4,lb->h-4,lb->BorderColor);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3302      	adds	r3, #2
 8001d6a:	b2d8      	uxtb	r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	3302      	adds	r3, #2
 8001d72:	b2d9      	uxtb	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	78db      	ldrb	r3, [r3, #3]
 8001d78:	3b04      	subs	r3, #4
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	3b04      	subs	r3, #4
 8001d82:	b2dc      	uxtb	r4, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	889b      	ldrh	r3, [r3, #4]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	f7ff ff98 	bl	8001cc0 <ST7735_DrawRectangle>

	ST7735_AddrSet(lb->x+1,lb->y+1,lb->x+lb->w-1,lb->y+lb->h-1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b298      	uxth	r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b299      	uxth	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	78db      	ldrb	r3, [r3, #3]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29c      	uxth	r4, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4622      	mov	r2, r4
 8001dce:	f7ff fcf9 	bl	80017c4 <ST7735_AddrSet>
	tmp = lb->w * lb->h;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	7892      	ldrb	r2, [r2, #2]
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	827b      	strh	r3, [r7, #18]
	
	BCL = lb->BackgroundColor & 0xFF;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	88db      	ldrh	r3, [r3, #6]
 8001de8:	747b      	strb	r3, [r7, #17]
	BCH = (lb->BackgroundColor>>8) & 0xFF;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	88db      	ldrh	r3, [r3, #6]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	743b      	strb	r3, [r7, #16]
	SCL = lb->SelectedItemColor & 0xFF;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	895b      	ldrh	r3, [r3, #10]
 8001df8:	73fb      	strb	r3, [r7, #15]
	SCH = (lb->SelectedItemColor>>8) & 0xFF;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	895b      	ldrh	r3, [r3, #10]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	73bb      	strb	r3, [r7, #14]
	A0_HIGH_ST7735;
 8001e04:	2201      	movs	r2, #1
 8001e06:	2108      	movs	r1, #8
 8001e08:	4825      	ldr	r0, [pc, #148]	; (8001ea0 <ST7735_ListBox_Draw+0x160>)
 8001e0a:	f000 fa03 	bl	8002214 <HAL_GPIO_WritePin>
		ST7735_Send(BCH);
		ST7735_Send(BCL);
	}*/
	
	//item = 0;
	for(i=0;i<lb->items_count;i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	82fb      	strh	r3, [r7, #22]
 8001e12:	e03b      	b.n	8001e8c <ST7735_ListBox_Draw+0x14c>
	{
		if(lb->items[i].visible == 1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	8afb      	ldrh	r3, [r7, #22]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	791b      	ldrb	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d130      	bne.n	8001e86 <ST7735_ListBox_Draw+0x146>
		{
			BGCol = lb->BackgroundColor;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	88db      	ldrh	r3, [r3, #6]
 8001e28:	82bb      	strh	r3, [r7, #20]
			uint16_t ty = lb->y + (LINE_HEIGTH*i)+5;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	8afb      	ldrh	r3, [r7, #22]
 8001e32:	4619      	mov	r1, r3
 8001e34:	0049      	lsls	r1, r1, #1
 8001e36:	4419      	add	r1, r3
 8001e38:	0089      	lsls	r1, r1, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3305      	adds	r3, #5
 8001e44:	81bb      	strh	r3, [r7, #12]
			if(lb->items[i].selected)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	8afb      	ldrh	r3, [r7, #22]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	795b      	ldrb	r3, [r3, #5]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <ST7735_ListBox_Draw+0x11c>
				for(j = 0;j<colored;j++)
				{
					ST7735_Send(SCH);
					ST7735_Send(SCL);
				}*/
				BGCol = lb->SelectedItemColor;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	895b      	ldrh	r3, [r3, #10]
 8001e5a:	82bb      	strh	r3, [r7, #20]
			}
			ST7735_DrawNString7x11(lb->x+9,ty,(uint8_t *)lb->items[i].text,lb->ItemTextColor,BGCol, FILENAME_SIZE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3309      	adds	r3, #9
 8001e62:	b2d8      	uxtb	r0, r3
 8001e64:	89bb      	ldrh	r3, [r7, #12]
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	8afb      	ldrh	r3, [r7, #22]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	891c      	ldrh	r4, [r3, #8]
 8001e78:	230d      	movs	r3, #13
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	8abb      	ldrh	r3, [r7, #20]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4623      	mov	r3, r4
 8001e82:	f7ff fee7 	bl	8001c54 <ST7735_DrawNString7x11>
	for(i=0;i<lb->items_count;i++)
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	82fb      	strh	r3, [r7, #22]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7c1b      	ldrb	r3, [r3, #16]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8afa      	ldrh	r2, [r7, #22]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3bd      	bcc.n	8001e14 <ST7735_ListBox_Draw+0xd4>
		}
	}
}
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	40010800 	.word	0x40010800

08001ea4 <ST7735_ListBox_StructInit>:
{
	return lb->items[lb->SelectedItemIndex];
}

void ST7735_ListBox_StructInit(ST7735_ListBox* lb,uint8_t x,uint8_t y,ST7735_ListBox_Item* items,uint8_t item_count)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	72fb      	strb	r3, [r7, #11]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	72bb      	strb	r3, [r7, #10]
	FileList.BorderColor=COLOR565_DARK_SLATE_BLUE;
	FileList.SelectedItemColor=COLOR565_BLANCHED_ALMOND;
	FileList.ItemTextColor=COLOR565_TEAL;*/
	//lb->BackgroundColor = COLOR565_CRIMSON;
	//lb->BorderColor = COLOR565_ALICE_BLUE;
	lb->items = items;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
	lb->items_count = item_count;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	7e3a      	ldrb	r2, [r7, #24]
 8001ec0:	741a      	strb	r2, [r3, #16]
	//lb->ItemTextColor = COLOR565_ALICE_BLUE;
	//lb->SelectedItemColor = COLOR565_DARK_BLUE;
	lb->SelectedItemIndex = 0;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	745a      	strb	r2, [r3, #17]
	//lb->w = 75;
	lb->w = WIDTH;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	227f      	movs	r2, #127	; 0x7f
 8001ecc:	70da      	strb	r2, [r3, #3]
	//lb->w = FILENAME_SIZE*8;
	lb->h = item_count *LINE_HEIGTH+7;
 8001ece:	7e3b      	ldrb	r3, [r7, #24]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	0052      	lsls	r2, r2, #1
 8001ed4:	441a      	add	r2, r3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3307      	adds	r3, #7
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	709a      	strb	r2, [r3, #2]
	lb->x = x;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	7afa      	ldrb	r2, [r7, #11]
 8001ee8:	701a      	strb	r2, [r3, #0]
	lb->y = y;///////////////смещение вниз от верхнего края на 15 пикселей
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	7aba      	ldrb	r2, [r7, #10]
 8001eee:	705a      	strb	r2, [r3, #1]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f929 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7fe ff4c 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f958 	bl	80021fc <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 f91e 	bl	80021a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	20000014 	.word	0x20000014
 8001f84:	20000010 	.word	0x20000010

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	2000013c 	.word	0x2000013c

08001fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	2000013c 	.word	0x2000013c

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_Delay+0x40>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffe0 	bl	8001fac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000014 	.word	0x20000014

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff90 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b07      	cmp	r3, #7
 8002170:	d00f      	beq.n	8002192 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d00c      	beq.n	8002192 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d009      	beq.n	8002192 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d006      	beq.n	8002192 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d003      	beq.n	8002192 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800218a:	2192      	movs	r1, #146	; 0x92
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800218e:	f7fe fc1d 	bl	80009cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff36 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	080061e8 	.word	0x080061e8

080021a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d903      	bls.n	80021c4 <HAL_NVIC_SetPriority+0x20>
 80021bc:	21aa      	movs	r1, #170	; 0xaa
 80021be:	480e      	ldr	r0, [pc, #56]	; (80021f8 <HAL_NVIC_SetPriority+0x54>)
 80021c0:	f7fe fc04 	bl	80009cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d903      	bls.n	80021d2 <HAL_NVIC_SetPriority+0x2e>
 80021ca:	21ab      	movs	r1, #171	; 0xab
 80021cc:	480a      	ldr	r0, [pc, #40]	; (80021f8 <HAL_NVIC_SetPriority+0x54>)
 80021ce:	f7fe fbfd 	bl	80009cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d2:	f7ff ff3b 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff ff6d 	bl	80020bc <NVIC_EncodePriority>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff3c 	bl	8002068 <__NVIC_SetPriority>
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	080061e8 	.word	0x080061e8

080021fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff8b 	bl	8002120 <SysTick_Config>
 800220a:	4603      	mov	r3, r0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_GPIO_WritePin+0x20>
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_GPIO_WritePin+0x2a>
 8002234:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002238:	480e      	ldr	r0, [pc, #56]	; (8002274 <HAL_GPIO_WritePin+0x60>)
 800223a:	f7fe fbc7 	bl	80009cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800223e:	787b      	ldrb	r3, [r7, #1]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_GPIO_WritePin+0x40>
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d004      	beq.n	8002254 <HAL_GPIO_WritePin+0x40>
 800224a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800224e:	4809      	ldr	r0, [pc, #36]	; (8002274 <HAL_GPIO_WritePin+0x60>)
 8002250:	f7fe fbbc 	bl	80009cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	08006224 	.word	0x08006224

08002278 <LL_GPIO_SetPinMode>:
{
 8002278:	b490      	push	{r4, r7}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0e1b      	lsrs	r3, r3, #24
 800228c:	4413      	add	r3, r2
 800228e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002290:	6822      	ldr	r2, [r4, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	613b      	str	r3, [r7, #16]
  return result;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	210f      	movs	r1, #15
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	61bb      	str	r3, [r7, #24]
  return result;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	6023      	str	r3, [r4, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc90      	pop	{r4, r7}
 80022da:	4770      	bx	lr

080022dc <LL_GPIO_SetPinSpeed>:
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0e1b      	lsrs	r3, r3, #24
 80022f0:	4413      	add	r3, r2
 80022f2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	613b      	str	r3, [r7, #16]
  return result;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	2103      	movs	r1, #3
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	401a      	ands	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	61bb      	str	r3, [r7, #24]
  return result;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	6023      	str	r3, [r4, #0]
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bc90      	pop	{r4, r7}
 800233e:	4770      	bx	lr

08002340 <LL_GPIO_SetPinOutputType>:
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0e1b      	lsrs	r3, r3, #24
 8002354:	4413      	add	r3, r2
 8002356:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	613b      	str	r3, [r7, #16]
  return result;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	2104      	movs	r1, #4
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	61bb      	str	r3, [r7, #24]
  return result;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	6023      	str	r3, [r4, #0]
}
 800239a:	bf00      	nop
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc90      	pop	{r4, r7}
 80023a2:	4770      	bx	lr

080023a4 <LL_GPIO_SetPinPull>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	43db      	mvns	r3, r3
 80023ba:	401a      	ands	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	613b      	str	r3, [r7, #16]
  return result;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	408b      	lsls	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	60da      	str	r2, [r3, #12]
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a62      	ldr	r2, [pc, #392]	; (8002580 <LL_GPIO_Init+0x198>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <LL_GPIO_Init+0x3a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a61      	ldr	r2, [pc, #388]	; (8002584 <LL_GPIO_Init+0x19c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00f      	beq.n	8002422 <LL_GPIO_Init+0x3a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a60      	ldr	r2, [pc, #384]	; (8002588 <LL_GPIO_Init+0x1a0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00b      	beq.n	8002422 <LL_GPIO_Init+0x3a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a5f      	ldr	r2, [pc, #380]	; (800258c <LL_GPIO_Init+0x1a4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <LL_GPIO_Init+0x3a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a5e      	ldr	r2, [pc, #376]	; (8002590 <LL_GPIO_Init+0x1a8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <LL_GPIO_Init+0x3a>
 800241a:	21a3      	movs	r1, #163	; 0xa3
 800241c:	485d      	ldr	r0, [pc, #372]	; (8002594 <LL_GPIO_Init+0x1ac>)
 800241e:	f7fe fad5 	bl	80009cc <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <LL_GPIO_Init+0x52>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <LL_GPIO_Init+0x5a>
 800243a:	21a4      	movs	r1, #164	; 0xa4
 800243c:	4855      	ldr	r0, [pc, #340]	; (8002594 <LL_GPIO_Init+0x1ac>)
 800243e:	f7fe fac5 	bl	80009cc <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	60fb      	str	r3, [r7, #12]
  return result;
 8002458:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002462:	e080      	b.n	8002566 <LL_GPIO_Init+0x17e>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	409a      	lsls	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d076      	beq.n	8002560 <LL_GPIO_Init+0x178>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b07      	cmp	r3, #7
 8002476:	d806      	bhi.n	8002486 <LL_GPIO_Init+0x9e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002478:	f240 1201 	movw	r2, #257	; 0x101
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e008      	b.n	8002498 <LL_GPIO_Init+0xb0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b08      	subs	r3, #8
 800248a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002496:	61bb      	str	r3, [r7, #24]
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <LL_GPIO_Init+0xe0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00f      	beq.n	80024c8 <LL_GPIO_Init+0xe0>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d00b      	beq.n	80024c8 <LL_GPIO_Init+0xe0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <LL_GPIO_Init+0xe0>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d003      	beq.n	80024c8 <LL_GPIO_Init+0xe0>
 80024c0:	21bd      	movs	r1, #189	; 0xbd
 80024c2:	4834      	ldr	r0, [pc, #208]	; (8002594 <LL_GPIO_Init+0x1ac>)
 80024c4:	f7fe fa82 	bl	80009cc <assert_failed>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <LL_GPIO_Init+0xf8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d003      	beq.n	80024e0 <LL_GPIO_Init+0xf8>
 80024d8:	21be      	movs	r1, #190	; 0xbe
 80024da:	482e      	ldr	r0, [pc, #184]	; (8002594 <LL_GPIO_Init+0x1ac>)
 80024dc:	f7fe fa76 	bl	80009cc <assert_failed>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	461a      	mov	r2, r3
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff5b 	bl	80023a4 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff febe 	bl	8002278 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d003      	beq.n	800250c <LL_GPIO_Init+0x124>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d129      	bne.n	8002560 <LL_GPIO_Init+0x178>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d00b      	beq.n	800252c <LL_GPIO_Init+0x144>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d007      	beq.n	800252c <LL_GPIO_Init+0x144>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d003      	beq.n	800252c <LL_GPIO_Init+0x144>
 8002524:	21c9      	movs	r1, #201	; 0xc9
 8002526:	481b      	ldr	r0, [pc, #108]	; (8002594 <LL_GPIO_Init+0x1ac>)
 8002528:	f7fe fa50 	bl	80009cc <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <LL_GPIO_Init+0x15c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d003      	beq.n	8002544 <LL_GPIO_Init+0x15c>
 800253c:	21ca      	movs	r1, #202	; 0xca
 800253e:	4815      	ldr	r0, [pc, #84]	; (8002594 <LL_GPIO_Init+0x1ac>)
 8002540:	f7fe fa44 	bl	80009cc <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	461a      	mov	r2, r3
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fec5 	bl	80022dc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	69b9      	ldr	r1, [r7, #24]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fef0 	bl	8002340 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f47f af78 	bne.w	8002464 <LL_GPIO_Init+0x7c>
  }
  return (SUCCESS);
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40011800 	.word	0x40011800
 8002594:	08006260 	.word	0x08006260

08002598 <LL_SPI_IsEnabled>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d101      	bne.n	80025b0 <LL_SPI_IsEnabled+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_SPI_IsEnabled+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <LL_SPI_SetCRCPolynomial>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
	...

080025dc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <LL_SPI_Init+0x1f0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <LL_SPI_Init+0x26>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <LL_SPI_Init+0x1f4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <LL_SPI_Init+0x26>
 80025fa:	21b7      	movs	r1, #183	; 0xb7
 80025fc:	4875      	ldr	r0, [pc, #468]	; (80027d4 <LL_SPI_Init+0x1f8>)
 80025fe:	f7fe f9e5 	bl	80009cc <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d012      	beq.n	8002630 <LL_SPI_Init+0x54>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002612:	d00d      	beq.n	8002630 <LL_SPI_Init+0x54>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261c:	d008      	beq.n	8002630 <LL_SPI_Init+0x54>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002626:	d003      	beq.n	8002630 <LL_SPI_Init+0x54>
 8002628:	21ba      	movs	r1, #186	; 0xba
 800262a:	486a      	ldr	r0, [pc, #424]	; (80027d4 <LL_SPI_Init+0x1f8>)
 800262c:	f7fe f9ce 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002638:	d007      	beq.n	800264a <LL_SPI_Init+0x6e>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <LL_SPI_Init+0x6e>
 8002642:	21bb      	movs	r1, #187	; 0xbb
 8002644:	4863      	ldr	r0, [pc, #396]	; (80027d4 <LL_SPI_Init+0x1f8>)
 8002646:	f7fe f9c1 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <LL_SPI_Init+0x88>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800265a:	d003      	beq.n	8002664 <LL_SPI_Init+0x88>
 800265c:	21bc      	movs	r1, #188	; 0xbc
 800265e:	485d      	ldr	r0, [pc, #372]	; (80027d4 <LL_SPI_Init+0x1f8>)
 8002660:	f7fe f9b4 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <LL_SPI_Init+0xa0>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d003      	beq.n	800267c <LL_SPI_Init+0xa0>
 8002674:	21bd      	movs	r1, #189	; 0xbd
 8002676:	4857      	ldr	r0, [pc, #348]	; (80027d4 <LL_SPI_Init+0x1f8>)
 8002678:	f7fe f9a8 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <LL_SPI_Init+0xb8>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d003      	beq.n	8002694 <LL_SPI_Init+0xb8>
 800268c:	21be      	movs	r1, #190	; 0xbe
 800268e:	4851      	ldr	r0, [pc, #324]	; (80027d4 <LL_SPI_Init+0x1f8>)
 8002690:	f7fe f99c 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269c:	d00c      	beq.n	80026b8 <LL_SPI_Init+0xdc>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <LL_SPI_Init+0xdc>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ae:	d003      	beq.n	80026b8 <LL_SPI_Init+0xdc>
 80026b0:	21bf      	movs	r1, #191	; 0xbf
 80026b2:	4848      	ldr	r0, [pc, #288]	; (80027d4 <LL_SPI_Init+0x1f8>)
 80026b4:	f7fe f98a 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01f      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d01b      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d017      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b18      	cmp	r3, #24
 80026d6:	d013      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d00f      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b28      	cmp	r3, #40	; 0x28
 80026e6:	d00b      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d007      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b38      	cmp	r3, #56	; 0x38
 80026f6:	d003      	beq.n	8002700 <LL_SPI_Init+0x124>
 80026f8:	21c0      	movs	r1, #192	; 0xc0
 80026fa:	4836      	ldr	r0, [pc, #216]	; (80027d4 <LL_SPI_Init+0x1f8>)
 80026fc:	f7fe f966 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d007      	beq.n	8002718 <LL_SPI_Init+0x13c>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <LL_SPI_Init+0x13c>
 8002710:	21c1      	movs	r1, #193	; 0xc1
 8002712:	4830      	ldr	r0, [pc, #192]	; (80027d4 <LL_SPI_Init+0x1f8>)
 8002714:	f7fe f95a 	bl	80009cc <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002720:	d007      	beq.n	8002732 <LL_SPI_Init+0x156>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <LL_SPI_Init+0x156>
 800272a:	21c2      	movs	r1, #194	; 0xc2
 800272c:	4829      	ldr	r0, [pc, #164]	; (80027d4 <LL_SPI_Init+0x1f8>)
 800272e:	f7fe f94d 	bl	80009cc <assert_failed>

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff30 	bl	8002598 <LL_SPI_IsEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d141      	bne.n	80027c2 <LL_SPI_Init+0x1e6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002746:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6811      	ldr	r1, [r2, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6852      	ldr	r2, [r2, #4]
 8002752:	4311      	orrs	r1, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	4311      	orrs	r1, r2
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	6912      	ldr	r2, [r2, #16]
 8002764:	4311      	orrs	r1, r2
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	6952      	ldr	r2, [r2, #20]
 800276a:	4311      	orrs	r1, r2
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6992      	ldr	r2, [r2, #24]
 8002770:	4311      	orrs	r1, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	69d2      	ldr	r2, [r2, #28]
 8002776:	4311      	orrs	r1, r2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6a12      	ldr	r2, [r2, #32]
 800277c:	430a      	orrs	r2, r1
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 0204 	bic.w	r2, r3, #4
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a0:	d10d      	bne.n	80027be <LL_SPI_Init+0x1e2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <LL_SPI_Init+0x1d6>
 80027aa:	21e5      	movs	r1, #229	; 0xe5
 80027ac:	4809      	ldr	r0, [pc, #36]	; (80027d4 <LL_SPI_Init+0x1f8>)
 80027ae:	f7fe f90d 	bl	80009cc <assert_failed>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff feff 	bl	80025bc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40013000 	.word	0x40013000
 80027d0:	40003800 	.word	0x40003800
 80027d4:	08006298 	.word	0x08006298

080027d8 <LL_TIM_SetPrescaler>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <LL_TIM_SetAutoReload>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <LL_TIM_SetRepetitionCounter>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <LL_TIM_Init+0x130>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d010      	beq.n	8002878 <LL_TIM_Init+0x34>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d00c      	beq.n	8002878 <LL_TIM_Init+0x34>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a45      	ldr	r2, [pc, #276]	; (8002978 <LL_TIM_Init+0x134>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d008      	beq.n	8002878 <LL_TIM_Init+0x34>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a44      	ldr	r2, [pc, #272]	; (800297c <LL_TIM_Init+0x138>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <LL_TIM_Init+0x34>
 800286e:	f240 1149 	movw	r1, #329	; 0x149
 8002872:	4843      	ldr	r0, [pc, #268]	; (8002980 <LL_TIM_Init+0x13c>)
 8002874:	f7fe f8aa 	bl	80009cc <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d014      	beq.n	80028aa <LL_TIM_Init+0x66>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b10      	cmp	r3, #16
 8002886:	d010      	beq.n	80028aa <LL_TIM_Init+0x66>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d00c      	beq.n	80028aa <LL_TIM_Init+0x66>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b20      	cmp	r3, #32
 8002896:	d008      	beq.n	80028aa <LL_TIM_Init+0x66>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d004      	beq.n	80028aa <LL_TIM_Init+0x66>
 80028a0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80028a4:	4836      	ldr	r0, [pc, #216]	; (8002980 <LL_TIM_Init+0x13c>)
 80028a6:	f7fe f891 	bl	80009cc <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <LL_TIM_Init+0x8c>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d009      	beq.n	80028d0 <LL_TIM_Init+0x8c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	d004      	beq.n	80028d0 <LL_TIM_Init+0x8c>
 80028c6:	f240 114b 	movw	r1, #331	; 0x14b
 80028ca:	482d      	ldr	r0, [pc, #180]	; (8002980 <LL_TIM_Init+0x13c>)
 80028cc:	f7fe f87e 	bl	80009cc <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a26      	ldr	r2, [pc, #152]	; (8002974 <LL_TIM_Init+0x130>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <LL_TIM_Init+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d007      	beq.n	80028f6 <LL_TIM_Init+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a23      	ldr	r2, [pc, #140]	; (8002978 <LL_TIM_Init+0x134>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <LL_TIM_Init+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <LL_TIM_Init+0x138>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d106      	bne.n	8002904 <LL_TIM_Init+0xc0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <LL_TIM_Init+0x130>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00b      	beq.n	8002924 <LL_TIM_Init+0xe0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d007      	beq.n	8002924 <LL_TIM_Init+0xe0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <LL_TIM_Init+0x134>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <LL_TIM_Init+0xe0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <LL_TIM_Init+0x138>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d106      	bne.n	8002932 <LL_TIM_Init+0xee>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff57 	bl	80027f2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff44 	bl	80027d8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <LL_TIM_Init+0x130>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d105      	bne.n	8002964 <LL_TIM_Init+0x120>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff54 	bl	800280c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff5e 	bl	8002826 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	080062d0 	.word	0x080062d0

08002984 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <LL_SetSystemCoreClock+0x18>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	2000000c 	.word	0x2000000c

080029a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path);
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <MX_FATFS_Init+0x18>)
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_FATFS_Init+0x1c>)
 80029a8:	f003 fb90 	bl	80060cc <FATFS_LinkDriver>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <MX_FATFS_Init+0x20>)
 80029b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000140 	.word	0x20000140
 80029bc:	20000018 	.word	0x20000018
 80029c0:	20000144 	.word	0x20000144

080029c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80029c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <FS_GetFileList>:
#include "main.h"
//extern ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];


uint8_t FS_GetFileList(typeEnv *Env)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80029da:	af00      	add	r7, sp, #0
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	6018      	str	r0, [r3, #0]
	DIR dir;
	FRESULT fs_result;
	FILINFO fs_info;
	char* path ="";
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <FS_GetFileList+0x15c>)
 80029e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t cnt_file=0, indx=0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t start_list=0, end_list=0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	fs_result = f_opendir (&dir, path);
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fa28 	bl	8005e5c <f_opendir>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if(fs_result != FR_OK)
 8002a12:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <FS_GetFileList+0x4a>
	{ return 1; }
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e083      	b.n	8002b26 <FS_GetFileList+0x152>

	start_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX ;
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002a26:	461a      	mov	r2, r3
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	end_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX + (ITEM_ON_PAGE_MAX);
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	memset( &(Env->Menu.FileList[0][0]), 0, sizeof(Env->Menu.FileList));
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	228f      	movs	r2, #143	; 0x8f
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fb6c 	bl	8006134 <memset>

	for (;;)
	{
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 8002a5c:	f107 0208 	add.w	r2, r7, #8
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fa9f 	bl	8005faa <f_readdir>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (fs_result != FR_OK || fs_info.fname[0] == 0 ){ break;} /* Останов цикла при ошибке или при достижении конца списка директории */
 8002a72:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d14f      	bne.n	8002b1a <FS_GetFileList+0x146>
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	7a5b      	ldrb	r3, [r3, #9]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04a      	beq.n	8002b1a <FS_GetFileList+0x146>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	7a5b      	ldrb	r3, [r3, #9]
 8002a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a8c:	d041      	beq.n	8002b12 <FS_GetFileList+0x13e>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	7a1b      	ldrb	r3, [r3, #8]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d13c      	bne.n	8002b16 <FS_GetFileList+0x142>
		else
		{   /* Это файл. Заносим название в список файлов */
			if(cnt_file >= start_list && cnt_file < end_list)
 8002a9c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8002aa0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d328      	bcc.n	8002afa <FS_GetFileList+0x126>
 8002aa8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8002aac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d222      	bcs.n	8002afa <FS_GetFileList+0x126>
			{
				strncpy( &(Env->Menu.FileList[indx][0]),  &fs_info.fname, strlen(fs_info.fname));
 8002ab4:	1d39      	adds	r1, r7, #4
 8002ab6:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	680a      	ldr	r2, [r1, #0]
 8002ac6:	18d4      	adds	r4, r2, r3
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	3309      	adds	r3, #9
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fb3c 	bl	800014c <strlen>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	3309      	adds	r3, #9
 8002adc:	4619      	mov	r1, r3
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f003 fb30 	bl	8006144 <strncpy>
				indx++;
 8002ae4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				Env->Menu.NmbrOnPageFiles=indx;
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8002af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			}
			cnt_file++;
 8002afa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002afe:	3301      	adds	r3, #1
 8002b00:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		}
		Env->Menu.NmbrAllFiles=cnt_file;
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8002b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002b10:	e7a4      	b.n	8002a5c <FS_GetFileList+0x88>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8002b12:	bf00      	nop
 8002b14:	e7a2      	b.n	8002a5c <FS_GetFileList+0x88>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8002b16:	bf00      	nop
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 8002b18:	e7a0      	b.n	8002a5c <FS_GetFileList+0x88>
	}

	f_closedir(&dir);
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fa1e 	bl	8005f60 <f_closedir>
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}
 8002b30:	08006308 	.word	0x08006308

08002b34 <FS_ReadFile>:

uint8_t FS_ReadFile(typeEnv *Env)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	6018      	str	r0, [r3, #0]
	char *FileName = (*Env).FileNameForTest;
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b48:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	//char *DataBuf  = (*Env).DataForTest;
	char *DataBuf  = (*Env).DataForTest;
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	33b8      	adds	r3, #184	; 0xb8
 8002b52:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	char string[DATA_TEST_SIZE]; // строка прочитанная из файла ; 128 байт

	FIL fs_file;
	FRESULT fs_result;
	uint32_t byteRead;
	uint32_t ofs=0;	// смещение от начала файла
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	fs_result = f_open(&fs_file, FileName, FA_READ);
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	2201      	movs	r2, #1
 8002b62:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fd20 	bl	80055ac <f_open>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
		if(fs_result != FR_OK)	{ return 1; }
 8002b72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <FS_ReadFile+0x4a>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e01f      	b.n	8002bbe <FS_ReadFile+0x8a>
				{
					break;
				}
		}*/

	fs_result = f_read(&fs_file, DataBuf, DATA_TEST_SIZE, &byteRead);
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	f107 000c 	add.w	r0, r7, #12
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8002b8c:	f002 ff19 	bl	80059c2 <f_read>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
			if(fs_result != FR_OK)	{ return 1; }
 8002b96:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <FS_ReadFile+0x6e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00d      	b.n	8002bbe <FS_ReadFile+0x8a>
	(*Env).RealDataSize = byteRead;
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

	f_close(&fs_file);
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 f928 	bl	8005e0c <f_close>
	return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fa09 	bl	8002fec <USER_SPI_initialize>
 8002bda:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fadb 	bl	80031ac <USER_SPI_status>
 8002bf6:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002c10:	7bf8      	ldrb	r0, [r7, #15]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	f000 fadc 	bl	80031d4 <USER_SPI_read>
 8002c1c:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002c36:	7bf8      	ldrb	r0, [r7, #15]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	f000 fb2f 	bl	80032a0 <USER_SPI_write>
 8002c42:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	603a      	str	r2, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002c5c:	79b9      	ldrb	r1, [r7, #6]
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fb98 	bl	8003398 <USER_SPI_ioctl>
 8002c68:	4603      	mov	r3, r0
//   n res;
  /* USER CODE END IOCTL */
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <LL_SPI_SetBaudRatePrescaler>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_GPIO_SetOutputPin>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <LL_GPIO_ResetOutputPin>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	615a      	str	r2, [r3, #20]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002cdc:	f7ff f966 	bl	8001fac <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <SPI_Timer_On+0x20>)
 8002ce4:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <SPI_Timer_On+0x24>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200005a4 	.word	0x200005a4
 8002cf8:	200005a8 	.word	0x200005a8

08002cfc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002d00:	f7ff f954 	bl	8001fac <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <SPI_Timer_Status+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <SPI_Timer_Status+0x28>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bf34      	ite	cc
 8002d14:	2301      	movcc	r3, #1
 8002d16:	2300      	movcs	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200005a4 	.word	0x200005a4
 8002d24:	200005a8 	.word	0x200005a8

08002d28 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
  //  HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
	rxDat = LL_SPI_TransmitReceive(SPI1, dat);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4619      	mov	r1, r3
 8002d36:	4805      	ldr	r0, [pc, #20]	; (8002d4c <xchg_spi+0x24>)
 8002d38:	f7fe f81a 	bl	8000d70 <LL_SPI_TransmitReceive>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
	return rxDat;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40013000 	.word	0x40013000

08002d50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e00a      	b.n	8002d76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	18d4      	adds	r4, r2, r3
 8002d66:	20ff      	movs	r0, #255	; 0xff
 8002d68:	f7ff ffde 	bl	8002d28 <xchg_spi>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3f0      	bcc.n	8002d60 <rcvr_spi_multi+0x10>
	}
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}

08002d86 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e009      	b.n	8002daa <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffc2 	bl	8002d28 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3f1      	bcc.n	8002d96 <xmit_spi_multi+0x10>
	}
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002dc2:	f7ff f8f3 	bl	8001fac <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002dcc:	20ff      	movs	r0, #255	; 0xff
 8002dce:	f7ff ffab 	bl	8002d28 <xchg_spi>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2bff      	cmp	r3, #255	; 0xff
 8002dda:	d007      	beq.n	8002dec <wait_ready+0x32>
 8002ddc:	f7ff f8e6 	bl	8001fac <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8ef      	bhi.n	8002dcc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <despiselect+0x18>)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <despiselect+0x1c>)
 8002e08:	f7ff ff45 	bl	8002c96 <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002e0c:	20ff      	movs	r0, #255	; 0xff
 8002e0e:	f7ff ff8b 	bl	8002d28 <xchg_spi>

}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	04040004 	.word	0x04040004
 8002e1c:	40010c00 	.word	0x40010c00

08002e20 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002e24:	490a      	ldr	r1, [pc, #40]	; (8002e50 <spiselect+0x30>)
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <spiselect+0x34>)
 8002e28:	f7ff ff44 	bl	8002cb4 <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002e2c:	20ff      	movs	r0, #255	; 0xff
 8002e2e:	f7ff ff7b 	bl	8002d28 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002e32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e36:	f7ff ffc0 	bl	8002dba <wait_ready>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <spiselect+0x24>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e002      	b.n	8002e4a <spiselect+0x2a>

	despiselect();
 8002e44:	f7ff ffdc 	bl	8002e00 <despiselect>
	return 0;	/* Timeout */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	04040004 	.word	0x04040004
 8002e54:	40010c00 	.word	0x40010c00

08002e58 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002e62:	20c8      	movs	r0, #200	; 0xc8
 8002e64:	f7ff ff36 	bl	8002cd4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002e68:	20ff      	movs	r0, #255	; 0xff
 8002e6a:	f7ff ff5d 	bl	8002d28 <xchg_spi>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2bff      	cmp	r3, #255	; 0xff
 8002e76:	d104      	bne.n	8002e82 <rcvr_datablock+0x2a>
 8002e78:	f7ff ff40 	bl	8002cfc <SPI_Timer_Status>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f2      	bne.n	8002e68 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2bfe      	cmp	r3, #254	; 0xfe
 8002e86:	d001      	beq.n	8002e8c <rcvr_datablock+0x34>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e00a      	b.n	8002ea2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ff5e 	bl	8002d50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002e94:	20ff      	movs	r0, #255	; 0xff
 8002e96:	f7ff ff47 	bl	8002d28 <xchg_spi>
 8002e9a:	20ff      	movs	r0, #255	; 0xff
 8002e9c:	f7ff ff44 	bl	8002d28 <xchg_spi>

	return 1;						/* Function succeeded */
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eba:	f7ff ff7e 	bl	8002dba <wait_ready>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <xmit_datablock+0x1e>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e01e      	b.n	8002f06 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff2c 	bl	8002d28 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	2bfd      	cmp	r3, #253	; 0xfd
 8002ed4:	d016      	beq.n	8002f04 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff53 	bl	8002d86 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002ee0:	20ff      	movs	r0, #255	; 0xff
 8002ee2:	f7ff ff21 	bl	8002d28 <xchg_spi>
 8002ee6:	20ff      	movs	r0, #255	; 0xff
 8002ee8:	f7ff ff1e 	bl	8002d28 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002eec:	20ff      	movs	r0, #255	; 0xff
 8002eee:	f7ff ff1b 	bl	8002d28 <xchg_spi>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d001      	beq.n	8002f04 <xmit_datablock+0x5a>
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <xmit_datablock+0x5c>
	}
	return 1;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	6039      	str	r1, [r7, #0]
 8002f18:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0e      	bge.n	8002f40 <send_cmd+0x32>
		cmd &= 0x7F;
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f28:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2037      	movs	r0, #55	; 0x37
 8002f2e:	f7ff ffee 	bl	8002f0e <send_cmd>
 8002f32:	4603      	mov	r3, r0
 8002f34:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002f36:	7bbb      	ldrb	r3, [r7, #14]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d901      	bls.n	8002f40 <send_cmd+0x32>
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	e051      	b.n	8002fe4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d008      	beq.n	8002f58 <send_cmd+0x4a>
		despiselect();
 8002f46:	f7ff ff5b 	bl	8002e00 <despiselect>
		if (!spiselect()) return 0xFF;
 8002f4a:	f7ff ff69 	bl	8002e20 <spiselect>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <send_cmd+0x4a>
 8002f54:	23ff      	movs	r3, #255	; 0xff
 8002f56:	e045      	b.n	8002fe4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fee1 	bl	8002d28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	0e1b      	lsrs	r3, r3, #24
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fedb 	bl	8002d28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fed5 	bl	8002d28 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fecf 	bl	8002d28 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff feca 	bl	8002d28 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <send_cmd+0x94>
 8002f9e:	2395      	movs	r3, #149	; 0x95
 8002fa0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d101      	bne.n	8002fac <send_cmd+0x9e>
 8002fa8:	2387      	movs	r3, #135	; 0x87
 8002faa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff feba 	bl	8002d28 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d102      	bne.n	8002fc0 <send_cmd+0xb2>
 8002fba:	20ff      	movs	r0, #255	; 0xff
 8002fbc:	f7ff feb4 	bl	8002d28 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002fc0:	230a      	movs	r3, #10
 8002fc2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002fc4:	20ff      	movs	r0, #255	; 0xff
 8002fc6:	f7ff feaf 	bl	8002d28 <xchg_spi>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da05      	bge.n	8002fe2 <send_cmd+0xd4>
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002fe2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <USER_SPI_initialize+0x14>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0ca      	b.n	8003196 <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003000:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <USER_SPI_initialize+0x2a>
 800300e:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e0bf      	b.n	8003196 <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8003016:	2130      	movs	r1, #48	; 0x30
 8003018:	4862      	ldr	r0, [pc, #392]	; (80031a4 <USER_SPI_initialize+0x1b8>)
 800301a:	f7ff fe2a 	bl	8002c72 <LL_SPI_SetBaudRatePrescaler>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800301e:	230a      	movs	r3, #10
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e005      	b.n	8003030 <USER_SPI_initialize+0x44>
 8003024:	20ff      	movs	r0, #255	; 0xff
 8003026:	f7ff fe7f 	bl	8002d28 <xchg_spi>
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3b01      	subs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f6      	bne.n	8003024 <USER_SPI_initialize+0x38>

	ty = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800303a:	2100      	movs	r1, #0
 800303c:	2000      	movs	r0, #0
 800303e:	f7ff ff66 	bl	8002f0e <send_cmd>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	f040 808b 	bne.w	8003160 <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800304a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800304e:	f7ff fe41 	bl	8002cd4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003052:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003056:	2008      	movs	r0, #8
 8003058:	f7ff ff59 	bl	8002f0e <send_cmd>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d151      	bne.n	8003106 <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	e00d      	b.n	8003084 <USER_SPI_initialize+0x98>
 8003068:	7bfc      	ldrb	r4, [r7, #15]
 800306a:	20ff      	movs	r0, #255	; 0xff
 800306c:	f7ff fe5c 	bl	8002d28 <xchg_spi>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4423      	add	r3, r4
 800307a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	3301      	adds	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d9ee      	bls.n	8003068 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800308a:	7abb      	ldrb	r3, [r7, #10]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d167      	bne.n	8003160 <USER_SPI_initialize+0x174>
 8003090:	7afb      	ldrb	r3, [r7, #11]
 8003092:	2baa      	cmp	r3, #170	; 0xaa
 8003094:	d164      	bne.n	8003160 <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003096:	bf00      	nop
 8003098:	f7ff fe30 	bl	8002cfc <SPI_Timer_Status>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <USER_SPI_initialize+0xc6>
 80030a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030a6:	20a9      	movs	r0, #169	; 0xa9
 80030a8:	f7ff ff31 	bl	8002f0e <send_cmd>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80030b2:	f7ff fe23 	bl	8002cfc <SPI_Timer_Status>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d051      	beq.n	8003160 <USER_SPI_initialize+0x174>
 80030bc:	2100      	movs	r1, #0
 80030be:	203a      	movs	r0, #58	; 0x3a
 80030c0:	f7ff ff25 	bl	8002f0e <send_cmd>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d14a      	bne.n	8003160 <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e00d      	b.n	80030ec <USER_SPI_initialize+0x100>
 80030d0:	7bfc      	ldrb	r4, [r7, #15]
 80030d2:	20ff      	movs	r0, #255	; 0xff
 80030d4:	f7ff fe28 	bl	8002d28 <xchg_spi>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	4423      	add	r3, r4
 80030e2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d9ee      	bls.n	80030d0 <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80030f2:	7a3b      	ldrb	r3, [r7, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <USER_SPI_initialize+0x114>
 80030fc:	230c      	movs	r3, #12
 80030fe:	e000      	b.n	8003102 <USER_SPI_initialize+0x116>
 8003100:	2304      	movs	r3, #4
 8003102:	737b      	strb	r3, [r7, #13]
 8003104:	e02c      	b.n	8003160 <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003106:	2100      	movs	r1, #0
 8003108:	20a9      	movs	r0, #169	; 0xa9
 800310a:	f7ff ff00 	bl	8002f0e <send_cmd>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d804      	bhi.n	800311e <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003114:	2302      	movs	r3, #2
 8003116:	737b      	strb	r3, [r7, #13]
 8003118:	23a9      	movs	r3, #169	; 0xa9
 800311a:	73bb      	strb	r3, [r7, #14]
 800311c:	e003      	b.n	8003126 <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800311e:	2301      	movs	r3, #1
 8003120:	737b      	strb	r3, [r7, #13]
 8003122:	2301      	movs	r3, #1
 8003124:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003126:	bf00      	nop
 8003128:	f7ff fde8 	bl	8002cfc <SPI_Timer_Status>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <USER_SPI_initialize+0x156>
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fee9 	bl	8002f0e <send_cmd>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f2      	bne.n	8003128 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003142:	f7ff fddb 	bl	8002cfc <SPI_Timer_Status>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <USER_SPI_initialize+0x170>
 800314c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003150:	2010      	movs	r0, #16
 8003152:	f7ff fedc 	bl	8002f0e <send_cmd>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <USER_SPI_initialize+0x174>
				ty = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <USER_SPI_initialize+0x1bc>)
 8003162:	7b7b      	ldrb	r3, [r7, #13]
 8003164:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003166:	f7ff fe4b 	bl	8002e00 <despiselect>

	if (ty) {			/* OK */
 800316a:	7b7b      	ldrb	r3, [r7, #13]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 8003170:	2108      	movs	r1, #8
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <USER_SPI_initialize+0x1b8>)
 8003174:	f7ff fd7d 	bl	8002c72 <LL_SPI_SetBaudRatePrescaler>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e002      	b.n	8003190 <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <USER_SPI_initialize+0x1b4>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	2000002c 	.word	0x2000002c
 80031a4:	40013000 	.word	0x40013000
 80031a8:	2000004f 	.word	0x2000004f

080031ac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <USER_SPI_status+0x14>
 80031bc:	2301      	movs	r3, #1
 80031be:	e002      	b.n	80031c6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <USER_SPI_status+0x24>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	2000002c 	.word	0x2000002c

080031d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <USER_SPI_read+0x1c>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <USER_SPI_read+0x20>
 80031f0:	2304      	movs	r3, #4
 80031f2:	e04d      	b.n	8003290 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80031f4:	4b28      	ldr	r3, [pc, #160]	; (8003298 <USER_SPI_read+0xc4>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <USER_SPI_read+0x32>
 8003202:	2303      	movs	r3, #3
 8003204:	e044      	b.n	8003290 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <USER_SPI_read+0xc8>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <USER_SPI_read+0x44>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d111      	bne.n	8003242 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	2011      	movs	r0, #17
 8003222:	f7ff fe74 	bl	8002f0e <send_cmd>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d129      	bne.n	8003280 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800322c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f7ff fe11 	bl	8002e58 <rcvr_datablock>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d021      	beq.n	8003280 <USER_SPI_read+0xac>
			count = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	e01e      	b.n	8003280 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	2012      	movs	r0, #18
 8003246:	f7ff fe62 	bl	8002f0e <send_cmd>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d117      	bne.n	8003280 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f7ff fdff 	bl	8002e58 <rcvr_datablock>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <USER_SPI_read+0xa2>
				buff += 512;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003266:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	3b01      	subs	r3, #1
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ed      	bne.n	8003250 <USER_SPI_read+0x7c>
 8003274:	e000      	b.n	8003278 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003276:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003278:	2100      	movs	r1, #0
 800327a:	200c      	movs	r0, #12
 800327c:	f7ff fe47 	bl	8002f0e <send_cmd>
		}
	}
	despiselect();
 8003280:	f7ff fdbe 	bl	8002e00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2000002c 	.word	0x2000002c
 800329c:	2000004f 	.word	0x2000004f

080032a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <USER_SPI_write+0x1c>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <USER_SPI_write+0x20>
 80032bc:	2304      	movs	r3, #4
 80032be:	e063      	b.n	8003388 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <USER_SPI_write+0xf0>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <USER_SPI_write+0x32>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e05a      	b.n	8003388 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <USER_SPI_write+0xf0>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <USER_SPI_write+0x44>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e051      	b.n	8003388 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <USER_SPI_write+0xf4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <USER_SPI_write+0x56>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	025b      	lsls	r3, r3, #9
 80032f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d110      	bne.n	800331e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	2018      	movs	r0, #24
 8003300:	f7ff fe05 	bl	8002f0e <send_cmd>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d136      	bne.n	8003378 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800330a:	21fe      	movs	r1, #254	; 0xfe
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f7ff fdcc 	bl	8002eaa <xmit_datablock>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02f      	beq.n	8003378 <USER_SPI_write+0xd8>
			count = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	e02c      	b.n	8003378 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <USER_SPI_write+0xf4>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f003 0306 	and.w	r3, r3, #6
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <USER_SPI_write+0x92>
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	2097      	movs	r0, #151	; 0x97
 800332e:	f7ff fdee 	bl	8002f0e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	2019      	movs	r0, #25
 8003336:	f7ff fdea 	bl	8002f0e <send_cmd>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11b      	bne.n	8003378 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003340:	21fc      	movs	r1, #252	; 0xfc
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f7ff fdb1 	bl	8002eaa <xmit_datablock>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <USER_SPI_write+0xc4>
				buff += 512;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003354:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ee      	bne.n	8003340 <USER_SPI_write+0xa0>
 8003362:	e000      	b.n	8003366 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003364:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003366:	21fd      	movs	r1, #253	; 0xfd
 8003368:	2000      	movs	r0, #0
 800336a:	f7ff fd9e 	bl	8002eaa <xmit_datablock>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <USER_SPI_write+0xd8>
 8003374:	2301      	movs	r3, #1
 8003376:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003378:	f7ff fd42 	bl	8002e00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	2000002c 	.word	0x2000002c
 8003394:	2000004f 	.word	0x2000004f

08003398 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	; 0x30
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	603a      	str	r2, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
 80033a4:	460b      	mov	r3, r1
 80033a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <USER_SPI_ioctl+0x1a>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e15a      	b.n	8003668 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80033b2:	4baf      	ldr	r3, [pc, #700]	; (8003670 <USER_SPI_ioctl+0x2d8>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <USER_SPI_ioctl+0x2c>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e151      	b.n	8003668 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80033ca:	79bb      	ldrb	r3, [r7, #6]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	f200 8136 	bhi.w	800363e <USER_SPI_ioctl+0x2a6>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <USER_SPI_ioctl+0x40>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033ed 	.word	0x080033ed
 80033dc:	08003401 	.word	0x08003401
 80033e0:	0800363f 	.word	0x0800363f
 80033e4:	080034ad 	.word	0x080034ad
 80033e8:	080035a3 	.word	0x080035a3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80033ec:	f7ff fd18 	bl	8002e20 <spiselect>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8127 	beq.w	8003646 <USER_SPI_ioctl+0x2ae>
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80033fe:	e122      	b.n	8003646 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003400:	2100      	movs	r1, #0
 8003402:	2009      	movs	r0, #9
 8003404:	f7ff fd83 	bl	8002f0e <send_cmd>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 811d 	bne.w	800364a <USER_SPI_ioctl+0x2b2>
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	2110      	movs	r1, #16
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd1e 	bl	8002e58 <rcvr_datablock>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8113 	beq.w	800364a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003424:	7b3b      	ldrb	r3, [r7, #12]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d111      	bne.n	8003452 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800342e:	7d7b      	ldrb	r3, [r7, #21]
 8003430:	461a      	mov	r2, r3
 8003432:	7d3b      	ldrb	r3, [r7, #20]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4413      	add	r3, r2
 8003438:	461a      	mov	r2, r3
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003442:	4413      	add	r3, r2
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	029a      	lsls	r2, r3, #10
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e028      	b.n	80034a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003452:	7c7b      	ldrb	r3, [r7, #17]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	7dbb      	ldrb	r3, [r7, #22]
 800345c:	09db      	lsrs	r3, r3, #7
 800345e:	b2db      	uxtb	r3, r3
 8003460:	4413      	add	r3, r2
 8003462:	b2da      	uxtb	r2, r3
 8003464:	7d7b      	ldrb	r3, [r7, #21]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0306 	and.w	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4413      	add	r3, r2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3302      	adds	r3, #2
 8003476:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800347a:	7d3b      	ldrb	r3, [r7, #20]
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	441a      	add	r2, r3
 8003488:	7cbb      	ldrb	r3, [r7, #18]
 800348a:	029b      	lsls	r3, r3, #10
 800348c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003490:	4413      	add	r3, r2
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003496:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800349a:	3b09      	subs	r3, #9
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	409a      	lsls	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80034aa:	e0ce      	b.n	800364a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80034ac:	4b71      	ldr	r3, [pc, #452]	; (8003674 <USER_SPI_ioctl+0x2dc>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d031      	beq.n	800351c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80034b8:	2100      	movs	r1, #0
 80034ba:	208d      	movs	r0, #141	; 0x8d
 80034bc:	f7ff fd27 	bl	8002f0e <send_cmd>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 80c3 	bne.w	800364e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80034c8:	20ff      	movs	r0, #255	; 0xff
 80034ca:	f7ff fc2d 	bl	8002d28 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2110      	movs	r1, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fcbf 	bl	8002e58 <rcvr_datablock>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b6 	beq.w	800364e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80034e2:	2330      	movs	r3, #48	; 0x30
 80034e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80034e8:	e007      	b.n	80034fa <USER_SPI_ioctl+0x162>
 80034ea:	20ff      	movs	r0, #255	; 0xff
 80034ec:	f7ff fc1c 	bl	8002d28 <xchg_spi>
 80034f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034f4:	3b01      	subs	r3, #1
 80034f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80034fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f3      	bne.n	80034ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003502:	7dbb      	ldrb	r3, [r7, #22]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	2310      	movs	r3, #16
 800350c:	fa03 f202 	lsl.w	r2, r3, r2
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800351a:	e098      	b.n	800364e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800351c:	2100      	movs	r1, #0
 800351e:	2009      	movs	r0, #9
 8003520:	f7ff fcf5 	bl	8002f0e <send_cmd>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 8091 	bne.w	800364e <USER_SPI_ioctl+0x2b6>
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	2110      	movs	r1, #16
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fc90 	bl	8002e58 <rcvr_datablock>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8087 	beq.w	800364e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003540:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <USER_SPI_ioctl+0x2dc>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800354c:	7dbb      	ldrb	r3, [r7, #22]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003554:	7dfa      	ldrb	r2, [r7, #23]
 8003556:	09d2      	lsrs	r2, r2, #7
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	4413      	add	r3, r2
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	7e7b      	ldrb	r3, [r7, #25]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	461a      	mov	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e013      	b.n	800359a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003572:	7dbb      	ldrb	r3, [r7, #22]
 8003574:	109b      	asrs	r3, r3, #2
 8003576:	b29b      	uxth	r3, r3
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	3301      	adds	r3, #1
 800357e:	7dfa      	ldrb	r2, [r7, #23]
 8003580:	00d2      	lsls	r2, r2, #3
 8003582:	f002 0218 	and.w	r2, r2, #24
 8003586:	7df9      	ldrb	r1, [r7, #23]
 8003588:	0949      	lsrs	r1, r1, #5
 800358a:	b2c9      	uxtb	r1, r1
 800358c:	440a      	add	r2, r1
 800358e:	3201      	adds	r2, #1
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	461a      	mov	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035a0:	e055      	b.n	800364e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <USER_SPI_ioctl+0x2dc>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f003 0306 	and.w	r3, r3, #6
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d051      	beq.n	8003652 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80035ae:	f107 020c 	add.w	r2, r7, #12
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	210b      	movs	r1, #11
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff feee 	bl	8003398 <USER_SPI_ioctl>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d149      	bne.n	8003656 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80035c2:	7b3b      	ldrb	r3, [r7, #12]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <USER_SPI_ioctl+0x23e>
 80035cc:	7dbb      	ldrb	r3, [r7, #22]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d041      	beq.n	800365a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <USER_SPI_ioctl+0x2dc>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	025b      	lsls	r3, r3, #9
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80035fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003600:	2020      	movs	r0, #32
 8003602:	f7ff fc84 	bl	8002f0e <send_cmd>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d128      	bne.n	800365e <USER_SPI_ioctl+0x2c6>
 800360c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360e:	2021      	movs	r0, #33	; 0x21
 8003610:	f7ff fc7d 	bl	8002f0e <send_cmd>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d121      	bne.n	800365e <USER_SPI_ioctl+0x2c6>
 800361a:	2100      	movs	r1, #0
 800361c:	2026      	movs	r0, #38	; 0x26
 800361e:	f7ff fc76 	bl	8002f0e <send_cmd>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11a      	bne.n	800365e <USER_SPI_ioctl+0x2c6>
 8003628:	f247 5030 	movw	r0, #30000	; 0x7530
 800362c:	f7ff fbc5 	bl	8002dba <wait_ready>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003636:	2300      	movs	r3, #0
 8003638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800363c:	e00f      	b.n	800365e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800363e:	2304      	movs	r3, #4
 8003640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003644:	e00c      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		break;
 8003646:	bf00      	nop
 8003648:	e00a      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		break;
 800364a:	bf00      	nop
 800364c:	e008      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		break;
 800364e:	bf00      	nop
 8003650:	e006      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003652:	bf00      	nop
 8003654:	e004      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <USER_SPI_ioctl+0x2c8>
		break;
 800365e:	bf00      	nop
	}

	despiselect();
 8003660:	f7ff fbce 	bl	8002e00 <despiselect>

	return res;
 8003664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003668:	4618      	mov	r0, r3
 800366a:	3730      	adds	r7, #48	; 0x30
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000002c 	.word	0x2000002c
 8003674:	2000004f 	.word	0x2000004f

08003678 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <disk_status+0x30>)
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	79fa      	ldrb	r2, [r7, #7]
 8003690:	4905      	ldr	r1, [pc, #20]	; (80036a8 <disk_status+0x30>)
 8003692:	440a      	add	r2, r1
 8003694:	7a12      	ldrb	r2, [r2, #8]
 8003696:	4610      	mov	r0, r2
 8003698:	4798      	blx	r3
 800369a:	4603      	mov	r3, r0
 800369c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000070 	.word	0x20000070

080036ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <disk_initialize+0x48>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <disk_initialize+0x48>)
 80036c8:	2101      	movs	r1, #1
 80036ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <disk_initialize+0x48>)
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	79fa      	ldrb	r2, [r7, #7]
 80036da:	4906      	ldr	r1, [pc, #24]	; (80036f4 <disk_initialize+0x48>)
 80036dc:	440a      	add	r2, r1
 80036de:	7a12      	ldrb	r2, [r2, #8]
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000070 	.word	0x20000070

080036f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <disk_read+0x3c>)
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	689c      	ldr	r4, [r3, #8]
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <disk_read+0x3c>)
 8003718:	4413      	add	r3, r2
 800371a:	7a18      	ldrb	r0, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	47a0      	blx	r4
 8003724:	4603      	mov	r3, r0
 8003726:	75fb      	strb	r3, [r7, #23]
  return res;
 8003728:	7dfb      	ldrb	r3, [r7, #23]
}
 800372a:	4618      	mov	r0, r3
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}
 8003732:	bf00      	nop
 8003734:	20000070 	.word	0x20000070

08003738 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <disk_write+0x3c>)
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68dc      	ldr	r4, [r3, #12]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <disk_write+0x3c>)
 8003758:	4413      	add	r3, r2
 800375a:	7a18      	ldrb	r0, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	47a0      	blx	r4
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]
  return res;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd90      	pop	{r4, r7, pc}
 8003772:	bf00      	nop
 8003774:	20000070 	.word	0x20000070

08003778 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	603a      	str	r2, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
 8003784:	460b      	mov	r3, r1
 8003786:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <disk_ioctl+0x38>)
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	79fa      	ldrb	r2, [r7, #7]
 8003796:	4906      	ldr	r1, [pc, #24]	; (80037b0 <disk_ioctl+0x38>)
 8003798:	440a      	add	r2, r1
 800379a:	7a10      	ldrb	r0, [r2, #8]
 800379c:	79b9      	ldrb	r1, [r7, #6]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	4798      	blx	r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000070 	.word	0x20000070

080037b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80037c8:	e007      	b.n	80037da <mem_cpy+0x26>
		*d++ = *s++;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	1c53      	adds	r3, r2, #1
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1c59      	adds	r1, r3, #1
 80037d4:	6179      	str	r1, [r7, #20]
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <mem_cpy+0x16>
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80037ee:	b480      	push	{r7}
 80037f0:	b087      	sub	sp, #28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80037fe:	e005      	b.n	800380c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	617a      	str	r2, [r7, #20]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f4      	bne.n	8003800 <mem_set+0x12>
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003838:	bf00      	nop
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <mem_cmp+0x40>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	61fa      	str	r2, [r7, #28]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	61ba      	str	r2, [r7, #24]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	1acb      	subs	r3, r1, r3
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ec      	beq.n	800383a <mem_cmp+0x1a>
	return r;
 8003860:	697b      	ldr	r3, [r7, #20]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003876:	e002      	b.n	800387e <chk_chr+0x12>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3301      	adds	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <chk_chr+0x26>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4293      	cmp	r3, r2
 8003890:	d1f2      	bne.n	8003878 <chk_chr+0xc>
	return *str;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e038      	b.n	8003926 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80038b4:	492f      	ldr	r1, [pc, #188]	; (8003974 <chk_lock+0xd4>)
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d029      	beq.n	800391c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80038c8:	492a      	ldr	r1, [pc, #168]	; (8003974 <chk_lock+0xd4>)
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038de:	429a      	cmp	r2, r3
 80038e0:	d11e      	bne.n	8003920 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80038e2:	4924      	ldr	r1, [pc, #144]	; (8003974 <chk_lock+0xd4>)
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3304      	adds	r3, #4
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d110      	bne.n	8003920 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80038fe:	491d      	ldr	r1, [pc, #116]	; (8003974 <chk_lock+0xd4>)
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3308      	adds	r3, #8
 800390e:	881a      	ldrh	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8003916:	429a      	cmp	r2, r3
 8003918:	d102      	bne.n	8003920 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800391a:	e007      	b.n	800392c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d9c3      	bls.n	80038b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d109      	bne.n	8003946 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <chk_lock+0x9e>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d101      	bne.n	8003942 <chk_lock+0xa2>
 800393e:	2300      	movs	r3, #0
 8003940:	e013      	b.n	800396a <chk_lock+0xca>
 8003942:	2312      	movs	r3, #18
 8003944:	e011      	b.n	800396a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <chk_lock+0xc4>
 800394c:	4909      	ldr	r1, [pc, #36]	; (8003974 <chk_lock+0xd4>)
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	330a      	adds	r3, #10
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003962:	d101      	bne.n	8003968 <chk_lock+0xc8>
 8003964:	2310      	movs	r3, #16
 8003966:	e000      	b.n	800396a <chk_lock+0xca>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	20000058 	.word	0x20000058

08003978 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	e002      	b.n	800398a <enq_lock+0x12>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3301      	adds	r3, #1
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d809      	bhi.n	80039a4 <enq_lock+0x2c>
 8003990:	490a      	ldr	r1, [pc, #40]	; (80039bc <enq_lock+0x44>)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ef      	bne.n	8003984 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000058 	.word	0x20000058

080039c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e02b      	b.n	8003a28 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80039d0:	4955      	ldr	r1, [pc, #340]	; (8003b28 <inc_lock+0x168>)
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11b      	bne.n	8003a22 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80039ea:	494f      	ldr	r1, [pc, #316]	; (8003b28 <inc_lock+0x168>)
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3304      	adds	r3, #4
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10d      	bne.n	8003a22 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8003a06:	4948      	ldr	r1, [pc, #288]	; (8003b28 <inc_lock+0x168>)
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3308      	adds	r3, #8
 8003a16:	881a      	ldrh	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d006      	beq.n	8003a30 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d9d0      	bls.n	80039d0 <inc_lock+0x10>
 8003a2e:	e000      	b.n	8003a32 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8003a30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d145      	bne.n	8003ac4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e002      	b.n	8003a44 <inc_lock+0x84>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d809      	bhi.n	8003a5e <inc_lock+0x9e>
 8003a4a:	4937      	ldr	r1, [pc, #220]	; (8003b28 <inc_lock+0x168>)
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ef      	bne.n	8003a3e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d101      	bne.n	8003a68 <inc_lock+0xa8>
 8003a64:	2300      	movs	r3, #0
 8003a66:	e05a      	b.n	8003b1e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003a6e:	482e      	ldr	r0, [pc, #184]	; (8003b28 <inc_lock+0x168>)
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4403      	add	r3, r0
 8003a7c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003a84:	4828      	ldr	r0, [pc, #160]	; (8003b28 <inc_lock+0x168>)
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	3304      	adds	r3, #4
 8003a94:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003a9c:	4922      	ldr	r1, [pc, #136]	; (8003b28 <inc_lock+0x168>)
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3308      	adds	r3, #8
 8003aac:	4602      	mov	r2, r0
 8003aae:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ab0:	491d      	ldr	r1, [pc, #116]	; (8003b28 <inc_lock+0x168>)
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	330a      	adds	r3, #10
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <inc_lock+0x124>
 8003aca:	4917      	ldr	r1, [pc, #92]	; (8003b28 <inc_lock+0x168>)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	330a      	adds	r3, #10
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <inc_lock+0x124>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e01c      	b.n	8003b1e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <inc_lock+0x142>
 8003aea:	490f      	ldr	r1, [pc, #60]	; (8003b28 <inc_lock+0x168>)
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	330a      	adds	r3, #10
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	b299      	uxth	r1, r3
 8003b00:	e001      	b.n	8003b06 <inc_lock+0x146>
 8003b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b06:	4808      	ldr	r0, [pc, #32]	; (8003b28 <inc_lock+0x168>)
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4403      	add	r3, r0
 8003b14:	330a      	adds	r3, #10
 8003b16:	460a      	mov	r2, r1
 8003b18:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3301      	adds	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	20000058 	.word	0x20000058

08003b2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d82e      	bhi.n	8003b9e <dec_lock+0x72>
		n = Files[i].ctr;
 8003b40:	491b      	ldr	r1, [pc, #108]	; (8003bb0 <dec_lock+0x84>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	330a      	adds	r3, #10
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5a:	d101      	bne.n	8003b60 <dec_lock+0x34>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <dec_lock+0x40>
 8003b66:	89fb      	ldrh	r3, [r7, #14]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003b6c:	4910      	ldr	r1, [pc, #64]	; (8003bb0 <dec_lock+0x84>)
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	330a      	adds	r3, #10
 8003b7c:	89fa      	ldrh	r2, [r7, #14]
 8003b7e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <dec_lock+0x6c>
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <dec_lock+0x84>)
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	737b      	strb	r3, [r7, #13]
 8003b9c:	e001      	b.n	8003ba2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003ba2:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000058 	.word	0x20000058

08003bb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e016      	b.n	8003bf0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003bc2:	490f      	ldr	r1, [pc, #60]	; (8003c00 <clear_lock+0x4c>)
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d108      	bne.n	8003bea <clear_lock+0x36>
 8003bd8:	4909      	ldr	r1, [pc, #36]	; (8003c00 <clear_lock+0x4c>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d9e5      	bls.n	8003bc2 <clear_lock+0xe>
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	20000058 	.word	0x20000058

08003c04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d038      	beq.n	8003c8c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003c20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	f7ff fd83 	bl	8003738 <disk_write>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e026      	b.n	8003c8c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d218      	bcs.n	8003c8c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e010      	b.n	8003c86 <sync_window+0x82>
					wsect += fs->fsize;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	f7ff fd5c 	bl	8003738 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d8eb      	bhi.n	8003c64 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d01b      	beq.n	8003ce8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ffa7 	bl	8003c04 <sync_window>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d113      	bne.n	8003ce8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	f7ff fd14 	bl	80036f8 <disk_read>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff82 	bl	8003c04 <sync_window>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 809b 	bne.w	8003e42 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	f040 8088 	bne.w	8003e28 <sync_fs+0x136>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f040 8082 	bne.w	8003e28 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fd5e 	bl	80037ee <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2255      	movs	r2, #85	; 0x55
 8003d36:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	22aa      	movs	r2, #170	; 0xaa
 8003d3e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2252      	movs	r2, #82	; 0x52
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2252      	movs	r2, #82	; 0x52
 8003d4c:	705a      	strb	r2, [r3, #1]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2261      	movs	r2, #97	; 0x61
 8003d52:	709a      	strb	r2, [r3, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2241      	movs	r2, #65	; 0x41
 8003d58:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2272      	movs	r2, #114	; 0x72
 8003d5e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2272      	movs	r2, #114	; 0x72
 8003d66:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2241      	movs	r2, #65	; 0x41
 8003d6e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2261      	movs	r2, #97	; 0x61
 8003d76:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003db2:	0e1b      	lsrs	r3, r3, #24
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f7ff fc8c 	bl	8003738 <disk_write>
			fs->fsi_flag = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fca0 	bl	8003778 <disk_ioctl>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	3b02      	subs	r3, #2
 8003e5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e62:	3b02      	subs	r3, #2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d301      	bcc.n	8003e6e <clust2sect+0x22>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e00a      	b.n	8003e84 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003e74:	461a      	mov	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	fb03 f202 	mul.w	r2, r3, r2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003e82:	4413      	add	r3, r2
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d905      	bls.n	8003eaa <get_fat+0x1c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e0a0      	b.n	8003ff2 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d044      	beq.n	8003f4a <get_fat+0xbc>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d063      	beq.n	8003f8c <get_fat+0xfe>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 808a 	bne.w	8003fde <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	0a5b      	lsrs	r3, r3, #9
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fed5 	bl	8003c96 <move_window>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d178      	bne.n	8003fe4 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	0a5b      	lsrs	r3, r3, #9
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fec0 	bl	8003c96 <move_window>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d165      	bne.n	8003fe8 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <get_fat+0xb2>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	e002      	b.n	8003f46 <get_fat+0xb8>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f46:	617b      	str	r3, [r7, #20]
			break;
 8003f48:	e053      	b.n	8003ff2 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	4413      	add	r3, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fe9c 	bl	8003c96 <move_window>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d143      	bne.n	8003fec <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3301      	adds	r3, #1
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	617b      	str	r3, [r7, #20]
			break;
 8003f8a:	e032      	b.n	8003ff2 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	09db      	lsrs	r3, r3, #7
 8003f96:	4413      	add	r3, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fe7b 	bl	8003c96 <move_window>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d124      	bne.n	8003ff0 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3303      	adds	r3, #3
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	061a      	lsls	r2, r3, #24
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	3201      	adds	r2, #1
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	0212      	lsls	r2, r2, #8
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fda:	617b      	str	r3, [r7, #20]
			break;
 8003fdc:	e009      	b.n	8003ff2 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e006      	b.n	8003ff2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ff0:	bf00      	nop
		}
	}

	return val;
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d905      	bls.n	800401a <put_fat+0x1e>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <put_fat+0x24>
		res = FR_INT_ERR;
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e0f3      	b.n	8004208 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004026:	2b02      	cmp	r3, #2
 8004028:	d074      	beq.n	8004114 <put_fat+0x118>
 800402a:	2b03      	cmp	r3, #3
 800402c:	f000 8099 	beq.w	8004162 <put_fat+0x166>
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 80df 	bne.w	80041f4 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4413      	add	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	4413      	add	r3, r2
 8004050:	4619      	mov	r1, r3
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff fe1f 	bl	8003c96 <move_window>
 8004058:	4603      	mov	r3, r0
 800405a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 80cb 	bne.w	80041fa <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	617a      	str	r2, [r7, #20]
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <put_fat+0x9e>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b25b      	sxtb	r3, r3
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b25a      	sxtb	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	b25b      	sxtb	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b25b      	sxtb	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e001      	b.n	800409e <put_fat+0xa2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	0a5b      	lsrs	r3, r3, #9
 80040b4:	4413      	add	r3, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fdec 	bl	8003c96 <move_window>
 80040be:	4603      	mov	r3, r0
 80040c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 809a 	bne.w	80041fe <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <put_fat+0xec>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e00e      	b.n	8004106 <put_fat+0x10a>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	f023 030f 	bic.w	r3, r3, #15
 80040f2:	b25a      	sxtb	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	b25b      	sxtb	r3, r3
 8004100:	4313      	orrs	r3, r2
 8004102:	b25b      	sxtb	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004112:	e079      	b.n	8004208 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	4413      	add	r3, r2
 8004120:	4619      	mov	r1, r3
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff fdb7 	bl	8003c96 <move_window>
 8004128:	4603      	mov	r3, r0
 800412a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d167      	bne.n	8004202 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	b29b      	uxth	r3, r3
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b29a      	uxth	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	3301      	adds	r3, #1
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004160:	e052      	b.n	8004208 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	09db      	lsrs	r3, r3, #7
 800416c:	4413      	add	r3, r2
 800416e:	4619      	mov	r1, r3
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fd90 	bl	8003c96 <move_window>
 8004176:	4603      	mov	r3, r0
 8004178:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800417a:	7ffb      	ldrb	r3, [r7, #31]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d142      	bne.n	8004206 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3303      	adds	r3, #3
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	061a      	lsls	r2, r3, #24
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3302      	adds	r3, #2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	4313      	orrs	r3, r2
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	3201      	adds	r2, #1
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	0212      	lsls	r2, r2, #8
 80041a8:	4313      	orrs	r3, r2
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3301      	adds	r3, #1
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0c1a      	lsrs	r2, r3, #16
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0e1a      	lsrs	r2, r3, #24
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3303      	adds	r3, #3
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80041f2:	e009      	b.n	8004208 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80041f4:	2302      	movs	r3, #2
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e006      	b.n	8004208 <put_fat+0x20c>
			if (res != FR_OK) break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <put_fat+0x20c>
			if (res != FR_OK) break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <put_fat+0x20c>
			if (res != FR_OK) break;
 8004206:	bf00      	nop
		}
	}

	return res;
 8004208:	7ffb      	ldrb	r3, [r7, #31]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d905      	bls.n	800422e <remove_chain+0x1c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <remove_chain+0x22>
		res = FR_INT_ERR;
 800422e:	2302      	movs	r3, #2
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e043      	b.n	80042bc <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004238:	e036      	b.n	80042a8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800423a:	6839      	ldr	r1, [r7, #0]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fe26 	bl	8003e8e <get_fat>
 8004242:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d035      	beq.n	80042b6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d102      	bne.n	8004256 <remove_chain+0x44>
 8004250:	2302      	movs	r3, #2
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	e032      	b.n	80042bc <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d102      	bne.n	8004264 <remove_chain+0x52>
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	e02b      	b.n	80042bc <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004264:	2200      	movs	r2, #0
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fec7 	bl	8003ffc <put_fat>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d00f      	beq.n	80042a4 <remove_chain+0x92>
				fs->free_clust++;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	b2da      	uxtb	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3c2      	bcc.n	800423a <remove_chain+0x28>
 80042b4:	e002      	b.n	80042bc <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <remove_chain+0xaa>
			if (res != FR_OK) break;
 80042ba:	bf00      	nop
		}
	}

	return res;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80042dc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <create_chain+0x2a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d31c      	bcc.n	800432a <create_chain+0x64>
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e019      	b.n	800432a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fdc8 	bl	8003e8e <get_fat>
 80042fe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d801      	bhi.n	800430a <create_chain+0x44>
 8004306:	2301      	movs	r3, #1
 8004308:	e076      	b.n	80043f8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d101      	bne.n	8004316 <create_chain+0x50>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	e070      	b.n	80043f8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d201      	bcs.n	8004326 <create_chain+0x60>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	e068      	b.n	80043f8 <create_chain+0x132>
		scl = clst;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	d307      	bcc.n	8004350 <create_chain+0x8a>
			ncl = 2;
 8004340:	2302      	movs	r3, #2
 8004342:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d901      	bls.n	8004350 <create_chain+0x8a>
 800434c:	2300      	movs	r3, #0
 800434e:	e053      	b.n	80043f8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fd9b 	bl	8003e8e <get_fat>
 8004358:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d002      	beq.n	800436e <create_chain+0xa8>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <create_chain+0xac>
			return cs;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	e042      	b.n	80043f8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	429a      	cmp	r2, r3
 8004378:	d1d9      	bne.n	800432e <create_chain+0x68>
 800437a:	2300      	movs	r3, #0
 800437c:	e03c      	b.n	80043f8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800437e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004380:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe38 	bl	8003ffc <put_fat>
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <create_chain+0xe4>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fe2b 	bl	8003ffc <put_fat>
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11a      	bne.n	80043e6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d018      	beq.n	80043f6 <create_chain+0x130>
			fs->free_clust--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80043e4:	e007      	b.n	80043f6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <create_chain+0x12c>
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	e000      	b.n	80043f4 <create_chain+0x12e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80043f6:	697b      	ldr	r3, [r7, #20]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004410:	3304      	adds	r3, #4
 8004412:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800441e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004422:	fbb3 f3f2 	udiv	r3, r3, r2
 8004426:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	613a      	str	r2, [r7, #16]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <clmt_clust+0x3c>
 8004438:	2300      	movs	r3, #0
 800443a:	e010      	b.n	800445e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d307      	bcc.n	8004454 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3304      	adds	r3, #4
 8004450:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004452:	e7e9      	b.n	8004428 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004454:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
}
 800445e:	4618      	mov	r0, r3
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004482:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d007      	beq.n	800449a <dir_sdi+0x32>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004490:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	429a      	cmp	r2, r3
 8004498:	d301      	bcc.n	800449e <dir_sdi+0x36>
		return FR_INT_ERR;
 800449a:	2302      	movs	r3, #2
 800449c:	e074      	b.n	8004588 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <dir_sdi+0x56>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d105      	bne.n	80044be <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044b8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80044bc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d111      	bne.n	80044e8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ca:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d301      	bcc.n	80044da <dir_sdi+0x72>
			return FR_INT_ERR;
 80044d6:	2302      	movs	r3, #2
 80044d8:	e056      	b.n	8004588 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044e0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e032      	b.n	800454e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80044f6:	e01e      	b.n	8004536 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fcc4 	bl	8003e8e <get_fat>
 8004506:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d101      	bne.n	8004514 <dir_sdi+0xac>
 8004510:	2301      	movs	r3, #1
 8004512:	e039      	b.n	8004588 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d907      	bls.n	800452a <dir_sdi+0xc2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	429a      	cmp	r2, r3
 8004528:	d301      	bcc.n	800452e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800452a:	2302      	movs	r3, #2
 800452c:	e02c      	b.n	8004588 <dir_sdi+0x120>
			idx -= ic;
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	429a      	cmp	r2, r3
 800453c:	d2dc      	bcs.n	80044f8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fc80 	bl	8003e4c <clust2sect>
 800454c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <dir_sdi+0xf8>
 800455c:	2302      	movs	r3, #2
 800455e:	e013      	b.n	8004588 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	091a      	lsrs	r2, r3, #4
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004574:	461a      	mov	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	015b      	lsls	r3, r3, #5
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <dir_next+0x26>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <dir_next+0x2a>
		return FR_NO_FILE;
 80045b6:	2304      	movs	r3, #4
 80045b8:	e0dd      	b.n	8004776 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 80c6 	bne.w	8004752 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045e4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80045e8:	461a      	mov	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	f0c0 80b0 	bcc.w	8004752 <dir_next+0x1c2>
				return FR_NO_FILE;
 80045f2:	2304      	movs	r3, #4
 80045f4:	e0bf      	b.n	8004776 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004600:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004604:	3a01      	subs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 80a2 	bne.w	8004752 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f7ff fc36 	bl	8003e8e <get_fat>
 8004622:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d801      	bhi.n	800462e <dir_next+0x9e>
 800462a:	2302      	movs	r3, #2
 800462c:	e0a3      	b.n	8004776 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d101      	bne.n	800463a <dir_next+0xaa>
 8004636:	2301      	movs	r3, #1
 8004638:	e09d      	b.n	8004776 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004640:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d374      	bcc.n	8004734 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <dir_next+0xc4>
 8004650:	2304      	movs	r3, #4
 8004652:	e090      	b.n	8004776 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7ff fe2f 	bl	80042c6 <create_chain>
 8004668:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <dir_next+0xe4>
 8004670:	2307      	movs	r3, #7
 8004672:	e080      	b.n	8004776 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <dir_next+0xee>
 800467a:	2302      	movs	r3, #2
 800467c:	e07b      	b.n	8004776 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d101      	bne.n	800468a <dir_next+0xfa>
 8004686:	2301      	movs	r3, #1
 8004688:	e075      	b.n	8004776 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fab7 	bl	8003c04 <sync_window>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <dir_next+0x110>
 800469c:	2301      	movs	r3, #1
 800469e:	e06a      	b.n	8004776 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f89e 	bl	80037ee <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7ff fbc3 	bl	8003e4c <clust2sect>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e01b      	b.n	800470a <dir_next+0x17a>
						dp->fs->wflag = 1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fa8d 	bl	8003c04 <sync_window>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <dir_next+0x164>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e040      	b.n	8004776 <dir_next+0x1e6>
						dp->fs->winsect++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046fa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80046fe:	3201      	adds	r2, #1
 8004700:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004710:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004714:	461a      	mov	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4293      	cmp	r3, r2
 800471a:	d3da      	bcc.n	80046d2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004722:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	1a8a      	subs	r2, r1, r2
 8004730:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fb81 	bl	8003e4c <clust2sect>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	015b      	lsls	r3, r3, #5
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}

0800477e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004788:	2100      	movs	r1, #0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe6c 	bl	8004468 <dir_sdi>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d131      	bne.n	80047fe <dir_alloc+0x80>
		n = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff fa72 	bl	8003c96 <move_window>
 80047b2:	4603      	mov	r3, r0
 80047b4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11f      	bne.n	80047fc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2be5      	cmp	r3, #229	; 0xe5
 80047c6:	d005      	beq.n	80047d4 <dir_alloc+0x56>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d102      	bne.n	80047e8 <dir_alloc+0x6a>
 80047e2:	e00c      	b.n	80047fe <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80047e8:	2101      	movs	r1, #1
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fed0 	bl	8004590 <dir_next>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0d1      	beq.n	800479e <dir_alloc+0x20>
 80047fa:	e000      	b.n	80047fe <dir_alloc+0x80>
			if (res != FR_OK) break;
 80047fc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b04      	cmp	r3, #4
 8004802:	d101      	bne.n	8004808 <dir_alloc+0x8a>
 8004804:	2307      	movs	r3, #7
 8004806:	73fb      	strb	r3, [r7, #15]
	return res;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	331b      	adds	r3, #27
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	b21a      	sxth	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	331a      	adds	r3, #26
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b21b      	sxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b21b      	sxth	r3, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800483c:	2b03      	cmp	r3, #3
 800483e:	d10f      	bne.n	8004860 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3315      	adds	r3, #21
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b21b      	sxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b21b      	sxth	r3, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

	return cl;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	331a      	adds	r3, #26
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	331b      	adds	r3, #27
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	0c1a      	lsrs	r2, r3, #16
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3314      	adds	r3, #20
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3315      	adds	r3, #21
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fdd0 	bl	8004468 <dir_sdi>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <dir_find+0x1e>
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	e03b      	b.n	800494e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7ff f9d6 	bl	8003c96 <move_window>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d128      	bne.n	8004946 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048fa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <dir_find+0x56>
 8004908:	2304      	movs	r3, #4
 800490a:	75fb      	strb	r3, [r7, #23]
 800490c:	e01e      	b.n	800494c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	330b      	adds	r3, #11
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <dir_find+0x7a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004922:	220b      	movs	r2, #11
 8004924:	4619      	mov	r1, r3
 8004926:	6938      	ldr	r0, [r7, #16]
 8004928:	f7fe ff7a 	bl	8003820 <mem_cmp>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004932:	2100      	movs	r1, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fe2b 	bl	8004590 <dir_next>
 800493a:	4603      	mov	r3, r0
 800493c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0c8      	beq.n	80048d6 <dir_find+0x1e>
 8004944:	e002      	b.n	800494c <dir_find+0x94>
		if (res != FR_OK) break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <dir_find+0x94>
			break;
 800494a:	bf00      	nop

	return res;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8004960:	2304      	movs	r3, #4
 8004962:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8004964:	e03f      	b.n	80049e6 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7ff f98e 	bl	8003c96 <move_window>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d136      	bne.n	80049f2 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800498a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <dir_read+0x48>
 8004998:	2304      	movs	r3, #4
 800499a:	75fb      	strb	r3, [r7, #23]
 800499c:	e02e      	b.n	80049fc <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	330b      	adds	r3, #11
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a8:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2be5      	cmp	r3, #229	; 0xe5
 80049ae:	d011      	beq.n	80049d4 <dir_read+0x7e>
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b2e      	cmp	r3, #46	; 0x2e
 80049b4:	d00e      	beq.n	80049d4 <dir_read+0x7e>
 80049b6:	7bbb      	ldrb	r3, [r7, #14]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d00b      	beq.n	80049d4 <dir_read+0x7e>
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d010      	beq.n	80049f6 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80049d4:	2100      	movs	r1, #0
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff fdda 	bl	8004590 <dir_next>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <dir_read+0xa4>
	while (dp->sect) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ba      	bne.n	8004966 <dir_read+0x10>
 80049f0:	e004      	b.n	80049fc <dir_read+0xa6>
		if (res != FR_OK) break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <dir_read+0xa6>
			break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <dir_read+0xa6>
		if (res != FR_OK) break;
 80049fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <dir_read+0xb4>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fead 	bl	800477e <dir_alloc>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d126      	bne.n	8004a7c <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7ff f92a 	bl	8003c96 <move_window>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d117      	bne.n	8004a7c <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a52:	2220      	movs	r2, #32
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fec9 	bl	80037ee <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004a68:	220b      	movs	r2, #11
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fe fea2 	bl	80037b4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	3309      	adds	r3, #9
 8004a94:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05a      	beq.n	8004b56 <get_fileinfo+0xd0>
		dir = dp->dir;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004aa6:	60bb      	str	r3, [r7, #8]
		i = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8004aac:	e01c      	b.n	8004ae8 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	617a      	str	r2, [r7, #20]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d100      	bne.n	8004ac4 <get_fileinfo+0x3e>
 8004ac2:	e011      	b.n	8004ae8 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d101      	bne.n	8004ace <get_fileinfo+0x48>
 8004aca:	23e5      	movs	r3, #229	; 0xe5
 8004acc:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b09      	cmp	r3, #9
 8004ad2:	d104      	bne.n	8004ade <get_fileinfo+0x58>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	613a      	str	r2, [r7, #16]
 8004ada:	222e      	movs	r2, #46	; 0x2e
 8004adc:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	613a      	str	r2, [r7, #16]
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b0a      	cmp	r3, #10
 8004aec:	d9df      	bls.n	8004aae <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	7ada      	ldrb	r2, [r3, #11]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	331f      	adds	r3, #31
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	061a      	lsls	r2, r3, #24
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	331e      	adds	r3, #30
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	4313      	orrs	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	321d      	adds	r2, #29
 8004b0c:	7812      	ldrb	r2, [r2, #0]
 8004b0e:	0212      	lsls	r2, r2, #8
 8004b10:	4313      	orrs	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	321c      	adds	r2, #28
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3319      	adds	r3, #25
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b21a      	sxth	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3317      	adds	r3, #23
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	b21a      	sxth	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3316      	adds	r3, #22
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	b21b      	sxth	r3, r3
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
	...

08004b68 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <create_name+0x18>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b2f      	cmp	r3, #47	; 0x2f
 8004b86:	d0f8      	beq.n	8004b7a <create_name+0x12>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004b8e:	d0f4      	beq.n	8004b7a <create_name+0x12>
	sfn = dp->fn;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b96:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004b98:	220b      	movs	r2, #11
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	68b8      	ldr	r0, [r7, #8]
 8004b9e:	f7fe fe26 	bl	80037ee <mem_set>
	si = i = b = 0; ni = 8;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	2308      	movs	r3, #8
 8004bb0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	617a      	str	r2, [r7, #20]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004bc0:	7fbb      	ldrb	r3, [r7, #30]
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d953      	bls.n	8004c6e <create_name+0x106>
 8004bc6:	7fbb      	ldrb	r3, [r7, #30]
 8004bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8004bca:	d050      	beq.n	8004c6e <create_name+0x106>
 8004bcc:	7fbb      	ldrb	r3, [r7, #30]
 8004bce:	2b5c      	cmp	r3, #92	; 0x5c
 8004bd0:	d04d      	beq.n	8004c6e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8004bd2:	7fbb      	ldrb	r3, [r7, #30]
 8004bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd6:	d003      	beq.n	8004be0 <create_name+0x78>
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d30f      	bcc.n	8004c00 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d102      	bne.n	8004bec <create_name+0x84>
 8004be6:	7fbb      	ldrb	r3, [r7, #30]
 8004be8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bea:	d001      	beq.n	8004bf0 <create_name+0x88>
 8004bec:	2306      	movs	r3, #6
 8004bee:	e073      	b.n	8004cd8 <create_name+0x170>
			i = 8; ni = 11;
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	230b      	movs	r3, #11
 8004bf6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e035      	b.n	8004c6c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004c00:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da08      	bge.n	8004c1a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004c08:	7ffb      	ldrb	r3, [r7, #31]
 8004c0a:	f043 0303 	orr.w	r3, r3, #3
 8004c0e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c10:	7fbb      	ldrb	r3, [r7, #30]
 8004c12:	3b80      	subs	r3, #128	; 0x80
 8004c14:	4a32      	ldr	r2, [pc, #200]	; (8004ce0 <create_name+0x178>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004c1a:	7fbb      	ldrb	r3, [r7, #30]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4831      	ldr	r0, [pc, #196]	; (8004ce4 <create_name+0x17c>)
 8004c20:	f7fe fe24 	bl	800386c <chk_chr>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <create_name+0xc6>
				return FR_INVALID_NAME;
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e054      	b.n	8004cd8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004c2e:	7fbb      	ldrb	r3, [r7, #30]
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d907      	bls.n	8004c44 <create_name+0xdc>
 8004c34:	7fbb      	ldrb	r3, [r7, #30]
 8004c36:	2b5a      	cmp	r3, #90	; 0x5a
 8004c38:	d804      	bhi.n	8004c44 <create_name+0xdc>
				b |= 2;
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e00c      	b.n	8004c5e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004c44:	7fbb      	ldrb	r3, [r7, #30]
 8004c46:	2b60      	cmp	r3, #96	; 0x60
 8004c48:	d909      	bls.n	8004c5e <create_name+0xf6>
 8004c4a:	7fbb      	ldrb	r3, [r7, #30]
 8004c4c:	2b7a      	cmp	r3, #122	; 0x7a
 8004c4e:	d806      	bhi.n	8004c5e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8004c50:	7ffb      	ldrb	r3, [r7, #31]
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	7fbb      	ldrb	r3, [r7, #30]
 8004c5a:	3b20      	subs	r3, #32
 8004c5c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	613a      	str	r2, [r7, #16]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	4413      	add	r3, r2
 8004c68:	7fba      	ldrb	r2, [r7, #30]
 8004c6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004c6c:	e7a1      	b.n	8004bb2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	441a      	add	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004c78:	7fbb      	ldrb	r3, [r7, #30]
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d801      	bhi.n	8004c82 <create_name+0x11a>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	e000      	b.n	8004c84 <create_name+0x11c>
 8004c82:	2300      	movs	r3, #0
 8004c84:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <create_name+0x128>
 8004c8c:	2306      	movs	r3, #6
 8004c8e:	e023      	b.n	8004cd8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2be5      	cmp	r3, #229	; 0xe5
 8004c96:	d102      	bne.n	8004c9e <create_name+0x136>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d102      	bne.n	8004caa <create_name+0x142>
 8004ca4:	7ffb      	ldrb	r3, [r7, #31]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d103      	bne.n	8004cbc <create_name+0x154>
 8004cb4:	7fbb      	ldrb	r3, [r7, #30]
 8004cb6:	f043 0310 	orr.w	r3, r3, #16
 8004cba:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004cbc:	7ffb      	ldrb	r3, [r7, #31]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d103      	bne.n	8004cce <create_name+0x166>
 8004cc6:	7fbb      	ldrb	r3, [r7, #30]
 8004cc8:	f043 0308 	orr.w	r3, r3, #8
 8004ccc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	330b      	adds	r3, #11
 8004cd2:	7fba      	ldrb	r2, [r7, #30]
 8004cd4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004cd6:	2300      	movs	r3, #0
#endif
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08006d88 	.word	0x08006d88
 8004ce4:	0800630c 	.word	0x0800630c

08004ce8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b2f      	cmp	r3, #47	; 0x2f
 8004cf8:	d003      	beq.n	8004d02 <follow_path+0x1a>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b5c      	cmp	r3, #92	; 0x5c
 8004d00:	d102      	bne.n	8004d08 <follow_path+0x20>
		path++;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b1f      	cmp	r3, #31
 8004d16:	d80a      	bhi.n	8004d2e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fba4 	bl	8004468 <dir_sdi>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004d2c:	e045      	b.n	8004dba <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d2e:	463b      	mov	r3, r7
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff18 	bl	8004b68 <create_name>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d136      	bne.n	8004db0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fdb8 	bl	80048b8 <dir_find>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d52:	7adb      	ldrb	r3, [r3, #11]
 8004d54:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d128      	bne.n	8004db4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d123      	bne.n	8004db4 <follow_path+0xcc>
 8004d6c:	2305      	movs	r3, #5
 8004d6e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004d70:	e020      	b.n	8004db4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d72:	7bbb      	ldrb	r3, [r7, #14]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11d      	bne.n	8004db8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d82:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	330b      	adds	r3, #11
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8004d92:	2305      	movs	r3, #5
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	e010      	b.n	8004dba <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fd36 	bl	8004812 <ld_clust>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004dae:	e7be      	b.n	8004d2e <follow_path+0x46>
			if (res != FR_OK) break;
 8004db0:	bf00      	nop
 8004db2:	e002      	b.n	8004dba <follow_path+0xd2>
				break;
 8004db4:	bf00      	nop
 8004db6:	e000      	b.n	8004dba <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004db8:	bf00      	nop
		}
	}

	return res;
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d031      	beq.n	8004e3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e002      	b.n	8004de8 <get_ldnumber+0x24>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	3301      	adds	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d903      	bls.n	8004df8 <get_ldnumber+0x34>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b3a      	cmp	r3, #58	; 0x3a
 8004df6:	d1f4      	bne.n	8004de2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b3a      	cmp	r3, #58	; 0x3a
 8004dfe:	d11c      	bne.n	8004e3a <get_ldnumber+0x76>
			tp = *path;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	60fa      	str	r2, [r7, #12]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	3b30      	subs	r3, #48	; 0x30
 8004e10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d80e      	bhi.n	8004e36 <get_ldnumber+0x72>
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d10a      	bne.n	8004e36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <get_ldnumber+0x72>
					vol = (int)i;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	e002      	b.n	8004e40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e3e:	693b      	ldr	r3, [r7, #16]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
	...

08004e4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe ff13 	bl	8003c96 <move_window>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <check_fs+0x2e>
		return 3;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e04a      	b.n	8004f10 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e80:	3301      	adds	r3, #1
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	b21a      	sxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004e8e:	b21b      	sxth	r3, r3
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <check_fs+0xcc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d001      	beq.n	8004e9e <check_fs+0x52>
		return 2;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e038      	b.n	8004f10 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3336      	adds	r3, #54	; 0x36
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	061a      	lsls	r2, r3, #24
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3336      	adds	r3, #54	; 0x36
 8004eac:	3302      	adds	r3, #2
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	3236      	adds	r2, #54	; 0x36
 8004eb8:	3201      	adds	r2, #1
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	0212      	lsls	r2, r2, #8
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <check_fs+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <check_fs+0x8a>
		return 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e01c      	b.n	8004f10 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3352      	adds	r3, #82	; 0x52
 8004eda:	3303      	adds	r3, #3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	061a      	lsls	r2, r3, #24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3352      	adds	r3, #82	; 0x52
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	041b      	lsls	r3, r3, #16
 8004eea:	4313      	orrs	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	3252      	adds	r2, #82	; 0x52
 8004ef0:	3201      	adds	r2, #1
 8004ef2:	7812      	ldrb	r2, [r2, #0]
 8004ef4:	0212      	lsls	r2, r2, #8
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	4a05      	ldr	r2, [pc, #20]	; (8004f1c <check_fs+0xd0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <check_fs+0xc2>
		return 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <check_fs+0xc4>

	return 1;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	ffffaa55 	.word	0xffffaa55
 8004f1c:	00544146 	.word	0x00544146

08004f20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b096      	sub	sp, #88	; 0x58
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	f7ff ff45 	bl	8004dc4 <get_ldnumber>
 8004f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da01      	bge.n	8004f46 <find_volume+0x26>
 8004f42:	230b      	movs	r3, #11
 8004f44:	e2aa      	b.n	800549c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004f46:	4a9e      	ldr	r2, [pc, #632]	; (80051c0 <find_volume+0x2a0>)
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <find_volume+0x3a>
 8004f56:	230c      	movs	r3, #12
 8004f58:	e2a0      	b.n	800549c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f5e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01b      	beq.n	8004fa2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fb81 	bl	8003678 <disk_status>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <find_volume+0x7e>
 8004f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e27e      	b.n	800549c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e27c      	b.n	800549c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fb76 	bl	80036ac <disk_initialize>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e262      	b.n	800549c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <find_volume+0xcc>
 8004fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004fe8:	230a      	movs	r3, #10
 8004fea:	e257      	b.n	800549c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004ff0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ff4:	f7ff ff2a 	bl	8004e4c <check_fs>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005002:	2b01      	cmp	r3, #1
 8005004:	d155      	bne.n	80050b2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005006:	2300      	movs	r3, #0
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
 800500a:	e029      	b.n	8005060 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800500c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005016:	4413      	add	r3, r2
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	3304      	adds	r3, #4
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <find_volume+0x12a>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	330b      	adds	r3, #11
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	061a      	lsls	r2, r3, #24
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	330a      	adds	r3, #10
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	4313      	orrs	r3, r2
 8005036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005038:	3209      	adds	r2, #9
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	0212      	lsls	r2, r2, #8
 800503e:	4313      	orrs	r3, r2
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	3208      	adds	r2, #8
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	431a      	orrs	r2, r3
 8005048:	e000      	b.n	800504c <find_volume+0x12c>
 800504a:	2200      	movs	r2, #0
 800504c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005054:	440b      	add	r3, r1
 8005056:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800505a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505c:	3301      	adds	r3, #1
 800505e:	643b      	str	r3, [r7, #64]	; 0x40
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	2b03      	cmp	r3, #3
 8005064:	d9d2      	bls.n	800500c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005066:	2300      	movs	r3, #0
 8005068:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <find_volume+0x156>
 8005070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005072:	3b01      	subs	r3, #1
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800507e:	4413      	add	r3, r2
 8005080:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005084:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <find_volume+0x178>
 800508c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800508e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005090:	f7ff fedc 	bl	8004e4c <check_fs>
 8005094:	4603      	mov	r3, r0
 8005096:	e000      	b.n	800509a <find_volume+0x17a>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800509e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <find_volume+0x192>
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	3301      	adds	r3, #1
 80050aa:	643b      	str	r3, [r7, #64]	; 0x40
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d9e1      	bls.n	8005076 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80050b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d101      	bne.n	80050be <find_volume+0x19e>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e1ee      	b.n	800549c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80050be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <find_volume+0x1aa>
 80050c6:	230d      	movs	r3, #13
 80050c8:	e1e8      	b.n	800549c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	7b1b      	ldrb	r3, [r3, #12]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	b21a      	sxth	r2, r3
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	7adb      	ldrb	r3, [r3, #11]
 80050d6:	b21b      	sxth	r3, r3
 80050d8:	4313      	orrs	r3, r2
 80050da:	b21b      	sxth	r3, r3
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d001      	beq.n	80050e6 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 80050e2:	230d      	movs	r3, #13
 80050e4:	e1da      	b.n	800549c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	7ddb      	ldrb	r3, [r3, #23]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	b21a      	sxth	r2, r3
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	7d9b      	ldrb	r3, [r3, #22]
 80050f2:	b21b      	sxth	r3, r3
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b21b      	sxth	r3, r3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d112      	bne.n	8005128 <find_volume+0x208>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005108:	061a      	lsls	r2, r3, #24
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005110:	041b      	lsls	r3, r3, #16
 8005112:	4313      	orrs	r3, r2
 8005114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005116:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800511a:	0212      	lsls	r2, r2, #8
 800511c:	4313      	orrs	r3, r2
 800511e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005120:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005124:	4313      	orrs	r3, r2
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800512c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	7c1a      	ldrb	r2, [r3, #16]
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005140:	2b01      	cmp	r3, #1
 8005142:	d006      	beq.n	8005152 <find_volume+0x232>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800514a:	2b02      	cmp	r3, #2
 800514c:	d001      	beq.n	8005152 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800514e:	230d      	movs	r3, #13
 8005150:	e1a4      	b.n	800549c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005158:	461a      	mov	r2, r3
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	7b5a      	ldrb	r2, [r3, #13]
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <find_volume+0x26c>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800517c:	461a      	mov	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005184:	3b01      	subs	r3, #1
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800518c:	230d      	movs	r3, #13
 800518e:	e185      	b.n	800549c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	7c9b      	ldrb	r3, [r3, #18]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	b21a      	sxth	r2, r3
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	7c5b      	ldrb	r3, [r3, #17]
 800519c:	b21b      	sxth	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b21b      	sxth	r3, r3
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 80051ba:	230d      	movs	r3, #13
 80051bc:	e16e      	b.n	800549c <find_volume+0x57c>
 80051be:	bf00      	nop
 80051c0:	20000050 	.word	0x20000050

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	7d1b      	ldrb	r3, [r3, #20]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b21a      	sxth	r2, r3
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	7cdb      	ldrb	r3, [r3, #19]
 80051d0:	b21b      	sxth	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d112      	bne.n	8005206 <find_volume+0x2e6>
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80051e6:	061a      	lsls	r2, r3, #24
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	4313      	orrs	r3, r2
 80051f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80051f8:	0212      	lsls	r2, r2, #8
 80051fa:	4313      	orrs	r3, r2
 80051fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005202:	4313      	orrs	r3, r2
 8005204:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	7bdb      	ldrb	r3, [r3, #15]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b21a      	sxth	r2, r3
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	7b9b      	ldrb	r3, [r3, #14]
 8005212:	b21b      	sxth	r3, r3
 8005214:	4313      	orrs	r3, r2
 8005216:	b21b      	sxth	r3, r3
 8005218:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800521a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <find_volume+0x304>
 8005220:	230d      	movs	r3, #13
 8005222:	e13b      	b.n	800549c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005224:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	4413      	add	r3, r2
 800522a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005230:	0912      	lsrs	r2, r2, #4
 8005232:	b292      	uxth	r2, r2
 8005234:	4413      	add	r3, r2
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	429a      	cmp	r2, r3
 800523e:	d201      	bcs.n	8005244 <find_volume+0x324>
 8005240:	230d      	movs	r3, #13
 8005242:	e12b      	b.n	800549c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800524c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005250:	fbb3 f3f2 	udiv	r3, r3, r2
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <find_volume+0x340>
 800525c:	230d      	movs	r3, #13
 800525e:	e11d      	b.n	800549c <find_volume+0x57c>
	fmt = FS_FAT12;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	f640 72f5 	movw	r2, #4085	; 0xff5
 800526c:	4293      	cmp	r3, r2
 800526e:	d902      	bls.n	8005276 <find_volume+0x356>
 8005270:	2302      	movs	r3, #2
 8005272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800527c:	4293      	cmp	r3, r2
 800527e:	d902      	bls.n	8005286 <find_volume+0x366>
 8005280:	2303      	movs	r3, #3
 8005282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1c9a      	adds	r2, r3, #2
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005294:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005298:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800529a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529c:	441a      	add	r2, r3
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80052a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	441a      	add	r2, r3
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80052b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d121      	bne.n	80052fc <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <find_volume+0x3a6>
 80052c2:	230d      	movs	r3, #13
 80052c4:	e0ea      	b.n	800549c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80052cc:	061a      	lsls	r2, r3, #24
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	4313      	orrs	r3, r2
 80052d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052da:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80052de:	0212      	lsls	r2, r2, #8
 80052e0:	4313      	orrs	r3, r2
 80052e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052e4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80052e8:	431a      	orrs	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	647b      	str	r3, [r7, #68]	; 0x44
 80052fa:	e025      	b.n	8005348 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <find_volume+0x3ea>
 8005306:	230d      	movs	r3, #13
 8005308:	e0c8      	b.n	800549c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	441a      	add	r2, r3
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800531a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800531e:	2b02      	cmp	r3, #2
 8005320:	d104      	bne.n	800532c <find_volume+0x40c>
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	e00c      	b.n	8005346 <find_volume+0x426>
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	085a      	lsrs	r2, r3, #1
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800534e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005350:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	429a      	cmp	r2, r3
 8005358:	d201      	bcs.n	800535e <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800535a:	230d      	movs	r3, #13
 800535c:	e09e      	b.n	800549c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800537c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005380:	2b03      	cmp	r3, #3
 8005382:	d177      	bne.n	8005474 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b21a      	sxth	r2, r3
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005394:	b21b      	sxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b21b      	sxth	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d16a      	bne.n	8005474 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800539e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a0:	3301      	adds	r3, #1
 80053a2:	4619      	mov	r1, r3
 80053a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053a6:	f7fe fc76 	bl	8003c96 <move_window>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d161      	bne.n	8005474 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	b21a      	sxth	r2, r3
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80053c8:	b21b      	sxth	r3, r3
 80053ca:	4313      	orrs	r3, r2
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <find_volume+0x584>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d14f      	bne.n	8005474 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	78db      	ldrb	r3, [r3, #3]
 80053d8:	061a      	lsls	r2, r3, #24
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	789b      	ldrb	r3, [r3, #2]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	4313      	orrs	r3, r2
 80053e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e4:	7852      	ldrb	r2, [r2, #1]
 80053e6:	0212      	lsls	r2, r2, #8
 80053e8:	4313      	orrs	r3, r2
 80053ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <find_volume+0x588>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d13e      	bne.n	8005474 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80053fc:	061a      	lsls	r2, r3, #24
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	4313      	orrs	r3, r2
 8005408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800540a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800540e:	0212      	lsls	r2, r2, #8
 8005410:	4313      	orrs	r3, r2
 8005412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005414:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005418:	4313      	orrs	r3, r2
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <find_volume+0x58c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d129      	bne.n	8005474 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005426:	061a      	lsls	r2, r3, #24
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	4313      	orrs	r3, r2
 8005432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005434:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005438:	0212      	lsls	r2, r2, #8
 800543a:	4313      	orrs	r3, r2
 800543c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800543e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005442:	431a      	orrs	r2, r3
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005450:	061a      	lsls	r2, r3, #24
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	4313      	orrs	r3, r2
 800545c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800545e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005462:	0212      	lsls	r2, r2, #8
 8005464:	4313      	orrs	r3, r2
 8005466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005468:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800546c:	431a      	orrs	r2, r3
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800547a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <find_volume+0x590>)
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <find_volume+0x590>)
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <find_volume+0x590>)
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005496:	f7fe fb8d 	bl	8003bb4 <clear_lock>
#endif

	return FR_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3758      	adds	r7, #88	; 0x58
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	ffffaa55 	.word	0xffffaa55
 80054a8:	41615252 	.word	0x41615252
 80054ac:	61417272 	.word	0x61417272
 80054b0:	20000054 	.word	0x20000054

080054b4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d022      	beq.n	800550c <validate+0x58>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01d      	beq.n	800550c <validate+0x58>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <validate+0x58>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054e4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d10c      	bne.n	800550c <validate+0x58>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054f8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe f8bb 	bl	8003678 <disk_status>
 8005502:	4603      	mov	r3, r0
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800550c:	2309      	movs	r3, #9
 800550e:	e000      	b.n	8005512 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fc46 	bl	8004dc4 <get_ldnumber>
 8005538:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da01      	bge.n	8005544 <f_mount+0x28>
 8005540:	230b      	movs	r3, #11
 8005542:	e02d      	b.n	80055a0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <f_mount+0x8c>)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005554:	69b8      	ldr	r0, [r7, #24]
 8005556:	f7fe fb2d 	bl	8003bb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	490d      	ldr	r1, [pc, #52]	; (80055a8 <f_mount+0x8c>)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <f_mount+0x6a>
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d001      	beq.n	800558a <f_mount+0x6e>
 8005586:	2300      	movs	r3, #0
 8005588:	e00a      	b.n	80055a0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800558a:	f107 0108 	add.w	r1, r7, #8
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	2200      	movs	r2, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fcc3 	bl	8004f20 <find_volume>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800559e:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000050 	.word	0x20000050

080055ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f107 030c 	add.w	r3, r7, #12
 80055b8:	6018      	str	r0, [r3, #0]
 80055ba:	f107 0308 	add.w	r3, r7, #8
 80055be:	6019      	str	r1, [r3, #0]
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80055c4:	f107 030c 	add.w	r3, r7, #12
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <f_open+0x26>
 80055ce:	2309      	movs	r3, #9
 80055d0:	e1f2      	b.n	80059b8 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 80055d2:	f107 030c 	add.w	r3, r7, #12
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	1dfa      	adds	r2, r7, #7
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	f002 021f 	and.w	r2, r2, #31
 80055e8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80055ea:	1dfb      	adds	r3, r7, #7
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	f107 0108 	add.w	r1, r7, #8
 80055f8:	f107 0320 	add.w	r3, r7, #32
 80055fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fc8d 	bl	8004f20 <find_volume>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800560c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 81cf 	bne.w	80059b4 <f_open+0x408>
		INIT_BUF(dj);
 8005616:	f107 0320 	add.w	r3, r7, #32
 800561a:	f107 0214 	add.w	r2, r7, #20
 800561e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005622:	f107 0308 	add.w	r3, r7, #8
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f107 0320 	add.w	r3, r7, #32
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fb5a 	bl	8004ce8 <follow_path>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800563a:	f107 0320 	add.w	r3, r7, #32
 800563e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005642:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005646:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11a      	bne.n	8005684 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800564e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8005656:	2306      	movs	r3, #6
 8005658:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800565c:	e012      	b.n	8005684 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	f107 0320 	add.w	r3, r7, #32
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe f911 	bl	80038a0 <chk_lock>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005684:	1dfb      	adds	r3, r7, #7
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f003 031c 	and.w	r3, r3, #28
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80cc 	beq.w	800582a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8005692:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01f      	beq.n	80056da <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800569a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d10e      	bne.n	80056c0 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80056a2:	f7fe f969 	bl	8003978 <enq_lock>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <f_open+0x10e>
 80056ac:	f107 0320 	add.w	r3, r7, #32
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f9af 	bl	8004a14 <dir_register>
 80056b6:	4603      	mov	r3, r0
 80056b8:	e000      	b.n	80056bc <f_open+0x110>
 80056ba:	2312      	movs	r3, #18
 80056bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056c0:	1dfb      	adds	r3, r7, #7
 80056c2:	1dfa      	adds	r2, r7, #7
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	f042 0208 	orr.w	r2, r2, #8
 80056ca:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80056cc:	f107 0320 	add.w	r3, r7, #32
 80056d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056d4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80056d8:	e014      	b.n	8005704 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80056da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80056de:	330b      	adds	r3, #11
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f003 0311 	and.w	r3, r3, #17
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <f_open+0x146>
					res = FR_DENIED;
 80056ea:	2307      	movs	r3, #7
 80056ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80056f0:	e008      	b.n	8005704 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80056f2:	1dfb      	adds	r3, r7, #7
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <f_open+0x158>
						res = FR_EXIST;
 80056fe:	2308      	movs	r3, #8
 8005700:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005704:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 80af 	bne.w	800586c <f_open+0x2c0>
 800570e:	1dfb      	adds	r3, r7, #7
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80a8 	beq.w	800586c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800571c:	f7fd f952 	bl	80029c4 <get_fattime>
 8005720:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005724:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005728:	330e      	adds	r3, #14
 800572a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005736:	b29b      	uxth	r3, r3
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	b29a      	uxth	r2, r3
 800573c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005740:	330f      	adds	r3, #15
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800574a:	0c1a      	lsrs	r2, r3, #16
 800574c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005750:	3310      	adds	r3, #16
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800575a:	0e1a      	lsrs	r2, r3, #24
 800575c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005760:	3311      	adds	r3, #17
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005766:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800576a:	330b      	adds	r3, #11
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005770:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005774:	331c      	adds	r3, #28
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800577e:	331d      	adds	r3, #29
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005788:	331e      	adds	r3, #30
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005792:	331f      	adds	r3, #31
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005798:	f107 0320 	add.w	r3, r7, #32
 800579c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff f834 	bl	8004812 <ld_clust>
 80057aa:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80057ae:	2100      	movs	r1, #0
 80057b0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80057b4:	f7ff f85a 	bl	800486c <st_clust>
				dj.fs->wflag = 1;
 80057b8:	f107 0320 	add.w	r3, r7, #32
 80057bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80057c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d04e      	beq.n	800586c <f_open+0x2c0>
					dw = dj.fs->winsect;
 80057ce:	f107 0320 	add.w	r3, r7, #32
 80057d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80057da:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057e6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fd11 	bl	8004212 <remove_chain>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80057f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d136      	bne.n	800586c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80057fe:	f107 0320 	add.w	r3, r7, #32
 8005802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005806:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800580a:	3a01      	subs	r2, #1
 800580c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005810:	f107 0320 	add.w	r3, r7, #32
 8005814:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005818:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fa3a 	bl	8003c96 <move_window>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005828:	e020      	b.n	800586c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800582a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11c      	bne.n	800586c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005832:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005836:	330b      	adds	r3, #11
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <f_open+0x29e>
					res = FR_NO_FILE;
 8005842:	2304      	movs	r3, #4
 8005844:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005848:	e010      	b.n	800586c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800584a:	1dfb      	adds	r3, r7, #7
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <f_open+0x2c0>
 8005856:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800585a:	330b      	adds	r3, #11
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <f_open+0x2c0>
						res = FR_DENIED;
 8005866:	2307      	movs	r3, #7
 8005868:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800586c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005870:	2b00      	cmp	r3, #0
 8005872:	d13d      	bne.n	80058f0 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005874:	1dfb      	adds	r3, r7, #7
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8005880:	1dfb      	adds	r3, r7, #7
 8005882:	1dfa      	adds	r2, r7, #7
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	f042 0220 	orr.w	r2, r2, #32
 800588a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800588c:	f107 0320 	add.w	r3, r7, #32
 8005890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005894:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80058a2:	f107 030c 	add.w	r3, r7, #12
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80058ac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	f107 0320 	add.w	r3, r7, #32
 80058c8:	4611      	mov	r1, r2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe f878 	bl	80039c0 <inc_lock>
 80058d0:	4602      	mov	r2, r0
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <f_open+0x344>
 80058ea:	2302      	movs	r3, #2
 80058ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80058f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d15d      	bne.n	80059b4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	1dfa      	adds	r2, r7, #7
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005912:	f107 0320 	add.w	r3, r7, #32
 8005916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800591a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe ff77 	bl	8004812 <ld_clust>
 8005924:	4602      	mov	r2, r0
 8005926:	f107 030c 	add.w	r3, r7, #12
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005930:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005934:	331f      	adds	r3, #31
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	061a      	lsls	r2, r3, #24
 800593a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800593e:	331e      	adds	r3, #30
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	4313      	orrs	r3, r2
 8005946:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800594a:	321d      	adds	r2, #29
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4313      	orrs	r3, r2
 8005952:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005956:	321c      	adds	r2, #28
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	431a      	orrs	r2, r3
 800595c:	f107 030c 	add.w	r3, r7, #12
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8005966:	f107 030c 	add.w	r3, r7, #12
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800597e:	f107 030c 	add.w	r3, r7, #12
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2200      	movs	r2, #0
 8005986:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800598a:	f107 0320 	add.w	r3, r7, #32
 800598e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005992:	f107 030c 	add.w	r3, r7, #12
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800599c:	f107 030c 	add.w	r3, r7, #12
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80059aa:	f107 030c 	add.w	r3, r7, #12
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80059b4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b08c      	sub	sp, #48	; 0x30
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fd6a 	bl	80054b4 <validate>
 80059e0:	4603      	mov	r3, r0
 80059e2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80059e4:	7ffb      	ldrb	r3, [r7, #31]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <f_read+0x2c>
 80059ea:	7ffb      	ldrb	r3, [r7, #31]
 80059ec:	e150      	b.n	8005c90 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80059fe:	e147      	b.n	8005c90 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005a0e:	2307      	movs	r3, #7
 8005a10:	e13e      	b.n	8005c90 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	f240 812d 	bls.w	8005c86 <f_read+0x2c4>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005a30:	e129      	b.n	8005c86 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 80f2 	bne.w	8005c26 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a48:	0a5b      	lsrs	r3, r3, #9
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a52:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d139      	bne.n	8005ad8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	e018      	b.n	8005aaa <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a88:	4619      	mov	r1, r3
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7fe fcb8 	bl	8004400 <clmt_clust>
 8005a90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a92:	e00a      	b.n	8005aaa <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe f9f3 	bl	8003e8e <get_fat>
 8005aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d805      	bhi.n	8005abc <f_read+0xfa>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0e9      	b.n	8005c90 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d105      	bne.n	8005ad0 <f_read+0x10e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0df      	b.n	8005c90 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f7fe f9b0 	bl	8003e4c <clust2sect>
 8005aec:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <f_read+0x13e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0c7      	b.n	8005c90 <f_read+0x2ce>
			sect += csect;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	0a5b      	lsrs	r3, r3, #9
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d046      	beq.n	8005ba2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005b14:	7dfa      	ldrb	r2, [r7, #23]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	4413      	add	r3, r2
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005b20:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d908      	bls.n	8005b3a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b2e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b32:	461a      	mov	r2, r3
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b40:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	6a39      	ldr	r1, [r7, #32]
 8005b4a:	f7fd fdd5 	bl	80036f8 <disk_read>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e097      	b.n	8005c90 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <f_read+0x1d8>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d90d      	bls.n	8005b9a <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	025b      	lsls	r3, r3, #9
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fd fe0d 	bl	80037b4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	025b      	lsls	r3, r3, #9
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005ba0:	e05b      	b.n	8005c5a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d037      	beq.n	8005c1e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01d      	beq.n	8005bf8 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bc2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f7fd fdb2 	bl	8003738 <disk_write>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005be2:	2301      	movs	r3, #1
 8005be4:	e054      	b.n	8005c90 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bfe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	2301      	movs	r3, #1
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	f7fd fd76 	bl	80036f8 <disk_read>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e038      	b.n	8005c90 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d901      	bls.n	8005c42 <f_read+0x280>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c52:	4619      	mov	r1, r3
 8005c54:	6a38      	ldr	r0, [r7, #32]
 8005c56:	f7fd fdad 	bl	80037b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005c5a:	6a3a      	ldr	r2, [r7, #32]
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	4413      	add	r3, r2
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	441a      	add	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f aed2 	bne.w	8005a32 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3730      	adds	r7, #48	; 0x30
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fc07 	bl	80054b4 <validate>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 80a8 	bne.w	8005e02 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80a0 	beq.w	8005e02 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d019      	beq.n	8005d04 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f7fd fd28 	bl	8003738 <disk_write>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e088      	b.n	8005e04 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fd ffbf 	bl	8003c96 <move_window>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d16f      	bne.n	8005e02 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005d28:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	330b      	adds	r3, #11
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	330b      	adds	r3, #11
 8005d34:	f042 0220 	orr.w	r2, r2, #32
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	331c      	adds	r3, #28
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	331d      	adds	r3, #29
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005d64:	0c1a      	lsrs	r2, r3, #16
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	331e      	adds	r3, #30
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005d74:	0e1a      	lsrs	r2, r3, #24
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	331f      	adds	r3, #31
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d84:	4619      	mov	r1, r3
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f7fe fd70 	bl	800486c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005d8c:	f7fc fe1a 	bl	80029c4 <get_fattime>
 8005d90:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	3316      	adds	r3, #22
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3317      	adds	r3, #23
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0c1a      	lsrs	r2, r3, #16
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3318      	adds	r3, #24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	0e1a      	lsrs	r2, r3, #24
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	3319      	adds	r3, #25
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	3312      	adds	r3, #18
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3313      	adds	r3, #19
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd ff7a 	bl	8003cf2 <sync_fs>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff ff3f 	bl	8005c98 <f_sync>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d116      	bne.n	8005e52 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fb45 	bl	80054b4 <validate>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10e      	bne.n	8005e52 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fe76 	bl	8003b2c <dec_lock>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <f_opendir+0x14>
 8005e6c:	2309      	movs	r3, #9
 8005e6e:	e073      	b.n	8005f58 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8005e70:	4639      	mov	r1, r7
 8005e72:	f107 0318 	add.w	r3, r7, #24
 8005e76:	2200      	movs	r2, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff f851 	bl	8004f20 <find_volume>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8005e82:	7ffb      	ldrb	r3, [r7, #31]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d15f      	bne.n	8005f48 <f_opendir+0xec>
		dp->fs = fs;
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f107 020c 	add.w	r2, r7, #12
 8005e96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fe ff22 	bl	8004ce8 <follow_path>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d147      	bne.n	8005f3e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ebe:	330b      	adds	r3, #11
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7fe fc9c 	bl	8004812 <ld_clust>
 8005eda:	4602      	mov	r2, r0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005ee2:	e001      	b.n	8005ee8 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8005ee4:	2305      	movs	r3, #5
 8005ee6:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8005ee8:	7ffb      	ldrb	r3, [r7, #31]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d127      	bne.n	8005f3e <f_opendir+0xe2>
				dp->id = fs->id;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005efa:	2100      	movs	r1, #0
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fe fab3 	bl	8004468 <dir_sdi>
 8005f02:	4603      	mov	r3, r0
 8005f04:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d118      	bne.n	8005f3e <f_opendir+0xe2>
					if (dp->sclust) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00f      	beq.n	8005f36 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fd fd51 	bl	80039c0 <inc_lock>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8005f30:	2312      	movs	r3, #18
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e003      	b.n	8005f3e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d101      	bne.n	8005f48 <f_opendir+0xec>
 8005f44:	2305      	movs	r3, #5
 8005f46:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <f_opendir+0xfa>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff faa3 	bl	80054b4 <validate>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d113      	bne.n	8005fa0 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fdcf 	bl	8003b2c <dec_lock>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fa7d 	bl	80054b4 <validate>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d133      	bne.n	800602c <f_readdir+0x82>
		if (!fno) {
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005fca:	2100      	movs	r1, #0
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fe fa4b 	bl	8004468 <dir_sdi>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]
 8005fd6:	e029      	b.n	800602c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f107 0208 	add.w	r2, r7, #8
 8005fde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fe fcb6 	bl	8004956 <dir_read>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d105      	bne.n	8006000 <f_readdir+0x56>
				dp->sect = 0;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d112      	bne.n	800602c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fe fd3c 	bl	8004a86 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800600e:	2100      	movs	r1, #0
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fe fabd 	bl	8004590 <dir_next>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d105      	bne.n	800602c <f_readdir+0x82>
					dp->sect = 0;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006050:	7a5b      	ldrb	r3, [r3, #9]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d831      	bhi.n	80060bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 800605a:	7a5b      	ldrb	r3, [r3, #9]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006062:	2100      	movs	r1, #0
 8006064:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006068:	7a5b      	ldrb	r3, [r3, #9]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006078:	7a5b      	ldrb	r3, [r3, #9]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006080:	4413      	add	r3, r2
 8006082:	79fa      	ldrb	r2, [r7, #7]
 8006084:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006088:	7a5b      	ldrb	r3, [r3, #9]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	b2d1      	uxtb	r1, r2
 8006090:	4a0d      	ldr	r2, [pc, #52]	; (80060c8 <FATFS_LinkDriverEx+0x90>)
 8006092:	7251      	strb	r1, [r2, #9]
 8006094:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006096:	7dbb      	ldrb	r3, [r7, #22]
 8006098:	3330      	adds	r3, #48	; 0x30
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3301      	adds	r3, #1
 80060a4:	223a      	movs	r2, #58	; 0x3a
 80060a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	3302      	adds	r3, #2
 80060ac:	222f      	movs	r2, #47	; 0x2f
 80060ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3303      	adds	r3, #3
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	20000070 	.word	0x20000070

080060cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80060d6:	2200      	movs	r2, #0
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff ffac 	bl	8006038 <FATFS_LinkDriverEx>
 80060e0:	4603      	mov	r3, r0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	2500      	movs	r5, #0
 80060f0:	4e0c      	ldr	r6, [pc, #48]	; (8006124 <__libc_init_array+0x38>)
 80060f2:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f4:	1ba4      	subs	r4, r4, r6
 80060f6:	10a4      	asrs	r4, r4, #2
 80060f8:	42a5      	cmp	r5, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	f000 f838 	bl	8006170 <_init>
 8006100:	2500      	movs	r5, #0
 8006102:	4e0a      	ldr	r6, [pc, #40]	; (800612c <__libc_init_array+0x40>)
 8006104:	4c0a      	ldr	r4, [pc, #40]	; (8006130 <__libc_init_array+0x44>)
 8006106:	1ba4      	subs	r4, r4, r6
 8006108:	10a4      	asrs	r4, r4, #2
 800610a:	42a5      	cmp	r5, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006114:	4798      	blx	r3
 8006116:	3501      	adds	r5, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611e:	4798      	blx	r3
 8006120:	3501      	adds	r5, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	08006e08 	.word	0x08006e08
 8006128:	08006e08 	.word	0x08006e08
 800612c:	08006e08 	.word	0x08006e08
 8006130:	08006e0c 	.word	0x08006e0c

08006134 <memset>:
 8006134:	4603      	mov	r3, r0
 8006136:	4402      	add	r2, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <strncpy>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4604      	mov	r4, r0
 8006148:	3901      	subs	r1, #1
 800614a:	b902      	cbnz	r2, 800614e <strncpy+0xa>
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	4623      	mov	r3, r4
 8006150:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006154:	1e56      	subs	r6, r2, #1
 8006156:	f803 5b01 	strb.w	r5, [r3], #1
 800615a:	b92d      	cbnz	r5, 8006168 <strncpy+0x24>
 800615c:	4414      	add	r4, r2
 800615e:	42a3      	cmp	r3, r4
 8006160:	d0f4      	beq.n	800614c <strncpy+0x8>
 8006162:	f803 5b01 	strb.w	r5, [r3], #1
 8006166:	e7fa      	b.n	800615e <strncpy+0x1a>
 8006168:	461c      	mov	r4, r3
 800616a:	4632      	mov	r2, r6
 800616c:	e7ed      	b.n	800614a <strncpy+0x6>
	...

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
