
FW_CableTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dac  08009dac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009dac  08009dac  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dac  08009dac  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dac  08009dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001fc  08009fb0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  08009fb0  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178a3  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a24  00000000  00000000  00037ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  0003b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c347  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000118ed  00000000  00000000  0005940f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cdba  00000000  00000000  0006acfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7ab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004328  00000000  00000000  000f7b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800910c 	.word	0x0800910c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	0800910c 	.word	0x0800910c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	4907      	ldr	r1, [pc, #28]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4313      	orrs	r3, r2
 800016e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4013      	ands	r3, r2
 8000178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8000190:	2040      	movs	r0, #64	; 0x40
 8000192:	f7ff ffe3 	bl	800015c <LL_AHB1_GRP1_EnableClock>

}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Display>:
void DisplayChekSchem(typeEnv *Env);
void DisplayTest(typeEnv *Env);
void DisplayResult(typeEnv *Env);

void Display(typeEnv *Env)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	uint8_t mode = (*Env).Mode;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80001aa:	73fb      	strb	r3, [r7, #15]
	if(f_RefreshScreen == 1)
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <Display+0x8c>)
 80001ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001b2:	015b      	lsls	r3, r3, #5
 80001b4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001b8:	f043 0314 	orr.w	r3, r3, #20
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d12a      	bne.n	8000218 <Display+0x7c>
	{
		f_RefreshScreen = 0;
 80001c2:	4b19      	ldr	r3, [pc, #100]	; (8000228 <Display+0x8c>)
 80001c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001c8:	015b      	lsls	r3, r3, #5
 80001ca:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001ce:	f043 0314 	orr.w	r3, r3, #20
 80001d2:	461a      	mov	r2, r3
 80001d4:	2300      	movs	r3, #0
 80001d6:	6013      	str	r3, [r2, #0]


		switch(mode)	// назначить действие в зависимости от текущего режима
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	3b01      	subs	r3, #1
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d81d      	bhi.n	800021c <Display+0x80>
 80001e0:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <Display+0x4c>)
 80001e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e6:	bf00      	nop
 80001e8:	080001f9 	.word	0x080001f9
 80001ec:	08000201 	.word	0x08000201
 80001f0:	08000209 	.word	0x08000209
 80001f4:	08000211 	.word	0x08000211
					{
						case MENU: 			DisplayMenu(Env); 		break;
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f000 f817 	bl	800022c <DisplayMenu>
 80001fe:	e00e      	b.n	800021e <Display+0x82>
						case CHECK_SCHEME: 	DisplayChekSchem(Env);  	break;
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 f86f 	bl	80002e4 <DisplayChekSchem>
 8000206:	e00a      	b.n	800021e <Display+0x82>
						case TEST: 			DisplayTest(Env);			break;
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f000 f957 	bl	80004bc <DisplayTest>
 800020e:	e006      	b.n	800021e <Display+0x82>
						case RESULT: 		DisplayResult(Env);		break;
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 f979 	bl	8000508 <DisplayResult>
 8000216:	e002      	b.n	800021e <Display+0x82>
							default: break;
					}

	}
 8000218:	bf00      	nop
 800021a:	e000      	b.n	800021e <Display+0x82>
							default: break;
 800021c:	bf00      	nop
//	ST7735_DrawChar(110,40, LatStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar(110,52, lat_str,TXT_COLOR,BGR_COLOR);
//	//ST7735_DrawChar(110,64, 0x7f,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,80, CyrStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,92, cyr_str,TXT_COLOR,BGR_COLOR);
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200003f8 	.word	0x200003f8

0800022c <DisplayMenu>:

void DisplayMenu(typeEnv *Env)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b09e      	sub	sp, #120	; 0x78
 8000230:	af02      	add	r7, sp, #8
 8000232:	6078      	str	r0, [r7, #4]
	ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];
	ST7735_ListBox FileList;
	uint32_t selectedFile = Env->Menu.ActiveItem;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800023a:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000240:	667b      	str	r3, [r7, #100]	; 0x64

	for(uint32_t index =0; index < end_list; index++)
 8000242:	2300      	movs	r3, #0
 8000244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000246:	e021      	b.n	800028c <DisplayMenu+0x60>
				{
					Files_on_SD[index].text  = &(Env->Menu.FileList[index]);
 8000248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800024a:	4613      	mov	r3, r2
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	4413      	add	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	441a      	add	r2, r3
 8000258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800025a:	00db      	lsls	r3, r3, #3
 800025c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000260:	440b      	add	r3, r1
 8000262:	f843 2c54 	str.w	r2, [r3, #-84]
					Files_on_SD[index].visible=1;
 8000266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800026e:	4413      	add	r3, r2
 8000270:	2201      	movs	r2, #1
 8000272:	f803 2c50 	strb.w	r2, [r3, #-80]
					Files_on_SD[index].selected=0;
 8000276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800027e:	4413      	add	r3, r2
 8000280:	2200      	movs	r2, #0
 8000282:	f803 2c4f 	strb.w	r2, [r3, #-79]
	for(uint32_t index =0; index < end_list; index++)
 8000286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000288:	3301      	adds	r3, #1
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800028c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800028e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000290:	429a      	cmp	r2, r3
 8000292:	d3d9      	bcc.n	8000248 <DisplayMenu+0x1c>
				}
			ST7735_ListBox_StructInit(&FileList,0,0,&Files_on_SD,end_list);
 8000294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f107 021c 	add.w	r2, r7, #28
 800029c:	f107 0008 	add.w	r0, r7, #8
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	4613      	mov	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	2100      	movs	r1, #0
 80002a8:	f002 fdde 	bl	8002e68 <ST7735_ListBox_StructInit>
			Files_on_SD[selectedFile].selected=1;
 80002ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80002b4:	4413      	add	r3, r2
 80002b6:	2201      	movs	r2, #1
 80002b8:	f803 2c4f 	strb.w	r2, [r3, #-79]
			FileList.BackgroundColor = BGR_COLOR;
 80002bc:	2311      	movs	r3, #17
 80002be:	81fb      	strh	r3, [r7, #14]
			FileList.BorderColor	=	BRD_COLOR;
 80002c0:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80002c4:	81bb      	strh	r3, [r7, #12]
			FileList.ItemTextColor	=	TXT_COLOR;
 80002c6:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80002ca:	823b      	strh	r3, [r7, #16]
			FileList.SelectedItemColor	=SEL_COLOR;
 80002cc:	231f      	movs	r3, #31
 80002ce:	827b      	strh	r3, [r7, #18]
			ST7735_ListBox_Draw(&FileList);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd15 	bl	8002d04 <ST7735_ListBox_Draw>
}
 80002da:	bf00      	nop
 80002dc:	3770      	adds	r7, #112	; 0x70
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <DisplayChekSchem>:

void DisplayChekSchem(typeEnv *Env)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0a6      	sub	sp, #152	; 0x98
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	6078      	str	r0, [r7, #4]
	char X1[NLin*2] = {0};
 80002ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002f0:	2240      	movs	r2, #64	; 0x40
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f007 fdf2 	bl	8007ede <memset>
	char X2[NLin*2] = {0};
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f007 fdeb 	bl	8007ede <memset>
	char str[4]={0};
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
	uint8_t MaxLen = (*Env).RealDataSize;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8000312:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	ST7735_Clear(BGR_COLOR);
 8000316:	2011      	movs	r0, #17
 8000318:	f002 fb0c 	bl	8002934 <ST7735_Clear>
	ST7735_DrawRectangle (3,3,150,35,TXT_COLOR);
 800031c:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2323      	movs	r3, #35	; 0x23
 8000324:	2296      	movs	r2, #150	; 0x96
 8000326:	2103      	movs	r1, #3
 8000328:	2003      	movs	r0, #3
 800032a:	f002 fcab 	bl	8002c84 <ST7735_DrawRectangle>
	for(uint8_t i=0; i<9; i++)
 800032e:	2300      	movs	r3, #0
 8000330:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000334:	e02e      	b.n	8000394 <DisplayChekSchem+0xb0>
	{
		sprintf(str, "%d ", Env->DataForTest[0][i]);
 8000336:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	3324      	adds	r3, #36	; 0x24
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	495b      	ldr	r1, [pc, #364]	; (80004b8 <DisplayChekSchem+0x1d4>)
 800034a:	4618      	mov	r0, r3
 800034c:	f007 fdd0 	bl	8007ef0 <siprintf>
		strcat( &X1, &str);
 8000350:	f107 0208 	add.w	r2, r7, #8
 8000354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f007 fe14 	bl	8007f88 <strcat>

		sprintf(str, "%d ", Env->DataForTest[1][i]);
 8000360:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	3344      	adds	r3, #68	; 0x44
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4413      	add	r3, r2
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4951      	ldr	r1, [pc, #324]	; (80004b8 <DisplayChekSchem+0x1d4>)
 8000374:	4618      	mov	r0, r3
 8000376:	f007 fdbb 	bl	8007ef0 <siprintf>
		strcat( &X2, &str);
 800037a:	f107 0208 	add.w	r2, r7, #8
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4611      	mov	r1, r2
 8000384:	4618      	mov	r0, r3
 8000386:	f007 fdff 	bl	8007f88 <strcat>
	for(uint8_t i=0; i<9; i++)
 800038a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800038e:	3301      	adds	r3, #1
 8000390:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000394:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000398:	2b08      	cmp	r3, #8
 800039a:	d9cc      	bls.n	8000336 <DisplayChekSchem+0x52>
//
//		ST7735_DrawChar7x11(5+(i*14),5, X1[i*2],TXT_COLOR,BGR_COLOR);
//		ST7735_DrawChar7x11(5+(i*14),22,X2[i*2],TXT_COLOR,BGR_COLOR);
	}
	ST7735_DrawString7x11(7,7,X1,TXT_COLOR,BGR_COLOR);
 800039c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80003a0:	2311      	movs	r3, #17
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003a8:	2107      	movs	r1, #7
 80003aa:	2007      	movs	r0, #7
 80003ac:	f002 fc08 	bl	8002bc0 <ST7735_DrawString7x11>
	ST7735_DrawString7x11(7,25,X2,TXT_COLOR,BGR_COLOR);
 80003b0:	f107 020c 	add.w	r2, r7, #12
 80003b4:	2311      	movs	r3, #17
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003bc:	2119      	movs	r1, #25
 80003be:	2007      	movs	r0, #7
 80003c0:	f002 fbfe 	bl	8002bc0 <ST7735_DrawString7x11>
	if(MaxLen >9)
 80003c4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80003c8:	2b09      	cmp	r3, #9
 80003ca:	d971      	bls.n	80004b0 <DisplayChekSchem+0x1cc>
	{
		memset(&X1,0,NLin);
 80003cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003d0:	2220      	movs	r2, #32
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f007 fd82 	bl	8007ede <memset>
		memset(&X2,0,NLin);
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2220      	movs	r2, #32
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f007 fd7b 	bl	8007ede <memset>
		ST7735_DrawRectangle (3,48,150,35,TXT_COLOR);
 80003e8:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2323      	movs	r3, #35	; 0x23
 80003f0:	2296      	movs	r2, #150	; 0x96
 80003f2:	2130      	movs	r1, #48	; 0x30
 80003f4:	2003      	movs	r0, #3
 80003f6:	f002 fc45 	bl	8002c84 <ST7735_DrawRectangle>
		for(uint8_t i=9; i<MaxLen; i++)
 80003fa:	2309      	movs	r3, #9
 80003fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000400:	e03c      	b.n	800047c <DisplayChekSchem+0x198>
			{
				memset(&str,0,4);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2204      	movs	r2, #4
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f007 fd67 	bl	8007ede <memset>
				sprintf(str, "%d ", Env->DataForTest[0][i]);
 8000410:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	3324      	adds	r3, #36	; 0x24
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4925      	ldr	r1, [pc, #148]	; (80004b8 <DisplayChekSchem+0x1d4>)
 8000424:	4618      	mov	r0, r3
 8000426:	f007 fd63 	bl	8007ef0 <siprintf>
				strcat( &X1, &str);
 800042a:	f107 0208 	add.w	r2, r7, #8
 800042e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f007 fda7 	bl	8007f88 <strcat>
				memset(&str,0,4);
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	2204      	movs	r2, #4
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f007 fd4b 	bl	8007ede <memset>
				sprintf(str, "%d ", Env->DataForTest[1][i]);
 8000448:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	3344      	adds	r3, #68	; 0x44
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4917      	ldr	r1, [pc, #92]	; (80004b8 <DisplayChekSchem+0x1d4>)
 800045c:	4618      	mov	r0, r3
 800045e:	f007 fd47 	bl	8007ef0 <siprintf>
				strcat( &X2, &str);
 8000462:	f107 0208 	add.w	r2, r7, #8
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f007 fd8b 	bl	8007f88 <strcat>
		for(uint8_t i=9; i<MaxLen; i++)
 8000472:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000476:	3301      	adds	r3, #1
 8000478:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800047c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000480:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000484:	429a      	cmp	r2, r3
 8000486:	d3bc      	bcc.n	8000402 <DisplayChekSchem+0x11e>
//				sprintf(&X1[i*2], "%d", Env->DataForTest[0][i]);
//				sprintf(&X2[i*2], "%d", Env->DataForTest[1][i]);
//				ST7735_DrawChar7x11(5+((i-9)*14),50, X1[i*2],TXT_COLOR,BGR_COLOR);
//				ST7735_DrawChar7x11(5+((i-9)*14),67, X2[i*2],TXT_COLOR,BGR_COLOR);
			}
		ST7735_DrawString7x11(7,50,&X1,TXT_COLOR,BGR_COLOR);
 8000488:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800048c:	2311      	movs	r3, #17
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000494:	2132      	movs	r1, #50	; 0x32
 8000496:	2007      	movs	r0, #7
 8000498:	f002 fb92 	bl	8002bc0 <ST7735_DrawString7x11>
		ST7735_DrawString7x11(7,67,&X2,TXT_COLOR,BGR_COLOR);
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	2311      	movs	r3, #17
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80004a8:	2143      	movs	r1, #67	; 0x43
 80004aa:	2007      	movs	r0, #7
 80004ac:	f002 fb88 	bl	8002bc0 <ST7735_DrawString7x11>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3790      	adds	r7, #144	; 0x90
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	08009124 	.word	0x08009124

080004bc <DisplayTest>:

void DisplayTest(typeEnv *Env)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	char EncoderString[12] = "Test";
 80004c4:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <DisplayTest+0x48>)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ce:	6018      	str	r0, [r3, #0]
 80004d0:	3304      	adds	r3, #4
 80004d2:	7019      	strb	r1, [r3, #0]
 80004d4:	f107 0311 	add.w	r3, r7, #17
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f8c3 2003 	str.w	r2, [r3, #3]
	ST7735_Clear(BGR_COLOR);
 80004e0:	2011      	movs	r0, #17
 80004e2:	f002 fa27 	bl	8002934 <ST7735_Clear>
	ST7735_DrawString7x11(1,1,EncoderString,TXT_COLOR,BGR_COLOR);
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	2311      	movs	r3, #17
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80004f2:	2101      	movs	r1, #1
 80004f4:	2001      	movs	r0, #1
 80004f6:	f002 fb63 	bl	8002bc0 <ST7735_DrawString7x11>
}
 80004fa:	bf00      	nop
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	08009128 	.word	0x08009128

08000508 <DisplayResult>:

void DisplayResult(typeEnv *Env)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af02      	add	r7, sp, #8
 800050e:	6078      	str	r0, [r7, #4]
	char EncoderString[12] = "Result";
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <DisplayResult+0x4c>)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051a:	6018      	str	r0, [r3, #0]
 800051c:	3304      	adds	r3, #4
 800051e:	8019      	strh	r1, [r3, #0]
 8000520:	3302      	adds	r3, #2
 8000522:	0c0a      	lsrs	r2, r1, #16
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	f107 0313 	add.w	r3, r7, #19
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	711a      	strb	r2, [r3, #4]
	ST7735_Clear(BGR_COLOR);
 8000530:	2011      	movs	r0, #17
 8000532:	f002 f9ff 	bl	8002934 <ST7735_Clear>
	ST7735_DrawString7x11(1,1,EncoderString,TXT_COLOR,BGR_COLOR);
 8000536:	f107 020c 	add.w	r2, r7, #12
 800053a:	2311      	movs	r3, #17
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000542:	2101      	movs	r1, #1
 8000544:	2001      	movs	r0, #1
 8000546:	f002 fb3b 	bl	8002bc0 <ST7735_DrawString7x11>
}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	08009134 	.word	0x08009134

08000558 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	699a      	ldr	r2, [r3, #24]
 8000564:	4907      	ldr	r1, [pc, #28]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29a      	uxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	611a      	str	r2, [r3, #16]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	615a      	str	r2, [r3, #20]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80005d8:	2010      	movs	r0, #16
 80005da:	f7ff ffbd 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80005de:	2020      	movs	r0, #32
 80005e0:	f7ff ffba 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff ffb7 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80005ea:	2008      	movs	r0, #8
 80005ec:	f7ff ffb4 	bl	8000558 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80005f0:	4936      	ldr	r1, [pc, #216]	; (80006cc <MX_GPIO_Init+0x108>)
 80005f2:	4837      	ldr	r0, [pc, #220]	; (80006d0 <MX_GPIO_Init+0x10c>)
 80005f4:	f7ff ffd7 	bl	80005a6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin|LCD_CS_Pin|IN_A_Pin
 80005f8:	4936      	ldr	r1, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x110>)
 80005fa:	4837      	ldr	r0, [pc, #220]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005fc:	f7ff ffd3 	bl	80005a6 <LL_GPIO_ResetOutputPin>
                          |IN_B_Pin|IN_C_Pin|IN_EN_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SD_CS_Pin|OUT_A_Pin|OUT_B_Pin|OUT_C_Pin
 8000600:	4936      	ldr	r1, [pc, #216]	; (80006dc <MX_GPIO_Init+0x118>)
 8000602:	4837      	ldr	r0, [pc, #220]	; (80006e0 <MX_GPIO_Init+0x11c>)
 8000604:	f7ff ffcf 	bl	80005a6 <LL_GPIO_ResetOutputPin>
                          |OUT_EN_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_GPIO_Init+0x108>)
 800060a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	482c      	ldr	r0, [pc, #176]	; (80006d0 <MX_GPIO_Init+0x10c>)
 800061e:	f002 fec5 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8000622:	f241 2312 	movw	r3, #4626	; 0x1212
 8000626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000634:	2301      	movs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4826      	ldr	r0, [pc, #152]	; (80006d8 <MX_GPIO_Init+0x114>)
 800063e:	f002 feb5 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_A0_Pin|IN_A_Pin|IN_B_Pin|IN_C_Pin
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0x120>)
 8000644:	607b      	str	r3, [r7, #4]
                          |IN_EN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000658:	f002 fea8 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800065c:	f240 2302 	movw	r3, #514	; 0x202
 8000660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000662:	2301      	movs	r3, #1
 8000664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x11c>)
 8000678:	f002 fe98 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUT_OK_Pin|BUT_UP_Pin|BUT_DW_Pin;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_GPIO_Init+0x124>)
 800067e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000680:	2308      	movs	r3, #8
 8000682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <MX_GPIO_Init+0x11c>)
 800068e:	f002 fe8d 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|OUT_EN_Pin;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_GPIO_Init+0x128>)
 8000694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x11c>)
 80006a8:	f002 fe80 	bl	80033ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x12c>)
 80006ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006b0:	2308      	movs	r3, #8
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_GPIO_Init+0x114>)
 80006be:	f002 fe75 	bl	80033ac <LL_GPIO_Init>

}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	04200020 	.word	0x04200020
 80006d0:	40011000 	.word	0x40011000
 80006d4:	04171a1f 	.word	0x04171a1f
 80006d8:	40010800 	.word	0x40010800
 80006dc:	04f002f2 	.word	0x04f002f2
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	0417081f 	.word	0x0417081f
 80006e8:	040c404c 	.word	0x040c404c
 80006ec:	04f000f0 	.word	0x04f000f0
 80006f0:	04800080 	.word	0x04800080

080006f4 <GPIO_WriteBit>:

/* USER CODE BEGIN 2 */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint8_t BitVal)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	71fb      	strb	r3, [r7, #7]
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//DWT_CYCCNT = 0;// обнуляем значение
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//BitVal ?  LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin) : LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin) ;
  if (BitVal != RESET)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d004      	beq.n	8000712 <GPIO_WriteBit+0x1e>
  {
    LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin);
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff3c 	bl	8000588 <LL_GPIO_SetOutputPin>
  }
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//	   count_tic = DWT_CYCCNT;//смотрим сколько натикало
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

}
 8000710:	e003      	b.n	800071a <GPIO_WriteBit+0x26>
	  LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f7ff ff46 	bl	80005a6 <LL_GPIO_ResetOutputPin>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <LL_RCC_HSE_Enable+0x18>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <LL_RCC_HSE_Enable+0x18>)
 800072e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000

08000740 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LL_RCC_HSE_IsReady+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f023 0203 	bic.w	r2, r3, #3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	604b      	str	r3, [r1, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <LL_RCC_GetSysClkSource+0x14>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 030c 	and.w	r3, r3, #12
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007b4:	4904      	ldr	r1, [pc, #16]	; (80007c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	604b      	str	r3, [r1, #4]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	604b      	str	r3, [r1, #4]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <LL_RCC_PLL_Enable+0x18>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <LL_RCC_PLL_Enable+0x18>)
 8000826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_PLL_IsReady+0x20>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	430b      	orrs	r3, r1
 8000878:	4903      	ldr	r1, [pc, #12]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800087a:	4313      	orrs	r3, r2
 800087c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <LL_FLASH_SetLatency+0x24>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f023 0207 	bic.w	r2, r3, #7
 800089c:	4904      	ldr	r1, [pc, #16]	; (80008b0 <LL_FLASH_SetLatency+0x24>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	600b      	str	r3, [r1, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <LL_FLASH_GetLatency+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0307 	and.w	r3, r3, #7
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40022000 	.word	0x40022000

080008cc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f043 0201 	orr.w	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	621a      	str	r2, [r3, #32]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <LL_GPIO_SetPinMode>:
{
 8000942:	b490      	push	{r4, r7}
 8000944:	b088      	sub	sp, #32
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	0e1b      	lsrs	r3, r3, #24
 8000956:	4413      	add	r3, r2
 8000958:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800095a:	6822      	ldr	r2, [r4, #0]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa93 f3a3 	rbit	r3, r3
 8000966:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	210f      	movs	r1, #15
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	61bb      	str	r3, [r7, #24]
  return result;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	6023      	str	r3, [r4, #0]
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc90      	pop	{r4, r7}
 80009a4:	4770      	bx	lr

080009a6 <LL_GPIO_SetPinPull>:
{
 80009a6:	b480      	push	{r7}
 80009a8:	b087      	sub	sp, #28
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	43db      	mvns	r3, r3
 80009bc:	401a      	ands	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa93 f3a3 	rbit	r3, r3
 80009ca:	613b      	str	r3, [r7, #16]
  return result;
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	408b      	lsls	r3, r1
 80009da:	431a      	orrs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80009fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a06:	6053      	str	r3, [r2, #4]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40010000 	.word	0x40010000

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8000a1a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS	FatFs; 	//Fatfs handle
	FRESULT resFS;
	char status[20] = "123456";
 8000a1c:	f107 0208 	add.w	r2, r7, #8
 8000a20:	49a1      	ldr	r1, [pc, #644]	; (8000ca8 <main+0x294>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	c903      	ldmia	r1, {r0, r1}
 8000a26:	6018      	str	r0, [r3, #0]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	8019      	strh	r1, [r3, #0]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	0c09      	lsrs	r1, r1, #16
 8000a30:	7019      	strb	r1, [r3, #0]
 8000a32:	1dd3      	adds	r3, r2, #7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	731a      	strb	r2, [r3, #12]
	uint8_t waitCHR[4]= {0x7C, 0x2F, 0x2D, 0x5C}, w_indx=0;//   / - \ |
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4a9a      	ldr	r2, [pc, #616]	; (8000cac <main+0x298>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	Env.Menu.ActiveItem=0;
 8000a4c:	4b98      	ldr	r3, [pc, #608]	; (8000cb0 <main+0x29c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Env.Menu.ActivePage=0;
 8000a54:	4b96      	ldr	r3, [pc, #600]	; (8000cb0 <main+0x29c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	Env.period=0;
 8000a5c:	4b94      	ldr	r3, [pc, #592]	; (8000cb0 <main+0x29c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	Env.pulse=0;
 8000a64:	4b92      	ldr	r3, [pc, #584]	; (8000cb0 <main+0x29c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	Env.Mode = MENU;
 8000a6c:	4b90      	ldr	r3, [pc, #576]	; (8000cb0 <main+0x29c>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	uint8_t mode = Env.Mode;
 8000a74:	4b8e      	ldr	r3, [pc, #568]	; (8000cb0 <main+0x29c>)
 8000a76:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000a7a:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	f_RefreshScreen = 1;
 8000a7e:	4b8d      	ldr	r3, [pc, #564]	; (8000cb4 <main+0x2a0>)
 8000a80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000a8a:	f043 0314 	orr.w	r3, r3, #20
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2301      	movs	r3, #1
 8000a92:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f002 fa14 	bl	8002ec0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT // измерение времени выполнения куска кода в машинных тиках
 8000a98:	4b87      	ldr	r3, [pc, #540]	; (8000cb8 <main+0x2a4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a86      	ldr	r2, [pc, #536]	; (8000cb8 <main+0x2a4>)
 8000a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa2:	6013      	str	r3, [r2, #0]
  		  DWT_CYCCNT = 0;// обнуляем значение
 8000aa4:	4b85      	ldr	r3, [pc, #532]	; (8000cbc <main+0x2a8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
  		  DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
 8000aaa:	4b85      	ldr	r3, [pc, #532]	; (8000cc0 <main+0x2ac>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a84      	ldr	r2, [pc, #528]	; (8000cc0 <main+0x2ac>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
  		/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f91d 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff fd83 	bl	80005c4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000abe:	f7ff fb65 	bl	800018c <MX_CRC_Init>
  MX_SPI1_Init();
 8000ac2:	f000 fc63 	bl	800138c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ac6:	f003 fc37 	bl	8004338 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000aca:	f001 fc51 	bl	8002370 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ace:	f001 fb1b 	bl	8002108 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ad2:	f001 fbc5 	bl	8002260 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ad6:	f001 fcc1 	bl	800245c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000ada:	2208      	movs	r2, #8
 8000adc:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ae0:	4878      	ldr	r0, [pc, #480]	; (8000cc4 <main+0x2b0>)
 8000ae2:	f7ff ff2e 	bl	8000942 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_UP);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000aec:	4875      	ldr	r0, [pc, #468]	; (8000cc4 <main+0x2b0>)
 8000aee:	f7ff ff5a 	bl	80009a6 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8000af2:	2208      	movs	r2, #8
 8000af4:	f242 0120 	movw	r1, #8224	; 0x2020
 8000af8:	4872      	ldr	r0, [pc, #456]	; (8000cc4 <main+0x2b0>)
 8000afa:	f7ff ff22 	bl	8000942 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f242 0120 	movw	r1, #8224	; 0x2020
 8000b04:	486f      	ldr	r0, [pc, #444]	; (8000cc4 <main+0x2b0>)
 8000b06:	f7ff ff4e 	bl	80009a6 <LL_GPIO_SetPinPull>
	LL_TIM_SetCounter(TIM3, 0x7fff);
 8000b0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b0e:	486e      	ldr	r0, [pc, #440]	; (8000cc8 <main+0x2b4>)
 8000b10:	f7ff fefa 	bl	8000908 <LL_TIM_SetCounter>
	LL_GPIO_AF_RemapPartial_TIM3();
 8000b14:	f7ff ff6a 	bl	80009ec <LL_GPIO_AF_RemapPartial_TIM3>
	LL_TIM_EnableCounter(TIM3);
 8000b18:	486b      	ldr	r0, [pc, #428]	; (8000cc8 <main+0x2b4>)
 8000b1a:	f7ff fee6 	bl	80008ea <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	486a      	ldr	r0, [pc, #424]	; (8000ccc <main+0x2b8>)
 8000b24:	f7ff fefd 	bl	8000922 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4869      	ldr	r0, [pc, #420]	; (8000cd0 <main+0x2bc>)
 8000b2c:	f7ff fef9 	bl	8000922 <LL_TIM_CC_EnableChannel>

//	LL_TIM_EnableCounter(TIM1);
//	LL_TIM_EnableCounter(TIM4);
	HAL_Delay(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f002 fa26 	bl	8002f84 <HAL_Delay>
	LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
 8000b38:	4866      	ldr	r0, [pc, #408]	; (8000cd4 <main+0x2c0>)
 8000b3a:	f7ff fec7 	bl	80008cc <LL_SPI_Enable>
	resFS = f_mount(&FatFs, "", 1); //Монтируем файловую систему до первого использования SPI дисплеем
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2201      	movs	r2, #1
 8000b44:	4964      	ldr	r1, [pc, #400]	; (8000cd8 <main+0x2c4>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 fb9e 	bl	8007288 <f_mount>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d

	HAL_ST7735_Init();
 8000b52:	f001 fd65 	bl	8002620 <HAL_ST7735_Init>

	if(resFS != FR_OK)
 8000b56:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d067      	beq.n	8000c2e <main+0x21a>
				{
				ST7735_Clear(DANGER_BGR_COLOR);
 8000b5e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000b62:	f001 fee7 	bl	8002934 <ST7735_Clear>
				sprintf(status, "SD card" );
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4a5c      	ldr	r2, [pc, #368]	; (8000cdc <main+0x2c8>)
 8000b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b70:	e883 0003 	stmia.w	r3, {r0, r1}
				ST7735_DrawString7x11(39,1, status,DANGER_TXT_COLOR,DANGER_BGR_COLOR);
 8000b74:	f107 0208 	add.w	r2, r7, #8
 8000b78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	2101      	movs	r1, #1
 8000b84:	2027      	movs	r0, #39	; 0x27
 8000b86:	f002 f81b 	bl	8002bc0 <ST7735_DrawString7x11>
				sprintf(status, "not find" );
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4a54      	ldr	r2, [pc, #336]	; (8000ce0 <main+0x2cc>)
 8000b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b92:	c303      	stmia	r3!, {r0, r1}
 8000b94:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(27,LINE_HEIGTH*1, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000b96:	f107 0208 	add.w	r2, r7, #8
 8000b9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba4:	210d      	movs	r1, #13
 8000ba6:	201b      	movs	r0, #27
 8000ba8:	f002 f80a 	bl	8002bc0 <ST7735_DrawString7x11>
				sprintf(status, "Insert SD card" );
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	; (8000ce4 <main+0x2d0>)
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000bba:	8023      	strh	r3, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c1b      	lsrs	r3, r3, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
				ST7735_DrawString7x11(8,LINE_HEIGTH*2, status, DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000bc2:	f107 0208 	add.w	r2, r7, #8
 8000bc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd0:	211a      	movs	r1, #26
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	f001 fff4 	bl	8002bc0 <ST7735_DrawString7x11>
				sprintf(status, "and reboot" );
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4a42      	ldr	r2, [pc, #264]	; (8000ce8 <main+0x2d4>)
 8000bde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000be0:	c303      	stmia	r3!, {r0, r1}
 8000be2:	801a      	strh	r2, [r3, #0]
 8000be4:	3302      	adds	r3, #2
 8000be6:	0c12      	lsrs	r2, r2, #16
 8000be8:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(29,LINE_HEIGTH*3, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000bea:	f107 0208 	add.w	r2, r7, #8
 8000bee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf8:	2127      	movs	r1, #39	; 0x27
 8000bfa:	201d      	movs	r0, #29
 8000bfc:	f001 ffe0 	bl	8002bc0 <ST7735_DrawString7x11>
				sprintf(status, "device" );
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4a39      	ldr	r2, [pc, #228]	; (8000cec <main+0x2d8>)
 8000c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0a:	6018      	str	r0, [r3, #0]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	8019      	strh	r1, [r3, #0]
 8000c10:	3302      	adds	r3, #2
 8000c12:	0c0a      	lsrs	r2, r1, #16
 8000c14:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(42,LINE_HEIGTH*4, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000c16:	f107 0208 	add.w	r2, r7, #8
 8000c1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c24:	2134      	movs	r1, #52	; 0x34
 8000c26:	202a      	movs	r0, #42	; 0x2a
 8000c28:	f001 ffca 	bl	8002bc0 <ST7735_DrawString7x11>
				while( 1);
 8000c2c:	e7fe      	b.n	8000c2c <main+0x218>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ST7735_Clear(BGR_COLOR);
 8000c2e:	2011      	movs	r0, #17
 8000c30:	f001 fe80 	bl	8002934 <ST7735_Clear>
	FS_GetFileList( &Env);
 8000c34:	481e      	ldr	r0, [pc, #120]	; (8000cb0 <main+0x29c>)
 8000c36:	f003 fb99 	bl	800436c <FS_GetFileList>
	Env.Menu.NmbrAllPages = (uint32_t)(Env.Menu.NmbrAllFiles/ITEM_ON_PAGE_MAX);
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <main+0x29c>)
 8000c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c40:	4a2b      	ldr	r2, [pc, #172]	; (8000cf0 <main+0x2dc>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <main+0x29c>)
 8000c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  while (1)
  {
	ReadKeyPad();
 8000c4e:	f000 fa15 	bl	800107c <ReadKeyPad>
	mode = Env.Mode;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <main+0x29c>)
 8000c54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000c58:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	switch(mode)	// назначить действие в зависимости от текущего режима
 8000c5c:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8000c60:	3b01      	subs	r3, #1
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d81a      	bhi.n	8000c9c <main+0x288>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <main+0x258>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000c7d 	.word	0x08000c7d
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000c8d 	.word	0x08000c8d
 8000c78:	08000c95 	.word	0x08000c95
			{
				case MENU: 			Menu(&Env); 		break;
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <main+0x29c>)
 8000c7e:	f000 f8ad 	bl	8000ddc <Menu>
 8000c82:	e00c      	b.n	8000c9e <main+0x28a>
				case CHECK_SCHEME: 	ChekSchem(&Env);  	break;
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <main+0x29c>)
 8000c86:	f000 f96b 	bl	8000f60 <ChekSchem>
 8000c8a:	e008      	b.n	8000c9e <main+0x28a>
				case TEST: 			Test(&Env);			break;
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <main+0x29c>)
 8000c8e:	f000 fe1b 	bl	80018c8 <Test>
 8000c92:	e004      	b.n	8000c9e <main+0x28a>
				case RESULT: 		Result(&Env);		break;
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <main+0x29c>)
 8000c96:	f000 f9b9 	bl	800100c <Result>
 8000c9a:	e000      	b.n	8000c9e <main+0x28a>
					default: break;
 8000c9c:	bf00      	nop
			}
	Display(&Env);
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <main+0x29c>)
 8000ca0:	f7ff fa7c 	bl	800019c <Display>
	ReadKeyPad();
 8000ca4:	e7d3      	b.n	8000c4e <main+0x23a>
 8000ca6:	bf00      	nop
 8000ca8:	0800917c 	.word	0x0800917c
 8000cac:	08009190 	.word	0x08009190
 8000cb0:	2000025c 	.word	0x2000025c
 8000cb4:	200003f8 	.word	0x200003f8
 8000cb8:	e000edfc 	.word	0xe000edfc
 8000cbc:	e0001004 	.word	0xe0001004
 8000cc0:	e0001000 	.word	0xe0001000
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40000400 	.word	0x40000400
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	08009140 	.word	0x08009140
 8000cdc:	08009144 	.word	0x08009144
 8000ce0:	0800914c 	.word	0x0800914c
 8000ce4:	08009158 	.word	0x08009158
 8000ce8:	08009168 	.word	0x08009168
 8000cec:	08009174 	.word	0x08009174
 8000cf0:	38e38e39 	.word	0x38e38e39

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fdc7 	bl	800088c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000cfe:	bf00      	nop
 8000d00:	f7ff fdd8 	bl	80008b4 <LL_FLASH_GetLatency>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d1fa      	bne.n	8000d00 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000d0a:	f7ff fd0b 	bl	8000724 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d0e:	bf00      	nop
 8000d10:	f7ff fd16 	bl	8000740 <LL_RCC_HSE_IsReady>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d1fa      	bne.n	8000d10 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000d1a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000d1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d22:	f7ff fd9b 	bl	800085c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d26:	f7ff fd79 	bl	800081c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff fd84 	bl	8000838 <LL_RCC_PLL_IsReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d1fa      	bne.n	8000d2c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fd34 	bl	80007a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000d3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d40:	f7ff fd44 	bl	80007cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fd55 	bl	80007f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f7ff fd0a 	bl	8000764 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d50:	bf00      	nop
 8000d52:	f7ff fd1b 	bl	800078c <LL_RCC_GetSysClkSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d1fa      	bne.n	8000d52 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <SystemClock_Config+0x84>)
 8000d5e:	f003 fadd 	bl	800431c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f002 f8c2 	bl	8002eec <HAL_InitTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d6e:	f000 f805 	bl	8000d7c <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	044aa200 	.word	0x044aa200

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <Error_Handler+0x6>

08000d84 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <LL_TIM_GetCounter>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <LL_GPIO_IsInputPinSet>:
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf0c      	ite	eq
 8000dca:	2301      	moveq	r3, #1
 8000dcc:	2300      	movne	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
	...

08000ddc <Menu>:
const uint16_t  COLORS565[140] = {0xF7DF, 0xFF5A, 0x07FF, 0x7FFA, 0xF7FF, 0xF7BB, 0xFF38, 0x0, 0xFF59, 0x001F, 0x895C, 0xA145, 0xDDD0, 0x5CF4, 0x7FE0, 0xD343, 0xFBEA, 0x64BD, 0xFFDB, 0xD8A7, 0x07FF, 0x11, 0x451, 0xBC21, 0xAD55, 0x320, 0xBDAD, 0x8811, 0x5345, 0xFC60, 0x9999, 0x8800, 0xECAF, 0x8DF1, 0x49F1, 0x2A69, 0x067A, 0x901A, 0xF8B2, 0x05FF, 0x6B4D, 0x1C9F, 0xB104, 0xFFDE, 0x2444, 0xF81F, 0xDEFB, 0xFFDF, 0xFEA0, 0xDD24, 0x8410, 0x400, 0xAFE5, 0xF7FE, 0xFB56, 0xCAEB, 0x4810, 0xFFFE, 0xF731, 0xE73F, 0xFF9E, 0x7FE0, 0xFFD9, 0xAEDC, 0xF410, 0xE7FF, 0xFFDA, 0xD69A, 0x9772, 0xFDB8, 0xFD0F, 0x2595, 0x867F, 0x7453, 0xB63B, 0xFFFC, 0x7, 0x3666, 0xFF9C, 0xF81F, 0x8000, 0x6675, 0x19, 0xBABA, 0x939B, 0x3D8E, 0x7B5D, 0x07D3, 0x4E99, 0xC0B0, 0x18CE, 0xF7FF, 0xFF3C, 0xFF36, 0xFEF5, 0x10, 0xFFBC, 0x8400, 0x6C64, 0xFD20, 0xFA20, 0xDB9A, 0xEF55, 0x9FD3, 0xAF7D, 0xDB92, 0xFF7A, 0xFED7, 0xCC27, 0xFE19, 0xDD1B, 0xB71C, 0x8010, 0xF800, 0xBC71, 0x435C, 0x8A22, 0xFC0E, 0xF52C, 0x2C4A, 0xFFBD, 0xA285, 0xC618, 0x867D, 0x6AD9, 0x7412, 0xFFDF, 0x07EF, 0x4416, 0xD5B1, 0x410, 0xDDFB, 0xFB08, 0x471A, 0xEC1D, 0xF6F6, 0xFFFF, 0xF7BE, 0xFFE0, 0x9E66 };



void Menu(typeEnv *Env)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000de8:	60bb      	str	r3, [r7, #8]
	short int ActiveItem = (*Env).Menu.ActiveItem; // ActiveItem сделать указателем
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8000df0:	81fb      	strh	r3, [r7, #14]
	short int ActivePage = (*Env).Menu.ActivePage; // ActivePage оставить переменной
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000df8:	81bb      	strh	r3, [r7, #12]

	if(f_StepMenu != 0) // если необходимо перемещение по меню
 8000dfa:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <Menu+0x180>)
 8000dfc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e00:	015b      	lsls	r3, r3, #5
 8000e02:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d078      	beq.n	8000f02 <Menu+0x126>
	{
		f_StepMenu = 0;
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <Menu+0x180>)
 8000e12:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	461a      	mov	r2, r3
 8000e22:	2300      	movs	r3, #0
 8000e24:	6013      	str	r3, [r2, #0]
		f_RefreshScreen = 1;				// перерисуй экран
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <Menu+0x180>)
 8000e28:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e2c:	015b      	lsls	r3, r3, #5
 8000e2e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e32:	f043 0314 	orr.w	r3, r3, #20
 8000e36:	461a      	mov	r2, r3
 8000e38:	2301      	movs	r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]
		if(f_DirStepMenu == 0)				//двигаемся вверх по меню
 8000e3c:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <Menu+0x180>)
 8000e3e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e42:	015b      	lsls	r3, r3, #5
 8000e44:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e48:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <Menu+0xa8>
		{
			ActiveItem--;
 8000e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem < 0)
 8000e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da2c      	bge.n	8000ec0 <Menu+0xe4>
			{
				ActiveItem = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	81fb      	strh	r3, [r7, #14]
				ActivePage--;
 8000e6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	81bb      	strh	r3, [r7, #12]
				if(ActivePage < 0) {ActivePage = 0;}
 8000e76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da20      	bge.n	8000ec0 <Menu+0xe4>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	81bb      	strh	r3, [r7, #12]
 8000e82:	e01d      	b.n	8000ec0 <Menu+0xe4>
			}
		}
		else // двигаемся вниз по меню
		{
			ActiveItem++;
 8000e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem >= end_list)
 8000e90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d812      	bhi.n	8000ec0 <Menu+0xe4>
				{
				ActiveItem = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81fb      	strh	r3, [r7, #14]
				ActivePage++;
 8000e9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	81bb      	strh	r3, [r7, #12]
				if(ActivePage > Env->Menu.NmbrAllPages) {ActivePage = Env->Menu.NmbrAllPages;}
 8000eaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d903      	bls.n	8000ec0 <Menu+0xe4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ebe:	81bb      	strh	r3, [r7, #12]
				}
		}
		if(ActivePage != (*Env).Menu.ActivePage)	// при переходе на новую страницу меню
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8000ec6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d009      	beq.n	8000ee2 <Menu+0x106>
				{
					(*Env).Menu.ActivePage = ActivePage;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	89ba      	ldrh	r2, [r7, #12]
 8000ed2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
					FS_GetFileList(Env);			// получи новый список файлов
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f003 fa48 	bl	800436c <FS_GetFileList>
					ST7735_Clear(BGR_COLOR);
 8000edc:	2011      	movs	r0, #17
 8000ede:	f001 fd29 	bl	8002934 <ST7735_Clear>
				}
				//EncoderCount = currentCount;
		(*Env).Menu.ActiveItem = ActiveItem;	// ActiveItem сделать указателем
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	89fa      	ldrh	r2, [r7, #14]
 8000ee6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		(*Env).FileNameForTest = Env->Menu.FileList[ActiveItem];
 8000eea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	441a      	add	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	if(f_Action !=0)    // если нужно действие в меню (кнопка OK!)
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <Menu+0x180>)
 8000f04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f08:	015b      	lsls	r3, r3, #5
 8000f0a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f0e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d01c      	beq.n	8000f52 <Menu+0x176>
	{
		f_Action =0;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <Menu+0x180>)
 8000f1a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f24:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	6013      	str	r3, [r2, #0]

		FS_ReadFile(Env);			// прочитать выделенный файл
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f003 fac8 	bl	80044c4 <FS_ReadFile>
		(*Env).Mode = CHECK_SCHEME;	// перейти в режим проверки схемы соединений
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		f_RefreshScreen = 1;				// перерисуй экран
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <Menu+0x180>)
 8000f3e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f48:	f043 0314 	orr.w	r3, r3, #20
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2301      	movs	r3, #1
 8000f50:	6013      	str	r3, [r2, #0]
	}
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200003f8 	.word	0x200003f8

08000f60 <ChekSchem>:

void ChekSchem(typeEnv *Env)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(f_StepMenu != 0) // если вверх или вниз, направление не важно
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <ChekSchem+0xa8>)
 8000f6a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f6e:	015b      	lsls	r3, r3, #5
 8000f70:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d019      	beq.n	8000fb2 <ChekSchem+0x52>
		{
			f_StepMenu = 0;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <ChekSchem+0xa8>)
 8000f80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f8a:	f043 0320 	orr.w	r3, r3, #32
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2300      	movs	r3, #0
 8000f92:	6013      	str	r3, [r2, #0]
			(*Env).Mode = MENU;	// перейти в режим меню
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			f_RefreshScreen = 1;				// перерисуй экран
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <ChekSchem+0xa8>)
 8000f9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fa8:	f043 0314 	orr.w	r3, r3, #20
 8000fac:	461a      	mov	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
		}
	if(f_Action !=0)    // если нужно действие
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <ChekSchem+0xa8>)
 8000fb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fbe:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d019      	beq.n	8000ffc <ChekSchem+0x9c>
		{
			f_Action = 0;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <ChekSchem+0xa8>)
 8000fca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fd4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6013      	str	r3, [r2, #0]
			(*Env).Mode = TEST;	// перейти в режим ТЕСТ
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			f_RefreshScreen = 1;				// перерисуй экран
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ChekSchem+0xa8>)
 8000fe8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fec:	015b      	lsls	r3, r3, #5
 8000fee:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000ff2:	f043 0314 	orr.w	r3, r3, #20
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]


	/* процедура проверки схемы*/


}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200003f8 	.word	0x200003f8

0800100c <Result>:


void Result(typeEnv *Env)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if(f_StepMenu != 0) // если вверх или вниз
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <Result+0x6c>)
 8001016:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800101a:	015b      	lsls	r3, r3, #5
 800101c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <Result+0x34>
		{
			f_StepMenu = 0;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <Result+0x6c>)
 800102c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	461a      	mov	r2, r3
 800103c:	2300      	movs	r3, #0
 800103e:	6013      	str	r3, [r2, #0]

		}
	if(f_Action !=0)    // если нужно действие
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <Result+0x6c>)
 8001042:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800104c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <Result+0x60>
		{
			f_Action =0;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Result+0x6c>)
 8001058:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800105c:	015b      	lsls	r3, r3, #5
 800105e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001062:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001066:	461a      	mov	r2, r3
 8001068:	2300      	movs	r3, #0
 800106a:	6013      	str	r3, [r2, #0]

		}
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200003f8 	.word	0x200003f8

0800107c <ReadKeyPad>:

/* Чтение состояние кнопок и энкодера*/
void ReadKeyPad(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	static uint16_t LastEncCount=0;
	uint16_t CurrEncCount=LL_TIM_GetCounter(TIM3);
 8001082:	4840      	ldr	r0, [pc, #256]	; (8001184 <ReadKeyPad+0x108>)
 8001084:	f7ff fe88 	bl	8000d98 <LL_TIM_GetCounter>
 8001088:	4603      	mov	r3, r0
 800108a:	80fb      	strh	r3, [r7, #6]
	static uint8_t but_latch=0, but_press=0, key=0;
	uint8_t but_OK=0, but_DWN=0, but_UP=0, but_ENC=0;
 800108c:	2300      	movs	r3, #0
 800108e:	717b      	strb	r3, [r7, #5]
 8001090:	2300      	movs	r3, #0
 8001092:	713b      	strb	r3, [r7, #4]
 8001094:	2300      	movs	r3, #0
 8001096:	70fb      	strb	r3, [r7, #3]
 8001098:	2300      	movs	r3, #0
 800109a:	70bb      	strb	r3, [r7, #2]

	if(f_ReadKeyPad !=0)	// по таймеру
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <ReadKeyPad+0x10c>)
 800109e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010a2:	015b      	lsls	r3, r3, #5
 80010a4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010a8:	f043 0318 	orr.w	r3, r3, #24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d064      	beq.n	800117c <ReadKeyPad+0x100>
	{
		f_ReadKeyPad =0;
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <ReadKeyPad+0x10c>)
 80010b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010b8:	015b      	lsls	r3, r3, #5
 80010ba:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010be:	f043 0318 	orr.w	r3, r3, #24
 80010c2:	461a      	mov	r2, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	6013      	str	r3, [r2, #0]
		but_ENC = LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin)<<3;
 80010c8:	4930      	ldr	r1, [pc, #192]	; (800118c <ReadKeyPad+0x110>)
 80010ca:	4831      	ldr	r0, [pc, #196]	; (8001190 <ReadKeyPad+0x114>)
 80010cc:	f7ff fe6f 	bl	8000dae <LL_GPIO_IsInputPinSet>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	70bb      	strb	r3, [r7, #2]
		but_UP  = LL_GPIO_IsInputPinSet(BUT_UP_GPIO_Port, BUT_UP_Pin)<<2;
 80010d8:	492e      	ldr	r1, [pc, #184]	; (8001194 <ReadKeyPad+0x118>)
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <ReadKeyPad+0x11c>)
 80010dc:	f7ff fe67 	bl	8000dae <LL_GPIO_IsInputPinSet>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	70fb      	strb	r3, [r7, #3]
		but_OK  = LL_GPIO_IsInputPinSet(BUT_OK_GPIO_Port, BUT_OK_Pin)<<1;
 80010e8:	492c      	ldr	r1, [pc, #176]	; (800119c <ReadKeyPad+0x120>)
 80010ea:	482b      	ldr	r0, [pc, #172]	; (8001198 <ReadKeyPad+0x11c>)
 80010ec:	f7ff fe5f 	bl	8000dae <LL_GPIO_IsInputPinSet>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	717b      	strb	r3, [r7, #5]
		but_DWN = LL_GPIO_IsInputPinSet(BUT_DW_GPIO_Port,BUT_DW_Pin);
 80010f8:	f244 0140 	movw	r1, #16448	; 0x4040
 80010fc:	4826      	ldr	r0, [pc, #152]	; (8001198 <ReadKeyPad+0x11c>)
 80010fe:	f7ff fe56 	bl	8000dae <LL_GPIO_IsInputPinSet>
 8001102:	4603      	mov	r3, r0
 8001104:	713b      	strb	r3, [r7, #4]
		but_latch = but_ENC | but_UP | but_OK | but_DWN;
 8001106:	78ba      	ldrb	r2, [r7, #2]
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	4313      	orrs	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	4313      	orrs	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <ReadKeyPad+0x124>)
 800111c:	701a      	strb	r2, [r3, #0]

		if(but_latch !=0xF)
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <ReadKeyPad+0x124>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d007      	beq.n	8001136 <ReadKeyPad+0xba>
		{
			but_press=1;						// фиксируем нажатие
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <ReadKeyPad+0x128>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
			key = but_latch;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <ReadKeyPad+0x124>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <ReadKeyPad+0x12c>)
 8001132:	701a      	strb	r2, [r3, #0]
		{
			Encoder_handler(LastEncCount, CurrEncCount );		// обработка поворота энкодера
			LastEncCount = CurrEncCount;
		}
	}
}
 8001134:	e022      	b.n	800117c <ReadKeyPad+0x100>
		else if( but_latch==0xF &&  but_press == 1)
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <ReadKeyPad+0x124>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	d10f      	bne.n	800115e <ReadKeyPad+0xe2>
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <ReadKeyPad+0x128>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10b      	bne.n	800115e <ReadKeyPad+0xe2>
			Keyboard_handler(key);		// обработка нажатия после отпускания
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <ReadKeyPad+0x12c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f86c 	bl	8001228 <Keyboard_handler>
			but_press=0;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <ReadKeyPad+0x128>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
			key=0;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <ReadKeyPad+0x12c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	e00e      	b.n	800117c <ReadKeyPad+0x100>
		else if(CurrEncCount != LastEncCount)
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <ReadKeyPad+0x130>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	429a      	cmp	r2, r3
 8001166:	d009      	beq.n	800117c <ReadKeyPad+0x100>
			Encoder_handler(LastEncCount, CurrEncCount );		// обработка поворота энкодера
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <ReadKeyPad+0x130>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f89b 	bl	80012ac <Encoder_handler>
			LastEncCount = CurrEncCount;
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <ReadKeyPad+0x130>)
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	8013      	strh	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40000400 	.word	0x40000400
 8001188:	200003f8 	.word	0x200003f8
 800118c:	04800080 	.word	0x04800080
 8001190:	40010800 	.word	0x40010800
 8001194:	04080008 	.word	0x04080008
 8001198:	40010c00 	.word	0x40010c00
 800119c:	04040004 	.word	0x04040004
 80011a0:	20000218 	.word	0x20000218
 80011a4:	20000219 	.word	0x20000219
 80011a8:	2000021a 	.word	0x2000021a
 80011ac:	2000021c 	.word	0x2000021c

080011b0 <StepUP>:



void StepUP(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	f_DirStepMenu=0; f_StepMenu = 1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <StepUP+0x38>)
 80011b6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011c0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011c4:	461a      	mov	r2, r3
 80011c6:	2300      	movs	r3, #0
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <StepUP+0x38>)
 80011cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	461a      	mov	r2, r3
 80011dc:	2301      	movs	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	200003f8 	.word	0x200003f8

080011ec <StepDOWN>:

void StepDOWN(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	f_DirStepMenu=1; f_StepMenu = 1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <StepDOWN+0x38>)
 80011f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011fc:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8001200:	461a      	mov	r2, r3
 8001202:	2301      	movs	r3, #1
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <StepDOWN+0x38>)
 8001208:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	461a      	mov	r2, r3
 8001218:	2301      	movs	r3, #1
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	200003f8 	.word	0x200003f8

08001228 <Keyboard_handler>:

void Keyboard_handler(uint8_t key)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
//	char String[8]={0};
//	sprintf(&String, "%X", key);
//	ST7735_DrawString7x11(100,92,String,TXT_COLOR,BGR_COLOR);
	switch(key)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b07      	subs	r3, #7
 8001236:	2b07      	cmp	r3, #7
 8001238:	d830      	bhi.n	800129c <Keyboard_handler+0x74>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <Keyboard_handler+0x18>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001285 	.word	0x08001285
 8001244:	0800129d 	.word	0x0800129d
 8001248:	0800129d 	.word	0x0800129d
 800124c:	0800129d 	.word	0x0800129d
 8001250:	08001261 	.word	0x08001261
 8001254:	0800129d 	.word	0x0800129d
 8001258:	08001267 	.word	0x08001267
 800125c:	0800127f 	.word	0x0800127f
	{
	case UP: 		StepUP(); break;
 8001260:	f7ff ffa6 	bl	80011b0 <StepUP>
 8001264:	e01b      	b.n	800129e <Keyboard_handler+0x76>
	case OK: 		f_Action = 1; break;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <Keyboard_handler+0x80>)
 8001268:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001272:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001276:	461a      	mov	r2, r3
 8001278:	2301      	movs	r3, #1
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e00f      	b.n	800129e <Keyboard_handler+0x76>
	case DOWN: 		StepDOWN(); break;
 800127e:	f7ff ffb5 	bl	80011ec <StepDOWN>
 8001282:	e00c      	b.n	800129e <Keyboard_handler+0x76>
	case ENC_BUT: 	f_Action = 1; break;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <Keyboard_handler+0x80>)
 8001286:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800128a:	015b      	lsls	r3, r3, #5
 800128c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001290:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001294:	461a      	mov	r2, r3
 8001296:	2301      	movs	r3, #1
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e000      	b.n	800129e <Keyboard_handler+0x76>
		default: break;
 800129c:	bf00      	nop
	}
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200003f8 	.word	0x200003f8

080012ac <Encoder_handler>:

void Encoder_handler(uint16_t LastCount, uint16_t CurrCount )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80bb      	strh	r3, [r7, #4]
	if( LastCount > CurrCount)
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d902      	bls.n	80012ca <Encoder_handler+0x1e>
	{
		StepDOWN();
 80012c4:	f7ff ff92 	bl	80011ec <StepDOWN>
	}
	else
	{
		StepUP();
	}
}
 80012c8:	e001      	b.n	80012ce <Encoder_handler+0x22>
		StepUP();
 80012ca:	f7ff ff71 	bl	80011b0 <StepUP>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <LL_APB2_GRP1_EnableClock>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b02      	cmp	r3, #2
 800133e:	d101      	bne.n	8001344 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	b2db      	uxtb	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	330c      	adds	r3, #12
 8001378:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fd9f 	bl	8007ede <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80013ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013b2:	f7ff ff91 	bl	80012d8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff ff8e 	bl	80012d8 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 80013bc:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 80013c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013c2:	2309      	movs	r3, #9
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_SPI1_Init+0xa0>)
 80013d4:	f001 ffea 	bl	80033ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80013d8:	f244 0340 	movw	r3, #16448	; 0x4040
 80013dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80013de:	2304      	movs	r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_SPI1_Init+0xa0>)
 80013e8:	f001 ffe0 	bl	80033ac <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013f4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8001408:	2330      	movs	r3, #48	; 0x30
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001414:	230a      	movs	r3, #10
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_SPI1_Init+0xa4>)
 8001420:	f002 f8be 	bl	80035a0 <LL_SPI_Init>

}
 8001424:	bf00      	nop
 8001426:	3740      	adds	r7, #64	; 0x40
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010800 	.word	0x40010800
 8001430:	40013000 	.word	0x40013000

08001434 <LL_SPI_TransmitReceive>:

/* USER CODE BEGIN 1 */
uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	while(	LL_SPI_IsActiveFlag_TXE(SPIx) == RESET	);
 8001440:	bf00      	nop
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff72 	bl	800132c <LL_SPI_IsActiveFlag_TXE>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f9      	beq.n	8001442 <LL_SPI_TransmitReceive+0xe>
	LL_SPI_TransmitData8(SPIx, TxByte);
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff88 	bl	8001368 <LL_SPI_TransmitData8>

	while(	LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET	);
 8001458:	bf00      	nop
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff54 	bl	8001308 <LL_SPI_IsActiveFlag_RXNE>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f9      	beq.n	800145a <LL_SPI_TransmitReceive+0x26>
	return LL_SPI_ReceiveData8(SPIx);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff72 	bl	8001350 <LL_SPI_ReceiveData8>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_MspInit+0x5c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x5c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_MspInit+0x60>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_MspInit+0x60>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000

080014dc <LL_TIM_SetCounter>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <LL_TIM_OC_GetCompareCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f06f 0201 	mvn.w	r2, #1
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f06f 0202 	mvn.w	r2, #2
 800156e:	611a      	str	r2, [r3, #16]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b02      	cmp	r3, #2
 800158c:	d101      	bne.n	8001592 <LL_TIM_IsActiveFlag_CC1+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <LL_GPIO_ResetOutputPin>:
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	615a      	str	r2, [r3, #20]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001602:	f001 fca3 	bl	8002f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_1ms();
 8001606:	f000 f849 	bl	800169c <timer_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */
	LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8001614:	4902      	ldr	r1, [pc, #8]	; (8001620 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <TIM1_TRG_COM_IRQHandler+0x14>)
 8001618:	f7ff ffc1 	bl	800159e <LL_GPIO_ResetOutputPin>
  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	04200020 	.word	0x04200020
 8001624:	40011000 	.word	0x40011000

08001628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(typeEnv *Env)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM2))
 8001630:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001634:	f7ff ffa1 	bl	800157a <LL_TIM_IsActiveFlag_CC1>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01a      	beq.n	8001674 <TIM2_IRQHandler+0x4c>
		{
			LL_TIM_ClearFlag_CC1(TIM2);
 800163e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001642:	f7ff ff8d 	bl	8001560 <LL_TIM_ClearFlag_CC1>
			(*Env).period = LL_TIM_OC_GetCompareCH1(TIM2);
 8001646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800164a:	f7ff ff54 	bl	80014f6 <LL_TIM_OC_GetCompareCH1>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			(*Env).pulse = 	LL_TIM_OC_GetCompareCH2(TIM2);
 8001658:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800165c:	f7ff ff56 	bl	800150c <LL_TIM_OC_GetCompareCH2>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			LL_TIM_SetCounter(TIM2, 0);
 800166a:	2100      	movs	r1, #0
 800166c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001670:	f7ff ff34 	bl	80014dc <LL_TIM_SetCounter>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <TIM4_IRQHandler+0x1c>)
 8001682:	f7ff ff5b 	bl	800153c <LL_TIM_IsActiveFlag_UPDATE>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <TIM4_IRQHandler+0x16>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM4_IRQHandler+0x1c>)
 800168e:	f7ff ff48 	bl	8001522 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40000800 	.word	0x40000800

0800169c <timer_1ms>:

/* USER CODE BEGIN 1 */
void timer_1ms(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	if (    (f_1ms = !f_1ms)==0        )
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <timer_1ms+0x38>)
 80016a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <timer_1ms+0x38>)
 80016ba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <timer_1ms+0x34>
	  {
	   Flags_1ms();
 80016cc:	f000 f804 	bl	80016d8 <Flags_1ms>
	  }
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003f8 	.word	0x200003f8

080016d8 <Flags_1ms>:

void Flags_1ms(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	f_1ms = 1; // user flag every 1 ms
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <Flags_1ms+0x38>)
 80016de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016e8:	461a      	mov	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	6013      	str	r3, [r2, #0]


	  if (--t_10ms == 0x00)
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <Flags_1ms+0x3c>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <Flags_1ms+0x3c>)
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <Flags_1ms+0x3c>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d104      	bne.n	800170c <Flags_1ms+0x34>
	    {
	      t_10ms = cl_ms10;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <Flags_1ms+0x3c>)
 8001704:	220a      	movs	r2, #10
 8001706:	801a      	strh	r2, [r3, #0]
	      Flags_10msec();
 8001708:	f000 f806 	bl	8001718 <Flags_10msec>
	    }
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200003f8 	.word	0x200003f8
 8001714:	20000000 	.word	0x20000000

08001718 <Flags_10msec>:

void Flags_10msec()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	f_10ms = 1;		// user flag every 10 ms
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <Flags_10msec+0x54>)
 800171e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001722:	015b      	lsls	r3, r3, #5
 8001724:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	461a      	mov	r2, r3
 800172e:	2301      	movs	r3, #1
 8001730:	6013      	str	r3, [r2, #0]
	f_ReadKeyPad=1;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <Flags_10msec+0x54>)
 8001734:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800173e:	f043 0318 	orr.w	r3, r3, #24
 8001742:	461a      	mov	r2, r3
 8001744:	2301      	movs	r3, #1
 8001746:	6013      	str	r3, [r2, #0]
	  if (--t_100ms == 0x00)
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <Flags_10msec+0x58>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <Flags_10msec+0x58>)
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <Flags_10msec+0x58>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d104      	bne.n	8001766 <Flags_10msec+0x4e>
		{
		  t_100ms = cl_ms100;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <Flags_10msec+0x58>)
 800175e:	220a      	movs	r2, #10
 8001760:	801a      	strh	r2, [r3, #0]
		  Flags_100ms();
 8001762:	f000 f807 	bl	8001774 <Flags_100ms>
		}
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003f8 	.word	0x200003f8
 8001770:	20000002 	.word	0x20000002

08001774 <Flags_100ms>:

void Flags_100ms(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	f_100ms = 1;		// user flag every 100 ms
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <Flags_100ms+0x3c>)
 800177a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	461a      	mov	r2, r3
 800178a:	2301      	movs	r3, #1
 800178c:	6013      	str	r3, [r2, #0]
	//f_EncoderRead = 1;
	  if (--t_sec == 0x00)
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <Flags_100ms+0x40>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <Flags_100ms+0x40>)
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <Flags_100ms+0x40>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <Flags_100ms+0x38>
		{
		  t_sec = cl_sec;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <Flags_100ms+0x40>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	801a      	strh	r2, [r3, #0]
		  Flags_1s();
 80017a8:	f000 f806 	bl	80017b8 <Flags_1s>
		}
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200003f8 	.word	0x200003f8
 80017b4:	20000004 	.word	0x20000004

080017b8 <Flags_1s>:

void Flags_1s(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	f_1sec = 1;		// user flag every 1 sec
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <Flags_1s+0x54>)
 80017be:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017c8:	f043 030c 	orr.w	r3, r3, #12
 80017cc:	461a      	mov	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	6013      	str	r3, [r2, #0]

	if (--t_min == 0x00)
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <Flags_1s+0x58>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <Flags_1s+0x58>)
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <Flags_1s+0x58>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10d      	bne.n	8001802 <Flags_1s+0x4a>
			{
				f_1min = 1;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <Flags_1s+0x54>)
 80017e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017ec:	015b      	lsls	r3, r3, #5
 80017ee:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	461a      	mov	r2, r3
 80017f8:	2301      	movs	r3, #1
 80017fa:	6013      	str	r3, [r2, #0]
				t_min = cl_min;
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <Flags_1s+0x58>)
 80017fe:	223c      	movs	r2, #60	; 0x3c
 8001800:	801a      	strh	r2, [r3, #0]

			}
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	200003f8 	.word	0x200003f8
 8001810:	20000006 	.word	0x20000006

08001814 <_sbrk>:
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
 8001844:	f006 fb08 	bl	8007e58 <__errno>
 8001848:	4602      	mov	r2, r0
 800184a:	230c      	movs	r3, #12
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20005000 	.word	0x20005000
 8001874:	00000400 	.word	0x00000400
 8001878:	20000220 	.word	0x20000220
 800187c:	20000870 	.word	0x20000870

08001880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <LL_TIM_EnableCounter>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <LL_TIM_DisableCounter>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0201 	bic.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <Test>:

//LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)


void Test(typeEnv *Env)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	static uint8_t addr=0;
	if(f_StepMenu != 0) // если вверх или вниз
 80018d0:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <Test+0x148>)
 80018d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80018d6:	015b      	lsls	r3, r3, #5
 80018d8:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80018dc:	f043 0320 	orr.w	r3, r3, #32
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d019      	beq.n	800191a <Test+0x52>
		{
			f_StepMenu = 0;
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <Test+0x148>)
 80018e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	6013      	str	r3, [r2, #0]
			(*Env).Mode = CHECK_SCHEME;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

			f_RefreshScreen = 1;				// перерисуй экран
 8001904:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <Test+0x148>)
 8001906:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001910:	f043 0314 	orr.w	r3, r3, #20
 8001914:	461a      	mov	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	6013      	str	r3, [r2, #0]
		}
	if(f_Action !=0)    // если нужно действие
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <Test+0x148>)
 800191c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001920:	015b      	lsls	r3, r3, #5
 8001922:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001926:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <Test+0x94>
		{
			f_Action =0;
 8001930:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <Test+0x148>)
 8001932:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800193c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001940:	461a      	mov	r2, r3
 8001942:	2300      	movs	r3, #0
 8001944:	6013      	str	r3, [r2, #0]
			f_StartTest	= 1;// запустить тест
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <Test+0x148>)
 8001948:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001952:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001956:	461a      	mov	r2, r3
 8001958:	2301      	movs	r3, #1
 800195a:	6013      	str	r3, [r2, #0]
		}


	if(f_StartTest	== 1)
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <Test+0x148>)
 800195e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001962:	015b      	lsls	r3, r3, #5
 8001964:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001968:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d14a      	bne.n	8001a08 <Test+0x140>
	{
		f_StartTest = 0;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <Test+0x148>)
 8001974:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800197e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001982:	461a      	mov	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	6013      	str	r3, [r2, #0]
		/* сам тест*/

//			LL_TIM_EnableIT_CC2(TIM2);
//			LL_TIM_EnableIT_TRIG(TIM1);

			LL_TIM_EnableCounter(TIM1);
 8001988:	4822      	ldr	r0, [pc, #136]	; (8001a14 <Test+0x14c>)
 800198a:	f7ff ff7f 	bl	800188c <LL_TIM_EnableCounter>
//			LL_TIM_EnableCounter(TIM2);


					for(uint8_t out_addr=0; out_addr<8; out_addr++)
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e026      	b.n	80019e2 <Test+0x11a>
					{
						MuxSetOUT_Addr(out_addr);	// установить номер выхода
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f87a 	bl	8001a90 <MuxSetOUT_Addr>
						GPIO_WriteBit(GPIOB, OUT_EN_Pin, RESET);// включить мультиплексор выходной
 800199c:	2200      	movs	r2, #0
 800199e:	491e      	ldr	r1, [pc, #120]	; (8001a18 <Test+0x150>)
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <Test+0x154>)
 80019a2:	f7fe fea7 	bl	80006f4 <GPIO_WriteBit>

						for(uint8_t in_addr=0; in_addr<8; in_addr++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73bb      	strb	r3, [r7, #14]
 80019aa:	e014      	b.n	80019d6 <Test+0x10e>
						{
							MuxSetIN_Addr(in_addr);	// установить номер входа
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f83c 	bl	8001a2c <MuxSetIN_Addr>
							GPIO_WriteBit(GPIOA, IN_EN_Pin, RESET);// включить мультиплексор входной
 80019b4:	2200      	movs	r2, #0
 80019b6:	491a      	ldr	r1, [pc, #104]	; (8001a20 <Test+0x158>)
 80019b8:	481a      	ldr	r0, [pc, #104]	; (8001a24 <Test+0x15c>)
 80019ba:	f7fe fe9b 	bl	80006f4 <GPIO_WriteBit>
							LL_TIM_EnableCounter(TIM4);
 80019be:	481a      	ldr	r0, [pc, #104]	; (8001a28 <Test+0x160>)
 80019c0:	f7ff ff64 	bl	800188c <LL_TIM_EnableCounter>
							HAL_Delay(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f001 fadd 	bl	8002f84 <HAL_Delay>
							LL_TIM_DisableCounter(TIM4);
 80019ca:	4817      	ldr	r0, [pc, #92]	; (8001a28 <Test+0x160>)
 80019cc:	f7ff ff6d 	bl	80018aa <LL_TIM_DisableCounter>
						for(uint8_t in_addr=0; in_addr<8; in_addr++)
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73bb      	strb	r3, [r7, #14]
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d9e7      	bls.n	80019ac <Test+0xe4>
					for(uint8_t out_addr=0; out_addr<8; out_addr++)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b07      	cmp	r3, #7
 80019e6:	d9d5      	bls.n	8001994 <Test+0xcc>
					}

//			LL_TIM_DisableIT_CC2(TIM2);
//			LL_TIM_DisableIT_TRIG(TIM1);

			LL_TIM_DisableCounter(TIM4);
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <Test+0x160>)
 80019ea:	f7ff ff5e 	bl	80018aa <LL_TIM_DisableCounter>
//			LL_TIM_DisableCounter(TIM2);
			LL_TIM_DisableCounter(TIM1);
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <Test+0x14c>)
 80019f0:	f7ff ff5b 	bl	80018aa <LL_TIM_DisableCounter>

			GPIO_WriteBit(GPIOB, OUT_EN_Pin, SET);// вЫключить мультиплексор выходной
 80019f4:	2201      	movs	r2, #1
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <Test+0x150>)
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <Test+0x154>)
 80019fa:	f7fe fe7b 	bl	80006f4 <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA, IN_EN_Pin, SET);// вЫключить мультиплексор входной
 80019fe:	2201      	movs	r2, #1
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <Test+0x158>)
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <Test+0x15c>)
 8001a04:	f7fe fe76 	bl	80006f4 <GPIO_WriteBit>
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200003f8 	.word	0x200003f8
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	04800080 	.word	0x04800080
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	04100010 	.word	0x04100010
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40000800 	.word	0x40000800

08001a2c <MuxSetIN_Addr>:
{
	LL_GPIO_ReetOutputPin(GPIOA, IN_EN_Pin);
}

void MuxSetIN_Addr(uint8_t addr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_A_Pin, mask);
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	461a      	mov	r2, r3
 8001a46:	490e      	ldr	r1, [pc, #56]	; (8001a80 <MuxSetIN_Addr+0x54>)
 8001a48:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MuxSetIN_Addr+0x58>)
 8001a4a:	f7fe fe53 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x02;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_B_Pin, mask);
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	490b      	ldr	r1, [pc, #44]	; (8001a88 <MuxSetIN_Addr+0x5c>)
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MuxSetIN_Addr+0x58>)
 8001a5e:	f7fe fe49 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x04;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_C_Pin, mask);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4907      	ldr	r1, [pc, #28]	; (8001a8c <MuxSetIN_Addr+0x60>)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MuxSetIN_Addr+0x58>)
 8001a72:	f7fe fe3f 	bl	80006f4 <GPIO_WriteBit>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	04010001 	.word	0x04010001
 8001a84:	40010800 	.word	0x40010800
 8001a88:	04020002 	.word	0x04020002
 8001a8c:	04040004 	.word	0x04040004

08001a90 <MuxSetOUT_Addr>:


void MuxSetOUT_Addr(uint8_t addr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_A_Pin, mask);
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <MuxSetOUT_Addr+0x54>)
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <MuxSetOUT_Addr+0x58>)
 8001aae:	f7fe fe21 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x02;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_B_Pin, mask);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	461a      	mov	r2, r3
 8001abe:	490b      	ldr	r1, [pc, #44]	; (8001aec <MuxSetOUT_Addr+0x5c>)
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <MuxSetOUT_Addr+0x58>)
 8001ac2:	f7fe fe17 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x04;
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_C_Pin, mask);
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4907      	ldr	r1, [pc, #28]	; (8001af0 <MuxSetOUT_Addr+0x60>)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MuxSetOUT_Addr+0x58>)
 8001ad6:	f7fe fe0d 	bl	80006f4 <GPIO_WriteBit>

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	04100010 	.word	0x04100010
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	04200020 	.word	0x04200020
 8001af0:	04400040 	.word	0x04400040

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4906      	ldr	r1, [pc, #24]	; (8001b44 <__NVIC_EnableIRQ+0x34>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_APB1_GRP1_EnableClock>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000

08001c30 <LL_APB2_GRP1_EnableClock>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <LL_TIM_SetOnePulseMode>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0208 	bic.w	r2, r3, #8
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <LL_TIM_DisableARRPreload>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <LL_TIM_OC_DisableFast>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d01c      	beq.n	8001cee <LL_TIM_OC_DisableFast+0x4a>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d017      	beq.n	8001cea <LL_TIM_OC_DisableFast+0x46>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d012      	beq.n	8001ce6 <LL_TIM_OC_DisableFast+0x42>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d00d      	beq.n	8001ce2 <LL_TIM_OC_DisableFast+0x3e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ccc:	d007      	beq.n	8001cde <LL_TIM_OC_DisableFast+0x3a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd4:	d101      	bne.n	8001cda <LL_TIM_OC_DisableFast+0x36>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e00a      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e008      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_TIM_OC_DisableFast+0x4c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LL_TIM_OC_DisableFast+0x80>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	440b      	add	r3, r1
 8001d00:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <LL_TIM_OC_DisableFast+0x84>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2304      	movs	r3, #4
 8001d10:	408b      	lsls	r3, r1
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	08009310 	.word	0x08009310
 8001d28:	08009318 	.word	0x08009318

08001d2c <LL_TIM_OC_EnablePreload>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d01c      	beq.n	8001d76 <LL_TIM_OC_EnablePreload+0x4a>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d017      	beq.n	8001d72 <LL_TIM_OC_EnablePreload+0x46>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d012      	beq.n	8001d6e <LL_TIM_OC_EnablePreload+0x42>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d00d      	beq.n	8001d6a <LL_TIM_OC_EnablePreload+0x3e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d54:	d007      	beq.n	8001d66 <LL_TIM_OC_EnablePreload+0x3a>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5c:	d101      	bne.n	8001d62 <LL_TIM_OC_EnablePreload+0x36>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e00a      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e008      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <LL_TIM_OC_EnablePreload+0x4c>
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	4619      	mov	r1, r3
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LL_TIM_OC_EnablePreload+0x80>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	440b      	add	r3, r1
 8001d88:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <LL_TIM_OC_EnablePreload+0x84>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	4619      	mov	r1, r3
 8001d96:	2308      	movs	r3, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	601a      	str	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08009310 	.word	0x08009310
 8001db0:	08009318 	.word	0x08009318

08001db4 <LL_TIM_IC_SetActiveInput>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d01c      	beq.n	8001e00 <LL_TIM_IC_SetActiveInput+0x4c>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d017      	beq.n	8001dfc <LL_TIM_IC_SetActiveInput+0x48>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d012      	beq.n	8001df8 <LL_TIM_IC_SetActiveInput+0x44>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d00d      	beq.n	8001df4 <LL_TIM_IC_SetActiveInput+0x40>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dde:	d007      	beq.n	8001df0 <LL_TIM_IC_SetActiveInput+0x3c>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d101      	bne.n	8001dec <LL_TIM_IC_SetActiveInput+0x38>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e00a      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001dec:	2306      	movs	r3, #6
 8001dee:	e008      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df0:	2304      	movs	r3, #4
 8001df2:	e006      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e004      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e002      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3318      	adds	r3, #24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	440b      	add	r3, r1
 8001e12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	490b      	ldr	r1, [pc, #44]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x94>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	408b      	lsls	r3, r1
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0c1b      	lsrs	r3, r3, #16
 8001e2c:	7df9      	ldrb	r1, [r7, #23]
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x94>)
 8001e30:	5c41      	ldrb	r1, [r0, r1]
 8001e32:	408b      	lsls	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	08009310 	.word	0x08009310
 8001e48:	08009320 	.word	0x08009320

08001e4c <LL_TIM_IC_SetPrescaler>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d01c      	beq.n	8001e98 <LL_TIM_IC_SetPrescaler+0x4c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d017      	beq.n	8001e94 <LL_TIM_IC_SetPrescaler+0x48>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d012      	beq.n	8001e90 <LL_TIM_IC_SetPrescaler+0x44>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d00d      	beq.n	8001e8c <LL_TIM_IC_SetPrescaler+0x40>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d007      	beq.n	8001e88 <LL_TIM_IC_SetPrescaler+0x3c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d101      	bne.n	8001e84 <LL_TIM_IC_SetPrescaler+0x38>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e00a      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e008      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	490b      	ldr	r1, [pc, #44]	; (8001ee0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	230c      	movs	r3, #12
 8001eba:	408b      	lsls	r3, r1
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	7df9      	ldrb	r1, [r7, #23]
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001ec8:	5c41      	ldrb	r1, [r0, r1]
 8001eca:	408b      	lsls	r3, r1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	08009310 	.word	0x08009310
 8001ee0:	08009320 	.word	0x08009320

08001ee4 <LL_TIM_IC_SetFilter>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d01c      	beq.n	8001f30 <LL_TIM_IC_SetFilter+0x4c>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d017      	beq.n	8001f2c <LL_TIM_IC_SetFilter+0x48>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d012      	beq.n	8001f28 <LL_TIM_IC_SetFilter+0x44>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d00d      	beq.n	8001f24 <LL_TIM_IC_SetFilter+0x40>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0e:	d007      	beq.n	8001f20 <LL_TIM_IC_SetFilter+0x3c>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d101      	bne.n	8001f1c <LL_TIM_IC_SetFilter+0x38>
 8001f18:	2305      	movs	r3, #5
 8001f1a:	e00a      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	e008      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_TIM_IC_SetFilter+0x4e>
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3318      	adds	r3, #24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LL_TIM_IC_SetFilter+0x90>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	440b      	add	r3, r1
 8001f42:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	490b      	ldr	r1, [pc, #44]	; (8001f78 <LL_TIM_IC_SetFilter+0x94>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	23f0      	movs	r3, #240	; 0xf0
 8001f52:	408b      	lsls	r3, r1
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	7df9      	ldrb	r1, [r7, #23]
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <LL_TIM_IC_SetFilter+0x94>)
 8001f60:	5c41      	ldrb	r1, [r0, r1]
 8001f62:	408b      	lsls	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	08009310 	.word	0x08009310
 8001f78:	08009320 	.word	0x08009320

08001f7c <LL_TIM_IC_SetPolarity>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d01c      	beq.n	8001fc8 <LL_TIM_IC_SetPolarity+0x4c>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d017      	beq.n	8001fc4 <LL_TIM_IC_SetPolarity+0x48>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d012      	beq.n	8001fc0 <LL_TIM_IC_SetPolarity+0x44>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d00d      	beq.n	8001fbc <LL_TIM_IC_SetPolarity+0x40>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d007      	beq.n	8001fb8 <LL_TIM_IC_SetPolarity+0x3c>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d101      	bne.n	8001fb4 <LL_TIM_IC_SetPolarity+0x38>
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	e00a      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fb4:	2306      	movs	r3, #6
 8001fb6:	e008      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e006      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e004      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_TIM_IC_SetPolarity+0x4e>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <LL_TIM_IC_SetPolarity+0x80>)
 8001fd4:	5ccb      	ldrb	r3, [r1, r3]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	230a      	movs	r3, #10
 8001fda:	408b      	lsls	r3, r1
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	4906      	ldr	r1, [pc, #24]	; (8001ffc <LL_TIM_IC_SetPolarity+0x80>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	408b      	lsls	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	621a      	str	r2, [r3, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	08009328 	.word	0x08009328

08002000 <LL_TIM_SetEncoderMode>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <LL_TIM_SetTriggerOutput>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	605a      	str	r2, [r3, #4]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <LL_TIM_SetSlaveMode>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <LL_TIM_SetTriggerInput>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <LL_TIM_EnableMasterSlaveMode>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <LL_TIM_DisableMasterSlaveMode>:
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60da      	str	r2, [r3, #12]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b098      	sub	sp, #96	; 0x60
 800210c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800210e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	2220      	movs	r2, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f005 fed9 	bl	8007ede <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800214c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002150:	f7ff fd6e 	bl	8001c30 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002154:	f7ff fcce 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8002158:	4603      	mov	r3, r0
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd1c 	bl	8001b9c <NVIC_EncodePriority>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	201a      	movs	r0, #26
 800216a:	f7ff fced 	bl	8001b48 <__NVIC_SetPriority>
  //NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);

  TIM_InitStruct.Prescaler = 71;
 800216e:	2347      	movs	r3, #71	; 0x47
 8002170:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002174:	2300      	movs	r3, #0
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 4;
 8002178:	2304      	movs	r3, #4
 800217a:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 19;
 8002180:	2313      	movs	r3, #19
 8002182:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002184:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002188:	4619      	mov	r1, r3
 800218a:	4832      	ldr	r0, [pc, #200]	; (8002254 <MX_TIM1_Init+0x14c>)
 800218c:	f001 fb70 	bl	8003870 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002190:	4830      	ldr	r0, [pc, #192]	; (8002254 <MX_TIM1_Init+0x14c>)
 8002192:	f7ff fd77 	bl	8001c84 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8002196:	2330      	movs	r3, #48	; 0x30
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80021a6:	2300      	movs	r3, #0
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80021b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	4825      	ldr	r0, [pc, #148]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021be:	f001 fbf7 	bl	80039b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80021c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c6:	4823      	ldr	r0, [pc, #140]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021c8:	f7ff fd6c 	bl	8001ca4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM1, LL_TIM_ONEPULSEMODE_SINGLE);
 80021cc:	2108      	movs	r1, #8
 80021ce:	4821      	ldr	r0, [pc, #132]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021d0:	f7ff fd46 	bl	8001c60 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR3);
 80021d4:	2130      	movs	r1, #48	; 0x30
 80021d6:	481f      	ldr	r0, [pc, #124]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021d8:	f7ff ff48 	bl	800206c <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 80021dc:	2106      	movs	r1, #6
 80021de:	481d      	ldr	r0, [pc, #116]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021e0:	f7ff ff32 	bl	8002048 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 80021e4:	481b      	ldr	r0, [pc, #108]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021e6:	f7ff ff71 	bl	80020cc <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 80021ea:	481a      	ldr	r0, [pc, #104]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021ec:	f7ff ff7d 	bl	80020ea <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80021f0:	2100      	movs	r1, #0
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021f4:	f7ff ff16 	bl	8002024 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80021f8:	4816      	ldr	r0, [pc, #88]	; (8002254 <MX_TIM1_Init+0x14c>)
 80021fa:	f7ff ff58 	bl	80020ae <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 800221a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <MX_TIM1_Init+0x14c>)
 8002228:	f001 fbfa 	bl	8003a20 <LL_TIM_BDTR_Init>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800222c:	2004      	movs	r0, #4
 800222e:	f7ff fcff 	bl	8001c30 <LL_APB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_TIM1_Init+0x150>)
 8002234:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002236:	2309      	movs	r3, #9
 8002238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800223a:	2302      	movs	r3, #2
 800223c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	463b      	mov	r3, r7
 8002244:	4619      	mov	r1, r3
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_TIM1_Init+0x154>)
 8002248:	f001 f8b0 	bl	80033ac <LL_GPIO_Init>

}
 800224c:	bf00      	nop
 800224e:	3760      	adds	r7, #96	; 0x60
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012c00 	.word	0x40012c00
 8002258:	04080008 	.word	0x04080008
 800225c:	40010800 	.word	0x40010800

08002260 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002284:	2001      	movs	r0, #1
 8002286:	f7ff fcbb 	bl	8001c00 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800228a:	2004      	movs	r0, #4
 800228c:	f7ff fcd0 	bl	8001c30 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002290:	f240 1301 	movw	r3, #257	; 0x101
 8002294:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002296:	2304      	movs	r3, #4
 8002298:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	463b      	mov	r3, r7
 800229c:	4619      	mov	r1, r3
 800229e:	4833      	ldr	r0, [pc, #204]	; (800236c <MX_TIM2_Init+0x10c>)
 80022a0:	f001 f884 	bl	80033ac <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022a4:	f7ff fc26 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fc74 	bl	8001b9c <NVIC_EncodePriority>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	201c      	movs	r0, #28
 80022ba:	f7ff fc45 	bl	8001b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80022be:	201c      	movs	r0, #28
 80022c0:	f7ff fc26 	bl	8001b10 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 71;
 80022c4:	2347      	movs	r3, #71	; 0x47
 80022c6:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 60000;
 80022cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80022d0:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022e0:	f001 fac6 	bl	8003870 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80022e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022e8:	f7ff fccc 	bl	8001c84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80022ec:	2100      	movs	r1, #0
 80022ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022f2:	f7ff fe97 	bl	8002024 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80022f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022fa:	f7ff fed8 	bl	80020ae <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80022fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002302:	2101      	movs	r1, #1
 8002304:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002308:	f7ff fd54 	bl	8001db4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800230c:	2200      	movs	r2, #0
 800230e:	2101      	movs	r1, #1
 8002310:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002314:	f7ff fd9a 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002318:	2200      	movs	r2, #0
 800231a:	2101      	movs	r1, #1
 800231c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002320:	f7ff fde0 	bl	8001ee4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002324:	2200      	movs	r2, #0
 8002326:	2101      	movs	r1, #1
 8002328:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800232c:	f7ff fe26 	bl	8001f7c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_INDIRECTTI);
 8002330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002334:	2110      	movs	r1, #16
 8002336:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800233a:	f7ff fd3b 	bl	8001db4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800233e:	2200      	movs	r2, #0
 8002340:	2110      	movs	r1, #16
 8002342:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002346:	f7ff fd81 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800234a:	2200      	movs	r2, #0
 800234c:	2110      	movs	r1, #16
 800234e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002352:	f7ff fdc7 	bl	8001ee4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_FALLING);
 8002356:	2202      	movs	r2, #2
 8002358:	2110      	movs	r1, #16
 800235a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800235e:	f7ff fe0d 	bl	8001f7c <LL_TIM_IC_SetPolarity>

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40010800 	.word	0x40010800

08002370 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002394:	2002      	movs	r0, #2
 8002396:	f7ff fc33 	bl	8001c00 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800239a:	2008      	movs	r0, #8
 800239c:	f7ff fc48 	bl	8001c30 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80023a0:	f243 0330 	movw	r3, #12336	; 0x3030
 80023a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80023a6:	2304      	movs	r3, #4
 80023a8:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	463b      	mov	r3, r7
 80023ac:	4619      	mov	r1, r3
 80023ae:	4829      	ldr	r0, [pc, #164]	; (8002454 <MX_TIM3_Init+0xe4>)
 80023b0:	f000 fffc 	bl	80033ac <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 80023b4:	2103      	movs	r1, #3
 80023b6:	4828      	ldr	r0, [pc, #160]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023b8:	f7ff fe22 	bl	8002000 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80023bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023c0:	2101      	movs	r1, #1
 80023c2:	4825      	ldr	r0, [pc, #148]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023c4:	f7ff fcf6 	bl	8001db4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV2);
 80023c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023cc:	2101      	movs	r1, #1
 80023ce:	4822      	ldr	r0, [pc, #136]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023d0:	f7ff fd3c 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV4_N6);
 80023d4:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80023d8:	2101      	movs	r1, #1
 80023da:	481f      	ldr	r0, [pc, #124]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023dc:	f7ff fd82 	bl	8001ee4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2101      	movs	r1, #1
 80023e4:	481c      	ldr	r0, [pc, #112]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023e6:	f7ff fdc9 	bl	8001f7c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80023ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ee:	2110      	movs	r1, #16
 80023f0:	4819      	ldr	r0, [pc, #100]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023f2:	f7ff fcdf 	bl	8001db4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV2);
 80023f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023fa:	2110      	movs	r1, #16
 80023fc:	4816      	ldr	r0, [pc, #88]	; (8002458 <MX_TIM3_Init+0xe8>)
 80023fe:	f7ff fd25 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV4_N6);
 8002402:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002406:	2110      	movs	r1, #16
 8002408:	4813      	ldr	r0, [pc, #76]	; (8002458 <MX_TIM3_Init+0xe8>)
 800240a:	f7ff fd6b 	bl	8001ee4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800240e:	2200      	movs	r2, #0
 8002410:	2110      	movs	r1, #16
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_TIM3_Init+0xe8>)
 8002414:	f7ff fdb2 	bl	8001f7c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4809      	ldr	r0, [pc, #36]	; (8002458 <MX_TIM3_Init+0xe8>)
 8002432:	f001 fa1d 	bl	8003870 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <MX_TIM3_Init+0xe8>)
 8002438:	f7ff fc24 	bl	8001c84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800243c:	2100      	movs	r1, #0
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM3_Init+0xe8>)
 8002440:	f7ff fdf0 	bl	8002024 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002444:	4804      	ldr	r0, [pc, #16]	; (8002458 <MX_TIM3_Init+0xe8>)
 8002446:	f7ff fe32 	bl	80020ae <LL_TIM_DisableMasterSlaveMode>

}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40010c00 	.word	0x40010c00
 8002458:	40000400 	.word	0x40000400

0800245c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b092      	sub	sp, #72	; 0x48
 8002460:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2220      	movs	r2, #32
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f005 fd2f 	bl	8007ede <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	463b      	mov	r3, r7
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800248e:	2004      	movs	r0, #4
 8002490:	f7ff fbb6 	bl	8001c00 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002494:	f7ff fb2e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8002498:	4603      	mov	r3, r0
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fb7c 	bl	8001b9c <NVIC_EncodePriority>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	201e      	movs	r0, #30
 80024aa:	f7ff fb4d 	bl	8001b48 <__NVIC_SetPriority>
  //NVIC_EnableIRQ(TIM4_IRQn);

  TIM_InitStruct.Prescaler = 71;
 80024ae:	2347      	movs	r3, #71	; 0x47
 80024b0:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024b2:	2300      	movs	r3, #0
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 99;
 80024b6:	2363      	movs	r3, #99	; 0x63
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80024be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c2:	4619      	mov	r1, r3
 80024c4:	481f      	ldr	r0, [pc, #124]	; (8002544 <MX_TIM4_Init+0xe8>)
 80024c6:	f001 f9d3 	bl	8003870 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80024ca:	481e      	ldr	r0, [pc, #120]	; (8002544 <MX_TIM4_Init+0xe8>)
 80024cc:	f7ff fbda 	bl	8001c84 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 80024d0:	2110      	movs	r1, #16
 80024d2:	481c      	ldr	r0, [pc, #112]	; (8002544 <MX_TIM4_Init+0xe8>)
 80024d4:	f7ff fc2a 	bl	8001d2c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80024dc:	2301      	movs	r3, #1
 80024de:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 10;
 80024e4:	230a      	movs	r3, #10
 80024e6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 80024e8:	2302      	movs	r3, #2
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	461a      	mov	r2, r3
 80024f2:	2110      	movs	r1, #16
 80024f4:	4813      	ldr	r0, [pc, #76]	; (8002544 <MX_TIM4_Init+0xe8>)
 80024f6:	f001 fa5b 	bl	80039b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80024fa:	2110      	movs	r1, #16
 80024fc:	4811      	ldr	r0, [pc, #68]	; (8002544 <MX_TIM4_Init+0xe8>)
 80024fe:	f7ff fbd1 	bl	8001ca4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM4, LL_TIM_ONEPULSEMODE_SINGLE);
 8002502:	2108      	movs	r1, #8
 8002504:	480f      	ldr	r0, [pc, #60]	; (8002544 <MX_TIM4_Init+0xe8>)
 8002506:	f7ff fbab 	bl	8001c60 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_OC2REF);
 800250a:	2150      	movs	r1, #80	; 0x50
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_TIM4_Init+0xe8>)
 800250e:	f7ff fd89 	bl	8002024 <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM4);
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM4_Init+0xe8>)
 8002514:	f7ff fdbc 	bl	8002090 <LL_TIM_EnableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002518:	2008      	movs	r0, #8
 800251a:	f7ff fb89 	bl	8001c30 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800251e:	f248 0380 	movw	r3, #32896	; 0x8080
 8002522:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002524:	2309      	movs	r3, #9
 8002526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002528:	2302      	movs	r3, #2
 800252a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	463b      	mov	r3, r7
 8002532:	4619      	mov	r1, r3
 8002534:	4804      	ldr	r0, [pc, #16]	; (8002548 <MX_TIM4_Init+0xec>)
 8002536:	f000 ff39 	bl	80033ac <LL_GPIO_Init>

}
 800253a:	bf00      	nop
 800253c:	3748      	adds	r7, #72	; 0x48
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40000800 	.word	0x40000800
 8002548:	40010c00 	.word	0x40010c00

0800254c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800254c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800254e:	e003      	b.n	8002558 <LoopCopyDataInit>

08002550 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002552:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002554:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002556:	3104      	adds	r1, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002558:	480a      	ldr	r0, [pc, #40]	; (8002584 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800255c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800255e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002560:	d3f6      	bcc.n	8002550 <CopyDataInit>
  ldr r2, =_sbss
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002564:	e002      	b.n	800256c <LoopFillZerobss>

08002566 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002568:	f842 3b04 	str.w	r3, [r2], #4

0800256c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800256e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002570:	d3f9      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002572:	f7ff f985 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f005 fc75 	bl	8007e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257a:	f7fe fa4b 	bl	8000a14 <main>
  bx lr
 800257e:	4770      	bx	lr
  ldr r3, =_sidata
 8002580:	08009db4 	.word	0x08009db4
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002588:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 800258c:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 8002590:	20000870 	.word	0x20000870

08002594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC1_2_IRQHandler>
	...

08002598 <ST7735_write>:

uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte);


void ST7735_write(uint8_t data)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
CS_LOW_ST7735  ;
 80025a2:	2200      	movs	r2, #0
 80025a4:	2110      	movs	r1, #16
 80025a6:	4808      	ldr	r0, [pc, #32]	; (80025c8 <ST7735_write+0x30>)
 80025a8:	f000 fe16 	bl	80031d8 <HAL_GPIO_WritePin>
LL_SPI_TransmitReceive(SPI1, data);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <ST7735_write+0x34>)
 80025b2:	f7fe ff3f 	bl	8001434 <LL_SPI_TransmitReceive>
CS_HIGH_ST7735 ;
 80025b6:	2201      	movs	r2, #1
 80025b8:	2110      	movs	r1, #16
 80025ba:	4803      	ldr	r0, [pc, #12]	; (80025c8 <ST7735_write+0x30>)
 80025bc:	f000 fe0c 	bl	80031d8 <HAL_GPIO_WritePin>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010800 	.word	0x40010800
 80025cc:	40013000 	.word	0x40013000

080025d0 <ST7735_SendData>:
#define ST7735_Send(x) ST7735_write(x)

void ST7735_SendData(uint8_t data)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	A0_HIGH_ST7735 ; //A0_HIGH;
 80025da:	2201      	movs	r2, #1
 80025dc:	2108      	movs	r1, #8
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <ST7735_SendData+0x24>)
 80025e0:	f000 fdfa 	bl	80031d8 <HAL_GPIO_WritePin>
	ST7735_write(data);
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ffd6 	bl	8002598 <ST7735_write>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40010800 	.word	0x40010800

080025f8 <ST7735_SendCmd>:

void ST7735_SendCmd(uint8_t cmd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	A0_LOW_ST7735 ; //A0_LOW;
 8002602:	2200      	movs	r2, #0
 8002604:	2108      	movs	r1, #8
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <ST7735_SendCmd+0x24>)
 8002608:	f000 fde6 	bl	80031d8 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ffc2 	bl	8002598 <ST7735_write>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010800 	.word	0x40010800

08002620 <HAL_ST7735_Init>:

void HAL_ST7735_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
/*#1*/
    CS_HIGH_ST7735 ;
 8002624:	2201      	movs	r2, #1
 8002626:	2110      	movs	r1, #16
 8002628:	489d      	ldr	r0, [pc, #628]	; (80028a0 <HAL_ST7735_Init+0x280>)
 800262a:	f000 fdd5 	bl	80031d8 <HAL_GPIO_WritePin>
	RESET_HIGH_ST7735 ;
 800262e:	2201      	movs	r2, #1
 8002630:	2102      	movs	r1, #2
 8002632:	489b      	ldr	r0, [pc, #620]	; (80028a0 <HAL_ST7735_Init+0x280>)
 8002634:	f000 fdd0 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002638:	200a      	movs	r0, #10
 800263a:	f000 fca3 	bl	8002f84 <HAL_Delay>
	RESET_LOW_ST7735 ;
 800263e:	2200      	movs	r2, #0
 8002640:	2102      	movs	r1, #2
 8002642:	4897      	ldr	r0, [pc, #604]	; (80028a0 <HAL_ST7735_Init+0x280>)
 8002644:	f000 fdc8 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002648:	200a      	movs	r0, #10
 800264a:	f000 fc9b 	bl	8002f84 <HAL_Delay>
	RESET_HIGH_ST7735 ;
 800264e:	2201      	movs	r2, #1
 8002650:	2102      	movs	r1, #2
 8002652:	4893      	ldr	r0, [pc, #588]	; (80028a0 <HAL_ST7735_Init+0x280>)
 8002654:	f000 fdc0 	bl	80031d8 <HAL_GPIO_WritePin>
    CS_LOW_ST7735 ;
 8002658:	2200      	movs	r2, #0
 800265a:	2110      	movs	r1, #16
 800265c:	4890      	ldr	r0, [pc, #576]	; (80028a0 <HAL_ST7735_Init+0x280>)
 800265e:	f000 fdbb 	bl	80031d8 <HAL_GPIO_WritePin>
	
	ST7735_SendCmd(ST7735_SWRESET);// программный ресет
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff ffc8 	bl	80025f8 <ST7735_SendCmd>
	HAL_Delay(150);
 8002668:	2096      	movs	r0, #150	; 0x96
 800266a:	f000 fc8b 	bl	8002f84 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_SLPOUT); // выход из спящего режима
 800266e:	2011      	movs	r0, #17
 8002670:	f7ff ffc2 	bl	80025f8 <ST7735_SendCmd>
	HAL_Delay(500);
 8002674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002678:	f000 fc84 	bl	8002f84 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_FRMCTR1);//FRMCTR1 (B1h): Frame Rate Control (In normal mode/ Full colors)
 800267c:	20b1      	movs	r0, #177	; 0xb1
 800267e:	f7ff ffbb 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff ffa4 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002688:	202c      	movs	r0, #44	; 0x2c
 800268a:	f7ff ffa1 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2D);
 800268e:	202d      	movs	r0, #45	; 0x2d
 8002690:	f7ff ff9e 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR2);//Frame Rate Control (In Idle mode/ 8-colors)
 8002694:	20b2      	movs	r0, #178	; 0xb2
 8002696:	f7ff ffaf 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff ff98 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80026a0:	202c      	movs	r0, #44	; 0x2c
 80026a2:	f7ff ff95 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80026a6:	202d      	movs	r0, #45	; 0x2d
 80026a8:	f7ff ff92 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR3);//Frame Rate Control (In Partial mode/ full colors)
 80026ac:	20b3      	movs	r0, #179	; 0xb3
 80026ae:	f7ff ffa3 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff ff8c 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80026b8:	202c      	movs	r0, #44	; 0x2c
 80026ba:	f7ff ff89 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80026be:	202d      	movs	r0, #45	; 0x2d
 80026c0:	f7ff ff86 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x01);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff ff83 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2C);
 80026ca:	202c      	movs	r0, #44	; 0x2c
 80026cc:	f7ff ff80 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2D);
 80026d0:	202d      	movs	r0, #45	; 0x2d
 80026d2:	f7ff ff7d 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVCTR); //  Display Inversion Control
 80026d6:	20b4      	movs	r0, #180	; 0xb4
 80026d8:	f7ff ff8e 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x07);
 80026dc:	2007      	movs	r0, #7
 80026de:	f7ff ff77 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR1);
 80026e2:	20c0      	movs	r0, #192	; 0xc0
 80026e4:	f7ff ff88 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0xA2);
 80026e8:	20a2      	movs	r0, #162	; 0xa2
 80026ea:	f7ff ff71 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x02);
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff ff6e 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x84);
 80026f4:	2084      	movs	r0, #132	; 0x84
 80026f6:	f7ff ff6b 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR2);
 80026fa:	20c1      	movs	r0, #193	; 0xc1
 80026fc:	f7ff ff7c 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0xC5);
 8002700:	20c5      	movs	r0, #197	; 0xc5
 8002702:	f7ff ff65 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR3);
 8002706:	20c2      	movs	r0, #194	; 0xc2
 8002708:	f7ff ff76 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x0A);
 800270c:	200a      	movs	r0, #10
 800270e:	f7ff ff5f 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff ff5c 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR4);
 8002718:	20c3      	movs	r0, #195	; 0xc3
 800271a:	f7ff ff6d 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 800271e:	208a      	movs	r0, #138	; 0x8a
 8002720:	f7ff ff56 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2A);
 8002724:	202a      	movs	r0, #42	; 0x2a
 8002726:	f7ff ff53 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR5);
 800272a:	20c4      	movs	r0, #196	; 0xc4
 800272c:	f7ff ff64 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8002730:	208a      	movs	r0, #138	; 0x8a
 8002732:	f7ff ff4d 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0xEE);
 8002736:	20ee      	movs	r0, #238	; 0xee
 8002738:	f7ff ff4a 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_VMCTR1);
 800273c:	20c5      	movs	r0, #197	; 0xc5
 800273e:	f7ff ff5b 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x0E);
 8002742:	200e      	movs	r0, #14
 8002744:	f7ff ff44 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVOFF);
 8002748:	2020      	movs	r0, #32
 800274a:	f7ff ff55 	bl	80025f8 <ST7735_SendCmd>
	
	ST7735_SendCmd(ST7735_MADCTL);	//
 800274e:	2036      	movs	r0, #54	; 0x36
 8002750:	f7ff ff52 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0xC8);			// RGB =1 => BGR color filter panel)
 8002754:	20c8      	movs	r0, #200	; 0xc8
 8002756:	f7ff ff3b 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_COLMOD);
 800275a:	203a      	movs	r0, #58	; 0x3a
 800275c:	f7ff ff4c 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x05);
 8002760:	2005      	movs	r0, #5
 8002762:	f7ff ff35 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_CASET);
 8002766:	202a      	movs	r0, #42	; 0x2a
 8002768:	f7ff ff46 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff ff2f 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff ff2c 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7ff ff29 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x7F);
 800277e:	207f      	movs	r0, #127	; 0x7f
 8002780:	f7ff ff26 	bl	80025d0 <ST7735_SendData>

	ST7735_SendCmd(ST7735_RASET);
 8002784:	202b      	movs	r0, #43	; 0x2b
 8002786:	f7ff ff37 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff ff20 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff ff1d 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7ff ff1a 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x9F);
 800279c:	209f      	movs	r0, #159	; 0x9f
 800279e:	f7ff ff17 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRP1);
 80027a2:	20e0      	movs	r0, #224	; 0xe0
 80027a4:	f7ff ff28 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x02);
 80027a8:	2002      	movs	r0, #2
 80027aa:	f7ff ff11 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x1c);
 80027ae:	201c      	movs	r0, #28
 80027b0:	f7ff ff0e 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x07);
 80027b4:	2007      	movs	r0, #7
 80027b6:	f7ff ff0b 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x12);
 80027ba:	2012      	movs	r0, #18
 80027bc:	f7ff ff08 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x37);
 80027c0:	2037      	movs	r0, #55	; 0x37
 80027c2:	f7ff ff05 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x32);
 80027c6:	2032      	movs	r0, #50	; 0x32
 80027c8:	f7ff ff02 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x29);
 80027cc:	2029      	movs	r0, #41	; 0x29
 80027ce:	f7ff feff 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2d);
 80027d2:	202d      	movs	r0, #45	; 0x2d
 80027d4:	f7ff fefc 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x29);
 80027d8:	2029      	movs	r0, #41	; 0x29
 80027da:	f7ff fef9 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x25);
 80027de:	2025      	movs	r0, #37	; 0x25
 80027e0:	f7ff fef6 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2B);
 80027e4:	202b      	movs	r0, #43	; 0x2b
 80027e6:	f7ff fef3 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x39);	
 80027ea:	2039      	movs	r0, #57	; 0x39
 80027ec:	f7ff fef0 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff feed 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x01);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7ff feea 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x03);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f7ff fee7 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x10);
 8002802:	2010      	movs	r0, #16
 8002804:	f7ff fee4 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRN1);
 8002808:	20e1      	movs	r0, #225	; 0xe1
 800280a:	f7ff fef5 	bl	80025f8 <ST7735_SendCmd>
	ST7735_SendData(0x03);
 800280e:	2003      	movs	r0, #3
 8002810:	f7ff fede 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x1d);
 8002814:	201d      	movs	r0, #29
 8002816:	f7ff fedb 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x07);
 800281a:	2007      	movs	r0, #7
 800281c:	f7ff fed8 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x06);
 8002820:	2006      	movs	r0, #6
 8002822:	f7ff fed5 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8002826:	202e      	movs	r0, #46	; 0x2e
 8002828:	f7ff fed2 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2C);
 800282c:	202c      	movs	r0, #44	; 0x2c
 800282e:	f7ff fecf 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x29);
 8002832:	2029      	movs	r0, #41	; 0x29
 8002834:	f7ff fecc 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002838:	202d      	movs	r0, #45	; 0x2d
 800283a:	f7ff fec9 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2E);
 800283e:	202e      	movs	r0, #46	; 0x2e
 8002840:	f7ff fec6 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8002844:	202e      	movs	r0, #46	; 0x2e
 8002846:	f7ff fec3 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x37);
 800284a:	2037      	movs	r0, #55	; 0x37
 800284c:	f7ff fec0 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x3F);	
 8002850:	203f      	movs	r0, #63	; 0x3f
 8002852:	f7ff febd 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff feba 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff feb7 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x02);
 8002862:	2002      	movs	r0, #2
 8002864:	f7ff feb4 	bl	80025d0 <ST7735_SendData>
	ST7735_SendData(0x10);
 8002868:	2010      	movs	r0, #16
 800286a:	f7ff feb1 	bl	80025d0 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_NORON);//  Normal Display Mode On
 800286e:	2013      	movs	r0, #19
 8002870:	f7ff fec2 	bl	80025f8 <ST7735_SendCmd>
	HAL_Delay(10);
 8002874:	200a      	movs	r0, #10
 8002876:	f000 fb85 	bl	8002f84 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_DISPON); // Display On
 800287a:	2029      	movs	r0, #41	; 0x29
 800287c:	f7ff febc 	bl	80025f8 <ST7735_SendCmd>
	HAL_Delay(100);
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	f000 fb7f 	bl	8002f84 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_MADCTL);  // Memory Data Access Control
 8002886:	2036      	movs	r0, #54	; 0x36
 8002888:	f7ff feb6 	bl	80025f8 <ST7735_SendCmd>
#ifdef VERTICAL
	ST7735_SendData(0x00);		    // Parameter D7 D6 D5 D4 D3  D2 D1 D0
									//			 MY MX MV ML RGB MH x  x
#endif									//           0  1  1  0   0  0  0  0   -> 0x60 - rotate display 90
	ST7735_SendData(0x60);
 800288c:	2060      	movs	r0, #96	; 0x60
 800288e:	f7ff fe9f 	bl	80025d0 <ST7735_SendData>

	CS_HIGH_ST7735 ;
 8002892:	2201      	movs	r2, #1
 8002894:	2110      	movs	r1, #16
 8002896:	4802      	ldr	r0, [pc, #8]	; (80028a0 <HAL_ST7735_Init+0x280>)
 8002898:	f000 fc9e 	bl	80031d8 <HAL_GPIO_WritePin>

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40010800 	.word	0x40010800

080028a4 <ST7735_AddrSet>:




void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4603      	mov	r3, r0
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	803b      	strh	r3, [r7, #0]
  ST7735_SendCmd(ST7735_CASET); // Column address set
 80028c2:	202a      	movs	r0, #42	; 0x2a
 80028c4:	f7ff fe98 	bl	80025f8 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	2108      	movs	r1, #8
 80028cc:	4818      	ldr	r0, [pc, #96]	; (8002930 <ST7735_AddrSet+0x8c>)
 80028ce:	f000 fc83 	bl	80031d8 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fe60 	bl	8002598 <ST7735_write>
	ST7735_write(XS);
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fe5b 	bl	8002598 <ST7735_write>
	ST7735_write(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7ff fe58 	bl	8002598 <ST7735_write>
	ST7735_write(XE);
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fe53 	bl	8002598 <ST7735_write>

  ST7735_SendCmd(ST7735_RASET); // Row address set
 80028f2:	202b      	movs	r0, #43	; 0x2b
 80028f4:	f7ff fe80 	bl	80025f8 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	2108      	movs	r1, #8
 80028fc:	480c      	ldr	r0, [pc, #48]	; (8002930 <ST7735_AddrSet+0x8c>)
 80028fe:	f000 fc6b 	bl	80031d8 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff fe48 	bl	8002598 <ST7735_write>
	ST7735_write(YS);
 8002908:	88bb      	ldrh	r3, [r7, #4]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe43 	bl	8002598 <ST7735_write>
	ST7735_write(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff fe40 	bl	8002598 <ST7735_write>
	ST7735_write(YE);
 8002918:	883b      	ldrh	r3, [r7, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe3b 	bl	8002598 <ST7735_write>

  ST7735_SendCmd(ST7735_RAMWR); // Memory write
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	f7ff fe68 	bl	80025f8 <ST7735_SendCmd>
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	40010800 	.word	0x40010800

08002934 <ST7735_Clear>:

void ST7735_Clear(uint16_t Color)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
	//	ST7735_Send(Color);


	uint16_t i;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	b29b      	uxth	r3, r3
 8002948:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(0,0,WIDTH+1,HEIGHT+1);
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	22a0      	movs	r2, #160	; 0xa0
 800294e:	2100      	movs	r1, #0
 8002950:	2000      	movs	r0, #0
 8002952:	f7ff ffa7 	bl	80028a4 <ST7735_AddrSet>
	A0_HIGH_ST7735 ;
 8002956:	2201      	movs	r2, #1
 8002958:	2108      	movs	r1, #8
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <ST7735_Clear+0x58>)
 800295c:	f000 fc3c 	bl	80031d8 <HAL_GPIO_WritePin>
	for(i=0;i<20480;i++)
 8002960:	2300      	movs	r3, #0
 8002962:	81fb      	strh	r3, [r7, #14]
 8002964:	e00a      	b.n	800297c <ST7735_Clear+0x48>
	{
		ST7735_write(CH);
 8002966:	7b3b      	ldrb	r3, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fe15 	bl	8002598 <ST7735_write>
		ST7735_write(CL);
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fe11 	bl	8002598 <ST7735_write>
	for(i=0;i<20480;i++)
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	3301      	adds	r3, #1
 800297a:	81fb      	strh	r3, [r7, #14]
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002982:	d3f0      	bcc.n	8002966 <ST7735_Clear+0x32>
	}
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010800 	.word	0x40010800

08002990 <ST7735_DrawHLine>:
	ST7735_Send(CH);
	ST7735_Send(CL);
}

void ST7735_DrawHLine(uint8_t x,uint8_t x1,uint8_t y,uint16_t Color)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	4604      	mov	r4, r0
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	4603      	mov	r3, r0
 80029a4:	71bb      	strb	r3, [r7, #6]
 80029a6:	460b      	mov	r3, r1
 80029a8:	717b      	strb	r3, [r7, #5]
 80029aa:	4613      	mov	r3, r2
 80029ac:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x1,y);
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	b298      	uxth	r0, r3
 80029be:	797b      	ldrb	r3, [r7, #5]
 80029c0:	b299      	uxth	r1, r3
 80029c2:	79bb      	ldrb	r3, [r7, #6]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	797b      	ldrb	r3, [r7, #5]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f7ff ff6b 	bl	80028a4 <ST7735_AddrSet>
	len = x1-x;
 80029ce:	79bb      	ldrb	r3, [r7, #6]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 80029da:	2201      	movs	r2, #1
 80029dc:	2108      	movs	r1, #8
 80029de:	480c      	ldr	r0, [pc, #48]	; (8002a10 <ST7735_DrawHLine+0x80>)
 80029e0:	f000 fbfa 	bl	80031d8 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	81fb      	strh	r3, [r7, #14]
 80029e8:	e00a      	b.n	8002a00 <ST7735_DrawHLine+0x70>
	{
		ST7735_Send(CH);
 80029ea:	7b3b      	ldrb	r3, [r7, #12]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdd3 	bl	8002598 <ST7735_write>
		ST7735_Send(CL);
 80029f2:	7b7b      	ldrb	r3, [r7, #13]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fdcf 	bl	8002598 <ST7735_write>
	for(i=0;i<len;i++)
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	3301      	adds	r3, #1
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3f0      	bcc.n	80029ea <ST7735_DrawHLine+0x5a>
	}
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	40010800 	.word	0x40010800

08002a14 <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x,uint8_t y,uint8_t y1,uint16_t Color)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	4603      	mov	r3, r0
 8002a28:	71bb      	strb	r3, [r7, #6]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	717b      	strb	r3, [r7, #5]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x,y1);
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	b298      	uxth	r0, r3
 8002a42:	79bb      	ldrb	r3, [r7, #6]
 8002a44:	b299      	uxth	r1, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f7ff ff29 	bl	80028a4 <ST7735_AddrSet>
	len = y1-y;
 8002a52:	797b      	ldrb	r3, [r7, #5]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2108      	movs	r1, #8
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <ST7735_DrawVLine+0x80>)
 8002a64:	f000 fbb8 	bl	80031d8 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	81fb      	strh	r3, [r7, #14]
 8002a6c:	e00a      	b.n	8002a84 <ST7735_DrawVLine+0x70>
	{
		ST7735_Send(CH);
 8002a6e:	7b3b      	ldrb	r3, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fd91 	bl	8002598 <ST7735_write>
		ST7735_Send(CL);
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fd8d 	bl	8002598 <ST7735_write>
	for(i=0;i<len;i++)
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	3301      	adds	r3, #1
 8002a82:	81fb      	strh	r3, [r7, #14]
 8002a84:	89fa      	ldrh	r2, [r7, #14]
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3f0      	bcc.n	8002a6e <ST7735_DrawVLine+0x5a>
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	40010800 	.word	0x40010800

08002a98 <ST7735_DrawChar7x11>:
	}
}


void ST7735_DrawChar7x11(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	71fb      	strb	r3, [r7, #7]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71bb      	strb	r3, [r7, #6]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	717b      	strb	r3, [r7, #5]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[11];	// содержит код символа uint8_t chr
	
	CL = color & 0xFF;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	777b      	strb	r3, [r7, #29]
	CH = (color>>8) & 0xFF;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	773b      	strb	r3, [r7, #28]
	
	BCL = background_color & 0xFF;
 8002ac2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ac4:	76fb      	strb	r3, [r7, #27]
	BCH = (background_color>>8) & 0xFF;
 8002ac6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	76bb      	strb	r3, [r7, #26]
	
	memcpy(buffer,&Font7x11[(chr-32)*11],11);	// 32 - символ пробела - с него начинаются символы алфавита ASCII;
 8002ace:	797b      	ldrb	r3, [r7, #5]
 8002ad0:	f1a3 0220 	sub.w	r2, r3, #32
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <ST7735_DrawChar7x11+0x120>)
 8002ae0:	441a      	add	r2, r3
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	6810      	ldr	r0, [r2, #0]
 8002ae8:	6851      	ldr	r1, [r2, #4]
 8002aea:	c303      	stmia	r3!, {r0, r1}
 8002aec:	8911      	ldrh	r1, [r2, #8]
 8002aee:	7a92      	ldrb	r2, [r2, #10]
 8002af0:	8019      	strh	r1, [r3, #0]
 8002af2:	709a      	strb	r2, [r3, #2]
												//таблица шрифтов начинается с символа пробела
												// копируем от начала символа, в таблице шрифтов, 11 элементов,
												//из 11 элементов состоит один символ шрифта
	ST7735_AddrSet(x,y,x+7,y+11);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	b298      	uxth	r0, r3
 8002af8:	79bb      	ldrb	r3, [r7, #6]
 8002afa:	b299      	uxth	r1, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3307      	adds	r3, #7
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	79bb      	ldrb	r3, [r7, #6]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	330b      	adds	r3, #11
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f7ff feca 	bl	80028a4 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 8002b10:	2201      	movs	r2, #1
 8002b12:	2108      	movs	r1, #8
 8002b14:	4829      	ldr	r0, [pc, #164]	; (8002bbc <ST7735_DrawChar7x11+0x124>)
 8002b16:	f000 fb5f 	bl	80031d8 <HAL_GPIO_WritePin>
	for(j=0;j<11;j++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77bb      	strb	r3, [r7, #30]
 8002b1e:	e032      	b.n	8002b86 <ST7735_DrawChar7x11+0xee>
	{
		for(i=0;i<7;i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e021      	b.n	8002b6a <ST7735_DrawChar7x11+0xd2>
		{
			if((buffer[j] & (1<<i))==0)
 8002b26:	7fbb      	ldrb	r3, [r7, #30]
 8002b28:	f107 0220 	add.w	r2, r7, #32
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002b32:	461a      	mov	r2, r3
 8002b34:	7ffb      	ldrb	r3, [r7, #31]
 8002b36:	fa42 f303 	asr.w	r3, r2, r3
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <ST7735_DrawChar7x11+0xbc>
			{
				ST7735_write(BCH);
 8002b42:	7ebb      	ldrb	r3, [r7, #26]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fd27 	bl	8002598 <ST7735_write>
				ST7735_write(BCL);
 8002b4a:	7efb      	ldrb	r3, [r7, #27]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd23 	bl	8002598 <ST7735_write>
 8002b52:	e007      	b.n	8002b64 <ST7735_DrawChar7x11+0xcc>
			}
			else
			{
				ST7735_write(CH);
 8002b54:	7f3b      	ldrb	r3, [r7, #28]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fd1e 	bl	8002598 <ST7735_write>
				ST7735_write(CL);
 8002b5c:	7f7b      	ldrb	r3, [r7, #29]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fd1a 	bl	8002598 <ST7735_write>
		for(i=0;i<7;i++)
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
 8002b66:	3301      	adds	r3, #1
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d9da      	bls.n	8002b26 <ST7735_DrawChar7x11+0x8e>
			}			
		}
		ST7735_write(BCH);
 8002b70:	7ebb      	ldrb	r3, [r7, #26]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fd10 	bl	8002598 <ST7735_write>
		ST7735_write(BCL);
 8002b78:	7efb      	ldrb	r3, [r7, #27]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fd0c 	bl	8002598 <ST7735_write>
	for(j=0;j<11;j++)
 8002b80:	7fbb      	ldrb	r3, [r7, #30]
 8002b82:	3301      	adds	r3, #1
 8002b84:	77bb      	strb	r3, [r7, #30]
 8002b86:	7fbb      	ldrb	r3, [r7, #30]
 8002b88:	2b0a      	cmp	r3, #10
 8002b8a:	d9c9      	bls.n	8002b20 <ST7735_DrawChar7x11+0x88>
	}
	for(i=0;i<8;i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e00a      	b.n	8002ba8 <ST7735_DrawChar7x11+0x110>
	{
		ST7735_write(BCH);
 8002b92:	7ebb      	ldrb	r3, [r7, #26]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fcff 	bl	8002598 <ST7735_write>
		ST7735_write(BCL);
 8002b9a:	7efb      	ldrb	r3, [r7, #27]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fcfb 	bl	8002598 <ST7735_write>
	for(i=0;i<8;i++)
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	d9f1      	bls.n	8002b92 <ST7735_DrawChar7x11+0xfa>
	}
}
 8002bae:	bf00      	nop
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08009330 	.word	0x08009330
 8002bbc:	40010800 	.word	0x40010800

08002bc0 <ST7735_DrawString7x11>:

void ST7735_DrawString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	603a      	str	r2, [r7, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	71bb      	strb	r3, [r7, #6]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8002bda:	e013      	b.n	8002c04 <ST7735_DrawString7x11+0x44>
	{
		ST7735_DrawChar7x11(x+(8*i),y,chr[i],color,background_color);
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4413      	add	r3, r2
 8002be6:	b2d8      	uxtb	r0, r3
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	88bc      	ldrh	r4, [r7, #4]
 8002bf2:	79b9      	ldrb	r1, [r7, #6]
 8002bf4:	8c3b      	ldrh	r3, [r7, #32]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	f7ff ff4d 	bl	8002a98 <ST7735_DrawChar7x11>
		i++;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3301      	adds	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <ST7735_DrawString7x11+0x1c>
	}
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <ST7735_DrawNString7x11>:

void ST7735_DrawNString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color, uint8_t n)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	603a      	str	r2, [r7, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	460b      	mov	r3, r1
 8002c28:	71bb      	strb	r3, [r7, #6]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
	uint8_t CHR=0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73bb      	strb	r3, [r7, #14]
	while(n-- != 0)
 8002c36:	e01a      	b.n	8002c6e <ST7735_DrawNString7x11+0x56>
	{
		//ST7735_DrawChar7x11(x+(8*i),y, *chr++,color,background_color);
		CHR = chr[i];
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	73bb      	strb	r3, [r7, #14]
		if(CHR == '\0') CHR=0x20;
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <ST7735_DrawNString7x11+0x34>
 8002c48:	2320      	movs	r3, #32
 8002c4a:	73bb      	strb	r3, [r7, #14]
		ST7735_DrawChar7x11(x+(8*i),y,CHR,color,background_color);
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	4413      	add	r3, r2
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	88bc      	ldrh	r4, [r7, #4]
 8002c5a:	7bba      	ldrb	r2, [r7, #14]
 8002c5c:	79b9      	ldrb	r1, [r7, #6]
 8002c5e:	8c3b      	ldrh	r3, [r7, #32]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4623      	mov	r3, r4
 8002c64:	f7ff ff18 	bl	8002a98 <ST7735_DrawChar7x11>
		i++;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
	while(n-- != 0)
 8002c6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c72:	1e5a      	subs	r2, r3, #1
 8002c74:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1dd      	bne.n	8002c38 <ST7735_DrawNString7x11+0x20>
	}
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}

08002c84 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle (uint8_t x,uint8_t y,uint8_t w,uint8_t h,uint16_t Color)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	71fb      	strb	r3, [r7, #7]
 8002c96:	4603      	mov	r3, r0
 8002c98:	71bb      	strb	r3, [r7, #6]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	717b      	strb	r3, [r7, #5]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	713b      	strb	r3, [r7, #4]
	ST7735_DrawHLine(x,x+w,y,Color);
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	797b      	ldrb	r3, [r7, #5]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2d9      	uxtb	r1, r3
 8002caa:	8b3b      	ldrh	r3, [r7, #24]
 8002cac:	79ba      	ldrb	r2, [r7, #6]
 8002cae:	79f8      	ldrb	r0, [r7, #7]
 8002cb0:	f7ff fe6e 	bl	8002990 <ST7735_DrawHLine>
	ST7735_DrawVLine(x+w,y,y+h+1,Color);
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	797b      	ldrb	r3, [r7, #5]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	79ba      	ldrb	r2, [r7, #6]
 8002cbe:	793b      	ldrb	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	8b3b      	ldrh	r3, [r7, #24]
 8002cca:	79b9      	ldrb	r1, [r7, #6]
 8002ccc:	f7ff fea2 	bl	8002a14 <ST7735_DrawVLine>
	ST7735_DrawHLine(x,x+w,y+h,Color);
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	797b      	ldrb	r3, [r7, #5]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b2d9      	uxtb	r1, r3
 8002cd8:	79ba      	ldrb	r2, [r7, #6]
 8002cda:	793b      	ldrb	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	8b3b      	ldrh	r3, [r7, #24]
 8002ce2:	79f8      	ldrb	r0, [r7, #7]
 8002ce4:	f7ff fe54 	bl	8002990 <ST7735_DrawHLine>
	ST7735_DrawVLine(x,y,y+h,Color);
 8002ce8:	79ba      	ldrb	r2, [r7, #6]
 8002cea:	793b      	ldrb	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	8b3b      	ldrh	r3, [r7, #24]
 8002cf2:	79b9      	ldrb	r1, [r7, #6]
 8002cf4:	79f8      	ldrb	r0, [r7, #7]
 8002cf6:	f7ff fe8d 	bl	8002a14 <ST7735_DrawVLine>
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
	...

08002d04 <ST7735_ListBox_Draw>:
		ST7735_Send(BCL);
	}
}
//ListBox
void ST7735_ListBox_Draw(ST7735_ListBox* lb)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
	uint8_t BCH,BCL,SCH,SCL;
	uint16_t tmp,i, item, BGCol;
	
	ST7735_DrawRectangle(lb->x,lb->y,lb->w,lb->h,lb->BorderColor);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7818      	ldrb	r0, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7859      	ldrb	r1, [r3, #1]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	78da      	ldrb	r2, [r3, #3]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	789c      	ldrb	r4, [r3, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	889b      	ldrh	r3, [r3, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4623      	mov	r3, r4
 8002d24:	f7ff ffae 	bl	8002c84 <ST7735_DrawRectangle>
	ST7735_DrawRectangle(lb->x+2,lb->y+2,lb->w-4,lb->h-4,lb->BorderColor);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	b2d8      	uxtb	r0, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	3302      	adds	r3, #2
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	3b04      	subs	r3, #4
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	789b      	ldrb	r3, [r3, #2]
 8002d44:	3b04      	subs	r3, #4
 8002d46:	b2dc      	uxtb	r4, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	889b      	ldrh	r3, [r3, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4623      	mov	r3, r4
 8002d50:	f7ff ff98 	bl	8002c84 <ST7735_DrawRectangle>

	ST7735_AddrSet(lb->x+1,lb->y+1,lb->x+lb->w-1,lb->y+lb->h-1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b298      	uxth	r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	b299      	uxth	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	78db      	ldrb	r3, [r3, #3]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29c      	uxth	r4, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	789b      	ldrb	r3, [r3, #2]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4622      	mov	r2, r4
 8002d92:	f7ff fd87 	bl	80028a4 <ST7735_AddrSet>
	tmp = lb->w * lb->h;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	78db      	ldrb	r3, [r3, #3]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	7892      	ldrb	r2, [r2, #2]
 8002da0:	b292      	uxth	r2, r2
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	827b      	strh	r3, [r7, #18]
	
	BCL = lb->BackgroundColor & 0xFF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	88db      	ldrh	r3, [r3, #6]
 8002dac:	747b      	strb	r3, [r7, #17]
	BCH = (lb->BackgroundColor>>8) & 0xFF;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	88db      	ldrh	r3, [r3, #6]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	743b      	strb	r3, [r7, #16]
	SCL = lb->SelectedItemColor & 0xFF;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	895b      	ldrh	r3, [r3, #10]
 8002dbc:	73fb      	strb	r3, [r7, #15]
	SCH = (lb->SelectedItemColor>>8) & 0xFF;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	895b      	ldrh	r3, [r3, #10]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	73bb      	strb	r3, [r7, #14]
	A0_HIGH_ST7735;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2108      	movs	r1, #8
 8002dcc:	4825      	ldr	r0, [pc, #148]	; (8002e64 <ST7735_ListBox_Draw+0x160>)
 8002dce:	f000 fa03 	bl	80031d8 <HAL_GPIO_WritePin>
		ST7735_Send(BCH);
		ST7735_Send(BCL);
	}*/
	
	//item = 0;
	for(i=0;i<lb->items_count;i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	82fb      	strh	r3, [r7, #22]
 8002dd6:	e03b      	b.n	8002e50 <ST7735_ListBox_Draw+0x14c>
	{
		if(lb->items[i].visible == 1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	8afb      	ldrh	r3, [r7, #22]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d130      	bne.n	8002e4a <ST7735_ListBox_Draw+0x146>
		{
			BGCol = lb->BackgroundColor;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	88db      	ldrh	r3, [r3, #6]
 8002dec:	82bb      	strh	r3, [r7, #20]
			uint16_t ty = lb->y + (LINE_HEIGTH*i)+5;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	8afb      	ldrh	r3, [r7, #22]
 8002df6:	4619      	mov	r1, r3
 8002df8:	0049      	lsls	r1, r1, #1
 8002dfa:	4419      	add	r1, r3
 8002dfc:	0089      	lsls	r1, r1, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3305      	adds	r3, #5
 8002e08:	81bb      	strh	r3, [r7, #12]
			if(lb->items[i].selected)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	795b      	ldrb	r3, [r3, #5]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <ST7735_ListBox_Draw+0x11c>
				for(j = 0;j<colored;j++)
				{
					ST7735_Send(SCH);
					ST7735_Send(SCL);
				}*/
				BGCol = lb->SelectedItemColor;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	895b      	ldrh	r3, [r3, #10]
 8002e1e:	82bb      	strh	r3, [r7, #20]
			}
			ST7735_DrawNString7x11(lb->x+9,ty,(uint8_t *)lb->items[i].text,lb->ItemTextColor,BGCol, FILENAME_SIZE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	3309      	adds	r3, #9
 8002e26:	b2d8      	uxtb	r0, r3
 8002e28:	89bb      	ldrh	r3, [r7, #12]
 8002e2a:	b2d9      	uxtb	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	8afb      	ldrh	r3, [r7, #22]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	891c      	ldrh	r4, [r3, #8]
 8002e3c:	230d      	movs	r3, #13
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	8abb      	ldrh	r3, [r7, #20]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4623      	mov	r3, r4
 8002e46:	f7ff fee7 	bl	8002c18 <ST7735_DrawNString7x11>
	for(i=0;i<lb->items_count;i++)
 8002e4a:	8afb      	ldrh	r3, [r7, #22]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	82fb      	strh	r3, [r7, #22]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7c1b      	ldrb	r3, [r3, #16]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8afa      	ldrh	r2, [r7, #22]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3bd      	bcc.n	8002dd8 <ST7735_ListBox_Draw+0xd4>
		}
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	40010800 	.word	0x40010800

08002e68 <ST7735_ListBox_StructInit>:
{
	return lb->items[lb->SelectedItemIndex];
}

void ST7735_ListBox_StructInit(ST7735_ListBox* lb,uint8_t x,uint8_t y,ST7735_ListBox_Item* items,uint8_t item_count)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	72fb      	strb	r3, [r7, #11]
 8002e76:	4613      	mov	r3, r2
 8002e78:	72bb      	strb	r3, [r7, #10]
	FileList.BorderColor=COLOR565_DARK_SLATE_BLUE;
	FileList.SelectedItemColor=COLOR565_BLANCHED_ALMOND;
	FileList.ItemTextColor=COLOR565_TEAL;*/
	//lb->BackgroundColor = COLOR565_CRIMSON;
	//lb->BorderColor = COLOR565_ALICE_BLUE;
	lb->items = items;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
	lb->items_count = item_count;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	7e3a      	ldrb	r2, [r7, #24]
 8002e84:	741a      	strb	r2, [r3, #16]
	//lb->ItemTextColor = COLOR565_ALICE_BLUE;
	//lb->SelectedItemColor = COLOR565_DARK_BLUE;
	lb->SelectedItemIndex = 0;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	745a      	strb	r2, [r3, #17]
	//lb->w = 75;
	lb->w = WIDTH;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	229f      	movs	r2, #159	; 0x9f
 8002e90:	70da      	strb	r2, [r3, #3]
	//lb->w = FILENAME_SIZE*8;
	lb->h = item_count *LINE_HEIGTH+7;
 8002e92:	7e3b      	ldrb	r3, [r7, #24]
 8002e94:	461a      	mov	r2, r3
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	441a      	add	r2, r3
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3307      	adds	r3, #7
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	709a      	strb	r2, [r3, #2]
	lb->x = x;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	7afa      	ldrb	r2, [r7, #11]
 8002eac:	701a      	strb	r2, [r3, #0]
	lb->y = y;///////////////смещение вниз от верхнего края на 15 пикселей
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	7aba      	ldrb	r2, [r7, #10]
 8002eb2:	705a      	strb	r2, [r3, #1]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_Init+0x28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_Init+0x28>)
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 f929 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f000 f808 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7fe facc 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x54>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_InitTick+0x58>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f958 	bl	80031c0 <HAL_SYSTICK_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00e      	b.n	8002f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d80a      	bhi.n	8002f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f20:	2200      	movs	r2, #0
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f000 f91e 	bl	8003168 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <HAL_InitTick+0x5c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000008 	.word	0x20000008
 8002f44:	20000010 	.word	0x20000010
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x1c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_IncTick+0x20>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <HAL_IncTick+0x20>)
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000010 	.word	0x20000010
 8002f6c:	200003fc 	.word	0x200003fc

08002f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return uwTick;
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <HAL_GetTick+0x10>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	200003fc 	.word	0x200003fc

08002f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d005      	beq.n	8002faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_Delay+0x40>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002faa:	bf00      	nop
 8002fac:	f7ff ffe0 	bl	8002f70 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8f7      	bhi.n	8002fac <HAL_Delay+0x28>
  {
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000010 	.word	0x20000010

08002fc8 <__NVIC_SetPriorityGrouping>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_SetPriority>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff90 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b07      	cmp	r3, #7
 8003134:	d00f      	beq.n	8003156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b06      	cmp	r3, #6
 800313a:	d00c      	beq.n	8003156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d009      	beq.n	8003156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d006      	beq.n	8003156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d003      	beq.n	8003156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800314e:	2192      	movs	r1, #146	; 0x92
 8003150:	4804      	ldr	r0, [pc, #16]	; (8003164 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003152:	f7fd fe17 	bl	8000d84 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff36 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	08009194 	.word	0x08009194

08003168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d903      	bls.n	8003188 <HAL_NVIC_SetPriority+0x20>
 8003180:	21aa      	movs	r1, #170	; 0xaa
 8003182:	480e      	ldr	r0, [pc, #56]	; (80031bc <HAL_NVIC_SetPriority+0x54>)
 8003184:	f7fd fdfe 	bl	8000d84 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d903      	bls.n	8003196 <HAL_NVIC_SetPriority+0x2e>
 800318e:	21ab      	movs	r1, #171	; 0xab
 8003190:	480a      	ldr	r0, [pc, #40]	; (80031bc <HAL_NVIC_SetPriority+0x54>)
 8003192:	f7fd fdf7 	bl	8000d84 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003196:	f7ff ff3b 	bl	8003010 <__NVIC_GetPriorityGrouping>
 800319a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	f7ff ff6d 	bl	8003080 <NVIC_EncodePriority>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff3c 	bl	800302c <__NVIC_SetPriority>
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	08009194 	.word	0x08009194

080031c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff8b 	bl	80030e4 <SysTick_Config>
 80031ce:	4603      	mov	r3, r0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_GPIO_WritePin+0x20>
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_GPIO_WritePin+0x2a>
 80031f8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80031fc:	480e      	ldr	r0, [pc, #56]	; (8003238 <HAL_GPIO_WritePin+0x60>)
 80031fe:	f7fd fdc1 	bl	8000d84 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003202:	787b      	ldrb	r3, [r7, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_WritePin+0x40>
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d004      	beq.n	8003218 <HAL_GPIO_WritePin+0x40>
 800320e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003212:	4809      	ldr	r0, [pc, #36]	; (8003238 <HAL_GPIO_WritePin+0x60>)
 8003214:	f7fd fdb6 	bl	8000d84 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	611a      	str	r2, [r3, #16]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	080091d0 	.word	0x080091d0

0800323c <LL_GPIO_SetPinMode>:
{
 800323c:	b490      	push	{r4, r7}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0e1b      	lsrs	r3, r3, #24
 8003250:	4413      	add	r3, r2
 8003252:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	613b      	str	r3, [r7, #16]
  return result;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	210f      	movs	r1, #15
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	401a      	ands	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	61bb      	str	r3, [r7, #24]
  return result;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	4313      	orrs	r3, r2
 8003294:	6023      	str	r3, [r4, #0]
}
 8003296:	bf00      	nop
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bc90      	pop	{r4, r7}
 800329e:	4770      	bx	lr

080032a0 <LL_GPIO_SetPinSpeed>:
{
 80032a0:	b490      	push	{r4, r7}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0e1b      	lsrs	r3, r3, #24
 80032b4:	4413      	add	r3, r2
 80032b6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	613b      	str	r3, [r7, #16]
  return result;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	2103      	movs	r1, #3
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	401a      	ands	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	61bb      	str	r3, [r7, #24]
  return result;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	6023      	str	r3, [r4, #0]
}
 80032fa:	bf00      	nop
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc90      	pop	{r4, r7}
 8003302:	4770      	bx	lr

08003304 <LL_GPIO_SetPinOutputType>:
{
 8003304:	b490      	push	{r4, r7}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	0e1b      	lsrs	r3, r3, #24
 8003318:	4413      	add	r3, r2
 800331a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800331c:	6822      	ldr	r2, [r4, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	613b      	str	r3, [r7, #16]
  return result;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	2104      	movs	r1, #4
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	61bb      	str	r3, [r7, #24]
  return result;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	4313      	orrs	r3, r2
 800335c:	6023      	str	r3, [r4, #0]
}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bc90      	pop	{r4, r7}
 8003366:	4770      	bx	lr

08003368 <LL_GPIO_SetPinPull>:
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	613b      	str	r3, [r7, #16]
  return result;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	408b      	lsls	r3, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	60da      	str	r2, [r3, #12]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a62      	ldr	r2, [pc, #392]	; (8003544 <LL_GPIO_Init+0x198>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <LL_GPIO_Init+0x3a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a61      	ldr	r2, [pc, #388]	; (8003548 <LL_GPIO_Init+0x19c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <LL_GPIO_Init+0x3a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a60      	ldr	r2, [pc, #384]	; (800354c <LL_GPIO_Init+0x1a0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <LL_GPIO_Init+0x3a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a5f      	ldr	r2, [pc, #380]	; (8003550 <LL_GPIO_Init+0x1a4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <LL_GPIO_Init+0x3a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <LL_GPIO_Init+0x1a8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <LL_GPIO_Init+0x3a>
 80033de:	21a3      	movs	r1, #163	; 0xa3
 80033e0:	485d      	ldr	r0, [pc, #372]	; (8003558 <LL_GPIO_Init+0x1ac>)
 80033e2:	f7fd fccf 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <LL_GPIO_Init+0x52>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <LL_GPIO_Init+0x5a>
 80033fe:	21a4      	movs	r1, #164	; 0xa4
 8003400:	4855      	ldr	r0, [pc, #340]	; (8003558 <LL_GPIO_Init+0x1ac>)
 8003402:	f7fd fcbf 	bl	8000d84 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]
  return result;
 800341c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003426:	e080      	b.n	800352a <LL_GPIO_Init+0x17e>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	409a      	lsls	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d076      	beq.n	8003524 <LL_GPIO_Init+0x178>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b07      	cmp	r3, #7
 800343a:	d806      	bhi.n	800344a <LL_GPIO_Init+0x9e>
      {
        currentpin = (0x00000101uL << pinpos);
 800343c:	f240 1201 	movw	r2, #257	; 0x101
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e008      	b.n	800345c <LL_GPIO_Init+0xb0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b08      	subs	r3, #8
 800344e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800345a:	61bb      	str	r3, [r7, #24]
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <LL_GPIO_Init+0xe0>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d00f      	beq.n	800348c <LL_GPIO_Init+0xe0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d00b      	beq.n	800348c <LL_GPIO_Init+0xe0>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <LL_GPIO_Init+0xe0>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b09      	cmp	r3, #9
 8003482:	d003      	beq.n	800348c <LL_GPIO_Init+0xe0>
 8003484:	21bd      	movs	r1, #189	; 0xbd
 8003486:	4834      	ldr	r0, [pc, #208]	; (8003558 <LL_GPIO_Init+0x1ac>)
 8003488:	f7fd fc7c 	bl	8000d84 <assert_failed>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <LL_GPIO_Init+0xf8>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d003      	beq.n	80034a4 <LL_GPIO_Init+0xf8>
 800349c:	21be      	movs	r1, #190	; 0xbe
 800349e:	482e      	ldr	r0, [pc, #184]	; (8003558 <LL_GPIO_Init+0x1ac>)
 80034a0:	f7fd fc70 	bl	8000d84 <assert_failed>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	461a      	mov	r2, r3
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff5b 	bl	8003368 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff febe 	bl	800323c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d003      	beq.n	80034d0 <LL_GPIO_Init+0x124>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d129      	bne.n	8003524 <LL_GPIO_Init+0x178>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d00b      	beq.n	80034f0 <LL_GPIO_Init+0x144>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <LL_GPIO_Init+0x144>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d003      	beq.n	80034f0 <LL_GPIO_Init+0x144>
 80034e8:	21c9      	movs	r1, #201	; 0xc9
 80034ea:	481b      	ldr	r0, [pc, #108]	; (8003558 <LL_GPIO_Init+0x1ac>)
 80034ec:	f7fd fc4a 	bl	8000d84 <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <LL_GPIO_Init+0x15c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d003      	beq.n	8003508 <LL_GPIO_Init+0x15c>
 8003500:	21ca      	movs	r1, #202	; 0xca
 8003502:	4815      	ldr	r0, [pc, #84]	; (8003558 <LL_GPIO_Init+0x1ac>)
 8003504:	f7fd fc3e 	bl	8000d84 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	461a      	mov	r2, r3
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fec5 	bl	80032a0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fef0 	bl	8003304 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3301      	adds	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af78 	bne.w	8003428 <LL_GPIO_Init+0x7c>
  }
  return (SUCCESS);
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40010800 	.word	0x40010800
 8003548:	40010c00 	.word	0x40010c00
 800354c:	40011000 	.word	0x40011000
 8003550:	40011400 	.word	0x40011400
 8003554:	40011800 	.word	0x40011800
 8003558:	0800920c 	.word	0x0800920c

0800355c <LL_SPI_IsEnabled>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d101      	bne.n	8003574 <LL_SPI_IsEnabled+0x18>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <LL_SPI_IsEnabled+0x1a>
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <LL_SPI_SetCRCPolynomial>:
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	611a      	str	r2, [r3, #16]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
	...

080035a0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a77      	ldr	r2, [pc, #476]	; (8003790 <LL_SPI_Init+0x1f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <LL_SPI_Init+0x26>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a76      	ldr	r2, [pc, #472]	; (8003794 <LL_SPI_Init+0x1f4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <LL_SPI_Init+0x26>
 80035be:	21b7      	movs	r1, #183	; 0xb7
 80035c0:	4875      	ldr	r0, [pc, #468]	; (8003798 <LL_SPI_Init+0x1f8>)
 80035c2:	f7fd fbdf 	bl	8000d84 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <LL_SPI_Init+0x54>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d00d      	beq.n	80035f4 <LL_SPI_Init+0x54>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e0:	d008      	beq.n	80035f4 <LL_SPI_Init+0x54>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035ea:	d003      	beq.n	80035f4 <LL_SPI_Init+0x54>
 80035ec:	21ba      	movs	r1, #186	; 0xba
 80035ee:	486a      	ldr	r0, [pc, #424]	; (8003798 <LL_SPI_Init+0x1f8>)
 80035f0:	f7fd fbc8 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fc:	d007      	beq.n	800360e <LL_SPI_Init+0x6e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <LL_SPI_Init+0x6e>
 8003606:	21bb      	movs	r1, #187	; 0xbb
 8003608:	4863      	ldr	r0, [pc, #396]	; (8003798 <LL_SPI_Init+0x1f8>)
 800360a:	f7fd fbbb 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <LL_SPI_Init+0x88>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361e:	d003      	beq.n	8003628 <LL_SPI_Init+0x88>
 8003620:	21bc      	movs	r1, #188	; 0xbc
 8003622:	485d      	ldr	r0, [pc, #372]	; (8003798 <LL_SPI_Init+0x1f8>)
 8003624:	f7fd fbae 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <LL_SPI_Init+0xa0>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d003      	beq.n	8003640 <LL_SPI_Init+0xa0>
 8003638:	21bd      	movs	r1, #189	; 0xbd
 800363a:	4857      	ldr	r0, [pc, #348]	; (8003798 <LL_SPI_Init+0x1f8>)
 800363c:	f7fd fba2 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <LL_SPI_Init+0xb8>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d003      	beq.n	8003658 <LL_SPI_Init+0xb8>
 8003650:	21be      	movs	r1, #190	; 0xbe
 8003652:	4851      	ldr	r0, [pc, #324]	; (8003798 <LL_SPI_Init+0x1f8>)
 8003654:	f7fd fb96 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d00c      	beq.n	800367c <LL_SPI_Init+0xdc>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <LL_SPI_Init+0xdc>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003672:	d003      	beq.n	800367c <LL_SPI_Init+0xdc>
 8003674:	21bf      	movs	r1, #191	; 0xbf
 8003676:	4848      	ldr	r0, [pc, #288]	; (8003798 <LL_SPI_Init+0x1f8>)
 8003678:	f7fd fb84 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01f      	beq.n	80036c4 <LL_SPI_Init+0x124>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d01b      	beq.n	80036c4 <LL_SPI_Init+0x124>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d017      	beq.n	80036c4 <LL_SPI_Init+0x124>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b18      	cmp	r3, #24
 800369a:	d013      	beq.n	80036c4 <LL_SPI_Init+0x124>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d00f      	beq.n	80036c4 <LL_SPI_Init+0x124>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b28      	cmp	r3, #40	; 0x28
 80036aa:	d00b      	beq.n	80036c4 <LL_SPI_Init+0x124>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d007      	beq.n	80036c4 <LL_SPI_Init+0x124>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b38      	cmp	r3, #56	; 0x38
 80036ba:	d003      	beq.n	80036c4 <LL_SPI_Init+0x124>
 80036bc:	21c0      	movs	r1, #192	; 0xc0
 80036be:	4836      	ldr	r0, [pc, #216]	; (8003798 <LL_SPI_Init+0x1f8>)
 80036c0:	f7fd fb60 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d007      	beq.n	80036dc <LL_SPI_Init+0x13c>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <LL_SPI_Init+0x13c>
 80036d4:	21c1      	movs	r1, #193	; 0xc1
 80036d6:	4830      	ldr	r0, [pc, #192]	; (8003798 <LL_SPI_Init+0x1f8>)
 80036d8:	f7fd fb54 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	d007      	beq.n	80036f6 <LL_SPI_Init+0x156>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <LL_SPI_Init+0x156>
 80036ee:	21c2      	movs	r1, #194	; 0xc2
 80036f0:	4829      	ldr	r0, [pc, #164]	; (8003798 <LL_SPI_Init+0x1f8>)
 80036f2:	f7fd fb47 	bl	8000d84 <assert_failed>

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff30 	bl	800355c <LL_SPI_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d141      	bne.n	8003786 <LL_SPI_Init+0x1e6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6852      	ldr	r2, [r2, #4]
 8003716:	4311      	orrs	r1, r2
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	6892      	ldr	r2, [r2, #8]
 800371c:	4311      	orrs	r1, r2
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	4311      	orrs	r1, r2
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	6912      	ldr	r2, [r2, #16]
 8003728:	4311      	orrs	r1, r2
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	6952      	ldr	r2, [r2, #20]
 800372e:	4311      	orrs	r1, r2
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	6992      	ldr	r2, [r2, #24]
 8003734:	4311      	orrs	r1, r2
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	69d2      	ldr	r2, [r2, #28]
 800373a:	4311      	orrs	r1, r2
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	6a12      	ldr	r2, [r2, #32]
 8003740:	430a      	orrs	r2, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 0204 	bic.w	r2, r3, #4
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003764:	d10d      	bne.n	8003782 <LL_SPI_Init+0x1e2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <LL_SPI_Init+0x1d6>
 800376e:	21e5      	movs	r1, #229	; 0xe5
 8003770:	4809      	ldr	r0, [pc, #36]	; (8003798 <LL_SPI_Init+0x1f8>)
 8003772:	f7fd fb07 	bl	8000d84 <assert_failed>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff feff 	bl	8003580 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40013000 	.word	0x40013000
 8003794:	40003800 	.word	0x40003800
 8003798:	08009244 	.word	0x08009244

0800379c <LL_TIM_SetPrescaler>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <LL_TIM_SetAutoReload>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <LL_TIM_SetRepetitionCounter>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <LL_TIM_OC_SetCompareCH1>:
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <LL_TIM_OC_SetCompareCH2>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <LL_TIM_OC_SetCompareCH3>:
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <LL_TIM_OC_SetCompareCH4>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a48      	ldr	r2, [pc, #288]	; (80039a0 <LL_TIM_Init+0x130>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d010      	beq.n	80038a4 <LL_TIM_Init+0x34>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d00c      	beq.n	80038a4 <LL_TIM_Init+0x34>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <LL_TIM_Init+0x134>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d008      	beq.n	80038a4 <LL_TIM_Init+0x34>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <LL_TIM_Init+0x138>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <LL_TIM_Init+0x34>
 800389a:	f240 1149 	movw	r1, #329	; 0x149
 800389e:	4843      	ldr	r0, [pc, #268]	; (80039ac <LL_TIM_Init+0x13c>)
 80038a0:	f7fd fa70 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d014      	beq.n	80038d6 <LL_TIM_Init+0x66>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d010      	beq.n	80038d6 <LL_TIM_Init+0x66>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d00c      	beq.n	80038d6 <LL_TIM_Init+0x66>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d008      	beq.n	80038d6 <LL_TIM_Init+0x66>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b60      	cmp	r3, #96	; 0x60
 80038ca:	d004      	beq.n	80038d6 <LL_TIM_Init+0x66>
 80038cc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80038d0:	4836      	ldr	r0, [pc, #216]	; (80039ac <LL_TIM_Init+0x13c>)
 80038d2:	f7fd fa57 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <LL_TIM_Init+0x8c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d009      	beq.n	80038fc <LL_TIM_Init+0x8c>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d004      	beq.n	80038fc <LL_TIM_Init+0x8c>
 80038f2:	f240 114b 	movw	r1, #331	; 0x14b
 80038f6:	482d      	ldr	r0, [pc, #180]	; (80039ac <LL_TIM_Init+0x13c>)
 80038f8:	f7fd fa44 	bl	8000d84 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <LL_TIM_Init+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <LL_TIM_Init+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d007      	beq.n	8003922 <LL_TIM_Init+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <LL_TIM_Init+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <LL_TIM_Init+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <LL_TIM_Init+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d106      	bne.n	8003930 <LL_TIM_Init+0xc0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <LL_TIM_Init+0x130>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <LL_TIM_Init+0xe0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393e:	d007      	beq.n	8003950 <LL_TIM_Init+0xe0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <LL_TIM_Init+0x134>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <LL_TIM_Init+0xe0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <LL_TIM_Init+0x138>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d106      	bne.n	800395e <LL_TIM_Init+0xee>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff23 	bl	80037b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff10 	bl	800379c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <LL_TIM_Init+0x130>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d105      	bne.n	8003990 <LL_TIM_Init+0x120>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff20 	bl	80037d0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff5e 	bl	8003852 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	0800927c 	.word	0x0800927c

080039b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d012      	beq.n	80039ec <LL_TIM_OC_Init+0x3c>
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d802      	bhi.n	80039d0 <LL_TIM_OC_Init+0x20>
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d007      	beq.n	80039de <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80039ce:	e022      	b.n	8003a16 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	d011      	beq.n	80039fa <LL_TIM_OC_Init+0x4a>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d015      	beq.n	8003a08 <LL_TIM_OC_Init+0x58>
      break;
 80039dc:	e01b      	b.n	8003a16 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8cf 	bl	8003b84 <OC1Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ea:	e014      	b.n	8003a16 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9be 	bl	8003d70 <OC2Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e00d      	b.n	8003a16 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fab1 	bl	8003f64 <OC3Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	e006      	b.n	8003a16 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fba4 	bl	8004158 <OC4Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
      break;
 8003a14:	bf00      	nop
  }

  return result;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <LL_TIM_BDTR_Init+0x15c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <LL_TIM_BDTR_Init+0x20>
 8003a36:	f240 21bf 	movw	r1, #703	; 0x2bf
 8003a3a:	4851      	ldr	r0, [pc, #324]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003a3c:	f7fd f9a2 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <LL_TIM_BDTR_Init+0x3c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a50:	d004      	beq.n	8003a5c <LL_TIM_BDTR_Init+0x3c>
 8003a52:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8003a56:	484a      	ldr	r0, [pc, #296]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003a58:	f7fd f994 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <LL_TIM_BDTR_Init+0x58>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d004      	beq.n	8003a78 <LL_TIM_BDTR_Init+0x58>
 8003a6e:	f240 21c1 	movw	r1, #705	; 0x2c1
 8003a72:	4843      	ldr	r0, [pc, #268]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003a74:	f7fd f986 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <LL_TIM_BDTR_Init+0x88>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d00e      	beq.n	8003aa8 <LL_TIM_BDTR_Init+0x88>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a92:	d009      	beq.n	8003aa8 <LL_TIM_BDTR_Init+0x88>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9c:	d004      	beq.n	8003aa8 <LL_TIM_BDTR_Init+0x88>
 8003a9e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003aa2:	4837      	ldr	r0, [pc, #220]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003aa4:	f7fd f96e 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	89db      	ldrh	r3, [r3, #14]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <LL_TIM_BDTR_Init+0xa4>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	89db      	ldrh	r3, [r3, #14]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d004      	beq.n	8003ac4 <LL_TIM_BDTR_Init+0xa4>
 8003aba:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003abe:	4830      	ldr	r0, [pc, #192]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003ac0:	f7fd f960 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <LL_TIM_BDTR_Init+0xc0>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad4:	d004      	beq.n	8003ae0 <LL_TIM_BDTR_Init+0xc0>
 8003ad6:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8003ada:	4829      	ldr	r0, [pc, #164]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003adc:	f7fd f952 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <LL_TIM_BDTR_Init+0xdc>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af0:	d004      	beq.n	8003afc <LL_TIM_BDTR_Init+0xdc>
 8003af2:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003af6:	4822      	ldr	r0, [pc, #136]	; (8003b80 <LL_TIM_BDTR_Init+0x160>)
 8003af8:	f7fd f944 	bl	8000d84 <assert_failed>

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	7b12      	ldrb	r2, [r2, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	89d2      	ldrh	r2, [r2, #14]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	0800927c 	.word	0x0800927c

08003b84 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a73      	ldr	r2, [pc, #460]	; (8003d60 <OC1Config+0x1dc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d010      	beq.n	8003bb8 <OC1Config+0x34>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d00c      	beq.n	8003bb8 <OC1Config+0x34>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a70      	ldr	r2, [pc, #448]	; (8003d64 <OC1Config+0x1e0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d008      	beq.n	8003bb8 <OC1Config+0x34>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a6f      	ldr	r2, [pc, #444]	; (8003d68 <OC1Config+0x1e4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <OC1Config+0x34>
 8003bae:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8003bb2:	486e      	ldr	r0, [pc, #440]	; (8003d6c <OC1Config+0x1e8>)
 8003bb4:	f7fd f8e6 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <OC1Config+0x7e>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d01c      	beq.n	8003c02 <OC1Config+0x7e>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d018      	beq.n	8003c02 <OC1Config+0x7e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d014      	beq.n	8003c02 <OC1Config+0x7e>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d010      	beq.n	8003c02 <OC1Config+0x7e>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d00c      	beq.n	8003c02 <OC1Config+0x7e>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d008      	beq.n	8003c02 <OC1Config+0x7e>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b70      	cmp	r3, #112	; 0x70
 8003bf6:	d004      	beq.n	8003c02 <OC1Config+0x7e>
 8003bf8:	f240 21f5 	movw	r1, #757	; 0x2f5
 8003bfc:	485b      	ldr	r0, [pc, #364]	; (8003d6c <OC1Config+0x1e8>)
 8003bfe:	f7fd f8c1 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <OC1Config+0x98>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d004      	beq.n	8003c1c <OC1Config+0x98>
 8003c12:	f240 21f6 	movw	r1, #758	; 0x2f6
 8003c16:	4855      	ldr	r0, [pc, #340]	; (8003d6c <OC1Config+0x1e8>)
 8003c18:	f7fd f8b4 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <OC1Config+0xb2>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d004      	beq.n	8003c36 <OC1Config+0xb2>
 8003c2c:	f240 21f7 	movw	r1, #759	; 0x2f7
 8003c30:	484e      	ldr	r0, [pc, #312]	; (8003d6c <OC1Config+0x1e8>)
 8003c32:	f7fd f8a7 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <OC1Config+0xcc>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d004      	beq.n	8003c50 <OC1Config+0xcc>
 8003c46:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8003c4a:	4848      	ldr	r0, [pc, #288]	; (8003d6c <OC1Config+0x1e8>)
 8003c4c:	f7fd f89a 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <OC1Config+0xe6>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d004      	beq.n	8003c6a <OC1Config+0xe6>
 8003c60:	f240 21f9 	movw	r1, #761	; 0x2f9
 8003c64:	4841      	ldr	r0, [pc, #260]	; (8003d6c <OC1Config+0x1e8>)
 8003c66:	f7fd f88d 	bl	8000d84 <assert_failed>

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0202 	bic.w	r2, r3, #2
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <OC1Config+0x1dc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d13a      	bne.n	8003d38 <OC1Config+0x1b4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <OC1Config+0x15a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d004      	beq.n	8003cde <OC1Config+0x15a>
 8003cd4:	f240 3115 	movw	r1, #789	; 0x315
 8003cd8:	4824      	ldr	r0, [pc, #144]	; (8003d6c <OC1Config+0x1e8>)
 8003cda:	f7fd f853 	bl	8000d84 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <OC1Config+0x176>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d004      	beq.n	8003cfa <OC1Config+0x176>
 8003cf0:	f240 3116 	movw	r1, #790	; 0x316
 8003cf4:	481d      	ldr	r0, [pc, #116]	; (8003d6c <OC1Config+0x1e8>)
 8003cf6:	f7fd f845 	bl	8000d84 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0208 	bic.w	r2, r3, #8
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f023 0204 	bic.w	r2, r3, #4
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fd4d 	bl	80037ea <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	0800927c 	.word	0x0800927c

08003d70 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(TIMx));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a75      	ldr	r2, [pc, #468]	; (8003f54 <OC2Config+0x1e4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d010      	beq.n	8003da4 <OC2Config+0x34>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d00c      	beq.n	8003da4 <OC2Config+0x34>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a72      	ldr	r2, [pc, #456]	; (8003f58 <OC2Config+0x1e8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d008      	beq.n	8003da4 <OC2Config+0x34>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a71      	ldr	r2, [pc, #452]	; (8003f5c <OC2Config+0x1ec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <OC2Config+0x34>
 8003d9a:	f240 3143 	movw	r1, #835	; 0x343
 8003d9e:	4870      	ldr	r0, [pc, #448]	; (8003f60 <OC2Config+0x1f0>)
 8003da0:	f7fc fff0 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <OC2Config+0x7e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d01c      	beq.n	8003dee <OC2Config+0x7e>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d018      	beq.n	8003dee <OC2Config+0x7e>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d014      	beq.n	8003dee <OC2Config+0x7e>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d010      	beq.n	8003dee <OC2Config+0x7e>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b50      	cmp	r3, #80	; 0x50
 8003dd2:	d00c      	beq.n	8003dee <OC2Config+0x7e>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d008      	beq.n	8003dee <OC2Config+0x7e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d004      	beq.n	8003dee <OC2Config+0x7e>
 8003de4:	f44f 7151 	mov.w	r1, #836	; 0x344
 8003de8:	485d      	ldr	r0, [pc, #372]	; (8003f60 <OC2Config+0x1f0>)
 8003dea:	f7fc ffcb 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <OC2Config+0x98>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d004      	beq.n	8003e08 <OC2Config+0x98>
 8003dfe:	f240 3145 	movw	r1, #837	; 0x345
 8003e02:	4857      	ldr	r0, [pc, #348]	; (8003f60 <OC2Config+0x1f0>)
 8003e04:	f7fc ffbe 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <OC2Config+0xb2>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d004      	beq.n	8003e22 <OC2Config+0xb2>
 8003e18:	f240 3146 	movw	r1, #838	; 0x346
 8003e1c:	4850      	ldr	r0, [pc, #320]	; (8003f60 <OC2Config+0x1f0>)
 8003e1e:	f7fc ffb1 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <OC2Config+0xcc>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d004      	beq.n	8003e3c <OC2Config+0xcc>
 8003e32:	f240 3147 	movw	r1, #839	; 0x347
 8003e36:	484a      	ldr	r0, [pc, #296]	; (8003f60 <OC2Config+0x1f0>)
 8003e38:	f7fc ffa4 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <OC2Config+0xe6>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d004      	beq.n	8003e56 <OC2Config+0xe6>
 8003e4c:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003e50:	4843      	ldr	r0, [pc, #268]	; (8003f60 <OC2Config+0x1f0>)
 8003e52:	f7fc ff97 	bl	8000d84 <assert_failed>

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0220 	bic.w	r2, r3, #32
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a29      	ldr	r2, [pc, #164]	; (8003f54 <OC2Config+0x1e4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d13b      	bne.n	8003f2c <OC2Config+0x1bc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <OC2Config+0x160>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	d004      	beq.n	8003ed0 <OC2Config+0x160>
 8003ec6:	f44f 7159 	mov.w	r1, #868	; 0x364
 8003eca:	4825      	ldr	r0, [pc, #148]	; (8003f60 <OC2Config+0x1f0>)
 8003ecc:	f7fc ff5a 	bl	8000d84 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <OC2Config+0x17c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee0:	d004      	beq.n	8003eec <OC2Config+0x17c>
 8003ee2:	f240 3165 	movw	r1, #869	; 0x365
 8003ee6:	481e      	ldr	r0, [pc, #120]	; (8003f60 <OC2Config+0x1f0>)
 8003ee8:	f7fc ff4c 	bl	8000d84 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	019b      	lsls	r3, r3, #6
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fc60 	bl	8003804 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	0800927c 	.word	0x0800927c

08003f64 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC3_INSTANCE(TIMx));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a75      	ldr	r2, [pc, #468]	; (8004148 <OC3Config+0x1e4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d010      	beq.n	8003f98 <OC3Config+0x34>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d00c      	beq.n	8003f98 <OC3Config+0x34>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a72      	ldr	r2, [pc, #456]	; (800414c <OC3Config+0x1e8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d008      	beq.n	8003f98 <OC3Config+0x34>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a71      	ldr	r2, [pc, #452]	; (8004150 <OC3Config+0x1ec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <OC3Config+0x34>
 8003f8e:	f240 3192 	movw	r1, #914	; 0x392
 8003f92:	4870      	ldr	r0, [pc, #448]	; (8004154 <OC3Config+0x1f0>)
 8003f94:	f7fc fef6 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d01c      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d018      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b30      	cmp	r3, #48	; 0x30
 8003fb6:	d014      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d010      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d00c      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b60      	cmp	r3, #96	; 0x60
 8003fce:	d008      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d004      	beq.n	8003fe2 <OC3Config+0x7e>
 8003fd8:	f240 3193 	movw	r1, #915	; 0x393
 8003fdc:	485d      	ldr	r0, [pc, #372]	; (8004154 <OC3Config+0x1f0>)
 8003fde:	f7fc fed1 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <OC3Config+0x98>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d004      	beq.n	8003ffc <OC3Config+0x98>
 8003ff2:	f44f 7165 	mov.w	r1, #916	; 0x394
 8003ff6:	4857      	ldr	r0, [pc, #348]	; (8004154 <OC3Config+0x1f0>)
 8003ff8:	f7fc fec4 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <OC3Config+0xb2>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d004      	beq.n	8004016 <OC3Config+0xb2>
 800400c:	f240 3195 	movw	r1, #917	; 0x395
 8004010:	4850      	ldr	r0, [pc, #320]	; (8004154 <OC3Config+0x1f0>)
 8004012:	f7fc feb7 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <OC3Config+0xcc>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d004      	beq.n	8004030 <OC3Config+0xcc>
 8004026:	f240 3196 	movw	r1, #918	; 0x396
 800402a:	484a      	ldr	r0, [pc, #296]	; (8004154 <OC3Config+0x1f0>)
 800402c:	f7fc feaa 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <OC3Config+0xe6>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d004      	beq.n	800404a <OC3Config+0xe6>
 8004040:	f240 3197 	movw	r1, #919	; 0x397
 8004044:	4843      	ldr	r0, [pc, #268]	; (8004154 <OC3Config+0x1f0>)
 8004046:	f7fc fe9d 	bl	8000d84 <assert_failed>

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <OC3Config+0x1e4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d13b      	bne.n	800411e <OC3Config+0x1ba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <OC3Config+0x15e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d004      	beq.n	80040c2 <OC3Config+0x15e>
 80040b8:	f240 31b3 	movw	r1, #947	; 0x3b3
 80040bc:	4825      	ldr	r0, [pc, #148]	; (8004154 <OC3Config+0x1f0>)
 80040be:	f7fc fe61 	bl	8000d84 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <OC3Config+0x17a>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d004      	beq.n	80040de <OC3Config+0x17a>
 80040d4:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80040d8:	481e      	ldr	r0, [pc, #120]	; (8004154 <OC3Config+0x1f0>)
 80040da:	f7fc fe53 	bl	8000d84 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	029b      	lsls	r3, r3, #10
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fb74 	bl	800381e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	0800927c 	.word	0x0800927c

08004158 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a69      	ldr	r2, [pc, #420]	; (800430c <OC4Config+0x1b4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d010      	beq.n	800418c <OC4Config+0x34>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d00c      	beq.n	800418c <OC4Config+0x34>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a66      	ldr	r2, [pc, #408]	; (8004310 <OC4Config+0x1b8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d008      	beq.n	800418c <OC4Config+0x34>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a65      	ldr	r2, [pc, #404]	; (8004314 <OC4Config+0x1bc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <OC4Config+0x34>
 8004182:	f240 31e1 	movw	r1, #993	; 0x3e1
 8004186:	4864      	ldr	r0, [pc, #400]	; (8004318 <OC4Config+0x1c0>)
 8004188:	f7fc fdfc 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <OC4Config+0x7e>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b10      	cmp	r3, #16
 800419a:	d01c      	beq.n	80041d6 <OC4Config+0x7e>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d018      	beq.n	80041d6 <OC4Config+0x7e>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d014      	beq.n	80041d6 <OC4Config+0x7e>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d010      	beq.n	80041d6 <OC4Config+0x7e>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b50      	cmp	r3, #80	; 0x50
 80041ba:	d00c      	beq.n	80041d6 <OC4Config+0x7e>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d008      	beq.n	80041d6 <OC4Config+0x7e>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b70      	cmp	r3, #112	; 0x70
 80041ca:	d004      	beq.n	80041d6 <OC4Config+0x7e>
 80041cc:	f240 31e2 	movw	r1, #994	; 0x3e2
 80041d0:	4851      	ldr	r0, [pc, #324]	; (8004318 <OC4Config+0x1c0>)
 80041d2:	f7fc fdd7 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <OC4Config+0x98>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d004      	beq.n	80041f0 <OC4Config+0x98>
 80041e6:	f240 31e3 	movw	r1, #995	; 0x3e3
 80041ea:	484b      	ldr	r0, [pc, #300]	; (8004318 <OC4Config+0x1c0>)
 80041ec:	f7fc fdca 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <OC4Config+0xb2>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d004      	beq.n	800420a <OC4Config+0xb2>
 8004200:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8004204:	4844      	ldr	r0, [pc, #272]	; (8004318 <OC4Config+0x1c0>)
 8004206:	f7fc fdbd 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <OC4Config+0xcc>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d004      	beq.n	8004224 <OC4Config+0xcc>
 800421a:	f240 31e5 	movw	r1, #997	; 0x3e5
 800421e:	483e      	ldr	r0, [pc, #248]	; (8004318 <OC4Config+0x1c0>)
 8004220:	f7fc fdb0 	bl	8000d84 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <OC4Config+0xe6>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d004      	beq.n	800423e <OC4Config+0xe6>
 8004234:	f240 31e6 	movw	r1, #998	; 0x3e6
 8004238:	4837      	ldr	r0, [pc, #220]	; (8004318 <OC4Config+0x1c0>)
 800423a:	f7fc fda3 	bl	8000d84 <assert_failed>

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	031b      	lsls	r3, r3, #12
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <OC4Config+0x1b4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d123      	bne.n	80042e4 <OC4Config+0x18c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <OC4Config+0x160>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ac:	d004      	beq.n	80042b8 <OC4Config+0x160>
 80042ae:	f240 4102 	movw	r1, #1026	; 0x402
 80042b2:	4819      	ldr	r0, [pc, #100]	; (8004318 <OC4Config+0x1c0>)
 80042b4:	f7fc fd66 	bl	8000d84 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <OC4Config+0x17c>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d004      	beq.n	80042d4 <OC4Config+0x17c>
 80042ca:	f240 4103 	movw	r1, #1027	; 0x403
 80042ce:	4812      	ldr	r0, [pc, #72]	; (8004318 <OC4Config+0x1c0>)
 80042d0:	f7fc fd58 	bl	8000d84 <assert_failed>

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	019b      	lsls	r3, r3, #6
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fa9e 	bl	8003838 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	0800927c 	.word	0x0800927c

0800431c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004324:	4a03      	ldr	r2, [pc, #12]	; (8004334 <LL_SetSystemCoreClock+0x18>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000008 	.word	0x20000008

08004338 <MX_FATFS_Init>:
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path);

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <MX_FATFS_Init+0x18>)
 800433e:	4805      	ldr	r0, [pc, #20]	; (8004354 <MX_FATFS_Init+0x1c>)
 8004340:	f003 fd7a 	bl	8007e38 <FATFS_LinkDriver>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <MX_FATFS_Init+0x20>)
 800434a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000400 	.word	0x20000400
 8004354:	20000014 	.word	0x20000014
 8004358:	20000404 	.word	0x20000404

0800435c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004360:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
	...

0800436c <FS_GetFileList>:
#include "main.h"
//extern ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];


uint8_t FS_GetFileList(typeEnv *Env)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8004372:	af00      	add	r7, sp, #0
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	6018      	str	r0, [r3, #0]
	DIR dir;
	FRESULT fs_result;
	FILINFO fs_info;
	char* path ="";
 8004378:	4b51      	ldr	r3, [pc, #324]	; (80044c0 <FS_GetFileList+0x154>)
 800437a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t cnt_file=0, indx=0;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t start_list=0, end_list=0;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	fs_result = f_opendir (&dir, path);
 8004396:	f107 0320 	add.w	r3, r7, #32
 800439a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 fc12 	bl	8007bc8 <f_opendir>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if(fs_result != FR_OK)
 80043aa:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <FS_GetFileList+0x4a>
	{ return 1; }
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07e      	b.n	80044b4 <FS_GetFileList+0x148>

	start_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX ;
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80043be:	461a      	mov	r2, r3
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	end_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX + (ITEM_ON_PAGE_MAX);
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	memset( &(Env->Menu.FileList[0][0]), 0, sizeof(Env->Menu.FileList));
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2275      	movs	r2, #117	; 0x75
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fd79 	bl	8007ede <memset>

	for (;;)
	{
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 80043ec:	f107 0208 	add.w	r2, r7, #8
 80043f0:	f107 0320 	add.w	r3, r7, #32
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 fc8d 	bl	8007d16 <f_readdir>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (fs_result != FR_OK || fs_info.fname[0] == 0 ){ break;} /* Останов цикла при ошибке или при достижении конца списка директории */
 8004402:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004406:	2b00      	cmp	r3, #0
 8004408:	d14e      	bne.n	80044a8 <FS_GetFileList+0x13c>
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	7a5b      	ldrb	r3, [r3, #9]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d049      	beq.n	80044a8 <FS_GetFileList+0x13c>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	7a5b      	ldrb	r3, [r3, #9]
 800441a:	2b2e      	cmp	r3, #46	; 0x2e
 800441c:	d040      	beq.n	80044a0 <FS_GetFileList+0x134>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	7a1b      	ldrb	r3, [r3, #8]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13b      	bne.n	80044a4 <FS_GetFileList+0x138>
		else
		{   /* Это файл. Заносим название в список файлов */
			if(cnt_file >= start_list && cnt_file < end_list)
 800442c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004430:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004434:	429a      	cmp	r2, r3
 8004436:	d327      	bcc.n	8004488 <FS_GetFileList+0x11c>
 8004438:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800443c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004440:	429a      	cmp	r2, r3
 8004442:	d221      	bcs.n	8004488 <FS_GetFileList+0x11c>
			{
				strncpy( &(Env->Menu.FileList[indx][0]),  &fs_info.fname, strlen(fs_info.fname));
 8004444:	1d39      	adds	r1, r7, #4
 8004446:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	680a      	ldr	r2, [r1, #0]
 8004456:	18d4      	adds	r4, r2, r3
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	3309      	adds	r3, #9
 800445e:	4618      	mov	r0, r3
 8004460:	f7fb fe74 	bl	800014c <strlen>
 8004464:	4602      	mov	r2, r0
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	3309      	adds	r3, #9
 800446c:	4619      	mov	r1, r3
 800446e:	4620      	mov	r0, r4
 8004470:	f003 fda6 	bl	8007fc0 <strncpy>
				indx++;
 8004474:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004478:	3301      	adds	r3, #1
 800447a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				Env->Menu.NmbrOnPageFiles=indx;
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			cnt_file++;
 8004488:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800448c:	3301      	adds	r3, #1
 800448e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		}
		Env->Menu.NmbrAllFiles=cnt_file;
 8004492:	1d3b      	adds	r3, r7, #4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800449a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800449e:	e7a5      	b.n	80043ec <FS_GetFileList+0x80>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 80044a0:	bf00      	nop
 80044a2:	e7a3      	b.n	80043ec <FS_GetFileList+0x80>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 80044a4:	bf00      	nop
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 80044a6:	e7a1      	b.n	80043ec <FS_GetFileList+0x80>
	}

	f_closedir(&dir);
 80044a8:	f107 0320 	add.w	r3, r7, #32
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 fc0d 	bl	8007ccc <f_closedir>
	return 0;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	080092b4 	.word	0x080092b4

080044c4 <FS_ReadFile>:

uint8_t FS_ReadFile(typeEnv *Env)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	f2ad 5df4 	subw	sp, sp, #1524	; 0x5f4
 80044ca:	af1e      	add	r7, sp, #120	; 0x78
 80044cc:	1d3b      	adds	r3, r7, #4
 80044ce:	6018      	str	r0, [r3, #0]
	char *FileName = (*Env).FileNameForTest;
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	//memset((*Env).DataForTest, 0, sizeof((*Env).DataForTest));
	char X1[NLin*2]={0}, X2[NLin*2]={0};
 80044dc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80044e0:	2240      	movs	r2, #64	; 0x40
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 fcfa 	bl	8007ede <memset>
 80044ea:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80044ee:	2240      	movs	r2, #64	; 0x40
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fcf3 	bl	8007ede <memset>
	char string[DATA_TEST_SIZE]={0}; // строка прочитанная из файла ; 255 байт
 80044f8:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80044fc:	4618      	mov	r0, r3
 80044fe:	23ff      	movs	r3, #255	; 0xff
 8004500:	461a      	mov	r2, r3
 8004502:	2100      	movs	r1, #0
 8004504:	f003 fceb 	bl	8007ede <memset>
	char FormatStr[5*NLin]={0};// 5 символов в строке форматирования "%d%*c" для одного значения
 8004508:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800450c:	4618      	mov	r0, r3
 800450e:	23a0      	movs	r3, #160	; 0xa0
 8004510:	461a      	mov	r2, r3
 8004512:	2100      	movs	r1, #0
 8004514:	f003 fce3 	bl	8007ede <memset>
	char *p_start=0;
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
	char *p_end=0;
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	int LenData=0, MaxLen=0;
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 800452a:	2300      	movs	r3, #0
 800452c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
	uint32_t DataBuf[2][NLin]={0};
 8004530:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004534:	4618      	mov	r0, r3
 8004536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800453a:	461a      	mov	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f003 fcce 	bl	8007ede <memset>
	//uint32_t *DataBuf=(*Env).DataForTest;
	FIL fs_file;
	FRESULT fs_result=0;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
	uint32_t byteRead=0;
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
	uint32_t ofs=0;	// смещение от начала файла
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	fs_result = f_open(&fs_file, FileName, FA_READ);
 8004556:	f107 030c 	add.w	r3, r7, #12
 800455a:	2201      	movs	r2, #1
 800455c:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8004560:	4618      	mov	r0, r3
 8004562:	f002 fed9 	bl	8007318 <f_open>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
		if(fs_result != FR_OK)	{ return 1; }
 800456c:	f897 355f 	ldrb.w	r3, [r7, #1375]	; 0x55f
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <FS_ReadFile+0xb4>
 8004574:	2301      	movs	r3, #1
 8004576:	e1d9      	b.n	800492c <FS_ReadFile+0x468>
// читаем всесь файл в буфер
		fs_result = f_read(&fs_file, string, DATA_TEST_SIZE, &byteRead);
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	f507 7176 	add.w	r1, r7, #984	; 0x3d8
 8004580:	f107 000c 	add.w	r0, r7, #12
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	f003 f8d2 	bl	800772e <f_read>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
		if(fs_result != FR_OK)	{ return 1; }
 8004590:	f897 355f 	ldrb.w	r3, [r7, #1375]	; 0x55f
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <FS_ReadFile+0xd8>
 8004598:	2301      	movs	r3, #1
 800459a:	e1c7      	b.n	800492c <FS_ReadFile+0x468>
		(*Env).RealDataSize = byteRead;
 800459c:	f107 0308 	add.w	r3, r7, #8
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

		// выделяем данные заключенные в скобки [] для разъёма X1
		p_start = strchr(&string, PARS_START_DATA);
 80045ac:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80045b0:	215b      	movs	r1, #91	; 0x5b
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 fcf7 	bl	8007fa6 <strchr>
 80045b8:	f8c7 0568 	str.w	r0, [r7, #1384]	; 0x568
		p_end = strchr(&string, PARS_END_DATA);
 80045bc:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80045c0:	215d      	movs	r1, #93	; 0x5d
 80045c2:	4618      	mov	r0, r3
 80045c4:	f003 fcef 	bl	8007fa6 <strchr>
 80045c8:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
		LenData = p_end - p_start;
 80045cc:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 80045d0:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
		MaxLen = LenData;
 80045da:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80045de:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
		memmove(&X1, (p_start+1),  LenData-1);
 80045e2:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80045ec:	3b01      	subs	r3, #1
 80045ee:	461a      	mov	r2, r3
 80045f0:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fc59 	bl	8007eac <memmove>
		for(uint8_t i=0; i<LenData/2;i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 3573 	strb.w	r3, [r7, #1395]	; 0x573
 8004600:	e013      	b.n	800462a <FS_ReadFile+0x166>
		{
			strcat( &FormatStr,  "%d%*c");
 8004602:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb fda0 	bl	800014c <strlen>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004614:	4413      	add	r3, r2
 8004616:	4ac8      	ldr	r2, [pc, #800]	; (8004938 <FS_ReadFile+0x474>)
 8004618:	6810      	ldr	r0, [r2, #0]
 800461a:	6018      	str	r0, [r3, #0]
 800461c:	8892      	ldrh	r2, [r2, #4]
 800461e:	809a      	strh	r2, [r3, #4]
		for(uint8_t i=0; i<LenData/2;i++)
 8004620:	f897 3573 	ldrb.w	r3, [r7, #1395]	; 0x573
 8004624:	3301      	adds	r3, #1
 8004626:	f887 3573 	strb.w	r3, [r7, #1395]	; 0x573
 800462a:	f897 2573 	ldrb.w	r2, [r7, #1395]	; 0x573
 800462e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004632:	0fd9      	lsrs	r1, r3, #31
 8004634:	440b      	add	r3, r1
 8004636:	105b      	asrs	r3, r3, #1
 8004638:	429a      	cmp	r2, r3
 800463a:	dbe2      	blt.n	8004602 <FS_ReadFile+0x13e>

		}
		sscanf(&X1, &FormatStr,			&DataBuf[0][0], \
 800463c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004640:	1d1c      	adds	r4, r3, #4
 8004642:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8004646:	f507 714e 	add.w	r1, r7, #824	; 0x338
 800464a:	f507 60a3 	add.w	r0, r7, #1304	; 0x518
 800464e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004652:	337c      	adds	r3, #124	; 0x7c
 8004654:	931d      	str	r3, [sp, #116]	; 0x74
 8004656:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800465a:	3378      	adds	r3, #120	; 0x78
 800465c:	931c      	str	r3, [sp, #112]	; 0x70
 800465e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004662:	3374      	adds	r3, #116	; 0x74
 8004664:	931b      	str	r3, [sp, #108]	; 0x6c
 8004666:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800466a:	3370      	adds	r3, #112	; 0x70
 800466c:	931a      	str	r3, [sp, #104]	; 0x68
 800466e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004672:	336c      	adds	r3, #108	; 0x6c
 8004674:	9319      	str	r3, [sp, #100]	; 0x64
 8004676:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800467a:	3368      	adds	r3, #104	; 0x68
 800467c:	9318      	str	r3, [sp, #96]	; 0x60
 800467e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004682:	3364      	adds	r3, #100	; 0x64
 8004684:	9317      	str	r3, [sp, #92]	; 0x5c
 8004686:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800468a:	3360      	adds	r3, #96	; 0x60
 800468c:	9316      	str	r3, [sp, #88]	; 0x58
 800468e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004692:	335c      	adds	r3, #92	; 0x5c
 8004694:	9315      	str	r3, [sp, #84]	; 0x54
 8004696:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800469a:	3358      	adds	r3, #88	; 0x58
 800469c:	9314      	str	r3, [sp, #80]	; 0x50
 800469e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046a2:	3354      	adds	r3, #84	; 0x54
 80046a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80046a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046aa:	3350      	adds	r3, #80	; 0x50
 80046ac:	9312      	str	r3, [sp, #72]	; 0x48
 80046ae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046b2:	334c      	adds	r3, #76	; 0x4c
 80046b4:	9311      	str	r3, [sp, #68]	; 0x44
 80046b6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046ba:	3348      	adds	r3, #72	; 0x48
 80046bc:	9310      	str	r3, [sp, #64]	; 0x40
 80046be:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046c2:	3344      	adds	r3, #68	; 0x44
 80046c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80046c6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046ca:	3340      	adds	r3, #64	; 0x40
 80046cc:	930e      	str	r3, [sp, #56]	; 0x38
 80046ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046d2:	333c      	adds	r3, #60	; 0x3c
 80046d4:	930d      	str	r3, [sp, #52]	; 0x34
 80046d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046da:	3338      	adds	r3, #56	; 0x38
 80046dc:	930c      	str	r3, [sp, #48]	; 0x30
 80046de:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046e2:	3334      	adds	r3, #52	; 0x34
 80046e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046e6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046ea:	3330      	adds	r3, #48	; 0x30
 80046ec:	930a      	str	r3, [sp, #40]	; 0x28
 80046ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046f2:	332c      	adds	r3, #44	; 0x2c
 80046f4:	9309      	str	r3, [sp, #36]	; 0x24
 80046f6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046fa:	3328      	adds	r3, #40	; 0x28
 80046fc:	9308      	str	r3, [sp, #32]
 80046fe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004702:	3324      	adds	r3, #36	; 0x24
 8004704:	9307      	str	r3, [sp, #28]
 8004706:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800470a:	3320      	adds	r3, #32
 800470c:	9306      	str	r3, [sp, #24]
 800470e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004712:	331c      	adds	r3, #28
 8004714:	9305      	str	r3, [sp, #20]
 8004716:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800471a:	3318      	adds	r3, #24
 800471c:	9304      	str	r3, [sp, #16]
 800471e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004722:	3314      	adds	r3, #20
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800472a:	3310      	adds	r3, #16
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004732:	330c      	adds	r3, #12
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800473a:	3308      	adds	r3, #8
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4623      	mov	r3, r4
 8004740:	f003 fbf6 	bl	8007f30 <siscanf>
										&DataBuf[0][23], &DataBuf[0][24],\
										&DataBuf[0][25], &DataBuf[0][26], \
										&DataBuf[0][27], &DataBuf[0][28],\
										&DataBuf[0][29], &DataBuf[0][30], &DataBuf[0][31]);
		// выделяем данные заключенные в скобки [] для разъёма X2
		p_start = strchr(p_end, PARS_START_DATA);
 8004744:	215b      	movs	r1, #91	; 0x5b
 8004746:	f8d7 0564 	ldr.w	r0, [r7, #1380]	; 0x564
 800474a:	f003 fc2c 	bl	8007fa6 <strchr>
 800474e:	f8c7 0568 	str.w	r0, [r7, #1384]	; 0x568
		p_end = strchr(p_start, PARS_END_DATA);
 8004752:	215d      	movs	r1, #93	; 0x5d
 8004754:	f8d7 0568 	ldr.w	r0, [r7, #1384]	; 0x568
 8004758:	f003 fc25 	bl	8007fa6 <strchr>
 800475c:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
		LenData = p_end - p_start;
 8004760:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8004764:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
		if(LenData > MaxLen) {MaxLen = LenData; }
 800476e:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8004772:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8004776:	429a      	cmp	r2, r3
 8004778:	dd03      	ble.n	8004782 <FS_ReadFile+0x2be>
 800477a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800477e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

		memmove(&X2, (p_start+1),  LenData-1);
 8004782:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800478c:	3b01      	subs	r3, #1
 800478e:	461a      	mov	r2, r3
 8004790:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8004794:	4618      	mov	r0, r3
 8004796:	f003 fb89 	bl	8007eac <memmove>

		memset(FormatStr,0, sizeof(FormatStr));
 800479a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800479e:	22a0      	movs	r2, #160	; 0xa0
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 fb9b 	bl	8007ede <memset>
		for(uint8_t i=0; i<LenData/2;i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3572 	strb.w	r3, [r7, #1394]	; 0x572
 80047ae:	e013      	b.n	80047d8 <FS_ReadFile+0x314>
				{			strcat( &FormatStr,  "%d%*c");				}
 80047b0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fb fcc9 	bl	800014c <strlen>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80047c2:	4413      	add	r3, r2
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <FS_ReadFile+0x474>)
 80047c6:	6810      	ldr	r0, [r2, #0]
 80047c8:	6018      	str	r0, [r3, #0]
 80047ca:	8892      	ldrh	r2, [r2, #4]
 80047cc:	809a      	strh	r2, [r3, #4]
		for(uint8_t i=0; i<LenData/2;i++)
 80047ce:	f897 3572 	ldrb.w	r3, [r7, #1394]	; 0x572
 80047d2:	3301      	adds	r3, #1
 80047d4:	f887 3572 	strb.w	r3, [r7, #1394]	; 0x572
 80047d8:	f897 2572 	ldrb.w	r2, [r7, #1394]	; 0x572
 80047dc:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80047e0:	0fd9      	lsrs	r1, r3, #31
 80047e2:	440b      	add	r3, r1
 80047e4:	105b      	asrs	r3, r3, #1
 80047e6:	429a      	cmp	r2, r3
 80047e8:	dbe2      	blt.n	80047b0 <FS_ReadFile+0x2ec>

		sscanf(&X2, &FormatStr, 	&DataBuf[1][0],  &DataBuf[1][1], \
 80047ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80047ee:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80047f2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80047f6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80047fa:	f507 714e 	add.w	r1, r7, #824	; 0x338
 80047fe:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8004802:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004806:	33fc      	adds	r3, #252	; 0xfc
 8004808:	931d      	str	r3, [sp, #116]	; 0x74
 800480a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800480e:	33f8      	adds	r3, #248	; 0xf8
 8004810:	931c      	str	r3, [sp, #112]	; 0x70
 8004812:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004816:	33f4      	adds	r3, #244	; 0xf4
 8004818:	931b      	str	r3, [sp, #108]	; 0x6c
 800481a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800481e:	33f0      	adds	r3, #240	; 0xf0
 8004820:	931a      	str	r3, [sp, #104]	; 0x68
 8004822:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004826:	33ec      	adds	r3, #236	; 0xec
 8004828:	9319      	str	r3, [sp, #100]	; 0x64
 800482a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800482e:	33e8      	adds	r3, #232	; 0xe8
 8004830:	9318      	str	r3, [sp, #96]	; 0x60
 8004832:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004836:	33e4      	adds	r3, #228	; 0xe4
 8004838:	9317      	str	r3, [sp, #92]	; 0x5c
 800483a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800483e:	33e0      	adds	r3, #224	; 0xe0
 8004840:	9316      	str	r3, [sp, #88]	; 0x58
 8004842:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004846:	33dc      	adds	r3, #220	; 0xdc
 8004848:	9315      	str	r3, [sp, #84]	; 0x54
 800484a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800484e:	33d8      	adds	r3, #216	; 0xd8
 8004850:	9314      	str	r3, [sp, #80]	; 0x50
 8004852:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004856:	33d4      	adds	r3, #212	; 0xd4
 8004858:	9313      	str	r3, [sp, #76]	; 0x4c
 800485a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800485e:	33d0      	adds	r3, #208	; 0xd0
 8004860:	9312      	str	r3, [sp, #72]	; 0x48
 8004862:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004866:	33cc      	adds	r3, #204	; 0xcc
 8004868:	9311      	str	r3, [sp, #68]	; 0x44
 800486a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800486e:	33c8      	adds	r3, #200	; 0xc8
 8004870:	9310      	str	r3, [sp, #64]	; 0x40
 8004872:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004876:	33c4      	adds	r3, #196	; 0xc4
 8004878:	930f      	str	r3, [sp, #60]	; 0x3c
 800487a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800487e:	33c0      	adds	r3, #192	; 0xc0
 8004880:	930e      	str	r3, [sp, #56]	; 0x38
 8004882:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004886:	33bc      	adds	r3, #188	; 0xbc
 8004888:	930d      	str	r3, [sp, #52]	; 0x34
 800488a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800488e:	33b8      	adds	r3, #184	; 0xb8
 8004890:	930c      	str	r3, [sp, #48]	; 0x30
 8004892:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004896:	33b4      	adds	r3, #180	; 0xb4
 8004898:	930b      	str	r3, [sp, #44]	; 0x2c
 800489a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800489e:	33b0      	adds	r3, #176	; 0xb0
 80048a0:	930a      	str	r3, [sp, #40]	; 0x28
 80048a2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048a6:	33ac      	adds	r3, #172	; 0xac
 80048a8:	9309      	str	r3, [sp, #36]	; 0x24
 80048aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048ae:	33a8      	adds	r3, #168	; 0xa8
 80048b0:	9308      	str	r3, [sp, #32]
 80048b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048b6:	33a4      	adds	r3, #164	; 0xa4
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048be:	33a0      	adds	r3, #160	; 0xa0
 80048c0:	9306      	str	r3, [sp, #24]
 80048c2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048c6:	339c      	adds	r3, #156	; 0x9c
 80048c8:	9305      	str	r3, [sp, #20]
 80048ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048ce:	3398      	adds	r3, #152	; 0x98
 80048d0:	9304      	str	r3, [sp, #16]
 80048d2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048d6:	3394      	adds	r3, #148	; 0x94
 80048d8:	9303      	str	r3, [sp, #12]
 80048da:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048de:	3390      	adds	r3, #144	; 0x90
 80048e0:	9302      	str	r3, [sp, #8]
 80048e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048e6:	338c      	adds	r3, #140	; 0x8c
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80048ee:	3388      	adds	r3, #136	; 0x88
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4623      	mov	r3, r4
 80048f4:	f003 fb1c 	bl	8007f30 <siscanf>
									&DataBuf[1][22], &DataBuf[1][23],\
									&DataBuf[1][24], &DataBuf[1][25],\
									&DataBuf[1][26], &DataBuf[1][27],\
									&DataBuf[1][28], &DataBuf[1][29],\
									&DataBuf[1][30], &DataBuf[1][31]);
	f_close(&fs_file);
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4618      	mov	r0, r3
 80048fe:	f003 f93b 	bl	8007b78 <f_close>
	Env->RealDataSize=MaxLen/2;
 8004902:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8004906:	0fda      	lsrs	r2, r3, #31
 8004908:	4413      	add	r3, r2
 800490a:	105b      	asrs	r3, r3, #1
 800490c:	b2da      	uxtb	r2, r3
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	memmove( (*Env).DataForTest, &DataBuf, sizeof(DataBuf)	);
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3394      	adds	r3, #148	; 0x94
 800491c:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8004920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004924:	4618      	mov	r0, r3
 8004926:	f003 fac1 	bl	8007eac <memmove>
	return 0;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	f207 577c 	addw	r7, r7, #1404	; 0x57c
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}
 8004936:	bf00      	nop
 8004938:	080092b8 	.word	0x080092b8

0800493c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fa05 	bl	8004d58 <USER_SPI_initialize>
 800494e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fad7 	bl	8004f18 <USER_SPI_status>
 800496a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004984:	7bf8      	ldrb	r0, [r7, #15]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	f000 fad8 	bl	8004f40 <USER_SPI_read>
 8004990:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4603      	mov	r3, r0
 80049a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80049aa:	7bf8      	ldrb	r0, [r7, #15]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	f000 fb2b 	bl	800500c <USER_SPI_write>
 80049b6:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	603a      	str	r2, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
 80049cc:	460b      	mov	r3, r1
 80049ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80049d0:	79b9      	ldrb	r1, [r7, #6]
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb94 	bl	8005104 <USER_SPI_ioctl>
 80049dc:	4603      	mov	r3, r0
//   n res;
  /* USER CODE END IOCTL */
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <LL_SPI_SetBaudRatePrescaler>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <LL_GPIO_SetOutputPin>:
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <LL_GPIO_ResetOutputPin>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	615a      	str	r2, [r3, #20]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
	...

08004a48 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004a50:	f7fe fa8e 	bl	8002f70 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <SPI_Timer_On+0x20>)
 8004a58:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <SPI_Timer_On+0x24>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000864 	.word	0x20000864
 8004a6c:	20000868 	.word	0x20000868

08004a70 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004a74:	f7fe fa7c 	bl	8002f70 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <SPI_Timer_Status+0x24>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <SPI_Timer_Status+0x28>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bf34      	ite	cc
 8004a88:	2301      	movcc	r3, #1
 8004a8a:	2300      	movcs	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000864 	.word	0x20000864
 8004a98:	20000868 	.word	0x20000868

08004a9c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
  //  HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
	rxDat = LL_SPI_TransmitReceive(SPI1, dat);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <xchg_spi+0x24>)
 8004aac:	f7fc fcc2 	bl	8001434 <LL_SPI_TransmitReceive>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
	return rxDat;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40013000 	.word	0x40013000

08004ac4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e00a      	b.n	8004aea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	18d4      	adds	r4, r2, r3
 8004ada:	20ff      	movs	r0, #255	; 0xff
 8004adc:	f7ff ffde 	bl	8004a9c <xchg_spi>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d3f0      	bcc.n	8004ad4 <rcvr_spi_multi+0x10>
	}
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}

08004afa <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e009      	b.n	8004b1e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffc2 	bl	8004a9c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3f1      	bcc.n	8004b0a <xmit_spi_multi+0x10>
	}
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004b36:	f7fe fa1b 	bl	8002f70 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004b40:	20ff      	movs	r0, #255	; 0xff
 8004b42:	f7ff ffab 	bl	8004a9c <xchg_spi>
 8004b46:	4603      	mov	r3, r0
 8004b48:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2bff      	cmp	r3, #255	; 0xff
 8004b4e:	d007      	beq.n	8004b60 <wait_ready+0x32>
 8004b50:	f7fe fa0e 	bl	8002f70 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d8ef      	bhi.n	8004b40 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2bff      	cmp	r3, #255	; 0xff
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004b78:	f240 2102 	movw	r1, #514	; 0x202
 8004b7c:	4803      	ldr	r0, [pc, #12]	; (8004b8c <despiselect+0x18>)
 8004b7e:	f7ff ff44 	bl	8004a0a <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004b82:	20ff      	movs	r0, #255	; 0xff
 8004b84:	f7ff ff8a 	bl	8004a9c <xchg_spi>

}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40010c00 	.word	0x40010c00

08004b90 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004b94:	f240 2102 	movw	r1, #514	; 0x202
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <spiselect+0x30>)
 8004b9a:	f7ff ff45 	bl	8004a28 <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004b9e:	20ff      	movs	r0, #255	; 0xff
 8004ba0:	f7ff ff7c 	bl	8004a9c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ba8:	f7ff ffc1 	bl	8004b2e <wait_ready>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <spiselect+0x26>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e002      	b.n	8004bbc <spiselect+0x2c>

	despiselect();
 8004bb6:	f7ff ffdd 	bl	8004b74 <despiselect>
	return 0;	/* Timeout */
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40010c00 	.word	0x40010c00

08004bc4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004bce:	20c8      	movs	r0, #200	; 0xc8
 8004bd0:	f7ff ff3a 	bl	8004a48 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004bd4:	20ff      	movs	r0, #255	; 0xff
 8004bd6:	f7ff ff61 	bl	8004a9c <xchg_spi>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2bff      	cmp	r3, #255	; 0xff
 8004be2:	d104      	bne.n	8004bee <rcvr_datablock+0x2a>
 8004be4:	f7ff ff44 	bl	8004a70 <SPI_Timer_Status>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f2      	bne.n	8004bd4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2bfe      	cmp	r3, #254	; 0xfe
 8004bf2:	d001      	beq.n	8004bf8 <rcvr_datablock+0x34>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e00a      	b.n	8004c0e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff62 	bl	8004ac4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004c00:	20ff      	movs	r0, #255	; 0xff
 8004c02:	f7ff ff4b 	bl	8004a9c <xchg_spi>
 8004c06:	20ff      	movs	r0, #255	; 0xff
 8004c08:	f7ff ff48 	bl	8004a9c <xchg_spi>

	return 1;						/* Function succeeded */
 8004c0c:	2301      	movs	r3, #1
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004c22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c26:	f7ff ff82 	bl	8004b2e <wait_ready>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xmit_datablock+0x1e>
 8004c30:	2300      	movs	r3, #0
 8004c32:	e01e      	b.n	8004c72 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff30 	bl	8004a9c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	2bfd      	cmp	r3, #253	; 0xfd
 8004c40:	d016      	beq.n	8004c70 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ff57 	bl	8004afa <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004c4c:	20ff      	movs	r0, #255	; 0xff
 8004c4e:	f7ff ff25 	bl	8004a9c <xchg_spi>
 8004c52:	20ff      	movs	r0, #255	; 0xff
 8004c54:	f7ff ff22 	bl	8004a9c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004c58:	20ff      	movs	r0, #255	; 0xff
 8004c5a:	f7ff ff1f 	bl	8004a9c <xchg_spi>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d001      	beq.n	8004c70 <xmit_datablock+0x5a>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <xmit_datablock+0x5c>
	}
	return 1;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4603      	mov	r3, r0
 8004c82:	6039      	str	r1, [r7, #0]
 8004c84:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da0e      	bge.n	8004cac <send_cmd+0x32>
		cmd &= 0x7F;
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c94:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2037      	movs	r0, #55	; 0x37
 8004c9a:	f7ff ffee 	bl	8004c7a <send_cmd>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004ca2:	7bbb      	ldrb	r3, [r7, #14]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d901      	bls.n	8004cac <send_cmd+0x32>
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	e051      	b.n	8004d50 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d008      	beq.n	8004cc4 <send_cmd+0x4a>
		despiselect();
 8004cb2:	f7ff ff5f 	bl	8004b74 <despiselect>
		if (!spiselect()) return 0xFF;
 8004cb6:	f7ff ff6b 	bl	8004b90 <spiselect>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <send_cmd+0x4a>
 8004cc0:	23ff      	movs	r3, #255	; 0xff
 8004cc2:	e045      	b.n	8004d50 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fee5 	bl	8004a9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fedf 	bl	8004a9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fed9 	bl	8004a9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fed3 	bl	8004a9c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fece 	bl	8004a9c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <send_cmd+0x94>
 8004d0a:	2395      	movs	r3, #149	; 0x95
 8004d0c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d101      	bne.n	8004d18 <send_cmd+0x9e>
 8004d14:	2387      	movs	r3, #135	; 0x87
 8004d16:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff febe 	bl	8004a9c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d102      	bne.n	8004d2c <send_cmd+0xb2>
 8004d26:	20ff      	movs	r0, #255	; 0xff
 8004d28:	f7ff feb8 	bl	8004a9c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004d30:	20ff      	movs	r0, #255	; 0xff
 8004d32:	f7ff feb3 	bl	8004a9c <xchg_spi>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da05      	bge.n	8004d4e <send_cmd+0xd4>
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <USER_SPI_initialize+0x14>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ca      	b.n	8004f02 <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004d6c:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <USER_SPI_initialize+0x2a>
 8004d7a:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e0bf      	b.n	8004f02 <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8004d82:	2130      	movs	r1, #48	; 0x30
 8004d84:	4862      	ldr	r0, [pc, #392]	; (8004f10 <USER_SPI_initialize+0x1b8>)
 8004d86:	f7ff fe2e 	bl	80049e6 <LL_SPI_SetBaudRatePrescaler>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e005      	b.n	8004d9c <USER_SPI_initialize+0x44>
 8004d90:	20ff      	movs	r0, #255	; 0xff
 8004d92:	f7ff fe83 	bl	8004a9c <xchg_spi>
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f6      	bne.n	8004d90 <USER_SPI_initialize+0x38>

	ty = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004da6:	2100      	movs	r1, #0
 8004da8:	2000      	movs	r0, #0
 8004daa:	f7ff ff66 	bl	8004c7a <send_cmd>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f040 808b 	bne.w	8004ecc <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dba:	f7ff fe45 	bl	8004a48 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004dbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004dc2:	2008      	movs	r0, #8
 8004dc4:	f7ff ff59 	bl	8004c7a <send_cmd>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d151      	bne.n	8004e72 <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
 8004dd2:	e00d      	b.n	8004df0 <USER_SPI_initialize+0x98>
 8004dd4:	7bfc      	ldrb	r4, [r7, #15]
 8004dd6:	20ff      	movs	r0, #255	; 0xff
 8004dd8:	f7ff fe60 	bl	8004a9c <xchg_spi>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	4423      	add	r3, r4
 8004de6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	3301      	adds	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d9ee      	bls.n	8004dd4 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004df6:	7abb      	ldrb	r3, [r7, #10]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d167      	bne.n	8004ecc <USER_SPI_initialize+0x174>
 8004dfc:	7afb      	ldrb	r3, [r7, #11]
 8004dfe:	2baa      	cmp	r3, #170	; 0xaa
 8004e00:	d164      	bne.n	8004ecc <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004e02:	bf00      	nop
 8004e04:	f7ff fe34 	bl	8004a70 <SPI_Timer_Status>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <USER_SPI_initialize+0xc6>
 8004e0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e12:	20a9      	movs	r0, #169	; 0xa9
 8004e14:	f7ff ff31 	bl	8004c7a <send_cmd>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004e1e:	f7ff fe27 	bl	8004a70 <SPI_Timer_Status>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d051      	beq.n	8004ecc <USER_SPI_initialize+0x174>
 8004e28:	2100      	movs	r1, #0
 8004e2a:	203a      	movs	r0, #58	; 0x3a
 8004e2c:	f7ff ff25 	bl	8004c7a <send_cmd>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d14a      	bne.n	8004ecc <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e00d      	b.n	8004e58 <USER_SPI_initialize+0x100>
 8004e3c:	7bfc      	ldrb	r4, [r7, #15]
 8004e3e:	20ff      	movs	r0, #255	; 0xff
 8004e40:	f7ff fe2c 	bl	8004a9c <xchg_spi>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	4423      	add	r3, r4
 8004e4e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	3301      	adds	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d9ee      	bls.n	8004e3c <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004e5e:	7a3b      	ldrb	r3, [r7, #8]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USER_SPI_initialize+0x114>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	e000      	b.n	8004e6e <USER_SPI_initialize+0x116>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	737b      	strb	r3, [r7, #13]
 8004e70:	e02c      	b.n	8004ecc <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004e72:	2100      	movs	r1, #0
 8004e74:	20a9      	movs	r0, #169	; 0xa9
 8004e76:	f7ff ff00 	bl	8004c7a <send_cmd>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d804      	bhi.n	8004e8a <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004e80:	2302      	movs	r3, #2
 8004e82:	737b      	strb	r3, [r7, #13]
 8004e84:	23a9      	movs	r3, #169	; 0xa9
 8004e86:	73bb      	strb	r3, [r7, #14]
 8004e88:	e003      	b.n	8004e92 <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	737b      	strb	r3, [r7, #13]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004e92:	bf00      	nop
 8004e94:	f7ff fdec 	bl	8004a70 <SPI_Timer_Status>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <USER_SPI_initialize+0x156>
 8004e9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fee9 	bl	8004c7a <send_cmd>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f2      	bne.n	8004e94 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004eae:	f7ff fddf 	bl	8004a70 <SPI_Timer_Status>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <USER_SPI_initialize+0x170>
 8004eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ebc:	2010      	movs	r0, #16
 8004ebe:	f7ff fedc 	bl	8004c7a <send_cmd>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <USER_SPI_initialize+0x174>
				ty = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004ecc:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <USER_SPI_initialize+0x1bc>)
 8004ece:	7b7b      	ldrb	r3, [r7, #13]
 8004ed0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004ed2:	f7ff fe4f 	bl	8004b74 <despiselect>

	if (ty) {			/* OK */
 8004ed6:	7b7b      	ldrb	r3, [r7, #13]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 8004edc:	2118      	movs	r1, #24
 8004ede:	480c      	ldr	r0, [pc, #48]	; (8004f10 <USER_SPI_initialize+0x1b8>)
 8004ee0:	f7ff fd81 	bl	80049e6 <LL_SPI_SetBaudRatePrescaler>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e002      	b.n	8004efc <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <USER_SPI_initialize+0x1b4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000028 	.word	0x20000028
 8004f10:	40013000 	.word	0x40013000
 8004f14:	20000224 	.word	0x20000224

08004f18 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <USER_SPI_status+0x14>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e002      	b.n	8004f32 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <USER_SPI_status+0x24>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000028 	.word	0x20000028

08004f40 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <USER_SPI_read+0x1c>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <USER_SPI_read+0x20>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	e04d      	b.n	8004ffc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <USER_SPI_read+0xc4>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <USER_SPI_read+0x32>
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e044      	b.n	8004ffc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <USER_SPI_read+0xc8>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <USER_SPI_read+0x44>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	025b      	lsls	r3, r3, #9
 8004f82:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d111      	bne.n	8004fae <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	2011      	movs	r0, #17
 8004f8e:	f7ff fe74 	bl	8004c7a <send_cmd>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d129      	bne.n	8004fec <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f9c:	68b8      	ldr	r0, [r7, #8]
 8004f9e:	f7ff fe11 	bl	8004bc4 <rcvr_datablock>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d021      	beq.n	8004fec <USER_SPI_read+0xac>
			count = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	e01e      	b.n	8004fec <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	2012      	movs	r0, #18
 8004fb2:	f7ff fe62 	bl	8004c7a <send_cmd>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d117      	bne.n	8004fec <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fc0:	68b8      	ldr	r0, [r7, #8]
 8004fc2:	f7ff fdff 	bl	8004bc4 <rcvr_datablock>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <USER_SPI_read+0xa2>
				buff += 512;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004fd2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ed      	bne.n	8004fbc <USER_SPI_read+0x7c>
 8004fe0:	e000      	b.n	8004fe4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004fe2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	200c      	movs	r0, #12
 8004fe8:	f7ff fe47 	bl	8004c7a <send_cmd>
		}
	}
	despiselect();
 8004fec:	f7ff fdc2 	bl	8004b74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000028 	.word	0x20000028
 8005008:	20000224 	.word	0x20000224

0800500c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <USER_SPI_write+0x1c>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <USER_SPI_write+0x20>
 8005028:	2304      	movs	r3, #4
 800502a:	e063      	b.n	80050f4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800502c:	4b33      	ldr	r3, [pc, #204]	; (80050fc <USER_SPI_write+0xf0>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <USER_SPI_write+0x32>
 800503a:	2303      	movs	r3, #3
 800503c:	e05a      	b.n	80050f4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <USER_SPI_write+0xf0>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <USER_SPI_write+0x44>
 800504c:	2302      	movs	r3, #2
 800504e:	e051      	b.n	80050f4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <USER_SPI_write+0xf4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <USER_SPI_write+0x56>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	025b      	lsls	r3, r3, #9
 8005060:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d110      	bne.n	800508a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	2018      	movs	r0, #24
 800506c:	f7ff fe05 	bl	8004c7a <send_cmd>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d136      	bne.n	80050e4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005076:	21fe      	movs	r1, #254	; 0xfe
 8005078:	68b8      	ldr	r0, [r7, #8]
 800507a:	f7ff fdcc 	bl	8004c16 <xmit_datablock>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02f      	beq.n	80050e4 <USER_SPI_write+0xd8>
			count = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	e02c      	b.n	80050e4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <USER_SPI_write+0xf4>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <USER_SPI_write+0x92>
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	2097      	movs	r0, #151	; 0x97
 800509a:	f7ff fdee 	bl	8004c7a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	2019      	movs	r0, #25
 80050a2:	f7ff fdea 	bl	8004c7a <send_cmd>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11b      	bne.n	80050e4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80050ac:	21fc      	movs	r1, #252	; 0xfc
 80050ae:	68b8      	ldr	r0, [r7, #8]
 80050b0:	f7ff fdb1 	bl	8004c16 <xmit_datablock>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <USER_SPI_write+0xc4>
				buff += 512;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80050c0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ee      	bne.n	80050ac <USER_SPI_write+0xa0>
 80050ce:	e000      	b.n	80050d2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80050d0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80050d2:	21fd      	movs	r1, #253	; 0xfd
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff fd9e 	bl	8004c16 <xmit_datablock>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <USER_SPI_write+0xd8>
 80050e0:	2301      	movs	r3, #1
 80050e2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80050e4:	f7ff fd46 	bl	8004b74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf14      	ite	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	2300      	moveq	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000028 	.word	0x20000028
 8005100:	20000224 	.word	0x20000224

08005104 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	603a      	str	r2, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	460b      	mov	r3, r1
 8005112:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <USER_SPI_ioctl+0x1a>
 800511a:	2304      	movs	r3, #4
 800511c:	e15a      	b.n	80053d4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800511e:	4baf      	ldr	r3, [pc, #700]	; (80053dc <USER_SPI_ioctl+0x2d8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <USER_SPI_ioctl+0x2c>
 800512c:	2303      	movs	r3, #3
 800512e:	e151      	b.n	80053d4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005136:	79bb      	ldrb	r3, [r7, #6]
 8005138:	2b04      	cmp	r3, #4
 800513a:	f200 8136 	bhi.w	80053aa <USER_SPI_ioctl+0x2a6>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <USER_SPI_ioctl+0x40>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005159 	.word	0x08005159
 8005148:	0800516d 	.word	0x0800516d
 800514c:	080053ab 	.word	0x080053ab
 8005150:	08005219 	.word	0x08005219
 8005154:	0800530f 	.word	0x0800530f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005158:	f7ff fd1a 	bl	8004b90 <spiselect>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8127 	beq.w	80053b2 <USER_SPI_ioctl+0x2ae>
 8005164:	2300      	movs	r3, #0
 8005166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800516a:	e122      	b.n	80053b2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800516c:	2100      	movs	r1, #0
 800516e:	2009      	movs	r0, #9
 8005170:	f7ff fd83 	bl	8004c7a <send_cmd>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 811d 	bne.w	80053b6 <USER_SPI_ioctl+0x2b2>
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	2110      	movs	r1, #16
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fd1e 	bl	8004bc4 <rcvr_datablock>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8113 	beq.w	80053b6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005190:	7b3b      	ldrb	r3, [r7, #12]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d111      	bne.n	80051be <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800519a:	7d7b      	ldrb	r3, [r7, #21]
 800519c:	461a      	mov	r2, r3
 800519e:	7d3b      	ldrb	r3, [r7, #20]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	4413      	add	r3, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80051ae:	4413      	add	r3, r2
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	029a      	lsls	r2, r3, #10
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e028      	b.n	8005210 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80051be:	7c7b      	ldrb	r3, [r7, #17]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	7dbb      	ldrb	r3, [r7, #22]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	7d7b      	ldrb	r3, [r7, #21]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4413      	add	r3, r2
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	3302      	adds	r3, #2
 80051e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80051e6:	7d3b      	ldrb	r3, [r7, #20]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	7cbb      	ldrb	r3, [r7, #18]
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051fc:	4413      	add	r3, r2
 80051fe:	3301      	adds	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005202:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005206:	3b09      	subs	r3, #9
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	409a      	lsls	r2, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005216:	e0ce      	b.n	80053b6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005218:	4b71      	ldr	r3, [pc, #452]	; (80053e0 <USER_SPI_ioctl+0x2dc>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d031      	beq.n	8005288 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005224:	2100      	movs	r1, #0
 8005226:	208d      	movs	r0, #141	; 0x8d
 8005228:	f7ff fd27 	bl	8004c7a <send_cmd>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 80c3 	bne.w	80053ba <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005234:	20ff      	movs	r0, #255	; 0xff
 8005236:	f7ff fc31 	bl	8004a9c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	2110      	movs	r1, #16
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fcbf 	bl	8004bc4 <rcvr_datablock>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80b6 	beq.w	80053ba <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800524e:	2330      	movs	r3, #48	; 0x30
 8005250:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005254:	e007      	b.n	8005266 <USER_SPI_ioctl+0x162>
 8005256:	20ff      	movs	r0, #255	; 0xff
 8005258:	f7ff fc20 	bl	8004a9c <xchg_spi>
 800525c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005260:	3b01      	subs	r3, #1
 8005262:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005266:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f3      	bne.n	8005256 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800526e:	7dbb      	ldrb	r3, [r7, #22]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	2310      	movs	r3, #16
 8005278:	fa03 f202 	lsl.w	r2, r3, r2
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005286:	e098      	b.n	80053ba <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005288:	2100      	movs	r1, #0
 800528a:	2009      	movs	r0, #9
 800528c:	f7ff fcf5 	bl	8004c7a <send_cmd>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 8091 	bne.w	80053ba <USER_SPI_ioctl+0x2b6>
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	2110      	movs	r1, #16
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fc90 	bl	8004bc4 <rcvr_datablock>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8087 	beq.w	80053ba <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80052ac:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <USER_SPI_ioctl+0x2dc>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80052b8:	7dbb      	ldrb	r3, [r7, #22]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80052c0:	7dfa      	ldrb	r2, [r7, #23]
 80052c2:	09d2      	lsrs	r2, r2, #7
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	4413      	add	r3, r2
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	7e7b      	ldrb	r3, [r7, #25]
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e013      	b.n	8005306 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80052de:	7dbb      	ldrb	r3, [r7, #22]
 80052e0:	109b      	asrs	r3, r3, #2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	3301      	adds	r3, #1
 80052ea:	7dfa      	ldrb	r2, [r7, #23]
 80052ec:	00d2      	lsls	r2, r2, #3
 80052ee:	f002 0218 	and.w	r2, r2, #24
 80052f2:	7df9      	ldrb	r1, [r7, #23]
 80052f4:	0949      	lsrs	r1, r1, #5
 80052f6:	b2c9      	uxtb	r1, r1
 80052f8:	440a      	add	r2, r1
 80052fa:	3201      	adds	r2, #1
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	461a      	mov	r2, r3
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800530c:	e055      	b.n	80053ba <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <USER_SPI_ioctl+0x2dc>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	2b00      	cmp	r3, #0
 8005318:	d051      	beq.n	80053be <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800531a:	f107 020c 	add.w	r2, r7, #12
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	210b      	movs	r1, #11
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff feee 	bl	8005104 <USER_SPI_ioctl>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d149      	bne.n	80053c2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800532e:	7b3b      	ldrb	r3, [r7, #12]
 8005330:	099b      	lsrs	r3, r3, #6
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <USER_SPI_ioctl+0x23e>
 8005338:	7dbb      	ldrb	r3, [r7, #22]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d041      	beq.n	80053c6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005352:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <USER_SPI_ioctl+0x2dc>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	025b      	lsls	r3, r3, #9
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	025b      	lsls	r3, r3, #9
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800536a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800536c:	2020      	movs	r0, #32
 800536e:	f7ff fc84 	bl	8004c7a <send_cmd>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d128      	bne.n	80053ca <USER_SPI_ioctl+0x2c6>
 8005378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800537a:	2021      	movs	r0, #33	; 0x21
 800537c:	f7ff fc7d 	bl	8004c7a <send_cmd>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d121      	bne.n	80053ca <USER_SPI_ioctl+0x2c6>
 8005386:	2100      	movs	r1, #0
 8005388:	2026      	movs	r0, #38	; 0x26
 800538a:	f7ff fc76 	bl	8004c7a <send_cmd>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11a      	bne.n	80053ca <USER_SPI_ioctl+0x2c6>
 8005394:	f247 5030 	movw	r0, #30000	; 0x7530
 8005398:	f7ff fbc9 	bl	8004b2e <wait_ready>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80053a8:	e00f      	b.n	80053ca <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80053aa:	2304      	movs	r3, #4
 80053ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053b0:	e00c      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		break;
 80053b2:	bf00      	nop
 80053b4:	e00a      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		break;
 80053b6:	bf00      	nop
 80053b8:	e008      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		break;
 80053ba:	bf00      	nop
 80053bc:	e006      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80053be:	bf00      	nop
 80053c0:	e004      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <USER_SPI_ioctl+0x2c8>
		break;
 80053ca:	bf00      	nop
	}

	despiselect();
 80053cc:	f7ff fbd2 	bl	8004b74 <despiselect>

	return res;
 80053d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3730      	adds	r7, #48	; 0x30
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000028 	.word	0x20000028
 80053e0:	20000224 	.word	0x20000224

080053e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	4a08      	ldr	r2, [pc, #32]	; (8005414 <disk_status+0x30>)
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	79fa      	ldrb	r2, [r7, #7]
 80053fc:	4905      	ldr	r1, [pc, #20]	; (8005414 <disk_status+0x30>)
 80053fe:	440a      	add	r2, r1
 8005400:	7a12      	ldrb	r2, [r2, #8]
 8005402:	4610      	mov	r0, r2
 8005404:	4798      	blx	r3
 8005406:	4603      	mov	r3, r0
 8005408:	73fb      	strb	r3, [r7, #15]
  return stat;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000248 	.word	0x20000248

08005418 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <disk_initialize+0x48>)
 800542a:	5cd3      	ldrb	r3, [r2, r3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d111      	bne.n	8005454 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	4a0b      	ldr	r2, [pc, #44]	; (8005460 <disk_initialize+0x48>)
 8005434:	2101      	movs	r1, #1
 8005436:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <disk_initialize+0x48>)
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	79fa      	ldrb	r2, [r7, #7]
 8005446:	4906      	ldr	r1, [pc, #24]	; (8005460 <disk_initialize+0x48>)
 8005448:	440a      	add	r2, r1
 800544a:	7a12      	ldrb	r2, [r2, #8]
 800544c:	4610      	mov	r0, r2
 800544e:	4798      	blx	r3
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000248 	.word	0x20000248

08005464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <disk_read+0x3c>)
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	689c      	ldr	r4, [r3, #8]
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <disk_read+0x3c>)
 8005484:	4413      	add	r3, r2
 8005486:	7a18      	ldrb	r0, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	47a0      	blx	r4
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]
  return res;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
}
 8005496:	4618      	mov	r0, r3
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000248 	.word	0x20000248

080054a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <disk_write+0x3c>)
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68dc      	ldr	r4, [r3, #12]
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <disk_write+0x3c>)
 80054c4:	4413      	add	r3, r2
 80054c6:	7a18      	ldrb	r0, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	47a0      	blx	r4
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd90      	pop	{r4, r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000248 	.word	0x20000248

080054e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	603a      	str	r2, [r7, #0]
 80054ee:	71fb      	strb	r3, [r7, #7]
 80054f0:	460b      	mov	r3, r1
 80054f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <disk_ioctl+0x38>)
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	79fa      	ldrb	r2, [r7, #7]
 8005502:	4906      	ldr	r1, [pc, #24]	; (800551c <disk_ioctl+0x38>)
 8005504:	440a      	add	r2, r1
 8005506:	7a10      	ldrb	r0, [r2, #8]
 8005508:	79b9      	ldrb	r1, [r7, #6]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	73fb      	strb	r3, [r7, #15]
  return res;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000248 	.word	0x20000248

08005520 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005534:	e007      	b.n	8005546 <mem_cpy+0x26>
		*d++ = *s++;
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	1c53      	adds	r3, r2, #1
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	6179      	str	r1, [r7, #20]
 8005542:	7812      	ldrb	r2, [r2, #0]
 8005544:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1e5a      	subs	r2, r3, #1
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f2      	bne.n	8005536 <mem_cpy+0x16>
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800555a:	b480      	push	{r7}
 800555c:	b087      	sub	sp, #28
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800556a:	e005      	b.n	8005578 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	617a      	str	r2, [r7, #20]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1e5a      	subs	r2, r3, #1
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f4      	bne.n	800556c <mem_set+0x12>
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800558c:	b480      	push	{r7}
 800558e:	b089      	sub	sp, #36	; 0x24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80055a4:	bf00      	nop
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1e5a      	subs	r2, r3, #1
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <mem_cmp+0x40>
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	61fa      	str	r2, [r7, #28]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	61ba      	str	r2, [r7, #24]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	1acb      	subs	r3, r1, r3
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ec      	beq.n	80055a6 <mem_cmp+0x1a>
	return r;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3724      	adds	r7, #36	; 0x24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80055e2:	e002      	b.n	80055ea <chk_chr+0x12>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <chk_chr+0x26>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d1f2      	bne.n	80055e4 <chk_chr+0xc>
	return *str;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	781b      	ldrb	r3, [r3, #0]
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e038      	b.n	8005692 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005620:	492f      	ldr	r1, [pc, #188]	; (80056e0 <chk_lock+0xd4>)
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d029      	beq.n	8005688 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005634:	492a      	ldr	r1, [pc, #168]	; (80056e0 <chk_lock+0xd4>)
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800564a:	429a      	cmp	r2, r3
 800564c:	d11e      	bne.n	800568c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800564e:	4924      	ldr	r1, [pc, #144]	; (80056e0 <chk_lock+0xd4>)
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3304      	adds	r3, #4
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005666:	429a      	cmp	r2, r3
 8005668:	d110      	bne.n	800568c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800566a:	491d      	ldr	r1, [pc, #116]	; (80056e0 <chk_lock+0xd4>)
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3308      	adds	r3, #8
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005682:	429a      	cmp	r2, r3
 8005684:	d102      	bne.n	800568c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005686:	e007      	b.n	8005698 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005688:	2301      	movs	r3, #1
 800568a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d9c3      	bls.n	8005620 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d109      	bne.n	80056b2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <chk_lock+0x9e>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d101      	bne.n	80056ae <chk_lock+0xa2>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e013      	b.n	80056d6 <chk_lock+0xca>
 80056ae:	2312      	movs	r3, #18
 80056b0:	e011      	b.n	80056d6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <chk_lock+0xc4>
 80056b8:	4909      	ldr	r1, [pc, #36]	; (80056e0 <chk_lock+0xd4>)
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4613      	mov	r3, r2
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	330a      	adds	r3, #10
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d101      	bne.n	80056d4 <chk_lock+0xc8>
 80056d0:	2310      	movs	r3, #16
 80056d2:	e000      	b.n	80056d6 <chk_lock+0xca>
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr
 80056e0:	20000230 	.word	0x20000230

080056e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	e002      	b.n	80056f6 <enq_lock+0x12>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3301      	adds	r3, #1
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d809      	bhi.n	8005710 <enq_lock+0x2c>
 80056fc:	490a      	ldr	r1, [pc, #40]	; (8005728 <enq_lock+0x44>)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ef      	bne.n	80056f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000230 	.word	0x20000230

0800572c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e02b      	b.n	8005794 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800573c:	4955      	ldr	r1, [pc, #340]	; (8005894 <inc_lock+0x168>)
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005752:	429a      	cmp	r2, r3
 8005754:	d11b      	bne.n	800578e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005756:	494f      	ldr	r1, [pc, #316]	; (8005894 <inc_lock+0x168>)
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4613      	mov	r3, r2
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3304      	adds	r3, #4
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800576e:	429a      	cmp	r2, r3
 8005770:	d10d      	bne.n	800578e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005772:	4948      	ldr	r1, [pc, #288]	; (8005894 <inc_lock+0x168>)
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3308      	adds	r3, #8
 8005782:	881a      	ldrh	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800578a:	429a      	cmp	r2, r3
 800578c:	d006      	beq.n	800579c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d9d0      	bls.n	800573c <inc_lock+0x10>
 800579a:	e000      	b.n	800579e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800579c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d145      	bne.n	8005830 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e002      	b.n	80057b0 <inc_lock+0x84>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d809      	bhi.n	80057ca <inc_lock+0x9e>
 80057b6:	4937      	ldr	r1, [pc, #220]	; (8005894 <inc_lock+0x168>)
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4613      	mov	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ef      	bne.n	80057aa <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d101      	bne.n	80057d4 <inc_lock+0xa8>
 80057d0:	2300      	movs	r3, #0
 80057d2:	e05a      	b.n	800588a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80057da:	482e      	ldr	r0, [pc, #184]	; (8005894 <inc_lock+0x168>)
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80057f0:	4828      	ldr	r0, [pc, #160]	; (8005894 <inc_lock+0x168>)
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4403      	add	r3, r0
 80057fe:	3304      	adds	r3, #4
 8005800:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005808:	4922      	ldr	r1, [pc, #136]	; (8005894 <inc_lock+0x168>)
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3308      	adds	r3, #8
 8005818:	4602      	mov	r2, r0
 800581a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800581c:	491d      	ldr	r1, [pc, #116]	; (8005894 <inc_lock+0x168>)
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	330a      	adds	r3, #10
 800582c:	2200      	movs	r2, #0
 800582e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <inc_lock+0x124>
 8005836:	4917      	ldr	r1, [pc, #92]	; (8005894 <inc_lock+0x168>)
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	330a      	adds	r3, #10
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <inc_lock+0x124>
 800584c:	2300      	movs	r3, #0
 800584e:	e01c      	b.n	800588a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <inc_lock+0x142>
 8005856:	490f      	ldr	r1, [pc, #60]	; (8005894 <inc_lock+0x168>)
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	330a      	adds	r3, #10
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	b299      	uxth	r1, r3
 800586c:	e001      	b.n	8005872 <inc_lock+0x146>
 800586e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005872:	4808      	ldr	r0, [pc, #32]	; (8005894 <inc_lock+0x168>)
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4403      	add	r3, r0
 8005880:	330a      	adds	r3, #10
 8005882:	460a      	mov	r2, r1
 8005884:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	20000230 	.word	0x20000230

08005898 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d82e      	bhi.n	800590a <dec_lock+0x72>
		n = Files[i].ctr;
 80058ac:	491b      	ldr	r1, [pc, #108]	; (800591c <dec_lock+0x84>)
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	330a      	adds	r3, #10
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c6:	d101      	bne.n	80058cc <dec_lock+0x34>
 80058c8:	2300      	movs	r3, #0
 80058ca:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80058cc:	89fb      	ldrh	r3, [r7, #14]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <dec_lock+0x40>
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80058d8:	4910      	ldr	r1, [pc, #64]	; (800591c <dec_lock+0x84>)
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	330a      	adds	r3, #10
 80058e8:	89fa      	ldrh	r2, [r7, #14]
 80058ea:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <dec_lock+0x6c>
 80058f2:	490a      	ldr	r1, [pc, #40]	; (800591c <dec_lock+0x84>)
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	737b      	strb	r3, [r7, #13]
 8005908:	e001      	b.n	800590e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800590a:	2302      	movs	r3, #2
 800590c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800590e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000230 	.word	0x20000230

08005920 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e016      	b.n	800595c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800592e:	490f      	ldr	r1, [pc, #60]	; (800596c <clear_lock+0x4c>)
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d108      	bne.n	8005956 <clear_lock+0x36>
 8005944:	4909      	ldr	r1, [pc, #36]	; (800596c <clear_lock+0x4c>)
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4613      	mov	r3, r2
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d9e5      	bls.n	800592e <clear_lock+0xe>
	}
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	20000230 	.word	0x20000230

08005970 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005982:	2b00      	cmp	r3, #0
 8005984:	d038      	beq.n	80059f8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800598c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	2301      	movs	r3, #1
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	f7ff fd83 	bl	80054a4 <disk_write>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <sync_window+0x3a>
			res = FR_DISK_ERR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e026      	b.n	80059f8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d218      	bcs.n	80059f8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	e010      	b.n	80059f2 <sync_window+0x82>
					wsect += fs->fsize;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	2301      	movs	r3, #1
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	f7ff fd5c 	bl	80054a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d8eb      	bhi.n	80059d0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d01b      	beq.n	8005a54 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ffa7 	bl	8005970 <sync_window>
 8005a22:	4603      	mov	r3, r0
 8005a24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d113      	bne.n	8005a54 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	2301      	movs	r3, #1
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	f7ff fd14 	bl	8005464 <disk_read>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ff82 	bl	8005970 <sync_window>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 809b 	bne.w	8005bae <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	f040 8088 	bne.w	8005b94 <sync_fs+0x136>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	f040 8082 	bne.w	8005b94 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fd5e 	bl	800555a <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2255      	movs	r2, #85	; 0x55
 8005aa2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	22aa      	movs	r2, #170	; 0xaa
 8005aaa:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2252      	movs	r2, #82	; 0x52
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2252      	movs	r2, #82	; 0x52
 8005ab8:	705a      	strb	r2, [r3, #1]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2261      	movs	r2, #97	; 0x61
 8005abe:	709a      	strb	r2, [r3, #2]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2241      	movs	r2, #65	; 0x41
 8005ac4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2272      	movs	r2, #114	; 0x72
 8005aca:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2272      	movs	r2, #114	; 0x72
 8005ad2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2241      	movs	r2, #65	; 0x41
 8005ada:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2261      	movs	r2, #97	; 0x61
 8005ae2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b1e:	0e1b      	lsrs	r3, r3, #24
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005b86:	2301      	movs	r3, #1
 8005b88:	f7ff fc8c 	bl	80054a4 <disk_write>
			fs->fsi_flag = 0;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fca0 	bl	80054e4 <disk_ioctl>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3b02      	subs	r3, #2
 8005bc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bce:	3b02      	subs	r3, #2
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d301      	bcc.n	8005bda <clust2sect+0x22>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e00a      	b.n	8005bf0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005be0:	461a      	mov	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	fb03 f202 	mul.w	r2, r3, r2
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005bee:	4413      	add	r3, r2
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d905      	bls.n	8005c16 <get_fat+0x1c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <get_fat+0x22>
		val = 1;	/* Internal error */
 8005c16:	2301      	movs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e0a0      	b.n	8005d5e <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d044      	beq.n	8005cb6 <get_fat+0xbc>
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d063      	beq.n	8005cf8 <get_fat+0xfe>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	f040 808a 	bne.w	8005d4a <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	0a5b      	lsrs	r3, r3, #9
 8005c4e:	4413      	add	r3, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fed5 	bl	8005a02 <move_window>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d178      	bne.n	8005d50 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	60fa      	str	r2, [r7, #12]
 8005c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	0a5b      	lsrs	r3, r3, #9
 8005c78:	4413      	add	r3, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fec0 	bl	8005a02 <move_window>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d165      	bne.n	8005d54 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <get_fat+0xb2>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	e002      	b.n	8005cb2 <get_fat+0xb8>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	617b      	str	r3, [r7, #20]
			break;
 8005cb4:	e053      	b.n	8005d5e <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fe9c 	bl	8005a02 <move_window>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d143      	bne.n	8005d58 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	b21a      	sxth	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b21b      	sxth	r3, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	617b      	str	r3, [r7, #20]
			break;
 8005cf6:	e032      	b.n	8005d5e <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	4413      	add	r3, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fe7b 	bl	8005a02 <move_window>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d124      	bne.n	8005d5c <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3303      	adds	r3, #3
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	061a      	lsls	r2, r3, #24
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	4313      	orrs	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	3201      	adds	r2, #1
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	0212      	lsls	r2, r2, #8
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d46:	617b      	str	r3, [r7, #20]
			break;
 8005d48:	e009      	b.n	8005d5e <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e006      	b.n	8005d5e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d50:	bf00      	nop
 8005d52:	e004      	b.n	8005d5e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d5c:	bf00      	nop
		}
	}

	return val;
 8005d5e:	697b      	ldr	r3, [r7, #20]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d905      	bls.n	8005d86 <put_fat+0x1e>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <put_fat+0x24>
		res = FR_INT_ERR;
 8005d86:	2302      	movs	r3, #2
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e0f3      	b.n	8005f74 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d074      	beq.n	8005e80 <put_fat+0x118>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	f000 8099 	beq.w	8005ece <put_fat+0x166>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f040 80df 	bne.w	8005f60 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	0a5b      	lsrs	r3, r3, #9
 8005dba:	4413      	add	r3, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff fe1f 	bl	8005a02 <move_window>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 80cb 	bne.w	8005f66 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	617a      	str	r2, [r7, #20]
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <put_fat+0x9e>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	b25a      	sxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	e001      	b.n	8005e0a <put_fat+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	0a5b      	lsrs	r3, r3, #9
 8005e20:	4413      	add	r3, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff fdec 	bl	8005a02 <move_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 809a 	bne.w	8005f6a <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <put_fat+0xec>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	e00e      	b.n	8005e72 <put_fat+0x10a>
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b25b      	sxtb	r3, r3
 8005e5a:	f023 030f 	bic.w	r3, r3, #15
 8005e5e:	b25a      	sxtb	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b25b      	sxtb	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005e7e:	e079      	b.n	8005f74 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	4413      	add	r3, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fdb7 	bl	8005a02 <move_window>
 8005e94:	4603      	mov	r3, r0
 8005e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d167      	bne.n	8005f6e <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005ecc:	e052      	b.n	8005f74 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	4413      	add	r3, r2
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fd90 	bl	8005a02 <move_window>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d142      	bne.n	8005f72 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3303      	adds	r3, #3
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	061a      	lsls	r2, r3, #24
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	3302      	adds	r3, #2
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	3201      	adds	r2, #1
 8005f10:	7812      	ldrb	r2, [r2, #0]
 8005f12:	0212      	lsls	r2, r2, #8
 8005f14:	4313      	orrs	r3, r2
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0c1a      	lsrs	r2, r3, #16
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3302      	adds	r3, #2
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0e1a      	lsrs	r2, r3, #24
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3303      	adds	r3, #3
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005f5e:	e009      	b.n	8005f74 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8005f60:	2302      	movs	r3, #2
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e006      	b.n	8005f74 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f66:	bf00      	nop
 8005f68:	e004      	b.n	8005f74 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f72:	bf00      	nop
		}
	}

	return res;
 8005f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d905      	bls.n	8005f9a <remove_chain+0x1c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	73fb      	strb	r3, [r7, #15]
 8005f9e:	e043      	b.n	8006028 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005fa4:	e036      	b.n	8006014 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fe26 	bl	8005bfa <get_fat>
 8005fae:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d035      	beq.n	8006022 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d102      	bne.n	8005fc2 <remove_chain+0x44>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e032      	b.n	8006028 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d102      	bne.n	8005fd0 <remove_chain+0x52>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e02b      	b.n	8006028 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fec7 	bl	8005d68 <put_fat>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d120      	bne.n	8006026 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d00f      	beq.n	8006010 <remove_chain+0x92>
				fs->free_clust++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d3c2      	bcc.n	8005fa6 <remove_chain+0x28>
 8006020:	e002      	b.n	8006028 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006026:	bf00      	nop
		}
	}

	return res;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006048:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <create_chain+0x2a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d31c      	bcc.n	8006096 <create_chain+0x64>
 800605c:	2301      	movs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e019      	b.n	8006096 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fdc8 	bl	8005bfa <get_fat>
 800606a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d801      	bhi.n	8006076 <create_chain+0x44>
 8006072:	2301      	movs	r3, #1
 8006074:	e076      	b.n	8006164 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d101      	bne.n	8006082 <create_chain+0x50>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	e070      	b.n	8006164 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	d201      	bcs.n	8006092 <create_chain+0x60>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	e068      	b.n	8006164 <create_chain+0x132>
		scl = clst;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	3301      	adds	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d307      	bcc.n	80060bc <create_chain+0x8a>
			ncl = 2;
 80060ac:	2302      	movs	r3, #2
 80060ae:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d901      	bls.n	80060bc <create_chain+0x8a>
 80060b8:	2300      	movs	r3, #0
 80060ba:	e053      	b.n	8006164 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fd9b 	bl	8005bfa <get_fat>
 80060c4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d002      	beq.n	80060da <create_chain+0xa8>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <create_chain+0xac>
			return cs;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	e042      	b.n	8006164 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d1d9      	bne.n	800609a <create_chain+0x68>
 80060e6:	2300      	movs	r3, #0
 80060e8:	e03c      	b.n	8006164 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80060ea:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80060ec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fe38 	bl	8005d68 <put_fat>
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <create_chain+0xe4>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fe2b 	bl	8005d68 <put_fat>
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d11a      	bne.n	8006152 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d018      	beq.n	8006162 <create_chain+0x130>
			fs->free_clust--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006150:	e007      	b.n	8006162 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d102      	bne.n	800615e <create_chain+0x12c>
 8006158:	f04f 33ff 	mov.w	r3, #4294967295
 800615c:	e000      	b.n	8006160 <create_chain+0x12e>
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006162:	697b      	ldr	r3, [r7, #20]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800617c:	3304      	adds	r3, #4
 800617e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	0a5b      	lsrs	r3, r3, #9
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800618a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800618e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006192:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	613a      	str	r2, [r7, #16]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <clmt_clust+0x3c>
 80061a4:	2300      	movs	r3, #0
 80061a6:	e010      	b.n	80061ca <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d307      	bcc.n	80061c0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	3304      	adds	r3, #4
 80061bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061be:	e7e9      	b.n	8006194 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80061c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80061ee:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d007      	beq.n	8006206 <dir_sdi+0x32>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d301      	bcc.n	800620a <dir_sdi+0x36>
		return FR_INT_ERR;
 8006206:	2302      	movs	r3, #2
 8006208:	e074      	b.n	80062f4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <dir_sdi+0x56>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006216:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800621a:	2b03      	cmp	r3, #3
 800621c:	d105      	bne.n	800622a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006224:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006228:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d111      	bne.n	8006254 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006236:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800623a:	461a      	mov	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4293      	cmp	r3, r2
 8006240:	d301      	bcc.n	8006246 <dir_sdi+0x72>
			return FR_INT_ERR;
 8006242:	2302      	movs	r3, #2
 8006244:	e056      	b.n	80062f4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800624c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	e032      	b.n	80062ba <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800625a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006262:	e01e      	b.n	80062a2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800626a:	6979      	ldr	r1, [r7, #20]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fcc4 	bl	8005bfa <get_fat>
 8006272:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d101      	bne.n	8006280 <dir_sdi+0xac>
 800627c:	2301      	movs	r3, #1
 800627e:	e039      	b.n	80062f4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d907      	bls.n	8006296 <dir_sdi+0xc2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800628c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	429a      	cmp	r2, r3
 8006294:	d301      	bcc.n	800629a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8006296:	2302      	movs	r3, #2
 8006298:	e02c      	b.n	80062f4 <dir_sdi+0x120>
			idx -= ic;
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d2dc      	bcs.n	8006264 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fc80 	bl	8005bb8 <clust2sect>
 80062b8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <dir_sdi+0xf8>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e013      	b.n	80062f4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	091a      	lsrs	r2, r3, #4
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	441a      	add	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062e0:	461a      	mov	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	015b      	lsls	r3, r3, #5
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <dir_next+0x26>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <dir_next+0x2a>
		return FR_NO_FILE;
 8006322:	2304      	movs	r3, #4
 8006324:	e0dd      	b.n	80064e2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 80c6 	bne.w	80064be <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006350:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006354:	461a      	mov	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4293      	cmp	r3, r2
 800635a:	f0c0 80b0 	bcc.w	80064be <dir_next+0x1c2>
				return FR_NO_FILE;
 800635e:	2304      	movs	r3, #4
 8006360:	e0bf      	b.n	80064e2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800636c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006370:	3a01      	subs	r2, #1
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 80a2 	bne.w	80064be <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7ff fc36 	bl	8005bfa <get_fat>
 800638e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d801      	bhi.n	800639a <dir_next+0x9e>
 8006396:	2302      	movs	r3, #2
 8006398:	e0a3      	b.n	80064e2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d101      	bne.n	80063a6 <dir_next+0xaa>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e09d      	b.n	80064e2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d374      	bcc.n	80064a0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <dir_next+0xc4>
 80063bc:	2304      	movs	r3, #4
 80063be:	e090      	b.n	80064e2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7ff fe2f 	bl	8006032 <create_chain>
 80063d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <dir_next+0xe4>
 80063dc:	2307      	movs	r3, #7
 80063de:	e080      	b.n	80064e2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <dir_next+0xee>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e07b      	b.n	80064e2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d101      	bne.n	80063f6 <dir_next+0xfa>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e075      	b.n	80064e2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fab7 	bl	8005970 <sync_window>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <dir_next+0x110>
 8006408:	2301      	movs	r3, #1
 800640a:	e06a      	b.n	80064e2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff f89e 	bl	800555a <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	4610      	mov	r0, r2
 800642e:	f7ff fbc3 	bl	8005bb8 <clust2sect>
 8006432:	4603      	mov	r3, r0
 8006434:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e01b      	b.n	8006476 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fa8d 	bl	8005970 <sync_window>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <dir_next+0x164>
 800645c:	2301      	movs	r3, #1
 800645e:	e040      	b.n	80064e2 <dir_next+0x1e6>
						dp->fs->winsect++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006466:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800646a:	3201      	adds	r2, #1
 800646c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	3301      	adds	r3, #1
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800647c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006480:	461a      	mov	r2, r3
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4293      	cmp	r3, r2
 8006486:	d3da      	bcc.n	800643e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800648e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	1a8a      	subs	r2, r1, r2
 800649c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064ae:	6979      	ldr	r1, [r7, #20]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fb81 	bl	8005bb8 <clust2sect>
 80064b6:	4602      	mov	r2, r0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	015b      	lsls	r3, r3, #5
 80064d8:	441a      	add	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd90      	pop	{r4, r7, pc}

080064ea <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80064f4:	2100      	movs	r1, #0
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fe6c 	bl	80061d4 <dir_sdi>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d131      	bne.n	800656a <dir_alloc+0x80>
		n = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7ff fa72 	bl	8005a02 <move_window>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11f      	bne.n	8006568 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2be5      	cmp	r3, #229	; 0xe5
 8006532:	d005      	beq.n	8006540 <dir_alloc+0x56>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3301      	adds	r3, #1
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d102      	bne.n	8006554 <dir_alloc+0x6a>
 800654e:	e00c      	b.n	800656a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006550:	2300      	movs	r3, #0
 8006552:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006554:	2101      	movs	r1, #1
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fed0 	bl	80062fc <dir_next>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0d1      	beq.n	800650a <dir_alloc+0x20>
 8006566:	e000      	b.n	800656a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006568:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d101      	bne.n	8006574 <dir_alloc+0x8a>
 8006570:	2307      	movs	r3, #7
 8006572:	73fb      	strb	r3, [r7, #15]
	return res;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	331b      	adds	r3, #27
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	b21a      	sxth	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	331a      	adds	r3, #26
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b21b      	sxth	r3, r3
 800659a:	4313      	orrs	r3, r2
 800659c:	b21b      	sxth	r3, r3
 800659e:	b29b      	uxth	r3, r3
 80065a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d10f      	bne.n	80065cc <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	3315      	adds	r3, #21
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	b21a      	sxth	r2, r3
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	3314      	adds	r3, #20
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	b21b      	sxth	r3, r3
 80065be:	4313      	orrs	r3, r2
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

	return cl;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	331a      	adds	r3, #26
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	331b      	adds	r3, #27
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	0c1a      	lsrs	r2, r3, #16
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3314      	adds	r3, #20
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	b29b      	uxth	r3, r3
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3315      	adds	r3, #21
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800662c:	2100      	movs	r1, #0
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fdd0 	bl	80061d4 <dir_sdi>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <dir_find+0x1e>
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	e03b      	b.n	80066ba <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7ff f9d6 	bl	8005a02 <move_window>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d128      	bne.n	80066b2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006666:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <dir_find+0x56>
 8006674:	2304      	movs	r3, #4
 8006676:	75fb      	strb	r3, [r7, #23]
 8006678:	e01e      	b.n	80066b8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	330b      	adds	r3, #11
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <dir_find+0x7a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800668e:	220b      	movs	r2, #11
 8006690:	4619      	mov	r1, r3
 8006692:	6938      	ldr	r0, [r7, #16]
 8006694:	f7fe ff7a 	bl	800558c <mem_cmp>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff fe2b 	bl	80062fc <dir_next>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0c8      	beq.n	8006642 <dir_find+0x1e>
 80066b0:	e002      	b.n	80066b8 <dir_find+0x94>
		if (res != FR_OK) break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <dir_find+0x94>
			break;
 80066b6:	bf00      	nop

	return res;
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80066cc:	2304      	movs	r3, #4
 80066ce:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80066d0:	e03f      	b.n	8006752 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7ff f98e 	bl	8005a02 <move_window>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d136      	bne.n	800675e <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066f6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <dir_read+0x48>
 8006704:	2304      	movs	r3, #4
 8006706:	75fb      	strb	r3, [r7, #23]
 8006708:	e02e      	b.n	8006768 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	330b      	adds	r3, #11
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006714:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2be5      	cmp	r3, #229	; 0xe5
 800671a:	d011      	beq.n	8006740 <dir_read+0x7e>
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b2e      	cmp	r3, #46	; 0x2e
 8006720:	d00e      	beq.n	8006740 <dir_read+0x7e>
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b0f      	cmp	r3, #15
 8006726:	d00b      	beq.n	8006740 <dir_read+0x7e>
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	2b08      	cmp	r3, #8
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	4293      	cmp	r3, r2
 800673e:	d010      	beq.n	8006762 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fdda 	bl	80062fc <dir_next>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <dir_read+0xa4>
	while (dp->sect) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ba      	bne.n	80066d2 <dir_read+0x10>
 800675c:	e004      	b.n	8006768 <dir_read+0xa6>
		if (res != FR_OK) break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <dir_read+0xa6>
			break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <dir_read+0xa6>
		if (res != FR_OK) break;
 8006766:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <dir_read+0xb4>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fead 	bl	80064ea <dir_alloc>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d126      	bne.n	80067e8 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7ff f92a 	bl	8005a02 <move_window>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d117      	bne.n	80067e8 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067be:	2220      	movs	r2, #32
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fec9 	bl	800555a <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067d4:	220b      	movs	r2, #11
 80067d6:	4619      	mov	r1, r3
 80067d8:	f7fe fea2 	bl	8005520 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b087      	sub	sp, #28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	3309      	adds	r3, #9
 8006800:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05a      	beq.n	80068c2 <get_fileinfo+0xd0>
		dir = dp->dir;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006812:	60bb      	str	r3, [r7, #8]
		i = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006818:	e01c      	b.n	8006854 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	617a      	str	r2, [r7, #20]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b20      	cmp	r3, #32
 800682c:	d100      	bne.n	8006830 <get_fileinfo+0x3e>
 800682e:	e011      	b.n	8006854 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b05      	cmp	r3, #5
 8006834:	d101      	bne.n	800683a <get_fileinfo+0x48>
 8006836:	23e5      	movs	r3, #229	; 0xe5
 8006838:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b09      	cmp	r3, #9
 800683e:	d104      	bne.n	800684a <get_fileinfo+0x58>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	613a      	str	r2, [r7, #16]
 8006846:	222e      	movs	r2, #46	; 0x2e
 8006848:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	613a      	str	r2, [r7, #16]
 8006850:	7bfa      	ldrb	r2, [r7, #15]
 8006852:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b0a      	cmp	r3, #10
 8006858:	d9df      	bls.n	800681a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	7ada      	ldrb	r2, [r3, #11]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	331f      	adds	r3, #31
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	061a      	lsls	r2, r3, #24
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	331e      	adds	r3, #30
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	4313      	orrs	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	321d      	adds	r2, #29
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	0212      	lsls	r2, r2, #8
 800687c:	4313      	orrs	r3, r2
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	321c      	adds	r2, #28
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	431a      	orrs	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	3319      	adds	r3, #25
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	b21a      	sxth	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3318      	adds	r3, #24
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b21b      	sxth	r3, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	b21b      	sxth	r3, r3
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	3317      	adds	r3, #23
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	b21a      	sxth	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	3316      	adds	r3, #22
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b21b      	sxth	r3, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	b29a      	uxth	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
	...

080068d4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <create_name+0x18>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b2f      	cmp	r3, #47	; 0x2f
 80068f2:	d0f8      	beq.n	80068e6 <create_name+0x12>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b5c      	cmp	r3, #92	; 0x5c
 80068fa:	d0f4      	beq.n	80068e6 <create_name+0x12>
	sfn = dp->fn;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006902:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006904:	220b      	movs	r2, #11
 8006906:	2120      	movs	r1, #32
 8006908:	68b8      	ldr	r0, [r7, #8]
 800690a:	f7fe fe26 	bl	800555a <mem_set>
	si = i = b = 0; ni = 8;
 800690e:	2300      	movs	r3, #0
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	2308      	movs	r3, #8
 800691c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	617a      	str	r2, [r7, #20]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800692c:	7fbb      	ldrb	r3, [r7, #30]
 800692e:	2b20      	cmp	r3, #32
 8006930:	d953      	bls.n	80069da <create_name+0x106>
 8006932:	7fbb      	ldrb	r3, [r7, #30]
 8006934:	2b2f      	cmp	r3, #47	; 0x2f
 8006936:	d050      	beq.n	80069da <create_name+0x106>
 8006938:	7fbb      	ldrb	r3, [r7, #30]
 800693a:	2b5c      	cmp	r3, #92	; 0x5c
 800693c:	d04d      	beq.n	80069da <create_name+0x106>
		if (c == '.' || i >= ni) {
 800693e:	7fbb      	ldrb	r3, [r7, #30]
 8006940:	2b2e      	cmp	r3, #46	; 0x2e
 8006942:	d003      	beq.n	800694c <create_name+0x78>
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	429a      	cmp	r2, r3
 800694a:	d30f      	bcc.n	800696c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b08      	cmp	r3, #8
 8006950:	d102      	bne.n	8006958 <create_name+0x84>
 8006952:	7fbb      	ldrb	r3, [r7, #30]
 8006954:	2b2e      	cmp	r3, #46	; 0x2e
 8006956:	d001      	beq.n	800695c <create_name+0x88>
 8006958:	2306      	movs	r3, #6
 800695a:	e073      	b.n	8006a44 <create_name+0x170>
			i = 8; ni = 11;
 800695c:	2308      	movs	r3, #8
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	230b      	movs	r3, #11
 8006962:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006964:	7ffb      	ldrb	r3, [r7, #31]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e035      	b.n	80069d8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800696c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006970:	2b00      	cmp	r3, #0
 8006972:	da08      	bge.n	8006986 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006974:	7ffb      	ldrb	r3, [r7, #31]
 8006976:	f043 0303 	orr.w	r3, r3, #3
 800697a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800697c:	7fbb      	ldrb	r3, [r7, #30]
 800697e:	3b80      	subs	r3, #128	; 0x80
 8006980:	4a32      	ldr	r2, [pc, #200]	; (8006a4c <create_name+0x178>)
 8006982:	5cd3      	ldrb	r3, [r2, r3]
 8006984:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006986:	7fbb      	ldrb	r3, [r7, #30]
 8006988:	4619      	mov	r1, r3
 800698a:	4831      	ldr	r0, [pc, #196]	; (8006a50 <create_name+0x17c>)
 800698c:	f7fe fe24 	bl	80055d8 <chk_chr>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <create_name+0xc6>
				return FR_INVALID_NAME;
 8006996:	2306      	movs	r3, #6
 8006998:	e054      	b.n	8006a44 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800699a:	7fbb      	ldrb	r3, [r7, #30]
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d907      	bls.n	80069b0 <create_name+0xdc>
 80069a0:	7fbb      	ldrb	r3, [r7, #30]
 80069a2:	2b5a      	cmp	r3, #90	; 0x5a
 80069a4:	d804      	bhi.n	80069b0 <create_name+0xdc>
				b |= 2;
 80069a6:	7ffb      	ldrb	r3, [r7, #31]
 80069a8:	f043 0302 	orr.w	r3, r3, #2
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e00c      	b.n	80069ca <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80069b0:	7fbb      	ldrb	r3, [r7, #30]
 80069b2:	2b60      	cmp	r3, #96	; 0x60
 80069b4:	d909      	bls.n	80069ca <create_name+0xf6>
 80069b6:	7fbb      	ldrb	r3, [r7, #30]
 80069b8:	2b7a      	cmp	r3, #122	; 0x7a
 80069ba:	d806      	bhi.n	80069ca <create_name+0xf6>
					b |= 1; c -= 0x20;
 80069bc:	7ffb      	ldrb	r3, [r7, #31]
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	7fbb      	ldrb	r3, [r7, #30]
 80069c6:	3b20      	subs	r3, #32
 80069c8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	613a      	str	r2, [r7, #16]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	4413      	add	r3, r2
 80069d4:	7fba      	ldrb	r2, [r7, #30]
 80069d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80069d8:	e7a1      	b.n	800691e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	441a      	add	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80069e4:	7fbb      	ldrb	r3, [r7, #30]
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d801      	bhi.n	80069ee <create_name+0x11a>
 80069ea:	2304      	movs	r3, #4
 80069ec:	e000      	b.n	80069f0 <create_name+0x11c>
 80069ee:	2300      	movs	r3, #0
 80069f0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <create_name+0x128>
 80069f8:	2306      	movs	r3, #6
 80069fa:	e023      	b.n	8006a44 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2be5      	cmp	r3, #229	; 0xe5
 8006a02:	d102      	bne.n	8006a0a <create_name+0x136>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2205      	movs	r2, #5
 8006a08:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d102      	bne.n	8006a16 <create_name+0x142>
 8006a10:	7ffb      	ldrb	r3, [r7, #31]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006a16:	7ffb      	ldrb	r3, [r7, #31]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d103      	bne.n	8006a28 <create_name+0x154>
 8006a20:	7fbb      	ldrb	r3, [r7, #30]
 8006a22:	f043 0310 	orr.w	r3, r3, #16
 8006a26:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006a28:	7ffb      	ldrb	r3, [r7, #31]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d103      	bne.n	8006a3a <create_name+0x166>
 8006a32:	7fbb      	ldrb	r3, [r7, #30]
 8006a34:	f043 0308 	orr.w	r3, r3, #8
 8006a38:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	330b      	adds	r3, #11
 8006a3e:	7fba      	ldrb	r2, [r7, #30]
 8006a40:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a42:	2300      	movs	r3, #0
#endif
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	08009b70 	.word	0x08009b70
 8006a50:	080092c0 	.word	0x080092c0

08006a54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b2f      	cmp	r3, #47	; 0x2f
 8006a64:	d003      	beq.n	8006a6e <follow_path+0x1a>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b5c      	cmp	r3, #92	; 0x5c
 8006a6c:	d102      	bne.n	8006a74 <follow_path+0x20>
		path++;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b1f      	cmp	r3, #31
 8006a82:	d80a      	bhi.n	8006a9a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fba4 	bl	80061d4 <dir_sdi>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006a98:	e045      	b.n	8006b26 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff ff18 	bl	80068d4 <create_name>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d136      	bne.n	8006b1c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fdb8 	bl	8006624 <dir_find>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006abe:	7adb      	ldrb	r3, [r3, #11]
 8006ac0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d128      	bne.n	8006b20 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d123      	bne.n	8006b20 <follow_path+0xcc>
 8006ad8:	2305      	movs	r3, #5
 8006ada:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006adc:	e020      	b.n	8006b20 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11d      	bne.n	8006b24 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aee:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	330b      	adds	r3, #11
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006afe:	2305      	movs	r3, #5
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	e010      	b.n	8006b26 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fd36 	bl	800657e <ld_clust>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b1a:	e7be      	b.n	8006a9a <follow_path+0x46>
			if (res != FR_OK) break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <follow_path+0xd2>
				break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b24:	bf00      	nop
		}
	}

	return res;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d031      	beq.n	8006baa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e002      	b.n	8006b54 <get_ldnumber+0x24>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	3301      	adds	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d903      	bls.n	8006b64 <get_ldnumber+0x34>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b3a      	cmp	r3, #58	; 0x3a
 8006b62:	d1f4      	bne.n	8006b4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b3a      	cmp	r3, #58	; 0x3a
 8006b6a:	d11c      	bne.n	8006ba6 <get_ldnumber+0x76>
			tp = *path;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	60fa      	str	r2, [r7, #12]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	3b30      	subs	r3, #48	; 0x30
 8006b7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d80e      	bhi.n	8006ba2 <get_ldnumber+0x72>
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d10a      	bne.n	8006ba2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <get_ldnumber+0x72>
					vol = (int)i;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	e002      	b.n	8006bac <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006baa:	693b      	ldr	r3, [r7, #16]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
	...

08006bb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fe ff13 	bl	8005a02 <move_window>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <check_fs+0x2e>
		return 3;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e04a      	b.n	8006c7c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bec:	3301      	adds	r3, #1
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	b21a      	sxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006bfa:	b21b      	sxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b21b      	sxth	r3, r3
 8006c00:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <check_fs+0xcc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d001      	beq.n	8006c0a <check_fs+0x52>
		return 2;
 8006c06:	2302      	movs	r3, #2
 8006c08:	e038      	b.n	8006c7c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3336      	adds	r3, #54	; 0x36
 8006c0e:	3303      	adds	r3, #3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	061a      	lsls	r2, r3, #24
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3336      	adds	r3, #54	; 0x36
 8006c18:	3302      	adds	r3, #2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	3236      	adds	r2, #54	; 0x36
 8006c24:	3201      	adds	r2, #1
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	0212      	lsls	r2, r2, #8
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c38:	4a13      	ldr	r2, [pc, #76]	; (8006c88 <check_fs+0xd0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d101      	bne.n	8006c42 <check_fs+0x8a>
		return 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e01c      	b.n	8006c7c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3352      	adds	r3, #82	; 0x52
 8006c46:	3303      	adds	r3, #3
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	061a      	lsls	r2, r3, #24
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3352      	adds	r3, #82	; 0x52
 8006c50:	3302      	adds	r3, #2
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	041b      	lsls	r3, r3, #16
 8006c56:	4313      	orrs	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	3252      	adds	r2, #82	; 0x52
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	7812      	ldrb	r2, [r2, #0]
 8006c60:	0212      	lsls	r2, r2, #8
 8006c62:	4313      	orrs	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <check_fs+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d101      	bne.n	8006c7a <check_fs+0xc2>
		return 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <check_fs+0xc4>

	return 1;
 8006c7a:	2301      	movs	r3, #1
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	ffffaa55 	.word	0xffffaa55
 8006c88:	00544146 	.word	0x00544146

08006c8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b096      	sub	sp, #88	; 0x58
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ca0:	68b8      	ldr	r0, [r7, #8]
 8006ca2:	f7ff ff45 	bl	8006b30 <get_ldnumber>
 8006ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da01      	bge.n	8006cb2 <find_volume+0x26>
 8006cae:	230b      	movs	r3, #11
 8006cb0:	e2aa      	b.n	8007208 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cb2:	4a9e      	ldr	r2, [pc, #632]	; (8006f2c <find_volume+0x2a0>)
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <find_volume+0x3a>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	e2a0      	b.n	8007208 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cca:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01b      	beq.n	8006d0e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe fb81 	bl	80053e4 <disk_status>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ce8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10c      	bne.n	8006d0e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <find_volume+0x7e>
 8006cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006d06:	230a      	movs	r3, #10
 8006d08:	e27e      	b.n	8007208 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e27c      	b.n	8007208 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fb76 	bl	8005418 <disk_initialize>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e262      	b.n	8007208 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <find_volume+0xcc>
 8006d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006d54:	230a      	movs	r3, #10
 8006d56:	e257      	b.n	8007208 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006d5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d60:	f7ff ff2a 	bl	8006bb8 <check_fs>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006d6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d155      	bne.n	8006e1e <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d72:	2300      	movs	r3, #0
 8006d74:	643b      	str	r3, [r7, #64]	; 0x40
 8006d76:	e029      	b.n	8006dcc <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d82:	4413      	add	r3, r2
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	3304      	adds	r3, #4
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d012      	beq.n	8006db6 <find_volume+0x12a>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	330b      	adds	r3, #11
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	061a      	lsls	r2, r3, #24
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	330a      	adds	r3, #10
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	4313      	orrs	r3, r2
 8006da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da4:	3209      	adds	r2, #9
 8006da6:	7812      	ldrb	r2, [r2, #0]
 8006da8:	0212      	lsls	r2, r2, #8
 8006daa:	4313      	orrs	r3, r2
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	3208      	adds	r2, #8
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	e000      	b.n	8006db8 <find_volume+0x12c>
 8006db6:	2200      	movs	r2, #0
 8006db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006dc0:	440b      	add	r3, r1
 8006dc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc8:	3301      	adds	r3, #1
 8006dca:	643b      	str	r3, [r7, #64]	; 0x40
 8006dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d9d2      	bls.n	8006d78 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <find_volume+0x156>
 8006ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dde:	3b01      	subs	r3, #1
 8006de0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006dea:	4413      	add	r3, r2
 8006dec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006df0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <find_volume+0x178>
 8006df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dfc:	f7ff fedc 	bl	8006bb8 <check_fs>
 8006e00:	4603      	mov	r3, r0
 8006e02:	e000      	b.n	8006e06 <find_volume+0x17a>
 8006e04:	2302      	movs	r3, #2
 8006e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006e0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <find_volume+0x192>
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	3301      	adds	r3, #1
 8006e16:	643b      	str	r3, [r7, #64]	; 0x40
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d9e1      	bls.n	8006de2 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d101      	bne.n	8006e2a <find_volume+0x19e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e1ee      	b.n	8007208 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <find_volume+0x1aa>
 8006e32:	230d      	movs	r3, #13
 8006e34:	e1e8      	b.n	8007208 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	7b1b      	ldrb	r3, [r3, #12]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	b21a      	sxth	r2, r3
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	7adb      	ldrb	r3, [r3, #11]
 8006e42:	b21b      	sxth	r3, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	b21b      	sxth	r3, r3
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4c:	d001      	beq.n	8006e52 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8006e4e:	230d      	movs	r3, #13
 8006e50:	e1da      	b.n	8007208 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	7ddb      	ldrb	r3, [r3, #23]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	b21a      	sxth	r2, r3
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	7d9b      	ldrb	r3, [r3, #22]
 8006e5e:	b21b      	sxth	r3, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b21b      	sxth	r3, r3
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d112      	bne.n	8006e94 <find_volume+0x208>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006e74:	061a      	lsls	r2, r3, #24
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e82:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006e86:	0212      	lsls	r2, r2, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e8c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006e90:	4313      	orrs	r3, r2
 8006e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	7c1a      	ldrb	r2, [r3, #16]
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d006      	beq.n	8006ebe <find_volume+0x232>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d001      	beq.n	8006ebe <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8006eba:	230d      	movs	r3, #13
 8006ebc:	e1a4      	b.n	8007208 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	7b5a      	ldrb	r2, [r3, #13]
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <find_volume+0x26c>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8006ef8:	230d      	movs	r3, #13
 8006efa:	e185      	b.n	8007208 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	7c9b      	ldrb	r3, [r3, #18]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	b21a      	sxth	r2, r3
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	7c5b      	ldrb	r3, [r3, #17]
 8006f08:	b21b      	sxth	r3, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b21b      	sxth	r3, r3
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8006f26:	230d      	movs	r3, #13
 8006f28:	e16e      	b.n	8007208 <find_volume+0x57c>
 8006f2a:	bf00      	nop
 8006f2c:	20000228 	.word	0x20000228

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	7d1b      	ldrb	r3, [r3, #20]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	b21a      	sxth	r2, r3
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	7cdb      	ldrb	r3, [r3, #19]
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	b21b      	sxth	r3, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d112      	bne.n	8006f72 <find_volume+0x2e6>
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006f52:	061a      	lsls	r2, r3, #24
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f60:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006f64:	0212      	lsls	r2, r2, #8
 8006f66:	4313      	orrs	r3, r2
 8006f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	7bdb      	ldrb	r3, [r3, #15]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b21a      	sxth	r2, r3
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	7b9b      	ldrb	r3, [r3, #14]
 8006f7e:	b21b      	sxth	r3, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b21b      	sxth	r3, r3
 8006f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <find_volume+0x304>
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	e13b      	b.n	8007208 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006f90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f94:	4413      	add	r3, r2
 8006f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f98:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006f9c:	0912      	lsrs	r2, r2, #4
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d201      	bcs.n	8006fb0 <find_volume+0x324>
 8006fac:	230d      	movs	r3, #13
 8006fae:	e12b      	b.n	8007208 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <find_volume+0x340>
 8006fc8:	230d      	movs	r3, #13
 8006fca:	e11d      	b.n	8007208 <find_volume+0x57c>
	fmt = FS_FAT12;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d902      	bls.n	8006fe2 <find_volume+0x356>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d902      	bls.n	8006ff2 <find_volume+0x366>
 8006fec:	2303      	movs	r3, #3
 8006fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	1c9a      	adds	r2, r3, #2
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007000:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007008:	441a      	add	r2, r3
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	441a      	add	r2, r3
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800701c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007020:	2b03      	cmp	r3, #3
 8007022:	d121      	bne.n	8007068 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <find_volume+0x3a6>
 800702e:	230d      	movs	r3, #13
 8007030:	e0ea      	b.n	8007208 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007038:	061a      	lsls	r2, r3, #24
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	4313      	orrs	r3, r2
 8007044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007046:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800704a:	0212      	lsls	r2, r2, #8
 800704c:	4313      	orrs	r3, r2
 800704e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007050:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007054:	431a      	orrs	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	647b      	str	r3, [r7, #68]	; 0x44
 8007066:	e025      	b.n	80070b4 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <find_volume+0x3ea>
 8007072:	230d      	movs	r3, #13
 8007074:	e0c8      	b.n	8007208 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	441a      	add	r2, r3
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800708a:	2b02      	cmp	r3, #2
 800708c:	d104      	bne.n	8007098 <find_volume+0x40c>
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	e00c      	b.n	80070b2 <find_volume+0x426>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	085a      	lsrs	r2, r3, #1
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80070b2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80070ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070c0:	0a5b      	lsrs	r3, r3, #9
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d201      	bcs.n	80070ca <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 80070c6:	230d      	movs	r3, #13
 80070c8:	e09e      	b.n	8007208 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	2280      	movs	r2, #128	; 0x80
 80070e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80070e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d177      	bne.n	80071e0 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	b21a      	sxth	r2, r3
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007100:	b21b      	sxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	b21b      	sxth	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	d16a      	bne.n	80071e0 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	3301      	adds	r3, #1
 800710e:	4619      	mov	r1, r3
 8007110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007112:	f7fe fc76 	bl	8005a02 <move_window>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d161      	bne.n	80071e0 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	b21a      	sxth	r2, r3
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007134:	b21b      	sxth	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b21b      	sxth	r3, r3
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <find_volume+0x584>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d14f      	bne.n	80071e0 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	78db      	ldrb	r3, [r3, #3]
 8007144:	061a      	lsls	r2, r3, #24
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	789b      	ldrb	r3, [r3, #2]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	4313      	orrs	r3, r2
 800714e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007150:	7852      	ldrb	r2, [r2, #1]
 8007152:	0212      	lsls	r2, r2, #8
 8007154:	4313      	orrs	r3, r2
 8007156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	4a2d      	ldr	r2, [pc, #180]	; (8007214 <find_volume+0x588>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d13e      	bne.n	80071e0 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007168:	061a      	lsls	r2, r3, #24
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	4313      	orrs	r3, r2
 8007174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007176:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800717a:	0212      	lsls	r2, r2, #8
 800717c:	4313      	orrs	r3, r2
 800717e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007180:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007184:	4313      	orrs	r3, r2
 8007186:	4a24      	ldr	r2, [pc, #144]	; (8007218 <find_volume+0x58c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d129      	bne.n	80071e0 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007192:	061a      	lsls	r2, r3, #24
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	4313      	orrs	r3, r2
 800719e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80071a4:	0212      	lsls	r2, r2, #8
 80071a6:	4313      	orrs	r3, r2
 80071a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80071ae:	431a      	orrs	r2, r3
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80071bc:	061a      	lsls	r2, r3, #24
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	4313      	orrs	r3, r2
 80071c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80071ce:	0212      	lsls	r2, r2, #8
 80071d0:	4313      	orrs	r3, r2
 80071d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80071d8:	431a      	orrs	r2, r3
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80071e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80071ea:	4b0c      	ldr	r3, [pc, #48]	; (800721c <find_volume+0x590>)
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <find_volume+0x590>)
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	4b09      	ldr	r3, [pc, #36]	; (800721c <find_volume+0x590>)
 80071f8:	881a      	ldrh	r2, [r3, #0]
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007202:	f7fe fb8d 	bl	8005920 <clear_lock>
#endif

	return FR_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3758      	adds	r7, #88	; 0x58
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	ffffaa55 	.word	0xffffaa55
 8007214:	41615252 	.word	0x41615252
 8007218:	61417272 	.word	0x61417272
 800721c:	2000022c 	.word	0x2000022c

08007220 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d022      	beq.n	8007278 <validate+0x58>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01d      	beq.n	8007278 <validate+0x58>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007242:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <validate+0x58>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007250:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800725a:	429a      	cmp	r2, r3
 800725c:	d10c      	bne.n	8007278 <validate+0x58>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007264:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe f8bb 	bl	80053e4 <disk_status>
 800726e:	4603      	mov	r3, r0
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007278:	2309      	movs	r3, #9
 800727a:	e000      	b.n	800727e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800729a:	f107 0310 	add.w	r3, r7, #16
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fc46 	bl	8006b30 <get_ldnumber>
 80072a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	da01      	bge.n	80072b0 <f_mount+0x28>
 80072ac:	230b      	movs	r3, #11
 80072ae:	e02d      	b.n	800730c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80072b0:	4a18      	ldr	r2, [pc, #96]	; (8007314 <f_mount+0x8c>)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80072c0:	69b8      	ldr	r0, [r7, #24]
 80072c2:	f7fe fb2d 	bl	8005920 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	490d      	ldr	r1, [pc, #52]	; (8007314 <f_mount+0x8c>)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <f_mount+0x6a>
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d001      	beq.n	80072f6 <f_mount+0x6e>
 80072f2:	2300      	movs	r3, #0
 80072f4:	e00a      	b.n	800730c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80072f6:	f107 0108 	add.w	r1, r7, #8
 80072fa:	f107 030c 	add.w	r3, r7, #12
 80072fe:	2200      	movs	r2, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fcc3 	bl	8006c8c <find_volume>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20000228 	.word	0x20000228

08007318 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800731e:	af00      	add	r7, sp, #0
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	6018      	str	r0, [r3, #0]
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	6019      	str	r1, [r3, #0]
 800732c:	1dfb      	adds	r3, r7, #7
 800732e:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007330:	f107 030c 	add.w	r3, r7, #12
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <f_open+0x26>
 800733a:	2309      	movs	r3, #9
 800733c:	e1f2      	b.n	8007724 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800734a:	1dfb      	adds	r3, r7, #7
 800734c:	1dfa      	adds	r2, r7, #7
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	f002 021f 	and.w	r2, r2, #31
 8007354:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007356:	1dfb      	adds	r3, r7, #7
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	f107 0108 	add.w	r1, r7, #8
 8007364:	f107 0320 	add.w	r3, r7, #32
 8007368:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fc8d 	bl	8006c8c <find_volume>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007378:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 81cf 	bne.w	8007720 <f_open+0x408>
		INIT_BUF(dj);
 8007382:	f107 0320 	add.w	r3, r7, #32
 8007386:	f107 0214 	add.w	r2, r7, #20
 800738a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f107 0320 	add.w	r3, r7, #32
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fb5a 	bl	8006a54 <follow_path>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80073a6:	f107 0320 	add.w	r3, r7, #32
 80073aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073ae:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073b2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d11a      	bne.n	80073f0 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80073ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d103      	bne.n	80073ca <f_open+0xb2>
				res = FR_INVALID_NAME;
 80073c2:	2306      	movs	r3, #6
 80073c4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80073c8:	e012      	b.n	80073f0 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073ca:	1dfb      	adds	r3, r7, #7
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bf14      	ite	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	2300      	moveq	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	f107 0320 	add.w	r3, r7, #32
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe f911 	bl	800560c <chk_lock>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073f0:	1dfb      	adds	r3, r7, #7
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f003 031c 	and.w	r3, r3, #28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80cc 	beq.w	8007596 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80073fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01f      	beq.n	8007446 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007406:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800740a:	2b04      	cmp	r3, #4
 800740c:	d10e      	bne.n	800742c <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800740e:	f7fe f969 	bl	80056e4 <enq_lock>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <f_open+0x10e>
 8007418:	f107 0320 	add.w	r3, r7, #32
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff f9af 	bl	8006780 <dir_register>
 8007422:	4603      	mov	r3, r0
 8007424:	e000      	b.n	8007428 <f_open+0x110>
 8007426:	2312      	movs	r3, #18
 8007428:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800742c:	1dfb      	adds	r3, r7, #7
 800742e:	1dfa      	adds	r2, r7, #7
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	f042 0208 	orr.w	r2, r2, #8
 8007436:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007438:	f107 0320 	add.w	r3, r7, #32
 800743c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007440:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007444:	e014      	b.n	8007470 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007446:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800744a:	330b      	adds	r3, #11
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	f003 0311 	and.w	r3, r3, #17
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <f_open+0x146>
					res = FR_DENIED;
 8007456:	2307      	movs	r3, #7
 8007458:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800745c:	e008      	b.n	8007470 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800745e:	1dfb      	adds	r3, r7, #7
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <f_open+0x158>
						res = FR_EXIST;
 800746a:	2308      	movs	r3, #8
 800746c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007470:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 80af 	bne.w	80075d8 <f_open+0x2c0>
 800747a:	1dfb      	adds	r3, r7, #7
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80a8 	beq.w	80075d8 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8007488:	f7fc ff68 	bl	800435c <get_fattime>
 800748c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007490:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007494:	330e      	adds	r3, #14
 8007496:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074ac:	330f      	adds	r3, #15
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074b6:	0c1a      	lsrs	r2, r3, #16
 80074b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074bc:	3310      	adds	r3, #16
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074c6:	0e1a      	lsrs	r2, r3, #24
 80074c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074cc:	3311      	adds	r3, #17
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80074d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074d6:	330b      	adds	r3, #11
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80074dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074e0:	331c      	adds	r3, #28
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074ea:	331d      	adds	r3, #29
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074f4:	331e      	adds	r3, #30
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074fe:	331f      	adds	r3, #31
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007504:	f107 0320 	add.w	r3, r7, #32
 8007508:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800750c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff f834 	bl	800657e <ld_clust>
 8007516:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800751a:	2100      	movs	r1, #0
 800751c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007520:	f7ff f85a 	bl	80065d8 <st_clust>
				dj.fs->wflag = 1;
 8007524:	f107 0320 	add.w	r3, r7, #32
 8007528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8007532:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007536:	2b00      	cmp	r3, #0
 8007538:	d04e      	beq.n	80075d8 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800753a:	f107 0320 	add.w	r3, r7, #32
 800753e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007542:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007546:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800754a:	f107 0320 	add.w	r3, r7, #32
 800754e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007552:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fd11 	bl	8005f7e <remove_chain>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007562:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d136      	bne.n	80075d8 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800756a:	f107 0320 	add.w	r3, r7, #32
 800756e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007572:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007576:	3a01      	subs	r2, #1
 8007578:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800757c:	f107 0320 	add.w	r3, r7, #32
 8007580:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007584:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fa3a 	bl	8005a02 <move_window>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007594:	e020      	b.n	80075d8 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007596:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800759a:	2b00      	cmp	r3, #0
 800759c:	d11c      	bne.n	80075d8 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800759e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80075a2:	330b      	adds	r3, #11
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <f_open+0x29e>
					res = FR_NO_FILE;
 80075ae:	2304      	movs	r3, #4
 80075b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80075b4:	e010      	b.n	80075d8 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80075b6:	1dfb      	adds	r3, r7, #7
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <f_open+0x2c0>
 80075c2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80075c6:	330b      	adds	r3, #11
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <f_open+0x2c0>
						res = FR_DENIED;
 80075d2:	2307      	movs	r3, #7
 80075d4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80075d8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d13d      	bne.n	800765c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80075e0:	1dfb      	adds	r3, r7, #7
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	1dfa      	adds	r2, r7, #7
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	f042 0220 	orr.w	r2, r2, #32
 80075f6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80075f8:	f107 0320 	add.w	r3, r7, #32
 80075fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007600:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007618:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800761c:	1dfb      	adds	r3, r7, #7
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	f107 0320 	add.w	r3, r7, #32
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe f878 	bl	800572c <inc_lock>
 800763c:	4602      	mov	r2, r0
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <f_open+0x344>
 8007656:	2302      	movs	r3, #2
 8007658:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800765c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007660:	2b00      	cmp	r3, #0
 8007662:	d15d      	bne.n	8007720 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	1dfa      	adds	r2, r7, #7
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800767e:	f107 0320 	add.w	r3, r7, #32
 8007682:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007686:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe ff77 	bl	800657e <ld_clust>
 8007690:	4602      	mov	r2, r0
 8007692:	f107 030c 	add.w	r3, r7, #12
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800769c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076a0:	331f      	adds	r3, #31
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	061a      	lsls	r2, r3, #24
 80076a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076aa:	331e      	adds	r3, #30
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80076b6:	321d      	adds	r2, #29
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	0212      	lsls	r2, r2, #8
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80076c2:	321c      	adds	r2, #28
 80076c4:	7812      	ldrb	r2, [r2, #0]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80076d2:	f107 030c 	add.w	r3, r7, #12
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80076de:	f107 030c 	add.w	r3, r7, #12
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80076ea:	f107 030c 	add.w	r3, r7, #12
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80076f6:	f107 0320 	add.w	r3, r7, #32
 80076fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007712:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007716:	f107 030c 	add.w	r3, r7, #12
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007720:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007724:	4618      	mov	r0, r3
 8007726:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b08c      	sub	sp, #48	; 0x30
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff fd6a 	bl	8007220 <validate>
 800774c:	4603      	mov	r3, r0
 800774e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <f_read+0x2c>
 8007756:	7ffb      	ldrb	r3, [r7, #31]
 8007758:	e150      	b.n	80079fc <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800776a:	e147      	b.n	80079fc <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800777a:	2307      	movs	r3, #7
 800777c:	e13e      	b.n	80079fc <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	429a      	cmp	r2, r3
 8007794:	f240 812d 	bls.w	80079f2 <f_read+0x2c4>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800779c:	e129      	b.n	80079f2 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80077a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 80f2 	bne.w	8007992 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80077b4:	0a5b      	lsrs	r3, r3, #9
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	4013      	ands	r3, r2
 80077c8:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d139      	bne.n	8007844 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077e2:	e018      	b.n	8007816 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80077f4:	4619      	mov	r1, r3
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7fe fcb8 	bl	800616c <clmt_clust>
 80077fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80077fe:	e00a      	b.n	8007816 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fe f9f3 	bl	8005bfa <get_fat>
 8007814:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d805      	bhi.n	8007828 <f_read+0xfa>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007824:	2302      	movs	r3, #2
 8007826:	e0e9      	b.n	80079fc <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d105      	bne.n	800783c <f_read+0x10e>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007838:	2301      	movs	r3, #1
 800783a:	e0df      	b.n	80079fc <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f7fe f9b0 	bl	8005bb8 <clust2sect>
 8007858:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d105      	bne.n	800786c <f_read+0x13e>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007868:	2302      	movs	r3, #2
 800786a:	e0c7      	b.n	80079fc <f_read+0x2ce>
			sect += csect;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4413      	add	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d046      	beq.n	800790e <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007880:	7dfa      	ldrb	r2, [r7, #23]
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	4413      	add	r3, r2
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800788c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007890:	4293      	cmp	r3, r2
 8007892:	d908      	bls.n	80078a6 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800789a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800789e:	461a      	mov	r2, r3
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078ac:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	6a39      	ldr	r1, [r7, #32]
 80078b6:	f7fd fdd5 	bl	8005464 <disk_read>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80078c8:	2301      	movs	r3, #1
 80078ca:	e097      	b.n	80079fc <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <f_read+0x1d8>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d90d      	bls.n	8007906 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	025b      	lsls	r3, r3, #9
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	4413      	add	r3, r2
 80078fa:	68f9      	ldr	r1, [r7, #12]
 80078fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007900:	4618      	mov	r0, r3
 8007902:	f7fd fe0d 	bl	8005520 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	025b      	lsls	r3, r3, #9
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800790c:	e05b      	b.n	80079c6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	d037      	beq.n	800798a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01d      	beq.n	8007964 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800792e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800793a:	2301      	movs	r3, #1
 800793c:	f7fd fdb2 	bl	80054a4 <disk_write>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800794e:	2301      	movs	r3, #1
 8007950:	e054      	b.n	80079fc <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795c:	b2da      	uxtb	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800796a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	2301      	movs	r3, #1
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	f7fd fd76 	bl	8005464 <disk_read>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007986:	2301      	movs	r3, #1
 8007988:	e038      	b.n	80079fc <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80079a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d901      	bls.n	80079ae <f_read+0x280>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079be:	4619      	mov	r1, r3
 80079c0:	6a38      	ldr	r0, [r7, #32]
 80079c2:	f7fd fdad 	bl	8005520 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	4413      	add	r3, r2
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	441a      	add	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	441a      	add	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f47f aed2 	bne.w	800779e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3730      	adds	r7, #48	; 0x30
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff fc07 	bl	8007220 <validate>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 80a8 	bne.w	8007b6e <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a0 	beq.w	8007b6e <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d019      	beq.n	8007a70 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a42:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f7fd fd28 	bl	80054a4 <disk_write>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e088      	b.n	8007b70 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fd ffbf 	bl	8005a02 <move_window>
 8007a84:	4603      	mov	r3, r0
 8007a86:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d16f      	bne.n	8007b6e <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007a94:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	330b      	adds	r3, #11
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	330b      	adds	r3, #11
 8007aa0:	f042 0220 	orr.w	r2, r2, #32
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	331c      	adds	r3, #28
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	331d      	adds	r3, #29
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ad0:	0c1a      	lsrs	r2, r3, #16
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	331e      	adds	r3, #30
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ae0:	0e1a      	lsrs	r2, r3, #24
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	331f      	adds	r3, #31
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007af0:	4619      	mov	r1, r3
 8007af2:	6938      	ldr	r0, [r7, #16]
 8007af4:	f7fe fd70 	bl	80065d8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007af8:	f7fc fc30 	bl	800435c <get_fattime>
 8007afc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3316      	adds	r3, #22
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	3317      	adds	r3, #23
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	0c1a      	lsrs	r2, r3, #16
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	3318      	adds	r3, #24
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0e1a      	lsrs	r2, r3, #24
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3319      	adds	r3, #25
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	3312      	adds	r3, #18
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3313      	adds	r3, #19
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b46:	f023 0320 	bic.w	r3, r3, #32
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd ff7a 	bl	8005a5e <sync_fs>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff3f 	bl	8007a04 <f_sync>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d116      	bne.n	8007bbe <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fb45 	bl	8007220 <validate>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10e      	bne.n	8007bbe <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd fe76 	bl	8005898 <dec_lock>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d103      	bne.n	8007bbe <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <f_opendir+0x14>
 8007bd8:	2309      	movs	r3, #9
 8007bda:	e073      	b.n	8007cc4 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8007bdc:	4639      	mov	r1, r7
 8007bde:	f107 0318 	add.w	r3, r7, #24
 8007be2:	2200      	movs	r2, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff f851 	bl	8006c8c <find_volume>
 8007bea:	4603      	mov	r3, r0
 8007bec:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d15f      	bne.n	8007cb4 <f_opendir+0xec>
		dp->fs = fs;
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f107 020c 	add.w	r2, r7, #12
 8007c02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fe ff22 	bl	8006a54 <follow_path>
 8007c10:	4603      	mov	r3, r0
 8007c12:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8007c14:	7ffb      	ldrb	r3, [r7, #31]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d147      	bne.n	8007caa <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c2a:	330b      	adds	r3, #11
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00c      	beq.n	8007c50 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe fc9c 	bl	800657e <ld_clust>
 8007c46:	4602      	mov	r2, r0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007c4e:	e001      	b.n	8007c54 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8007c50:	2305      	movs	r3, #5
 8007c52:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8007c54:	7ffb      	ldrb	r3, [r7, #31]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d127      	bne.n	8007caa <f_opendir+0xe2>
				dp->id = fs->id;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7fe fab3 	bl	80061d4 <dir_sdi>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8007c72:	7ffb      	ldrb	r3, [r7, #31]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d118      	bne.n	8007caa <f_opendir+0xe2>
					if (dp->sclust) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00f      	beq.n	8007ca2 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007c82:	2100      	movs	r1, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fd fd51 	bl	800572c <inc_lock>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8007c9c:	2312      	movs	r3, #18
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e003      	b.n	8007caa <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007caa:	7ffb      	ldrb	r3, [r7, #31]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d101      	bne.n	8007cb4 <f_opendir+0xec>
 8007cb0:	2305      	movs	r3, #5
 8007cb2:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8007cb4:	7ffb      	ldrb	r3, [r7, #31]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <f_opendir+0xfa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8007cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff faa3 	bl	8007220 <validate>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d113      	bne.n	8007d0c <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd fdcf 	bl	8005898 <dec_lock>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b086      	sub	sp, #24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fa7d 	bl	8007220 <validate>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d133      	bne.n	8007d98 <f_readdir+0x82>
		if (!fno) {
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007d36:	2100      	movs	r1, #0
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7fe fa4b 	bl	80061d4 <dir_sdi>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]
 8007d42:	e029      	b.n	8007d98 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fe fcb6 	bl	80066c2 <dir_read>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d105      	bne.n	8007d6c <f_readdir+0x56>
				dp->sect = 0;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d112      	bne.n	8007d98 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fe fd3c 	bl	80067f2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe fabd 	bl	80062fc <dir_next>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d105      	bne.n	8007d98 <f_readdir+0x82>
					dp->sect = 0;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007dba:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dbc:	7a5b      	ldrb	r3, [r3, #9]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d831      	bhi.n	8007e28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dc6:	7a5b      	ldrb	r3, [r3, #9]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dce:	2100      	movs	r1, #0
 8007dd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dd4:	7a5b      	ldrb	r3, [r3, #9]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007de4:	7a5b      	ldrb	r3, [r3, #9]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dec:	4413      	add	r3, r2
 8007dee:	79fa      	ldrb	r2, [r7, #7]
 8007df0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007df4:	7a5b      	ldrb	r3, [r3, #9]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	b2d1      	uxtb	r1, r2
 8007dfc:	4a0d      	ldr	r2, [pc, #52]	; (8007e34 <FATFS_LinkDriverEx+0x90>)
 8007dfe:	7251      	strb	r1, [r2, #9]
 8007e00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e02:	7dbb      	ldrb	r3, [r7, #22]
 8007e04:	3330      	adds	r3, #48	; 0x30
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	223a      	movs	r2, #58	; 0x3a
 8007e12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	3302      	adds	r3, #2
 8007e18:	222f      	movs	r2, #47	; 0x2f
 8007e1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	3303      	adds	r3, #3
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr
 8007e34:	20000248 	.word	0x20000248

08007e38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff ffac 	bl	8007da4 <FATFS_LinkDriverEx>
 8007e4c:	4603      	mov	r3, r0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <__errno>:
 8007e58:	4b01      	ldr	r3, [pc, #4]	; (8007e60 <__errno+0x8>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	2000002c 	.word	0x2000002c

08007e64 <__libc_init_array>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	2500      	movs	r5, #0
 8007e68:	4e0c      	ldr	r6, [pc, #48]	; (8007e9c <__libc_init_array+0x38>)
 8007e6a:	4c0d      	ldr	r4, [pc, #52]	; (8007ea0 <__libc_init_array+0x3c>)
 8007e6c:	1ba4      	subs	r4, r4, r6
 8007e6e:	10a4      	asrs	r4, r4, #2
 8007e70:	42a5      	cmp	r5, r4
 8007e72:	d109      	bne.n	8007e88 <__libc_init_array+0x24>
 8007e74:	f001 f94a 	bl	800910c <_init>
 8007e78:	2500      	movs	r5, #0
 8007e7a:	4e0a      	ldr	r6, [pc, #40]	; (8007ea4 <__libc_init_array+0x40>)
 8007e7c:	4c0a      	ldr	r4, [pc, #40]	; (8007ea8 <__libc_init_array+0x44>)
 8007e7e:	1ba4      	subs	r4, r4, r6
 8007e80:	10a4      	asrs	r4, r4, #2
 8007e82:	42a5      	cmp	r5, r4
 8007e84:	d105      	bne.n	8007e92 <__libc_init_array+0x2e>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e8c:	4798      	blx	r3
 8007e8e:	3501      	adds	r5, #1
 8007e90:	e7ee      	b.n	8007e70 <__libc_init_array+0xc>
 8007e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e96:	4798      	blx	r3
 8007e98:	3501      	adds	r5, #1
 8007e9a:	e7f2      	b.n	8007e82 <__libc_init_array+0x1e>
 8007e9c:	08009dac 	.word	0x08009dac
 8007ea0:	08009dac 	.word	0x08009dac
 8007ea4:	08009dac 	.word	0x08009dac
 8007ea8:	08009db0 	.word	0x08009db0

08007eac <memmove>:
 8007eac:	4288      	cmp	r0, r1
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	eb01 0302 	add.w	r3, r1, r2
 8007eb4:	d807      	bhi.n	8007ec6 <memmove+0x1a>
 8007eb6:	1e42      	subs	r2, r0, #1
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d00a      	beq.n	8007ed2 <memmove+0x26>
 8007ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ec4:	e7f8      	b.n	8007eb8 <memmove+0xc>
 8007ec6:	4283      	cmp	r3, r0
 8007ec8:	d9f5      	bls.n	8007eb6 <memmove+0xa>
 8007eca:	1881      	adds	r1, r0, r2
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	42d3      	cmn	r3, r2
 8007ed0:	d100      	bne.n	8007ed4 <memmove+0x28>
 8007ed2:	bd10      	pop	{r4, pc}
 8007ed4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ed8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007edc:	e7f7      	b.n	8007ece <memmove+0x22>

08007ede <memset>:
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4402      	add	r2, r0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d100      	bne.n	8007ee8 <memset+0xa>
 8007ee6:	4770      	bx	lr
 8007ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8007eec:	e7f9      	b.n	8007ee2 <memset+0x4>
	...

08007ef0 <siprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ef6:	b500      	push	{lr}
 8007ef8:	b09c      	sub	sp, #112	; 0x70
 8007efa:	ab1d      	add	r3, sp, #116	; 0x74
 8007efc:	9002      	str	r0, [sp, #8]
 8007efe:	9006      	str	r0, [sp, #24]
 8007f00:	9107      	str	r1, [sp, #28]
 8007f02:	9104      	str	r1, [sp, #16]
 8007f04:	4808      	ldr	r0, [pc, #32]	; (8007f28 <siprintf+0x38>)
 8007f06:	4909      	ldr	r1, [pc, #36]	; (8007f2c <siprintf+0x3c>)
 8007f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	6800      	ldr	r0, [r0, #0]
 8007f10:	a902      	add	r1, sp, #8
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	f000 f8c4 	bl	80080a0 <_svfiprintf_r>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	9b02      	ldr	r3, [sp, #8]
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	b01c      	add	sp, #112	; 0x70
 8007f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f24:	b003      	add	sp, #12
 8007f26:	4770      	bx	lr
 8007f28:	2000002c 	.word	0x2000002c
 8007f2c:	ffff0208 	.word	0xffff0208

08007f30 <siscanf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007f36:	b530      	push	{r4, r5, lr}
 8007f38:	b09c      	sub	sp, #112	; 0x70
 8007f3a:	ac1f      	add	r4, sp, #124	; 0x7c
 8007f3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007f44:	9002      	str	r0, [sp, #8]
 8007f46:	9006      	str	r0, [sp, #24]
 8007f48:	f7f8 f900 	bl	800014c <strlen>
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <siscanf+0x4c>)
 8007f4e:	9003      	str	r0, [sp, #12]
 8007f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f52:	2300      	movs	r3, #0
 8007f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f56:	9314      	str	r3, [sp, #80]	; 0x50
 8007f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f5c:	9007      	str	r0, [sp, #28]
 8007f5e:	4808      	ldr	r0, [pc, #32]	; (8007f80 <siscanf+0x50>)
 8007f60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f64:	462a      	mov	r2, r5
 8007f66:	4623      	mov	r3, r4
 8007f68:	a902      	add	r1, sp, #8
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9401      	str	r4, [sp, #4]
 8007f6e:	f000 f9e9 	bl	8008344 <__ssvfiscanf_r>
 8007f72:	b01c      	add	sp, #112	; 0x70
 8007f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f78:	b003      	add	sp, #12
 8007f7a:	4770      	bx	lr
 8007f7c:	08007f85 	.word	0x08007f85
 8007f80:	2000002c 	.word	0x2000002c

08007f84 <__seofread>:
 8007f84:	2000      	movs	r0, #0
 8007f86:	4770      	bx	lr

08007f88 <strcat>:
 8007f88:	4603      	mov	r3, r0
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	1c5c      	adds	r4, r3, #1
 8007f90:	b93a      	cbnz	r2, 8007fa2 <strcat+0x1a>
 8007f92:	3b01      	subs	r3, #1
 8007f94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	d1f9      	bne.n	8007f94 <strcat+0xc>
 8007fa0:	bd10      	pop	{r4, pc}
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	e7f2      	b.n	8007f8c <strcat+0x4>

08007fa6 <strchr>:
 8007fa6:	b2c9      	uxtb	r1, r1
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fae:	b11a      	cbz	r2, 8007fb8 <strchr+0x12>
 8007fb0:	428a      	cmp	r2, r1
 8007fb2:	d1f9      	bne.n	8007fa8 <strchr+0x2>
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	4770      	bx	lr
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	bf18      	it	ne
 8007fbc:	2300      	movne	r3, #0
 8007fbe:	e7f9      	b.n	8007fb4 <strchr+0xe>

08007fc0 <strncpy>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	3901      	subs	r1, #1
 8007fc6:	b902      	cbnz	r2, 8007fca <strncpy+0xa>
 8007fc8:	bd70      	pop	{r4, r5, r6, pc}
 8007fca:	4623      	mov	r3, r4
 8007fcc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007fd0:	1e56      	subs	r6, r2, #1
 8007fd2:	f803 5b01 	strb.w	r5, [r3], #1
 8007fd6:	b92d      	cbnz	r5, 8007fe4 <strncpy+0x24>
 8007fd8:	4414      	add	r4, r2
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	d0f4      	beq.n	8007fc8 <strncpy+0x8>
 8007fde:	f803 5b01 	strb.w	r5, [r3], #1
 8007fe2:	e7fa      	b.n	8007fda <strncpy+0x1a>
 8007fe4:	461c      	mov	r4, r3
 8007fe6:	4632      	mov	r2, r6
 8007fe8:	e7ed      	b.n	8007fc6 <strncpy+0x6>

08007fea <__ssputs_r>:
 8007fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fee:	688e      	ldr	r6, [r1, #8]
 8007ff0:	4682      	mov	sl, r0
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4690      	mov	r8, r2
 8007ff8:	4699      	mov	r9, r3
 8007ffa:	d837      	bhi.n	800806c <__ssputs_r+0x82>
 8007ffc:	898a      	ldrh	r2, [r1, #12]
 8007ffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008002:	d031      	beq.n	8008068 <__ssputs_r+0x7e>
 8008004:	2302      	movs	r3, #2
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	6909      	ldr	r1, [r1, #16]
 800800a:	1a6f      	subs	r7, r5, r1
 800800c:	6965      	ldr	r5, [r4, #20]
 800800e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008012:	fb95 f5f3 	sdiv	r5, r5, r3
 8008016:	f109 0301 	add.w	r3, r9, #1
 800801a:	443b      	add	r3, r7
 800801c:	429d      	cmp	r5, r3
 800801e:	bf38      	it	cc
 8008020:	461d      	movcc	r5, r3
 8008022:	0553      	lsls	r3, r2, #21
 8008024:	d530      	bpl.n	8008088 <__ssputs_r+0x9e>
 8008026:	4629      	mov	r1, r5
 8008028:	f000 ffc8 	bl	8008fbc <_malloc_r>
 800802c:	4606      	mov	r6, r0
 800802e:	b950      	cbnz	r0, 8008046 <__ssputs_r+0x5c>
 8008030:	230c      	movs	r3, #12
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	f8ca 3000 	str.w	r3, [sl]
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	463a      	mov	r2, r7
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	f000 ff5f 	bl	8008f0c <memcpy>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	6126      	str	r6, [r4, #16]
 800805c:	443e      	add	r6, r7
 800805e:	6026      	str	r6, [r4, #0]
 8008060:	464e      	mov	r6, r9
 8008062:	6165      	str	r5, [r4, #20]
 8008064:	1bed      	subs	r5, r5, r7
 8008066:	60a5      	str	r5, [r4, #8]
 8008068:	454e      	cmp	r6, r9
 800806a:	d900      	bls.n	800806e <__ssputs_r+0x84>
 800806c:	464e      	mov	r6, r9
 800806e:	4632      	mov	r2, r6
 8008070:	4641      	mov	r1, r8
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	f7ff ff1a 	bl	8007eac <memmove>
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	2000      	movs	r0, #0
 800807c:	1b9b      	subs	r3, r3, r6
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	441e      	add	r6, r3
 8008084:	6026      	str	r6, [r4, #0]
 8008086:	e7dc      	b.n	8008042 <__ssputs_r+0x58>
 8008088:	462a      	mov	r2, r5
 800808a:	f000 fff1 	bl	8009070 <_realloc_r>
 800808e:	4606      	mov	r6, r0
 8008090:	2800      	cmp	r0, #0
 8008092:	d1e2      	bne.n	800805a <__ssputs_r+0x70>
 8008094:	6921      	ldr	r1, [r4, #16]
 8008096:	4650      	mov	r0, sl
 8008098:	f000 ff44 	bl	8008f24 <_free_r>
 800809c:	e7c8      	b.n	8008030 <__ssputs_r+0x46>
	...

080080a0 <_svfiprintf_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	461d      	mov	r5, r3
 80080a6:	898b      	ldrh	r3, [r1, #12]
 80080a8:	b09d      	sub	sp, #116	; 0x74
 80080aa:	061f      	lsls	r7, r3, #24
 80080ac:	4680      	mov	r8, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	4616      	mov	r6, r2
 80080b2:	d50f      	bpl.n	80080d4 <_svfiprintf_r+0x34>
 80080b4:	690b      	ldr	r3, [r1, #16]
 80080b6:	b96b      	cbnz	r3, 80080d4 <_svfiprintf_r+0x34>
 80080b8:	2140      	movs	r1, #64	; 0x40
 80080ba:	f000 ff7f 	bl	8008fbc <_malloc_r>
 80080be:	6020      	str	r0, [r4, #0]
 80080c0:	6120      	str	r0, [r4, #16]
 80080c2:	b928      	cbnz	r0, 80080d0 <_svfiprintf_r+0x30>
 80080c4:	230c      	movs	r3, #12
 80080c6:	f8c8 3000 	str.w	r3, [r8]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295
 80080ce:	e0c8      	b.n	8008262 <_svfiprintf_r+0x1c2>
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	2300      	movs	r3, #0
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	2320      	movs	r3, #32
 80080da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080de:	2330      	movs	r3, #48	; 0x30
 80080e0:	f04f 0b01 	mov.w	fp, #1
 80080e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080e8:	9503      	str	r5, [sp, #12]
 80080ea:	4637      	mov	r7, r6
 80080ec:	463d      	mov	r5, r7
 80080ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080f2:	b10b      	cbz	r3, 80080f8 <_svfiprintf_r+0x58>
 80080f4:	2b25      	cmp	r3, #37	; 0x25
 80080f6:	d13e      	bne.n	8008176 <_svfiprintf_r+0xd6>
 80080f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80080fc:	d00b      	beq.n	8008116 <_svfiprintf_r+0x76>
 80080fe:	4653      	mov	r3, sl
 8008100:	4632      	mov	r2, r6
 8008102:	4621      	mov	r1, r4
 8008104:	4640      	mov	r0, r8
 8008106:	f7ff ff70 	bl	8007fea <__ssputs_r>
 800810a:	3001      	adds	r0, #1
 800810c:	f000 80a4 	beq.w	8008258 <_svfiprintf_r+0x1b8>
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008112:	4453      	add	r3, sl
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	783b      	ldrb	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 809d 	beq.w	8008258 <_svfiprintf_r+0x1b8>
 800811e:	2300      	movs	r3, #0
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	9307      	str	r3, [sp, #28]
 800812c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008130:	931a      	str	r3, [sp, #104]	; 0x68
 8008132:	462f      	mov	r7, r5
 8008134:	2205      	movs	r2, #5
 8008136:	f817 1b01 	ldrb.w	r1, [r7], #1
 800813a:	4850      	ldr	r0, [pc, #320]	; (800827c <_svfiprintf_r+0x1dc>)
 800813c:	f000 fed8 	bl	8008ef0 <memchr>
 8008140:	9b04      	ldr	r3, [sp, #16]
 8008142:	b9d0      	cbnz	r0, 800817a <_svfiprintf_r+0xda>
 8008144:	06d9      	lsls	r1, r3, #27
 8008146:	bf44      	itt	mi
 8008148:	2220      	movmi	r2, #32
 800814a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800814e:	071a      	lsls	r2, r3, #28
 8008150:	bf44      	itt	mi
 8008152:	222b      	movmi	r2, #43	; 0x2b
 8008154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008158:	782a      	ldrb	r2, [r5, #0]
 800815a:	2a2a      	cmp	r2, #42	; 0x2a
 800815c:	d015      	beq.n	800818a <_svfiprintf_r+0xea>
 800815e:	462f      	mov	r7, r5
 8008160:	2000      	movs	r0, #0
 8008162:	250a      	movs	r5, #10
 8008164:	9a07      	ldr	r2, [sp, #28]
 8008166:	4639      	mov	r1, r7
 8008168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800816c:	3b30      	subs	r3, #48	; 0x30
 800816e:	2b09      	cmp	r3, #9
 8008170:	d94d      	bls.n	800820e <_svfiprintf_r+0x16e>
 8008172:	b1b8      	cbz	r0, 80081a4 <_svfiprintf_r+0x104>
 8008174:	e00f      	b.n	8008196 <_svfiprintf_r+0xf6>
 8008176:	462f      	mov	r7, r5
 8008178:	e7b8      	b.n	80080ec <_svfiprintf_r+0x4c>
 800817a:	4a40      	ldr	r2, [pc, #256]	; (800827c <_svfiprintf_r+0x1dc>)
 800817c:	463d      	mov	r5, r7
 800817e:	1a80      	subs	r0, r0, r2
 8008180:	fa0b f000 	lsl.w	r0, fp, r0
 8008184:	4318      	orrs	r0, r3
 8008186:	9004      	str	r0, [sp, #16]
 8008188:	e7d3      	b.n	8008132 <_svfiprintf_r+0x92>
 800818a:	9a03      	ldr	r2, [sp, #12]
 800818c:	1d11      	adds	r1, r2, #4
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	9103      	str	r1, [sp, #12]
 8008192:	2a00      	cmp	r2, #0
 8008194:	db01      	blt.n	800819a <_svfiprintf_r+0xfa>
 8008196:	9207      	str	r2, [sp, #28]
 8008198:	e004      	b.n	80081a4 <_svfiprintf_r+0x104>
 800819a:	4252      	negs	r2, r2
 800819c:	f043 0302 	orr.w	r3, r3, #2
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	783b      	ldrb	r3, [r7, #0]
 80081a6:	2b2e      	cmp	r3, #46	; 0x2e
 80081a8:	d10c      	bne.n	80081c4 <_svfiprintf_r+0x124>
 80081aa:	787b      	ldrb	r3, [r7, #1]
 80081ac:	2b2a      	cmp	r3, #42	; 0x2a
 80081ae:	d133      	bne.n	8008218 <_svfiprintf_r+0x178>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	3702      	adds	r7, #2
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9203      	str	r2, [sp, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfb8      	it	lt
 80081be:	f04f 33ff 	movlt.w	r3, #4294967295
 80081c2:	9305      	str	r3, [sp, #20]
 80081c4:	4d2e      	ldr	r5, [pc, #184]	; (8008280 <_svfiprintf_r+0x1e0>)
 80081c6:	2203      	movs	r2, #3
 80081c8:	7839      	ldrb	r1, [r7, #0]
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 fe90 	bl	8008ef0 <memchr>
 80081d0:	b138      	cbz	r0, 80081e2 <_svfiprintf_r+0x142>
 80081d2:	2340      	movs	r3, #64	; 0x40
 80081d4:	1b40      	subs	r0, r0, r5
 80081d6:	fa03 f000 	lsl.w	r0, r3, r0
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	3701      	adds	r7, #1
 80081de:	4303      	orrs	r3, r0
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	7839      	ldrb	r1, [r7, #0]
 80081e4:	2206      	movs	r2, #6
 80081e6:	4827      	ldr	r0, [pc, #156]	; (8008284 <_svfiprintf_r+0x1e4>)
 80081e8:	1c7e      	adds	r6, r7, #1
 80081ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ee:	f000 fe7f 	bl	8008ef0 <memchr>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d038      	beq.n	8008268 <_svfiprintf_r+0x1c8>
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <_svfiprintf_r+0x1e8>)
 80081f8:	bb13      	cbnz	r3, 8008240 <_svfiprintf_r+0x1a0>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	3307      	adds	r3, #7
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	3308      	adds	r3, #8
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008208:	444b      	add	r3, r9
 800820a:	9309      	str	r3, [sp, #36]	; 0x24
 800820c:	e76d      	b.n	80080ea <_svfiprintf_r+0x4a>
 800820e:	fb05 3202 	mla	r2, r5, r2, r3
 8008212:	2001      	movs	r0, #1
 8008214:	460f      	mov	r7, r1
 8008216:	e7a6      	b.n	8008166 <_svfiprintf_r+0xc6>
 8008218:	2300      	movs	r3, #0
 800821a:	250a      	movs	r5, #10
 800821c:	4619      	mov	r1, r3
 800821e:	3701      	adds	r7, #1
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	4638      	mov	r0, r7
 8008224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008228:	3a30      	subs	r2, #48	; 0x30
 800822a:	2a09      	cmp	r2, #9
 800822c:	d903      	bls.n	8008236 <_svfiprintf_r+0x196>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c8      	beq.n	80081c4 <_svfiprintf_r+0x124>
 8008232:	9105      	str	r1, [sp, #20]
 8008234:	e7c6      	b.n	80081c4 <_svfiprintf_r+0x124>
 8008236:	fb05 2101 	mla	r1, r5, r1, r2
 800823a:	2301      	movs	r3, #1
 800823c:	4607      	mov	r7, r0
 800823e:	e7f0      	b.n	8008222 <_svfiprintf_r+0x182>
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	4622      	mov	r2, r4
 8008246:	4b11      	ldr	r3, [pc, #68]	; (800828c <_svfiprintf_r+0x1ec>)
 8008248:	a904      	add	r1, sp, #16
 800824a:	4640      	mov	r0, r8
 800824c:	f3af 8000 	nop.w
 8008250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008254:	4681      	mov	r9, r0
 8008256:	d1d6      	bne.n	8008206 <_svfiprintf_r+0x166>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	065b      	lsls	r3, r3, #25
 800825c:	f53f af35 	bmi.w	80080ca <_svfiprintf_r+0x2a>
 8008260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008262:	b01d      	add	sp, #116	; 0x74
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008268:	ab03      	add	r3, sp, #12
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4622      	mov	r2, r4
 800826e:	4b07      	ldr	r3, [pc, #28]	; (800828c <_svfiprintf_r+0x1ec>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	4640      	mov	r0, r8
 8008274:	f000 fa2c 	bl	80086d0 <_printf_i>
 8008278:	e7ea      	b.n	8008250 <_svfiprintf_r+0x1b0>
 800827a:	bf00      	nop
 800827c:	08009bf0 	.word	0x08009bf0
 8008280:	08009bf6 	.word	0x08009bf6
 8008284:	08009bfa 	.word	0x08009bfa
 8008288:	00000000 	.word	0x00000000
 800828c:	08007feb 	.word	0x08007feb

08008290 <_sungetc_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	1c4b      	adds	r3, r1, #1
 8008294:	4614      	mov	r4, r2
 8008296:	d103      	bne.n	80082a0 <_sungetc_r+0x10>
 8008298:	f04f 35ff 	mov.w	r5, #4294967295
 800829c:	4628      	mov	r0, r5
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	8993      	ldrh	r3, [r2, #12]
 80082a2:	b2cd      	uxtb	r5, r1
 80082a4:	f023 0320 	bic.w	r3, r3, #32
 80082a8:	8193      	strh	r3, [r2, #12]
 80082aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ac:	6852      	ldr	r2, [r2, #4]
 80082ae:	b18b      	cbz	r3, 80082d4 <_sungetc_r+0x44>
 80082b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082b2:	4293      	cmp	r3, r2
 80082b4:	dd08      	ble.n	80082c8 <_sungetc_r+0x38>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	6022      	str	r2, [r4, #0]
 80082bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	e7e9      	b.n	800829c <_sungetc_r+0xc>
 80082c8:	4621      	mov	r1, r4
 80082ca:	f000 fdb5 	bl	8008e38 <__submore>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d0f1      	beq.n	80082b6 <_sungetc_r+0x26>
 80082d2:	e7e1      	b.n	8008298 <_sungetc_r+0x8>
 80082d4:	6921      	ldr	r1, [r4, #16]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	b151      	cbz	r1, 80082f0 <_sungetc_r+0x60>
 80082da:	4299      	cmp	r1, r3
 80082dc:	d208      	bcs.n	80082f0 <_sungetc_r+0x60>
 80082de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80082e2:	42a9      	cmp	r1, r5
 80082e4:	d104      	bne.n	80082f0 <_sungetc_r+0x60>
 80082e6:	3b01      	subs	r3, #1
 80082e8:	3201      	adds	r2, #1
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	e7d5      	b.n	800829c <_sungetc_r+0xc>
 80082f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80082f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f8:	6363      	str	r3, [r4, #52]	; 0x34
 80082fa:	2303      	movs	r3, #3
 80082fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80082fe:	4623      	mov	r3, r4
 8008300:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	2301      	movs	r3, #1
 8008308:	e7dc      	b.n	80082c4 <_sungetc_r+0x34>

0800830a <__ssrefill_r>:
 800830a:	b510      	push	{r4, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008310:	b169      	cbz	r1, 800832e <__ssrefill_r+0x24>
 8008312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008316:	4299      	cmp	r1, r3
 8008318:	d001      	beq.n	800831e <__ssrefill_r+0x14>
 800831a:	f000 fe03 	bl	8008f24 <_free_r>
 800831e:	2000      	movs	r0, #0
 8008320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008322:	6360      	str	r0, [r4, #52]	; 0x34
 8008324:	6063      	str	r3, [r4, #4]
 8008326:	b113      	cbz	r3, 800832e <__ssrefill_r+0x24>
 8008328:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd10      	pop	{r4, pc}
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	2300      	movs	r3, #0
 8008338:	6063      	str	r3, [r4, #4]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f043 0320 	orr.w	r3, r3, #32
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e7f3      	b.n	800832c <__ssrefill_r+0x22>

08008344 <__ssvfiscanf_r>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	2100      	movs	r1, #0
 800834c:	4606      	mov	r6, r0
 800834e:	4692      	mov	sl, r2
 8008350:	270a      	movs	r7, #10
 8008352:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008356:	9144      	str	r1, [sp, #272]	; 0x110
 8008358:	9145      	str	r1, [sp, #276]	; 0x114
 800835a:	499e      	ldr	r1, [pc, #632]	; (80085d4 <__ssvfiscanf_r+0x290>)
 800835c:	f10d 0804 	add.w	r8, sp, #4
 8008360:	91a0      	str	r1, [sp, #640]	; 0x280
 8008362:	499d      	ldr	r1, [pc, #628]	; (80085d8 <__ssvfiscanf_r+0x294>)
 8008364:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80085dc <__ssvfiscanf_r+0x298>
 8008368:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800836c:	91a1      	str	r1, [sp, #644]	; 0x284
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	f89a 3000 	ldrb.w	r3, [sl]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 812a 	beq.w	80085ce <__ssvfiscanf_r+0x28a>
 800837a:	4655      	mov	r5, sl
 800837c:	f000 fd98 	bl	8008eb0 <__locale_ctype_ptr>
 8008380:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008384:	4458      	add	r0, fp
 8008386:	7843      	ldrb	r3, [r0, #1]
 8008388:	f013 0308 	ands.w	r3, r3, #8
 800838c:	d01c      	beq.n	80083c8 <__ssvfiscanf_r+0x84>
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dd12      	ble.n	80083ba <__ssvfiscanf_r+0x76>
 8008394:	f000 fd8c 	bl	8008eb0 <__locale_ctype_ptr>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	4410      	add	r0, r2
 800839e:	7842      	ldrb	r2, [r0, #1]
 80083a0:	0712      	lsls	r2, r2, #28
 80083a2:	d401      	bmi.n	80083a8 <__ssvfiscanf_r+0x64>
 80083a4:	46aa      	mov	sl, r5
 80083a6:	e7e3      	b.n	8008370 <__ssvfiscanf_r+0x2c>
 80083a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083aa:	3301      	adds	r3, #1
 80083ac:	3201      	adds	r2, #1
 80083ae:	9245      	str	r2, [sp, #276]	; 0x114
 80083b0:	6862      	ldr	r2, [r4, #4]
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	3a01      	subs	r2, #1
 80083b6:	6062      	str	r2, [r4, #4]
 80083b8:	e7e9      	b.n	800838e <__ssvfiscanf_r+0x4a>
 80083ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083bc:	4621      	mov	r1, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	4798      	blx	r3
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d0e6      	beq.n	8008394 <__ssvfiscanf_r+0x50>
 80083c6:	e7ed      	b.n	80083a4 <__ssvfiscanf_r+0x60>
 80083c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80083cc:	f040 8082 	bne.w	80084d4 <__ssvfiscanf_r+0x190>
 80083d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80083d2:	9341      	str	r3, [sp, #260]	; 0x104
 80083d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80083d8:	2b2a      	cmp	r3, #42	; 0x2a
 80083da:	d103      	bne.n	80083e4 <__ssvfiscanf_r+0xa0>
 80083dc:	2310      	movs	r3, #16
 80083de:	f10a 0502 	add.w	r5, sl, #2
 80083e2:	9341      	str	r3, [sp, #260]	; 0x104
 80083e4:	46aa      	mov	sl, r5
 80083e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80083ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80083ee:	2a09      	cmp	r2, #9
 80083f0:	d922      	bls.n	8008438 <__ssvfiscanf_r+0xf4>
 80083f2:	2203      	movs	r2, #3
 80083f4:	4879      	ldr	r0, [pc, #484]	; (80085dc <__ssvfiscanf_r+0x298>)
 80083f6:	f000 fd7b 	bl	8008ef0 <memchr>
 80083fa:	b138      	cbz	r0, 800840c <__ssvfiscanf_r+0xc8>
 80083fc:	eba0 0309 	sub.w	r3, r0, r9
 8008400:	2001      	movs	r0, #1
 8008402:	46aa      	mov	sl, r5
 8008404:	4098      	lsls	r0, r3
 8008406:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008408:	4318      	orrs	r0, r3
 800840a:	9041      	str	r0, [sp, #260]	; 0x104
 800840c:	f89a 3000 	ldrb.w	r3, [sl]
 8008410:	f10a 0501 	add.w	r5, sl, #1
 8008414:	2b67      	cmp	r3, #103	; 0x67
 8008416:	d82b      	bhi.n	8008470 <__ssvfiscanf_r+0x12c>
 8008418:	2b65      	cmp	r3, #101	; 0x65
 800841a:	f080 809f 	bcs.w	800855c <__ssvfiscanf_r+0x218>
 800841e:	2b47      	cmp	r3, #71	; 0x47
 8008420:	d810      	bhi.n	8008444 <__ssvfiscanf_r+0x100>
 8008422:	2b45      	cmp	r3, #69	; 0x45
 8008424:	f080 809a 	bcs.w	800855c <__ssvfiscanf_r+0x218>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d06c      	beq.n	8008506 <__ssvfiscanf_r+0x1c2>
 800842c:	2b25      	cmp	r3, #37	; 0x25
 800842e:	d051      	beq.n	80084d4 <__ssvfiscanf_r+0x190>
 8008430:	2303      	movs	r3, #3
 8008432:	9742      	str	r7, [sp, #264]	; 0x108
 8008434:	9347      	str	r3, [sp, #284]	; 0x11c
 8008436:	e027      	b.n	8008488 <__ssvfiscanf_r+0x144>
 8008438:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800843a:	fb07 1303 	mla	r3, r7, r3, r1
 800843e:	3b30      	subs	r3, #48	; 0x30
 8008440:	9343      	str	r3, [sp, #268]	; 0x10c
 8008442:	e7cf      	b.n	80083e4 <__ssvfiscanf_r+0xa0>
 8008444:	2b5b      	cmp	r3, #91	; 0x5b
 8008446:	d06a      	beq.n	800851e <__ssvfiscanf_r+0x1da>
 8008448:	d80c      	bhi.n	8008464 <__ssvfiscanf_r+0x120>
 800844a:	2b58      	cmp	r3, #88	; 0x58
 800844c:	d1f0      	bne.n	8008430 <__ssvfiscanf_r+0xec>
 800844e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008454:	9241      	str	r2, [sp, #260]	; 0x104
 8008456:	2210      	movs	r2, #16
 8008458:	9242      	str	r2, [sp, #264]	; 0x108
 800845a:	2b6e      	cmp	r3, #110	; 0x6e
 800845c:	bf8c      	ite	hi
 800845e:	2304      	movhi	r3, #4
 8008460:	2303      	movls	r3, #3
 8008462:	e010      	b.n	8008486 <__ssvfiscanf_r+0x142>
 8008464:	2b63      	cmp	r3, #99	; 0x63
 8008466:	d065      	beq.n	8008534 <__ssvfiscanf_r+0x1f0>
 8008468:	2b64      	cmp	r3, #100	; 0x64
 800846a:	d1e1      	bne.n	8008430 <__ssvfiscanf_r+0xec>
 800846c:	9742      	str	r7, [sp, #264]	; 0x108
 800846e:	e7f4      	b.n	800845a <__ssvfiscanf_r+0x116>
 8008470:	2b70      	cmp	r3, #112	; 0x70
 8008472:	d04b      	beq.n	800850c <__ssvfiscanf_r+0x1c8>
 8008474:	d826      	bhi.n	80084c4 <__ssvfiscanf_r+0x180>
 8008476:	2b6e      	cmp	r3, #110	; 0x6e
 8008478:	d062      	beq.n	8008540 <__ssvfiscanf_r+0x1fc>
 800847a:	d84c      	bhi.n	8008516 <__ssvfiscanf_r+0x1d2>
 800847c:	2b69      	cmp	r3, #105	; 0x69
 800847e:	d1d7      	bne.n	8008430 <__ssvfiscanf_r+0xec>
 8008480:	2300      	movs	r3, #0
 8008482:	9342      	str	r3, [sp, #264]	; 0x108
 8008484:	2303      	movs	r3, #3
 8008486:	9347      	str	r3, [sp, #284]	; 0x11c
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	dd68      	ble.n	8008560 <__ssvfiscanf_r+0x21c>
 800848e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008490:	0659      	lsls	r1, r3, #25
 8008492:	d407      	bmi.n	80084a4 <__ssvfiscanf_r+0x160>
 8008494:	f000 fd0c 	bl	8008eb0 <__locale_ctype_ptr>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	4410      	add	r0, r2
 800849e:	7842      	ldrb	r2, [r0, #1]
 80084a0:	0712      	lsls	r2, r2, #28
 80084a2:	d464      	bmi.n	800856e <__ssvfiscanf_r+0x22a>
 80084a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	dc73      	bgt.n	8008592 <__ssvfiscanf_r+0x24e>
 80084aa:	466b      	mov	r3, sp
 80084ac:	4622      	mov	r2, r4
 80084ae:	a941      	add	r1, sp, #260	; 0x104
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 fa1f 	bl	80088f4 <_scanf_chars>
 80084b6:	2801      	cmp	r0, #1
 80084b8:	f000 8089 	beq.w	80085ce <__ssvfiscanf_r+0x28a>
 80084bc:	2802      	cmp	r0, #2
 80084be:	f47f af71 	bne.w	80083a4 <__ssvfiscanf_r+0x60>
 80084c2:	e01d      	b.n	8008500 <__ssvfiscanf_r+0x1bc>
 80084c4:	2b75      	cmp	r3, #117	; 0x75
 80084c6:	d0d1      	beq.n	800846c <__ssvfiscanf_r+0x128>
 80084c8:	2b78      	cmp	r3, #120	; 0x78
 80084ca:	d0c0      	beq.n	800844e <__ssvfiscanf_r+0x10a>
 80084cc:	2b73      	cmp	r3, #115	; 0x73
 80084ce:	d1af      	bne.n	8008430 <__ssvfiscanf_r+0xec>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e7d8      	b.n	8008486 <__ssvfiscanf_r+0x142>
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	dd0c      	ble.n	80084f4 <__ssvfiscanf_r+0x1b0>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	455a      	cmp	r2, fp
 80084e0:	d175      	bne.n	80085ce <__ssvfiscanf_r+0x28a>
 80084e2:	3301      	adds	r3, #1
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80084ea:	3a01      	subs	r2, #1
 80084ec:	3301      	adds	r3, #1
 80084ee:	6062      	str	r2, [r4, #4]
 80084f0:	9345      	str	r3, [sp, #276]	; 0x114
 80084f2:	e757      	b.n	80083a4 <__ssvfiscanf_r+0x60>
 80084f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084f6:	4621      	mov	r1, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	4798      	blx	r3
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0ec      	beq.n	80084da <__ssvfiscanf_r+0x196>
 8008500:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008502:	2800      	cmp	r0, #0
 8008504:	d159      	bne.n	80085ba <__ssvfiscanf_r+0x276>
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	e05c      	b.n	80085c6 <__ssvfiscanf_r+0x282>
 800850c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800850e:	f042 0220 	orr.w	r2, r2, #32
 8008512:	9241      	str	r2, [sp, #260]	; 0x104
 8008514:	e79b      	b.n	800844e <__ssvfiscanf_r+0x10a>
 8008516:	2308      	movs	r3, #8
 8008518:	9342      	str	r3, [sp, #264]	; 0x108
 800851a:	2304      	movs	r3, #4
 800851c:	e7b3      	b.n	8008486 <__ssvfiscanf_r+0x142>
 800851e:	4629      	mov	r1, r5
 8008520:	4640      	mov	r0, r8
 8008522:	f000 fb3f 	bl	8008ba4 <__sccl>
 8008526:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008528:	4605      	mov	r5, r0
 800852a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852e:	9341      	str	r3, [sp, #260]	; 0x104
 8008530:	2301      	movs	r3, #1
 8008532:	e7a8      	b.n	8008486 <__ssvfiscanf_r+0x142>
 8008534:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800853a:	9341      	str	r3, [sp, #260]	; 0x104
 800853c:	2300      	movs	r3, #0
 800853e:	e7a2      	b.n	8008486 <__ssvfiscanf_r+0x142>
 8008540:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008542:	06c3      	lsls	r3, r0, #27
 8008544:	f53f af2e 	bmi.w	80083a4 <__ssvfiscanf_r+0x60>
 8008548:	9b00      	ldr	r3, [sp, #0]
 800854a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800854c:	1d19      	adds	r1, r3, #4
 800854e:	9100      	str	r1, [sp, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	07c0      	lsls	r0, r0, #31
 8008554:	bf4c      	ite	mi
 8008556:	801a      	strhmi	r2, [r3, #0]
 8008558:	601a      	strpl	r2, [r3, #0]
 800855a:	e723      	b.n	80083a4 <__ssvfiscanf_r+0x60>
 800855c:	2305      	movs	r3, #5
 800855e:	e792      	b.n	8008486 <__ssvfiscanf_r+0x142>
 8008560:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008562:	4621      	mov	r1, r4
 8008564:	4630      	mov	r0, r6
 8008566:	4798      	blx	r3
 8008568:	2800      	cmp	r0, #0
 800856a:	d090      	beq.n	800848e <__ssvfiscanf_r+0x14a>
 800856c:	e7c8      	b.n	8008500 <__ssvfiscanf_r+0x1bc>
 800856e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008570:	3201      	adds	r2, #1
 8008572:	9245      	str	r2, [sp, #276]	; 0x114
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	3a01      	subs	r2, #1
 8008578:	2a00      	cmp	r2, #0
 800857a:	6062      	str	r2, [r4, #4]
 800857c:	dd02      	ble.n	8008584 <__ssvfiscanf_r+0x240>
 800857e:	3301      	adds	r3, #1
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	e787      	b.n	8008494 <__ssvfiscanf_r+0x150>
 8008584:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	4798      	blx	r3
 800858c:	2800      	cmp	r0, #0
 800858e:	d081      	beq.n	8008494 <__ssvfiscanf_r+0x150>
 8008590:	e7b6      	b.n	8008500 <__ssvfiscanf_r+0x1bc>
 8008592:	2b04      	cmp	r3, #4
 8008594:	dc06      	bgt.n	80085a4 <__ssvfiscanf_r+0x260>
 8008596:	466b      	mov	r3, sp
 8008598:	4622      	mov	r2, r4
 800859a:	a941      	add	r1, sp, #260	; 0x104
 800859c:	4630      	mov	r0, r6
 800859e:	f000 fa0b 	bl	80089b8 <_scanf_i>
 80085a2:	e788      	b.n	80084b6 <__ssvfiscanf_r+0x172>
 80085a4:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <__ssvfiscanf_r+0x29c>)
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f43f aefc 	beq.w	80083a4 <__ssvfiscanf_r+0x60>
 80085ac:	466b      	mov	r3, sp
 80085ae:	4622      	mov	r2, r4
 80085b0:	a941      	add	r1, sp, #260	; 0x104
 80085b2:	4630      	mov	r0, r6
 80085b4:	f3af 8000 	nop.w
 80085b8:	e77d      	b.n	80084b6 <__ssvfiscanf_r+0x172>
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80085c0:	bf18      	it	ne
 80085c2:	f04f 30ff 	movne.w	r0, #4294967295
 80085c6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80085d0:	e7f9      	b.n	80085c6 <__ssvfiscanf_r+0x282>
 80085d2:	bf00      	nop
 80085d4:	08008291 	.word	0x08008291
 80085d8:	0800830b 	.word	0x0800830b
 80085dc:	08009bf6 	.word	0x08009bf6
 80085e0:	00000000 	.word	0x00000000

080085e4 <_printf_common>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	4691      	mov	r9, r2
 80085ea:	461f      	mov	r7, r3
 80085ec:	688a      	ldr	r2, [r1, #8]
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	4606      	mov	r6, r0
 80085f2:	4293      	cmp	r3, r2
 80085f4:	bfb8      	it	lt
 80085f6:	4613      	movlt	r3, r2
 80085f8:	f8c9 3000 	str.w	r3, [r9]
 80085fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008600:	460c      	mov	r4, r1
 8008602:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008606:	b112      	cbz	r2, 800860e <_printf_common+0x2a>
 8008608:	3301      	adds	r3, #1
 800860a:	f8c9 3000 	str.w	r3, [r9]
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	0699      	lsls	r1, r3, #26
 8008612:	bf42      	ittt	mi
 8008614:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008618:	3302      	addmi	r3, #2
 800861a:	f8c9 3000 	strmi.w	r3, [r9]
 800861e:	6825      	ldr	r5, [r4, #0]
 8008620:	f015 0506 	ands.w	r5, r5, #6
 8008624:	d107      	bne.n	8008636 <_printf_common+0x52>
 8008626:	f104 0a19 	add.w	sl, r4, #25
 800862a:	68e3      	ldr	r3, [r4, #12]
 800862c:	f8d9 2000 	ldr.w	r2, [r9]
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	42ab      	cmp	r3, r5
 8008634:	dc29      	bgt.n	800868a <_printf_common+0xa6>
 8008636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800863a:	6822      	ldr	r2, [r4, #0]
 800863c:	3300      	adds	r3, #0
 800863e:	bf18      	it	ne
 8008640:	2301      	movne	r3, #1
 8008642:	0692      	lsls	r2, r2, #26
 8008644:	d42e      	bmi.n	80086a4 <_printf_common+0xc0>
 8008646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800864a:	4639      	mov	r1, r7
 800864c:	4630      	mov	r0, r6
 800864e:	47c0      	blx	r8
 8008650:	3001      	adds	r0, #1
 8008652:	d021      	beq.n	8008698 <_printf_common+0xb4>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	68e5      	ldr	r5, [r4, #12]
 8008658:	f003 0306 	and.w	r3, r3, #6
 800865c:	2b04      	cmp	r3, #4
 800865e:	bf18      	it	ne
 8008660:	2500      	movne	r5, #0
 8008662:	f8d9 2000 	ldr.w	r2, [r9]
 8008666:	f04f 0900 	mov.w	r9, #0
 800866a:	bf08      	it	eq
 800866c:	1aad      	subeq	r5, r5, r2
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	bf08      	it	eq
 8008674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008678:	4293      	cmp	r3, r2
 800867a:	bfc4      	itt	gt
 800867c:	1a9b      	subgt	r3, r3, r2
 800867e:	18ed      	addgt	r5, r5, r3
 8008680:	341a      	adds	r4, #26
 8008682:	454d      	cmp	r5, r9
 8008684:	d11a      	bne.n	80086bc <_printf_common+0xd8>
 8008686:	2000      	movs	r0, #0
 8008688:	e008      	b.n	800869c <_printf_common+0xb8>
 800868a:	2301      	movs	r3, #1
 800868c:	4652      	mov	r2, sl
 800868e:	4639      	mov	r1, r7
 8008690:	4630      	mov	r0, r6
 8008692:	47c0      	blx	r8
 8008694:	3001      	adds	r0, #1
 8008696:	d103      	bne.n	80086a0 <_printf_common+0xbc>
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a0:	3501      	adds	r5, #1
 80086a2:	e7c2      	b.n	800862a <_printf_common+0x46>
 80086a4:	2030      	movs	r0, #48	; 0x30
 80086a6:	18e1      	adds	r1, r4, r3
 80086a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b2:	4422      	add	r2, r4
 80086b4:	3302      	adds	r3, #2
 80086b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086ba:	e7c4      	b.n	8008646 <_printf_common+0x62>
 80086bc:	2301      	movs	r3, #1
 80086be:	4622      	mov	r2, r4
 80086c0:	4639      	mov	r1, r7
 80086c2:	4630      	mov	r0, r6
 80086c4:	47c0      	blx	r8
 80086c6:	3001      	adds	r0, #1
 80086c8:	d0e6      	beq.n	8008698 <_printf_common+0xb4>
 80086ca:	f109 0901 	add.w	r9, r9, #1
 80086ce:	e7d8      	b.n	8008682 <_printf_common+0x9e>

080086d0 <_printf_i>:
 80086d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80086d8:	460c      	mov	r4, r1
 80086da:	7e09      	ldrb	r1, [r1, #24]
 80086dc:	b085      	sub	sp, #20
 80086de:	296e      	cmp	r1, #110	; 0x6e
 80086e0:	4617      	mov	r7, r2
 80086e2:	4606      	mov	r6, r0
 80086e4:	4698      	mov	r8, r3
 80086e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086e8:	f000 80b3 	beq.w	8008852 <_printf_i+0x182>
 80086ec:	d822      	bhi.n	8008734 <_printf_i+0x64>
 80086ee:	2963      	cmp	r1, #99	; 0x63
 80086f0:	d036      	beq.n	8008760 <_printf_i+0x90>
 80086f2:	d80a      	bhi.n	800870a <_printf_i+0x3a>
 80086f4:	2900      	cmp	r1, #0
 80086f6:	f000 80b9 	beq.w	800886c <_printf_i+0x19c>
 80086fa:	2958      	cmp	r1, #88	; 0x58
 80086fc:	f000 8083 	beq.w	8008806 <_printf_i+0x136>
 8008700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008708:	e032      	b.n	8008770 <_printf_i+0xa0>
 800870a:	2964      	cmp	r1, #100	; 0x64
 800870c:	d001      	beq.n	8008712 <_printf_i+0x42>
 800870e:	2969      	cmp	r1, #105	; 0x69
 8008710:	d1f6      	bne.n	8008700 <_printf_i+0x30>
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	6813      	ldr	r3, [r2, #0]
 8008716:	0605      	lsls	r5, r0, #24
 8008718:	f103 0104 	add.w	r1, r3, #4
 800871c:	d52a      	bpl.n	8008774 <_printf_i+0xa4>
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6011      	str	r1, [r2, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	da03      	bge.n	800872e <_printf_i+0x5e>
 8008726:	222d      	movs	r2, #45	; 0x2d
 8008728:	425b      	negs	r3, r3
 800872a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800872e:	486f      	ldr	r0, [pc, #444]	; (80088ec <_printf_i+0x21c>)
 8008730:	220a      	movs	r2, #10
 8008732:	e039      	b.n	80087a8 <_printf_i+0xd8>
 8008734:	2973      	cmp	r1, #115	; 0x73
 8008736:	f000 809d 	beq.w	8008874 <_printf_i+0x1a4>
 800873a:	d808      	bhi.n	800874e <_printf_i+0x7e>
 800873c:	296f      	cmp	r1, #111	; 0x6f
 800873e:	d020      	beq.n	8008782 <_printf_i+0xb2>
 8008740:	2970      	cmp	r1, #112	; 0x70
 8008742:	d1dd      	bne.n	8008700 <_printf_i+0x30>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	f043 0320 	orr.w	r3, r3, #32
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	e003      	b.n	8008756 <_printf_i+0x86>
 800874e:	2975      	cmp	r1, #117	; 0x75
 8008750:	d017      	beq.n	8008782 <_printf_i+0xb2>
 8008752:	2978      	cmp	r1, #120	; 0x78
 8008754:	d1d4      	bne.n	8008700 <_printf_i+0x30>
 8008756:	2378      	movs	r3, #120	; 0x78
 8008758:	4865      	ldr	r0, [pc, #404]	; (80088f0 <_printf_i+0x220>)
 800875a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800875e:	e055      	b.n	800880c <_printf_i+0x13c>
 8008760:	6813      	ldr	r3, [r2, #0]
 8008762:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008766:	1d19      	adds	r1, r3, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6011      	str	r1, [r2, #0]
 800876c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008770:	2301      	movs	r3, #1
 8008772:	e08c      	b.n	800888e <_printf_i+0x1be>
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800877a:	6011      	str	r1, [r2, #0]
 800877c:	bf18      	it	ne
 800877e:	b21b      	sxthne	r3, r3
 8008780:	e7cf      	b.n	8008722 <_printf_i+0x52>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	6825      	ldr	r5, [r4, #0]
 8008786:	1d18      	adds	r0, r3, #4
 8008788:	6010      	str	r0, [r2, #0]
 800878a:	0628      	lsls	r0, r5, #24
 800878c:	d501      	bpl.n	8008792 <_printf_i+0xc2>
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	e002      	b.n	8008798 <_printf_i+0xc8>
 8008792:	0668      	lsls	r0, r5, #25
 8008794:	d5fb      	bpl.n	800878e <_printf_i+0xbe>
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	296f      	cmp	r1, #111	; 0x6f
 800879a:	bf14      	ite	ne
 800879c:	220a      	movne	r2, #10
 800879e:	2208      	moveq	r2, #8
 80087a0:	4852      	ldr	r0, [pc, #328]	; (80088ec <_printf_i+0x21c>)
 80087a2:	2100      	movs	r1, #0
 80087a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a8:	6865      	ldr	r5, [r4, #4]
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	60a5      	str	r5, [r4, #8]
 80087ae:	f2c0 8095 	blt.w	80088dc <_printf_i+0x20c>
 80087b2:	6821      	ldr	r1, [r4, #0]
 80087b4:	f021 0104 	bic.w	r1, r1, #4
 80087b8:	6021      	str	r1, [r4, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d13d      	bne.n	800883a <_printf_i+0x16a>
 80087be:	2d00      	cmp	r5, #0
 80087c0:	f040 808e 	bne.w	80088e0 <_printf_i+0x210>
 80087c4:	4665      	mov	r5, ip
 80087c6:	2a08      	cmp	r2, #8
 80087c8:	d10b      	bne.n	80087e2 <_printf_i+0x112>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	07db      	lsls	r3, r3, #31
 80087ce:	d508      	bpl.n	80087e2 <_printf_i+0x112>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	6862      	ldr	r2, [r4, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bfde      	ittt	le
 80087d8:	2330      	movle	r3, #48	; 0x30
 80087da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e2:	ebac 0305 	sub.w	r3, ip, r5
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	f8cd 8000 	str.w	r8, [sp]
 80087ec:	463b      	mov	r3, r7
 80087ee:	aa03      	add	r2, sp, #12
 80087f0:	4621      	mov	r1, r4
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff fef6 	bl	80085e4 <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d14d      	bne.n	8008898 <_printf_i+0x1c8>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b005      	add	sp, #20
 8008802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008806:	4839      	ldr	r0, [pc, #228]	; (80088ec <_printf_i+0x21c>)
 8008808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800880c:	6813      	ldr	r3, [r2, #0]
 800880e:	6821      	ldr	r1, [r4, #0]
 8008810:	1d1d      	adds	r5, r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6015      	str	r5, [r2, #0]
 8008816:	060a      	lsls	r2, r1, #24
 8008818:	d50b      	bpl.n	8008832 <_printf_i+0x162>
 800881a:	07ca      	lsls	r2, r1, #31
 800881c:	bf44      	itt	mi
 800881e:	f041 0120 	orrmi.w	r1, r1, #32
 8008822:	6021      	strmi	r1, [r4, #0]
 8008824:	b91b      	cbnz	r3, 800882e <_printf_i+0x15e>
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	f022 0220 	bic.w	r2, r2, #32
 800882c:	6022      	str	r2, [r4, #0]
 800882e:	2210      	movs	r2, #16
 8008830:	e7b7      	b.n	80087a2 <_printf_i+0xd2>
 8008832:	064d      	lsls	r5, r1, #25
 8008834:	bf48      	it	mi
 8008836:	b29b      	uxthmi	r3, r3
 8008838:	e7ef      	b.n	800881a <_printf_i+0x14a>
 800883a:	4665      	mov	r5, ip
 800883c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008840:	fb02 3311 	mls	r3, r2, r1, r3
 8008844:	5cc3      	ldrb	r3, [r0, r3]
 8008846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800884a:	460b      	mov	r3, r1
 800884c:	2900      	cmp	r1, #0
 800884e:	d1f5      	bne.n	800883c <_printf_i+0x16c>
 8008850:	e7b9      	b.n	80087c6 <_printf_i+0xf6>
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	6825      	ldr	r5, [r4, #0]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6961      	ldr	r1, [r4, #20]
 800885a:	6010      	str	r0, [r2, #0]
 800885c:	0628      	lsls	r0, r5, #24
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	d501      	bpl.n	8008866 <_printf_i+0x196>
 8008862:	6019      	str	r1, [r3, #0]
 8008864:	e002      	b.n	800886c <_printf_i+0x19c>
 8008866:	066a      	lsls	r2, r5, #25
 8008868:	d5fb      	bpl.n	8008862 <_printf_i+0x192>
 800886a:	8019      	strh	r1, [r3, #0]
 800886c:	2300      	movs	r3, #0
 800886e:	4665      	mov	r5, ip
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	e7b9      	b.n	80087e8 <_printf_i+0x118>
 8008874:	6813      	ldr	r3, [r2, #0]
 8008876:	1d19      	adds	r1, r3, #4
 8008878:	6011      	str	r1, [r2, #0]
 800887a:	681d      	ldr	r5, [r3, #0]
 800887c:	6862      	ldr	r2, [r4, #4]
 800887e:	2100      	movs	r1, #0
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fb35 	bl	8008ef0 <memchr>
 8008886:	b108      	cbz	r0, 800888c <_printf_i+0x1bc>
 8008888:	1b40      	subs	r0, r0, r5
 800888a:	6060      	str	r0, [r4, #4]
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	2300      	movs	r3, #0
 8008892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008896:	e7a7      	b.n	80087e8 <_printf_i+0x118>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	462a      	mov	r2, r5
 800889c:	4639      	mov	r1, r7
 800889e:	4630      	mov	r0, r6
 80088a0:	47c0      	blx	r8
 80088a2:	3001      	adds	r0, #1
 80088a4:	d0aa      	beq.n	80087fc <_printf_i+0x12c>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	079b      	lsls	r3, r3, #30
 80088aa:	d413      	bmi.n	80088d4 <_printf_i+0x204>
 80088ac:	68e0      	ldr	r0, [r4, #12]
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	4298      	cmp	r0, r3
 80088b2:	bfb8      	it	lt
 80088b4:	4618      	movlt	r0, r3
 80088b6:	e7a3      	b.n	8008800 <_printf_i+0x130>
 80088b8:	2301      	movs	r3, #1
 80088ba:	464a      	mov	r2, r9
 80088bc:	4639      	mov	r1, r7
 80088be:	4630      	mov	r0, r6
 80088c0:	47c0      	blx	r8
 80088c2:	3001      	adds	r0, #1
 80088c4:	d09a      	beq.n	80087fc <_printf_i+0x12c>
 80088c6:	3501      	adds	r5, #1
 80088c8:	68e3      	ldr	r3, [r4, #12]
 80088ca:	9a03      	ldr	r2, [sp, #12]
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	42ab      	cmp	r3, r5
 80088d0:	dcf2      	bgt.n	80088b8 <_printf_i+0x1e8>
 80088d2:	e7eb      	b.n	80088ac <_printf_i+0x1dc>
 80088d4:	2500      	movs	r5, #0
 80088d6:	f104 0919 	add.w	r9, r4, #25
 80088da:	e7f5      	b.n	80088c8 <_printf_i+0x1f8>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1ac      	bne.n	800883a <_printf_i+0x16a>
 80088e0:	7803      	ldrb	r3, [r0, #0]
 80088e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ea:	e76c      	b.n	80087c6 <_printf_i+0xf6>
 80088ec:	08009c01 	.word	0x08009c01
 80088f0:	08009c12 	.word	0x08009c12

080088f4 <_scanf_chars>:
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f8:	4615      	mov	r5, r2
 80088fa:	688a      	ldr	r2, [r1, #8]
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b932      	cbnz	r2, 8008910 <_scanf_chars+0x1c>
 8008902:	698a      	ldr	r2, [r1, #24]
 8008904:	2a00      	cmp	r2, #0
 8008906:	bf14      	ite	ne
 8008908:	f04f 32ff 	movne.w	r2, #4294967295
 800890c:	2201      	moveq	r2, #1
 800890e:	608a      	str	r2, [r1, #8]
 8008910:	2600      	movs	r6, #0
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	06d1      	lsls	r1, r2, #27
 8008916:	bf5f      	itttt	pl
 8008918:	681a      	ldrpl	r2, [r3, #0]
 800891a:	1d11      	addpl	r1, r2, #4
 800891c:	6019      	strpl	r1, [r3, #0]
 800891e:	6817      	ldrpl	r7, [r2, #0]
 8008920:	69a3      	ldr	r3, [r4, #24]
 8008922:	b1db      	cbz	r3, 800895c <_scanf_chars+0x68>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d107      	bne.n	8008938 <_scanf_chars+0x44>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6962      	ldr	r2, [r4, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	5cd3      	ldrb	r3, [r2, r3]
 8008930:	b9a3      	cbnz	r3, 800895c <_scanf_chars+0x68>
 8008932:	2e00      	cmp	r6, #0
 8008934:	d131      	bne.n	800899a <_scanf_chars+0xa6>
 8008936:	e006      	b.n	8008946 <_scanf_chars+0x52>
 8008938:	2b02      	cmp	r3, #2
 800893a:	d007      	beq.n	800894c <_scanf_chars+0x58>
 800893c:	2e00      	cmp	r6, #0
 800893e:	d12c      	bne.n	800899a <_scanf_chars+0xa6>
 8008940:	69a3      	ldr	r3, [r4, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d129      	bne.n	800899a <_scanf_chars+0xa6>
 8008946:	2001      	movs	r0, #1
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	f000 fab0 	bl	8008eb0 <__locale_ctype_ptr>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4418      	add	r0, r3
 8008956:	7843      	ldrb	r3, [r0, #1]
 8008958:	071b      	lsls	r3, r3, #28
 800895a:	d4ef      	bmi.n	800893c <_scanf_chars+0x48>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	3601      	adds	r6, #1
 8008960:	06da      	lsls	r2, r3, #27
 8008962:	bf5e      	ittt	pl
 8008964:	682b      	ldrpl	r3, [r5, #0]
 8008966:	781b      	ldrbpl	r3, [r3, #0]
 8008968:	703b      	strbpl	r3, [r7, #0]
 800896a:	682a      	ldr	r2, [r5, #0]
 800896c:	686b      	ldr	r3, [r5, #4]
 800896e:	f102 0201 	add.w	r2, r2, #1
 8008972:	602a      	str	r2, [r5, #0]
 8008974:	68a2      	ldr	r2, [r4, #8]
 8008976:	f103 33ff 	add.w	r3, r3, #4294967295
 800897a:	f102 32ff 	add.w	r2, r2, #4294967295
 800897e:	606b      	str	r3, [r5, #4]
 8008980:	bf58      	it	pl
 8008982:	3701      	addpl	r7, #1
 8008984:	60a2      	str	r2, [r4, #8]
 8008986:	b142      	cbz	r2, 800899a <_scanf_chars+0xa6>
 8008988:	2b00      	cmp	r3, #0
 800898a:	dcc9      	bgt.n	8008920 <_scanf_chars+0x2c>
 800898c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008990:	4629      	mov	r1, r5
 8008992:	4640      	mov	r0, r8
 8008994:	4798      	blx	r3
 8008996:	2800      	cmp	r0, #0
 8008998:	d0c2      	beq.n	8008920 <_scanf_chars+0x2c>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f013 0310 	ands.w	r3, r3, #16
 80089a0:	d105      	bne.n	80089ae <_scanf_chars+0xba>
 80089a2:	68e2      	ldr	r2, [r4, #12]
 80089a4:	3201      	adds	r2, #1
 80089a6:	60e2      	str	r2, [r4, #12]
 80089a8:	69a2      	ldr	r2, [r4, #24]
 80089aa:	b102      	cbz	r2, 80089ae <_scanf_chars+0xba>
 80089ac:	703b      	strb	r3, [r7, #0]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	2000      	movs	r0, #0
 80089b2:	441e      	add	r6, r3
 80089b4:	6126      	str	r6, [r4, #16]
 80089b6:	e7c7      	b.n	8008948 <_scanf_chars+0x54>

080089b8 <_scanf_i>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	460c      	mov	r4, r1
 80089be:	469a      	mov	sl, r3
 80089c0:	4b74      	ldr	r3, [pc, #464]	; (8008b94 <_scanf_i+0x1dc>)
 80089c2:	b087      	sub	sp, #28
 80089c4:	4683      	mov	fp, r0
 80089c6:	4616      	mov	r6, r2
 80089c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089cc:	ab03      	add	r3, sp, #12
 80089ce:	68a7      	ldr	r7, [r4, #8]
 80089d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089d4:	4b70      	ldr	r3, [pc, #448]	; (8008b98 <_scanf_i+0x1e0>)
 80089d6:	69a1      	ldr	r1, [r4, #24]
 80089d8:	4a70      	ldr	r2, [pc, #448]	; (8008b9c <_scanf_i+0x1e4>)
 80089da:	f104 091c 	add.w	r9, r4, #28
 80089de:	2903      	cmp	r1, #3
 80089e0:	bf08      	it	eq
 80089e2:	461a      	moveq	r2, r3
 80089e4:	1e7b      	subs	r3, r7, #1
 80089e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80089ea:	bf84      	itt	hi
 80089ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089f0:	60a3      	strhi	r3, [r4, #8]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	bf88      	it	hi
 80089f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	bf98      	it	ls
 8008a02:	2700      	movls	r7, #0
 8008a04:	464b      	mov	r3, r9
 8008a06:	f04f 0800 	mov.w	r8, #0
 8008a0a:	9200      	str	r2, [sp, #0]
 8008a0c:	bf88      	it	hi
 8008a0e:	197f      	addhi	r7, r7, r5
 8008a10:	6831      	ldr	r1, [r6, #0]
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	ab03      	add	r3, sp, #12
 8008a16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	7809      	ldrb	r1, [r1, #0]
 8008a1e:	f000 fa67 	bl	8008ef0 <memchr>
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	b330      	cbz	r0, 8008a74 <_scanf_i+0xbc>
 8008a26:	f1b8 0f01 	cmp.w	r8, #1
 8008a2a:	d15a      	bne.n	8008ae2 <_scanf_i+0x12a>
 8008a2c:	6862      	ldr	r2, [r4, #4]
 8008a2e:	b92a      	cbnz	r2, 8008a3c <_scanf_i+0x84>
 8008a30:	2108      	movs	r1, #8
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	6061      	str	r1, [r4, #4]
 8008a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	68a2      	ldr	r2, [r4, #8]
 8008a46:	1e51      	subs	r1, r2, #1
 8008a48:	60a1      	str	r1, [r4, #8]
 8008a4a:	b19a      	cbz	r2, 8008a74 <_scanf_i+0xbc>
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1c5d      	adds	r5, r3, #1
 8008a50:	1c51      	adds	r1, r2, #1
 8008a52:	6031      	str	r1, [r6, #0]
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	6873      	ldr	r3, [r6, #4]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	6073      	str	r3, [r6, #4]
 8008a60:	dc07      	bgt.n	8008a72 <_scanf_i+0xba>
 8008a62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a66:	4631      	mov	r1, r6
 8008a68:	4658      	mov	r0, fp
 8008a6a:	4798      	blx	r3
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f040 8087 	bne.w	8008b80 <_scanf_i+0x1c8>
 8008a72:	462b      	mov	r3, r5
 8008a74:	f108 0801 	add.w	r8, r8, #1
 8008a78:	f1b8 0f03 	cmp.w	r8, #3
 8008a7c:	d1c8      	bne.n	8008a10 <_scanf_i+0x58>
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	b90a      	cbnz	r2, 8008a86 <_scanf_i+0xce>
 8008a82:	220a      	movs	r2, #10
 8008a84:	6062      	str	r2, [r4, #4]
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	4945      	ldr	r1, [pc, #276]	; (8008ba0 <_scanf_i+0x1e8>)
 8008a8a:	6960      	ldr	r0, [r4, #20]
 8008a8c:	1a89      	subs	r1, r1, r2
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	f000 f888 	bl	8008ba4 <__sccl>
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	461d      	mov	r5, r3
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03b      	beq.n	8008b1c <_scanf_i+0x164>
 8008aa4:	6831      	ldr	r1, [r6, #0]
 8008aa6:	6960      	ldr	r0, [r4, #20]
 8008aa8:	f891 c000 	ldrb.w	ip, [r1]
 8008aac:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d033      	beq.n	8008b1c <_scanf_i+0x164>
 8008ab4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ab8:	d121      	bne.n	8008afe <_scanf_i+0x146>
 8008aba:	0510      	lsls	r0, r2, #20
 8008abc:	d51f      	bpl.n	8008afe <_scanf_i+0x146>
 8008abe:	f108 0801 	add.w	r8, r8, #1
 8008ac2:	b117      	cbz	r7, 8008aca <_scanf_i+0x112>
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	3f01      	subs	r7, #1
 8008ac8:	60a3      	str	r3, [r4, #8]
 8008aca:	6873      	ldr	r3, [r6, #4]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	6073      	str	r3, [r6, #4]
 8008ad2:	dd1c      	ble.n	8008b0e <_scanf_i+0x156>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	6033      	str	r3, [r6, #0]
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	e7dc      	b.n	8008a9c <_scanf_i+0xe4>
 8008ae2:	f1b8 0f02 	cmp.w	r8, #2
 8008ae6:	d1ad      	bne.n	8008a44 <_scanf_i+0x8c>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008aee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008af2:	d1bf      	bne.n	8008a74 <_scanf_i+0xbc>
 8008af4:	2110      	movs	r1, #16
 8008af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008afa:	6061      	str	r1, [r4, #4]
 8008afc:	e7a1      	b.n	8008a42 <_scanf_i+0x8a>
 8008afe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008b02:	6022      	str	r2, [r4, #0]
 8008b04:	780b      	ldrb	r3, [r1, #0]
 8008b06:	3501      	adds	r5, #1
 8008b08:	f805 3c01 	strb.w	r3, [r5, #-1]
 8008b0c:	e7dd      	b.n	8008aca <_scanf_i+0x112>
 8008b0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b12:	4631      	mov	r1, r6
 8008b14:	4658      	mov	r0, fp
 8008b16:	4798      	blx	r3
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d0de      	beq.n	8008ada <_scanf_i+0x122>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	05d9      	lsls	r1, r3, #23
 8008b20:	d50c      	bpl.n	8008b3c <_scanf_i+0x184>
 8008b22:	454d      	cmp	r5, r9
 8008b24:	d908      	bls.n	8008b38 <_scanf_i+0x180>
 8008b26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b2a:	1e6f      	subs	r7, r5, #1
 8008b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b30:	4632      	mov	r2, r6
 8008b32:	4658      	mov	r0, fp
 8008b34:	4798      	blx	r3
 8008b36:	463d      	mov	r5, r7
 8008b38:	454d      	cmp	r5, r9
 8008b3a:	d029      	beq.n	8008b90 <_scanf_i+0x1d8>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	f012 0210 	ands.w	r2, r2, #16
 8008b42:	d113      	bne.n	8008b6c <_scanf_i+0x1b4>
 8008b44:	702a      	strb	r2, [r5, #0]
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	9e00      	ldr	r6, [sp, #0]
 8008b4e:	47b0      	blx	r6
 8008b50:	f8da 3000 	ldr.w	r3, [sl]
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	1d1a      	adds	r2, r3, #4
 8008b58:	f8ca 2000 	str.w	r2, [sl]
 8008b5c:	f011 0f20 	tst.w	r1, #32
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	d010      	beq.n	8008b86 <_scanf_i+0x1ce>
 8008b64:	6018      	str	r0, [r3, #0]
 8008b66:	68e3      	ldr	r3, [r4, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60e3      	str	r3, [r4, #12]
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	eba5 0509 	sub.w	r5, r5, r9
 8008b72:	44a8      	add	r8, r5
 8008b74:	6925      	ldr	r5, [r4, #16]
 8008b76:	4445      	add	r5, r8
 8008b78:	6125      	str	r5, [r4, #16]
 8008b7a:	b007      	add	sp, #28
 8008b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	f04f 0800 	mov.w	r8, #0
 8008b84:	e7ca      	b.n	8008b1c <_scanf_i+0x164>
 8008b86:	07ca      	lsls	r2, r1, #31
 8008b88:	bf4c      	ite	mi
 8008b8a:	8018      	strhmi	r0, [r3, #0]
 8008b8c:	6018      	strpl	r0, [r3, #0]
 8008b8e:	e7ea      	b.n	8008b66 <_scanf_i+0x1ae>
 8008b90:	2001      	movs	r0, #1
 8008b92:	e7f2      	b.n	8008b7a <_scanf_i+0x1c2>
 8008b94:	08009304 	.word	0x08009304
 8008b98:	08008cfd 	.word	0x08008cfd
 8008b9c:	08008e15 	.word	0x08008e15
 8008ba0:	08009c33 	.word	0x08009c33

08008ba4 <__sccl>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	780b      	ldrb	r3, [r1, #0]
 8008ba8:	1e44      	subs	r4, r0, #1
 8008baa:	2b5e      	cmp	r3, #94	; 0x5e
 8008bac:	bf13      	iteet	ne
 8008bae:	1c4a      	addne	r2, r1, #1
 8008bb0:	1c8a      	addeq	r2, r1, #2
 8008bb2:	784b      	ldrbeq	r3, [r1, #1]
 8008bb4:	2100      	movne	r1, #0
 8008bb6:	bf08      	it	eq
 8008bb8:	2101      	moveq	r1, #1
 8008bba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008bbe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008bc2:	42ac      	cmp	r4, r5
 8008bc4:	d1fb      	bne.n	8008bbe <__sccl+0x1a>
 8008bc6:	b913      	cbnz	r3, 8008bce <__sccl+0x2a>
 8008bc8:	3a01      	subs	r2, #1
 8008bca:	4610      	mov	r0, r2
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	f081 0401 	eor.w	r4, r1, #1
 8008bd2:	54c4      	strb	r4, [r0, r3]
 8008bd4:	1c51      	adds	r1, r2, #1
 8008bd6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008bda:	1e4e      	subs	r6, r1, #1
 8008bdc:	2d2d      	cmp	r5, #45	; 0x2d
 8008bde:	460a      	mov	r2, r1
 8008be0:	d006      	beq.n	8008bf0 <__sccl+0x4c>
 8008be2:	2d5d      	cmp	r5, #93	; 0x5d
 8008be4:	d0f1      	beq.n	8008bca <__sccl+0x26>
 8008be6:	b90d      	cbnz	r5, 8008bec <__sccl+0x48>
 8008be8:	4632      	mov	r2, r6
 8008bea:	e7ee      	b.n	8008bca <__sccl+0x26>
 8008bec:	462b      	mov	r3, r5
 8008bee:	e7f0      	b.n	8008bd2 <__sccl+0x2e>
 8008bf0:	780e      	ldrb	r6, [r1, #0]
 8008bf2:	2e5d      	cmp	r6, #93	; 0x5d
 8008bf4:	d0fa      	beq.n	8008bec <__sccl+0x48>
 8008bf6:	42b3      	cmp	r3, r6
 8008bf8:	dcf8      	bgt.n	8008bec <__sccl+0x48>
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	429e      	cmp	r6, r3
 8008bfe:	54c4      	strb	r4, [r0, r3]
 8008c00:	dcfb      	bgt.n	8008bfa <__sccl+0x56>
 8008c02:	3102      	adds	r1, #2
 8008c04:	e7e7      	b.n	8008bd6 <__sccl+0x32>

08008c06 <_strtol_l.isra.0>:
 8008c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4689      	mov	r9, r1
 8008c0e:	4692      	mov	sl, r2
 8008c10:	461e      	mov	r6, r3
 8008c12:	460f      	mov	r7, r1
 8008c14:	463d      	mov	r5, r7
 8008c16:	9808      	ldr	r0, [sp, #32]
 8008c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c1c:	f000 f944 	bl	8008ea8 <__locale_ctype_ptr_l>
 8008c20:	4420      	add	r0, r4
 8008c22:	7843      	ldrb	r3, [r0, #1]
 8008c24:	f013 0308 	ands.w	r3, r3, #8
 8008c28:	d132      	bne.n	8008c90 <_strtol_l.isra.0+0x8a>
 8008c2a:	2c2d      	cmp	r4, #45	; 0x2d
 8008c2c:	d132      	bne.n	8008c94 <_strtol_l.isra.0+0x8e>
 8008c2e:	2201      	movs	r2, #1
 8008c30:	787c      	ldrb	r4, [r7, #1]
 8008c32:	1cbd      	adds	r5, r7, #2
 8008c34:	2e00      	cmp	r6, #0
 8008c36:	d05d      	beq.n	8008cf4 <_strtol_l.isra.0+0xee>
 8008c38:	2e10      	cmp	r6, #16
 8008c3a:	d109      	bne.n	8008c50 <_strtol_l.isra.0+0x4a>
 8008c3c:	2c30      	cmp	r4, #48	; 0x30
 8008c3e:	d107      	bne.n	8008c50 <_strtol_l.isra.0+0x4a>
 8008c40:	782b      	ldrb	r3, [r5, #0]
 8008c42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c46:	2b58      	cmp	r3, #88	; 0x58
 8008c48:	d14f      	bne.n	8008cea <_strtol_l.isra.0+0xe4>
 8008c4a:	2610      	movs	r6, #16
 8008c4c:	786c      	ldrb	r4, [r5, #1]
 8008c4e:	3502      	adds	r5, #2
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	bf14      	ite	ne
 8008c54:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008c58:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008c5c:	2700      	movs	r7, #0
 8008c5e:	fbb1 fcf6 	udiv	ip, r1, r6
 8008c62:	4638      	mov	r0, r7
 8008c64:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008c68:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008c6c:	2b09      	cmp	r3, #9
 8008c6e:	d817      	bhi.n	8008ca0 <_strtol_l.isra.0+0x9a>
 8008c70:	461c      	mov	r4, r3
 8008c72:	42a6      	cmp	r6, r4
 8008c74:	dd23      	ble.n	8008cbe <_strtol_l.isra.0+0xb8>
 8008c76:	1c7b      	adds	r3, r7, #1
 8008c78:	d007      	beq.n	8008c8a <_strtol_l.isra.0+0x84>
 8008c7a:	4584      	cmp	ip, r0
 8008c7c:	d31c      	bcc.n	8008cb8 <_strtol_l.isra.0+0xb2>
 8008c7e:	d101      	bne.n	8008c84 <_strtol_l.isra.0+0x7e>
 8008c80:	45a6      	cmp	lr, r4
 8008c82:	db19      	blt.n	8008cb8 <_strtol_l.isra.0+0xb2>
 8008c84:	2701      	movs	r7, #1
 8008c86:	fb00 4006 	mla	r0, r0, r6, r4
 8008c8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c8e:	e7eb      	b.n	8008c68 <_strtol_l.isra.0+0x62>
 8008c90:	462f      	mov	r7, r5
 8008c92:	e7bf      	b.n	8008c14 <_strtol_l.isra.0+0xe>
 8008c94:	2c2b      	cmp	r4, #43	; 0x2b
 8008c96:	bf04      	itt	eq
 8008c98:	1cbd      	addeq	r5, r7, #2
 8008c9a:	787c      	ldrbeq	r4, [r7, #1]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	e7c9      	b.n	8008c34 <_strtol_l.isra.0+0x2e>
 8008ca0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008ca4:	2b19      	cmp	r3, #25
 8008ca6:	d801      	bhi.n	8008cac <_strtol_l.isra.0+0xa6>
 8008ca8:	3c37      	subs	r4, #55	; 0x37
 8008caa:	e7e2      	b.n	8008c72 <_strtol_l.isra.0+0x6c>
 8008cac:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008cb0:	2b19      	cmp	r3, #25
 8008cb2:	d804      	bhi.n	8008cbe <_strtol_l.isra.0+0xb8>
 8008cb4:	3c57      	subs	r4, #87	; 0x57
 8008cb6:	e7dc      	b.n	8008c72 <_strtol_l.isra.0+0x6c>
 8008cb8:	f04f 37ff 	mov.w	r7, #4294967295
 8008cbc:	e7e5      	b.n	8008c8a <_strtol_l.isra.0+0x84>
 8008cbe:	1c7b      	adds	r3, r7, #1
 8008cc0:	d108      	bne.n	8008cd4 <_strtol_l.isra.0+0xce>
 8008cc2:	2322      	movs	r3, #34	; 0x22
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	f8c8 3000 	str.w	r3, [r8]
 8008cca:	f1ba 0f00 	cmp.w	sl, #0
 8008cce:	d107      	bne.n	8008ce0 <_strtol_l.isra.0+0xda>
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	b102      	cbz	r2, 8008cd8 <_strtol_l.isra.0+0xd2>
 8008cd6:	4240      	negs	r0, r0
 8008cd8:	f1ba 0f00 	cmp.w	sl, #0
 8008cdc:	d0f8      	beq.n	8008cd0 <_strtol_l.isra.0+0xca>
 8008cde:	b10f      	cbz	r7, 8008ce4 <_strtol_l.isra.0+0xde>
 8008ce0:	f105 39ff 	add.w	r9, r5, #4294967295
 8008ce4:	f8ca 9000 	str.w	r9, [sl]
 8008ce8:	e7f2      	b.n	8008cd0 <_strtol_l.isra.0+0xca>
 8008cea:	2430      	movs	r4, #48	; 0x30
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	d1af      	bne.n	8008c50 <_strtol_l.isra.0+0x4a>
 8008cf0:	2608      	movs	r6, #8
 8008cf2:	e7ad      	b.n	8008c50 <_strtol_l.isra.0+0x4a>
 8008cf4:	2c30      	cmp	r4, #48	; 0x30
 8008cf6:	d0a3      	beq.n	8008c40 <_strtol_l.isra.0+0x3a>
 8008cf8:	260a      	movs	r6, #10
 8008cfa:	e7a9      	b.n	8008c50 <_strtol_l.isra.0+0x4a>

08008cfc <_strtol_r>:
 8008cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cfe:	4c06      	ldr	r4, [pc, #24]	; (8008d18 <_strtol_r+0x1c>)
 8008d00:	4d06      	ldr	r5, [pc, #24]	; (8008d1c <_strtol_r+0x20>)
 8008d02:	6824      	ldr	r4, [r4, #0]
 8008d04:	6a24      	ldr	r4, [r4, #32]
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	bf08      	it	eq
 8008d0a:	462c      	moveq	r4, r5
 8008d0c:	9400      	str	r4, [sp, #0]
 8008d0e:	f7ff ff7a 	bl	8008c06 <_strtol_l.isra.0>
 8008d12:	b003      	add	sp, #12
 8008d14:	bd30      	pop	{r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	2000002c 	.word	0x2000002c
 8008d1c:	20000090 	.word	0x20000090

08008d20 <_strtoul_l.isra.0>:
 8008d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d24:	4680      	mov	r8, r0
 8008d26:	4689      	mov	r9, r1
 8008d28:	4692      	mov	sl, r2
 8008d2a:	461e      	mov	r6, r3
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	463d      	mov	r5, r7
 8008d30:	9808      	ldr	r0, [sp, #32]
 8008d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d36:	f000 f8b7 	bl	8008ea8 <__locale_ctype_ptr_l>
 8008d3a:	4420      	add	r0, r4
 8008d3c:	7843      	ldrb	r3, [r0, #1]
 8008d3e:	f013 0308 	ands.w	r3, r3, #8
 8008d42:	d130      	bne.n	8008da6 <_strtoul_l.isra.0+0x86>
 8008d44:	2c2d      	cmp	r4, #45	; 0x2d
 8008d46:	d130      	bne.n	8008daa <_strtoul_l.isra.0+0x8a>
 8008d48:	2101      	movs	r1, #1
 8008d4a:	787c      	ldrb	r4, [r7, #1]
 8008d4c:	1cbd      	adds	r5, r7, #2
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	d05c      	beq.n	8008e0c <_strtoul_l.isra.0+0xec>
 8008d52:	2e10      	cmp	r6, #16
 8008d54:	d109      	bne.n	8008d6a <_strtoul_l.isra.0+0x4a>
 8008d56:	2c30      	cmp	r4, #48	; 0x30
 8008d58:	d107      	bne.n	8008d6a <_strtoul_l.isra.0+0x4a>
 8008d5a:	782b      	ldrb	r3, [r5, #0]
 8008d5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d60:	2b58      	cmp	r3, #88	; 0x58
 8008d62:	d14e      	bne.n	8008e02 <_strtoul_l.isra.0+0xe2>
 8008d64:	2610      	movs	r6, #16
 8008d66:	786c      	ldrb	r4, [r5, #1]
 8008d68:	3502      	adds	r5, #2
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	fbb2 f2f6 	udiv	r2, r2, r6
 8008d72:	2300      	movs	r3, #0
 8008d74:	fb06 fc02 	mul.w	ip, r6, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	ea6f 0c0c 	mvn.w	ip, ip
 8008d7e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008d82:	2f09      	cmp	r7, #9
 8008d84:	d817      	bhi.n	8008db6 <_strtoul_l.isra.0+0x96>
 8008d86:	463c      	mov	r4, r7
 8008d88:	42a6      	cmp	r6, r4
 8008d8a:	dd23      	ble.n	8008dd4 <_strtoul_l.isra.0+0xb4>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db1e      	blt.n	8008dce <_strtoul_l.isra.0+0xae>
 8008d90:	4282      	cmp	r2, r0
 8008d92:	d31c      	bcc.n	8008dce <_strtoul_l.isra.0+0xae>
 8008d94:	d101      	bne.n	8008d9a <_strtoul_l.isra.0+0x7a>
 8008d96:	45a4      	cmp	ip, r4
 8008d98:	db19      	blt.n	8008dce <_strtoul_l.isra.0+0xae>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	fb00 4006 	mla	r0, r0, r6, r4
 8008da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008da4:	e7eb      	b.n	8008d7e <_strtoul_l.isra.0+0x5e>
 8008da6:	462f      	mov	r7, r5
 8008da8:	e7c1      	b.n	8008d2e <_strtoul_l.isra.0+0xe>
 8008daa:	2c2b      	cmp	r4, #43	; 0x2b
 8008dac:	bf04      	itt	eq
 8008dae:	1cbd      	addeq	r5, r7, #2
 8008db0:	787c      	ldrbeq	r4, [r7, #1]
 8008db2:	4619      	mov	r1, r3
 8008db4:	e7cb      	b.n	8008d4e <_strtoul_l.isra.0+0x2e>
 8008db6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008dba:	2f19      	cmp	r7, #25
 8008dbc:	d801      	bhi.n	8008dc2 <_strtoul_l.isra.0+0xa2>
 8008dbe:	3c37      	subs	r4, #55	; 0x37
 8008dc0:	e7e2      	b.n	8008d88 <_strtoul_l.isra.0+0x68>
 8008dc2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008dc6:	2f19      	cmp	r7, #25
 8008dc8:	d804      	bhi.n	8008dd4 <_strtoul_l.isra.0+0xb4>
 8008dca:	3c57      	subs	r4, #87	; 0x57
 8008dcc:	e7dc      	b.n	8008d88 <_strtoul_l.isra.0+0x68>
 8008dce:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd2:	e7e5      	b.n	8008da0 <_strtoul_l.isra.0+0x80>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da09      	bge.n	8008dec <_strtoul_l.isra.0+0xcc>
 8008dd8:	2322      	movs	r3, #34	; 0x22
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	f8c8 3000 	str.w	r3, [r8]
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	d107      	bne.n	8008df8 <_strtoul_l.isra.0+0xd8>
 8008de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dec:	b101      	cbz	r1, 8008df0 <_strtoul_l.isra.0+0xd0>
 8008dee:	4240      	negs	r0, r0
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	d0f8      	beq.n	8008de8 <_strtoul_l.isra.0+0xc8>
 8008df6:	b10b      	cbz	r3, 8008dfc <_strtoul_l.isra.0+0xdc>
 8008df8:	f105 39ff 	add.w	r9, r5, #4294967295
 8008dfc:	f8ca 9000 	str.w	r9, [sl]
 8008e00:	e7f2      	b.n	8008de8 <_strtoul_l.isra.0+0xc8>
 8008e02:	2430      	movs	r4, #48	; 0x30
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	d1b0      	bne.n	8008d6a <_strtoul_l.isra.0+0x4a>
 8008e08:	2608      	movs	r6, #8
 8008e0a:	e7ae      	b.n	8008d6a <_strtoul_l.isra.0+0x4a>
 8008e0c:	2c30      	cmp	r4, #48	; 0x30
 8008e0e:	d0a4      	beq.n	8008d5a <_strtoul_l.isra.0+0x3a>
 8008e10:	260a      	movs	r6, #10
 8008e12:	e7aa      	b.n	8008d6a <_strtoul_l.isra.0+0x4a>

08008e14 <_strtoul_r>:
 8008e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e16:	4c06      	ldr	r4, [pc, #24]	; (8008e30 <_strtoul_r+0x1c>)
 8008e18:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_strtoul_r+0x20>)
 8008e1a:	6824      	ldr	r4, [r4, #0]
 8008e1c:	6a24      	ldr	r4, [r4, #32]
 8008e1e:	2c00      	cmp	r4, #0
 8008e20:	bf08      	it	eq
 8008e22:	462c      	moveq	r4, r5
 8008e24:	9400      	str	r4, [sp, #0]
 8008e26:	f7ff ff7b 	bl	8008d20 <_strtoul_l.isra.0>
 8008e2a:	b003      	add	sp, #12
 8008e2c:	bd30      	pop	{r4, r5, pc}
 8008e2e:	bf00      	nop
 8008e30:	2000002c 	.word	0x2000002c
 8008e34:	20000090 	.word	0x20000090

08008e38 <__submore>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e44:	4299      	cmp	r1, r3
 8008e46:	d11b      	bne.n	8008e80 <__submore+0x48>
 8008e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e4c:	f000 f8b6 	bl	8008fbc <_malloc_r>
 8008e50:	b918      	cbnz	r0, 8008e5a <__submore+0x22>
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008e64:	6360      	str	r0, [r4, #52]	; 0x34
 8008e66:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008e6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e6e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008e72:	7043      	strb	r3, [r0, #1]
 8008e74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e78:	7003      	strb	r3, [r0, #0]
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e7ea      	b.n	8008e56 <__submore+0x1e>
 8008e80:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008e82:	0077      	lsls	r7, r6, #1
 8008e84:	463a      	mov	r2, r7
 8008e86:	f000 f8f3 	bl	8009070 <_realloc_r>
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d0e0      	beq.n	8008e52 <__submore+0x1a>
 8008e90:	eb00 0806 	add.w	r8, r0, r6
 8008e94:	4601      	mov	r1, r0
 8008e96:	4632      	mov	r2, r6
 8008e98:	4640      	mov	r0, r8
 8008e9a:	f000 f837 	bl	8008f0c <memcpy>
 8008e9e:	f8c4 8000 	str.w	r8, [r4]
 8008ea2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008ea6:	e7e9      	b.n	8008e7c <__submore+0x44>

08008ea8 <__locale_ctype_ptr_l>:
 8008ea8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008eac:	4770      	bx	lr
	...

08008eb0 <__locale_ctype_ptr>:
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <__locale_ctype_ptr+0x14>)
 8008eb2:	4a05      	ldr	r2, [pc, #20]	; (8008ec8 <__locale_ctype_ptr+0x18>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf08      	it	eq
 8008ebc:	4613      	moveq	r3, r2
 8008ebe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008ec2:	4770      	bx	lr
 8008ec4:	2000002c 	.word	0x2000002c
 8008ec8:	20000090 	.word	0x20000090

08008ecc <__ascii_mbtowc>:
 8008ecc:	b082      	sub	sp, #8
 8008ece:	b901      	cbnz	r1, 8008ed2 <__ascii_mbtowc+0x6>
 8008ed0:	a901      	add	r1, sp, #4
 8008ed2:	b142      	cbz	r2, 8008ee6 <__ascii_mbtowc+0x1a>
 8008ed4:	b14b      	cbz	r3, 8008eea <__ascii_mbtowc+0x1e>
 8008ed6:	7813      	ldrb	r3, [r2, #0]
 8008ed8:	600b      	str	r3, [r1, #0]
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	1c10      	adds	r0, r2, #0
 8008ede:	bf18      	it	ne
 8008ee0:	2001      	movne	r0, #1
 8008ee2:	b002      	add	sp, #8
 8008ee4:	4770      	bx	lr
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	e7fb      	b.n	8008ee2 <__ascii_mbtowc+0x16>
 8008eea:	f06f 0001 	mvn.w	r0, #1
 8008eee:	e7f8      	b.n	8008ee2 <__ascii_mbtowc+0x16>

08008ef0 <memchr>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	b2c9      	uxtb	r1, r1
 8008ef4:	4402      	add	r2, r0
 8008ef6:	4290      	cmp	r0, r2
 8008ef8:	4603      	mov	r3, r0
 8008efa:	d101      	bne.n	8008f00 <memchr+0x10>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e003      	b.n	8008f08 <memchr+0x18>
 8008f00:	781c      	ldrb	r4, [r3, #0]
 8008f02:	3001      	adds	r0, #1
 8008f04:	428c      	cmp	r4, r1
 8008f06:	d1f6      	bne.n	8008ef6 <memchr+0x6>
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd10      	pop	{r4, pc}

08008f0c <memcpy>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	1e43      	subs	r3, r0, #1
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	d100      	bne.n	8008f18 <memcpy+0xc>
 8008f16:	bd10      	pop	{r4, pc}
 8008f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f20:	e7f7      	b.n	8008f12 <memcpy+0x6>
	...

08008f24 <_free_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4605      	mov	r5, r0
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d043      	beq.n	8008fb4 <_free_r+0x90>
 8008f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f30:	1f0c      	subs	r4, r1, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	18e4      	addlt	r4, r4, r3
 8008f38:	f000 f8dd 	bl	80090f6 <__malloc_lock>
 8008f3c:	4a1e      	ldr	r2, [pc, #120]	; (8008fb8 <_free_r+0x94>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	4610      	mov	r0, r2
 8008f42:	b933      	cbnz	r3, 8008f52 <_free_r+0x2e>
 8008f44:	6063      	str	r3, [r4, #4]
 8008f46:	6014      	str	r4, [r2, #0]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f000 b8d3 	b.w	80090f8 <__malloc_unlock>
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	d90b      	bls.n	8008f6e <_free_r+0x4a>
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	1862      	adds	r2, r4, r1
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	bf01      	itttt	eq
 8008f5e:	681a      	ldreq	r2, [r3, #0]
 8008f60:	685b      	ldreq	r3, [r3, #4]
 8008f62:	1852      	addeq	r2, r2, r1
 8008f64:	6022      	streq	r2, [r4, #0]
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6004      	str	r4, [r0, #0]
 8008f6a:	e7ed      	b.n	8008f48 <_free_r+0x24>
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	b10a      	cbz	r2, 8008f76 <_free_r+0x52>
 8008f72:	42a2      	cmp	r2, r4
 8008f74:	d9fa      	bls.n	8008f6c <_free_r+0x48>
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	1858      	adds	r0, r3, r1
 8008f7a:	42a0      	cmp	r0, r4
 8008f7c:	d10b      	bne.n	8008f96 <_free_r+0x72>
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	4401      	add	r1, r0
 8008f82:	1858      	adds	r0, r3, r1
 8008f84:	4282      	cmp	r2, r0
 8008f86:	6019      	str	r1, [r3, #0]
 8008f88:	d1de      	bne.n	8008f48 <_free_r+0x24>
 8008f8a:	6810      	ldr	r0, [r2, #0]
 8008f8c:	6852      	ldr	r2, [r2, #4]
 8008f8e:	4401      	add	r1, r0
 8008f90:	6019      	str	r1, [r3, #0]
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	e7d8      	b.n	8008f48 <_free_r+0x24>
 8008f96:	d902      	bls.n	8008f9e <_free_r+0x7a>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	e7d4      	b.n	8008f48 <_free_r+0x24>
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1821      	adds	r1, r4, r0
 8008fa2:	428a      	cmp	r2, r1
 8008fa4:	bf01      	itttt	eq
 8008fa6:	6811      	ldreq	r1, [r2, #0]
 8008fa8:	6852      	ldreq	r2, [r2, #4]
 8008faa:	1809      	addeq	r1, r1, r0
 8008fac:	6021      	streq	r1, [r4, #0]
 8008fae:	6062      	str	r2, [r4, #4]
 8008fb0:	605c      	str	r4, [r3, #4]
 8008fb2:	e7c9      	b.n	8008f48 <_free_r+0x24>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000254 	.word	0x20000254

08008fbc <_malloc_r>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	1ccd      	adds	r5, r1, #3
 8008fc0:	f025 0503 	bic.w	r5, r5, #3
 8008fc4:	3508      	adds	r5, #8
 8008fc6:	2d0c      	cmp	r5, #12
 8008fc8:	bf38      	it	cc
 8008fca:	250c      	movcc	r5, #12
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	4606      	mov	r6, r0
 8008fd0:	db01      	blt.n	8008fd6 <_malloc_r+0x1a>
 8008fd2:	42a9      	cmp	r1, r5
 8008fd4:	d903      	bls.n	8008fde <_malloc_r+0x22>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
 8008fde:	f000 f88a 	bl	80090f6 <__malloc_lock>
 8008fe2:	4a21      	ldr	r2, [pc, #132]	; (8009068 <_malloc_r+0xac>)
 8008fe4:	6814      	ldr	r4, [r2, #0]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	b991      	cbnz	r1, 8009010 <_malloc_r+0x54>
 8008fea:	4c20      	ldr	r4, [pc, #128]	; (800906c <_malloc_r+0xb0>)
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	b91b      	cbnz	r3, 8008ff8 <_malloc_r+0x3c>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f863 	bl	80090bc <_sbrk_r>
 8008ff6:	6020      	str	r0, [r4, #0]
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f000 f85e 	bl	80090bc <_sbrk_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d124      	bne.n	800904e <_malloc_r+0x92>
 8009004:	230c      	movs	r3, #12
 8009006:	4630      	mov	r0, r6
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	f000 f875 	bl	80090f8 <__malloc_unlock>
 800900e:	e7e4      	b.n	8008fda <_malloc_r+0x1e>
 8009010:	680b      	ldr	r3, [r1, #0]
 8009012:	1b5b      	subs	r3, r3, r5
 8009014:	d418      	bmi.n	8009048 <_malloc_r+0x8c>
 8009016:	2b0b      	cmp	r3, #11
 8009018:	d90f      	bls.n	800903a <_malloc_r+0x7e>
 800901a:	600b      	str	r3, [r1, #0]
 800901c:	18cc      	adds	r4, r1, r3
 800901e:	50cd      	str	r5, [r1, r3]
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f869 	bl	80090f8 <__malloc_unlock>
 8009026:	f104 000b 	add.w	r0, r4, #11
 800902a:	1d23      	adds	r3, r4, #4
 800902c:	f020 0007 	bic.w	r0, r0, #7
 8009030:	1ac3      	subs	r3, r0, r3
 8009032:	d0d3      	beq.n	8008fdc <_malloc_r+0x20>
 8009034:	425a      	negs	r2, r3
 8009036:	50e2      	str	r2, [r4, r3]
 8009038:	e7d0      	b.n	8008fdc <_malloc_r+0x20>
 800903a:	684b      	ldr	r3, [r1, #4]
 800903c:	428c      	cmp	r4, r1
 800903e:	bf16      	itet	ne
 8009040:	6063      	strne	r3, [r4, #4]
 8009042:	6013      	streq	r3, [r2, #0]
 8009044:	460c      	movne	r4, r1
 8009046:	e7eb      	b.n	8009020 <_malloc_r+0x64>
 8009048:	460c      	mov	r4, r1
 800904a:	6849      	ldr	r1, [r1, #4]
 800904c:	e7cc      	b.n	8008fe8 <_malloc_r+0x2c>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d005      	beq.n	8009064 <_malloc_r+0xa8>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4630      	mov	r0, r6
 800905c:	f000 f82e 	bl	80090bc <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d0cf      	beq.n	8009004 <_malloc_r+0x48>
 8009064:	6025      	str	r5, [r4, #0]
 8009066:	e7db      	b.n	8009020 <_malloc_r+0x64>
 8009068:	20000254 	.word	0x20000254
 800906c:	20000258 	.word	0x20000258

08009070 <_realloc_r>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	4607      	mov	r7, r0
 8009074:	4614      	mov	r4, r2
 8009076:	460e      	mov	r6, r1
 8009078:	b921      	cbnz	r1, 8009084 <_realloc_r+0x14>
 800907a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800907e:	4611      	mov	r1, r2
 8009080:	f7ff bf9c 	b.w	8008fbc <_malloc_r>
 8009084:	b922      	cbnz	r2, 8009090 <_realloc_r+0x20>
 8009086:	f7ff ff4d 	bl	8008f24 <_free_r>
 800908a:	4625      	mov	r5, r4
 800908c:	4628      	mov	r0, r5
 800908e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009090:	f000 f833 	bl	80090fa <_malloc_usable_size_r>
 8009094:	42a0      	cmp	r0, r4
 8009096:	d20f      	bcs.n	80090b8 <_realloc_r+0x48>
 8009098:	4621      	mov	r1, r4
 800909a:	4638      	mov	r0, r7
 800909c:	f7ff ff8e 	bl	8008fbc <_malloc_r>
 80090a0:	4605      	mov	r5, r0
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d0f2      	beq.n	800908c <_realloc_r+0x1c>
 80090a6:	4631      	mov	r1, r6
 80090a8:	4622      	mov	r2, r4
 80090aa:	f7ff ff2f 	bl	8008f0c <memcpy>
 80090ae:	4631      	mov	r1, r6
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ff37 	bl	8008f24 <_free_r>
 80090b6:	e7e9      	b.n	800908c <_realloc_r+0x1c>
 80090b8:	4635      	mov	r5, r6
 80090ba:	e7e7      	b.n	800908c <_realloc_r+0x1c>

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	2300      	movs	r3, #0
 80090c0:	4c05      	ldr	r4, [pc, #20]	; (80090d8 <_sbrk_r+0x1c>)
 80090c2:	4605      	mov	r5, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	f7f8 fba4 	bl	8001814 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	2000086c 	.word	0x2000086c

080090dc <__ascii_wctomb>:
 80090dc:	b149      	cbz	r1, 80090f2 <__ascii_wctomb+0x16>
 80090de:	2aff      	cmp	r2, #255	; 0xff
 80090e0:	bf8b      	itete	hi
 80090e2:	238a      	movhi	r3, #138	; 0x8a
 80090e4:	700a      	strbls	r2, [r1, #0]
 80090e6:	6003      	strhi	r3, [r0, #0]
 80090e8:	2001      	movls	r0, #1
 80090ea:	bf88      	it	hi
 80090ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80090f0:	4770      	bx	lr
 80090f2:	4608      	mov	r0, r1
 80090f4:	4770      	bx	lr

080090f6 <__malloc_lock>:
 80090f6:	4770      	bx	lr

080090f8 <__malloc_unlock>:
 80090f8:	4770      	bx	lr

080090fa <_malloc_usable_size_r>:
 80090fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fe:	1f18      	subs	r0, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfbc      	itt	lt
 8009104:	580b      	ldrlt	r3, [r1, r0]
 8009106:	18c0      	addlt	r0, r0, r3
 8009108:	4770      	bx	lr
	...

0800910c <_init>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr

08009118 <_fini>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr
