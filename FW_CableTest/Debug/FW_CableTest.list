
FW_CableTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a268  0800a268  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a268  0800a268  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a268  0800a268  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200001fc  0800a46c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  0800a46c  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a32  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a30  00000000  00000000  00037c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  0003b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d38  00000000  00000000  0003c568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c34d  00000000  00000000  0003d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a2e  00000000  00000000  000595ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ce4c  00000000  00000000  0006b01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7e67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  000f7ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	080095c0 	.word	0x080095c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	080095c0 	.word	0x080095c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	4907      	ldr	r1, [pc, #28]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4313      	orrs	r3, r2
 800016e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4013      	ands	r3, r2
 8000178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8000190:	2040      	movs	r0, #64	; 0x40
 8000192:	f7ff ffe3 	bl	800015c <LL_AHB1_GRP1_EnableClock>

}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Display>:
void DisplayChekSchem(typeEnv *Env);
void DisplayTest(typeEnv *Env);
void DisplayResult(typeEnv *Env);

void Display(typeEnv *Env)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	uint8_t mode = (*Env).Mode;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80001aa:	73fb      	strb	r3, [r7, #15]
	if(f_RefreshScreen == 1)
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <Display+0x8c>)
 80001ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001b2:	015b      	lsls	r3, r3, #5
 80001b4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001b8:	f043 0314 	orr.w	r3, r3, #20
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d12a      	bne.n	8000218 <Display+0x7c>
	{
		f_RefreshScreen = 0;
 80001c2:	4b19      	ldr	r3, [pc, #100]	; (8000228 <Display+0x8c>)
 80001c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001c8:	015b      	lsls	r3, r3, #5
 80001ca:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001ce:	f043 0314 	orr.w	r3, r3, #20
 80001d2:	461a      	mov	r2, r3
 80001d4:	2300      	movs	r3, #0
 80001d6:	6013      	str	r3, [r2, #0]


		switch(mode)	// назначить действие в зависимости от текущего режима
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	3b01      	subs	r3, #1
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d81d      	bhi.n	800021c <Display+0x80>
 80001e0:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <Display+0x4c>)
 80001e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e6:	bf00      	nop
 80001e8:	080001f9 	.word	0x080001f9
 80001ec:	08000201 	.word	0x08000201
 80001f0:	08000209 	.word	0x08000209
 80001f4:	08000211 	.word	0x08000211
					{
						case MENU: 			DisplayMenu(Env); 		break;
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f000 f817 	bl	800022c <DisplayMenu>
 80001fe:	e00e      	b.n	800021e <Display+0x82>
						case CHECK_SCHEME: 	DisplayChekSchem(Env);  	break;
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 f86f 	bl	80002e4 <DisplayChekSchem>
 8000206:	e00a      	b.n	800021e <Display+0x82>
						case TEST: 			DisplayTest(Env);			break;
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f000 f957 	bl	80004bc <DisplayTest>
 800020e:	e006      	b.n	800021e <Display+0x82>
						case RESULT: 		DisplayResult(Env);		break;
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 f979 	bl	8000508 <DisplayResult>
 8000216:	e002      	b.n	800021e <Display+0x82>
							default: break;
					}

	}
 8000218:	bf00      	nop
 800021a:	e000      	b.n	800021e <Display+0x82>
							default: break;
 800021c:	bf00      	nop
//	ST7735_DrawChar(110,40, LatStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar(110,52, lat_str,TXT_COLOR,BGR_COLOR);
//	//ST7735_DrawChar(110,64, 0x7f,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,80, CyrStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,92, cyr_str,TXT_COLOR,BGR_COLOR);
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000404 	.word	0x20000404

0800022c <DisplayMenu>:

void DisplayMenu(typeEnv *Env)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b09e      	sub	sp, #120	; 0x78
 8000230:	af02      	add	r7, sp, #8
 8000232:	6078      	str	r0, [r7, #4]
	ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];
	ST7735_ListBox FileList;
	uint32_t selectedFile = Env->Menu.ActiveItem;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 800023a:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000240:	667b      	str	r3, [r7, #100]	; 0x64

	for(uint32_t index =0; index < end_list; index++)
 8000242:	2300      	movs	r3, #0
 8000244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000246:	e021      	b.n	800028c <DisplayMenu+0x60>
				{
					Files_on_SD[index].text  = &(Env->Menu.FileList[index]);
 8000248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800024a:	4613      	mov	r3, r2
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	4413      	add	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	441a      	add	r2, r3
 8000258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800025a:	00db      	lsls	r3, r3, #3
 800025c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000260:	440b      	add	r3, r1
 8000262:	f843 2c54 	str.w	r2, [r3, #-84]
					Files_on_SD[index].visible=1;
 8000266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800026e:	4413      	add	r3, r2
 8000270:	2201      	movs	r2, #1
 8000272:	f803 2c50 	strb.w	r2, [r3, #-80]
					Files_on_SD[index].selected=0;
 8000276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800027e:	4413      	add	r3, r2
 8000280:	2200      	movs	r2, #0
 8000282:	f803 2c4f 	strb.w	r2, [r3, #-79]
	for(uint32_t index =0; index < end_list; index++)
 8000286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000288:	3301      	adds	r3, #1
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800028c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800028e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000290:	429a      	cmp	r2, r3
 8000292:	d3d9      	bcc.n	8000248 <DisplayMenu+0x1c>
				}
			ST7735_ListBox_StructInit(&FileList,0,0,&Files_on_SD,end_list);
 8000294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f107 021c 	add.w	r2, r7, #28
 800029c:	f107 0008 	add.w	r0, r7, #8
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	4613      	mov	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	2100      	movs	r1, #0
 80002a8:	f003 f838 	bl	800331c <ST7735_ListBox_StructInit>
			Files_on_SD[selectedFile].selected=1;
 80002ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80002b4:	4413      	add	r3, r2
 80002b6:	2201      	movs	r2, #1
 80002b8:	f803 2c4f 	strb.w	r2, [r3, #-79]
			FileList.BackgroundColor = BGR_COLOR;
 80002bc:	2311      	movs	r3, #17
 80002be:	81fb      	strh	r3, [r7, #14]
			FileList.BorderColor	=	BRD_COLOR;
 80002c0:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80002c4:	81bb      	strh	r3, [r7, #12]
			FileList.ItemTextColor	=	TXT_COLOR;
 80002c6:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80002ca:	823b      	strh	r3, [r7, #16]
			FileList.SelectedItemColor	=SEL_COLOR;
 80002cc:	231f      	movs	r3, #31
 80002ce:	827b      	strh	r3, [r7, #18]
			ST7735_ListBox_Draw(&FileList);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 ff6f 	bl	80031b8 <ST7735_ListBox_Draw>
}
 80002da:	bf00      	nop
 80002dc:	3770      	adds	r7, #112	; 0x70
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <DisplayChekSchem>:

void DisplayChekSchem(typeEnv *Env)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b0a6      	sub	sp, #152	; 0x98
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	6078      	str	r0, [r7, #4]
	char X1[NLin*2] = {0};
 80002ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002f0:	2240      	movs	r2, #64	; 0x40
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f008 f84c 	bl	8008392 <memset>
	char X2[NLin*2] = {0};
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2240      	movs	r2, #64	; 0x40
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f008 f845 	bl	8008392 <memset>
	char str[4]={0};
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
	uint8_t MaxLen = (*Env).RealDataSize;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000312:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	ST7735_Clear(BGR_COLOR);
 8000316:	2011      	movs	r0, #17
 8000318:	f002 fd66 	bl	8002de8 <ST7735_Clear>
	ST7735_DrawRectangle (3,3,150,35,TXT_COLOR);
 800031c:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2323      	movs	r3, #35	; 0x23
 8000324:	2296      	movs	r2, #150	; 0x96
 8000326:	2103      	movs	r1, #3
 8000328:	2003      	movs	r0, #3
 800032a:	f002 ff05 	bl	8003138 <ST7735_DrawRectangle>
	for(uint8_t i=0; i<9; i++)
 800032e:	2300      	movs	r3, #0
 8000330:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000334:	e02e      	b.n	8000394 <DisplayChekSchem+0xb0>
	{
		sprintf(str, "%d ", Env->DataForTest[0][i]);
 8000336:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	3324      	adds	r3, #36	; 0x24
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	495b      	ldr	r1, [pc, #364]	; (80004b8 <DisplayChekSchem+0x1d4>)
 800034a:	4618      	mov	r0, r3
 800034c:	f008 f82a 	bl	80083a4 <siprintf>
		strcat( &X1, &str);
 8000350:	f107 0208 	add.w	r2, r7, #8
 8000354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f008 f86e 	bl	800843c <strcat>

		sprintf(str, "%d ", Env->DataForTest[1][i]);
 8000360:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	3344      	adds	r3, #68	; 0x44
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4413      	add	r3, r2
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	4951      	ldr	r1, [pc, #324]	; (80004b8 <DisplayChekSchem+0x1d4>)
 8000374:	4618      	mov	r0, r3
 8000376:	f008 f815 	bl	80083a4 <siprintf>
		strcat( &X2, &str);
 800037a:	f107 0208 	add.w	r2, r7, #8
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4611      	mov	r1, r2
 8000384:	4618      	mov	r0, r3
 8000386:	f008 f859 	bl	800843c <strcat>
	for(uint8_t i=0; i<9; i++)
 800038a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800038e:	3301      	adds	r3, #1
 8000390:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000394:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000398:	2b08      	cmp	r3, #8
 800039a:	d9cc      	bls.n	8000336 <DisplayChekSchem+0x52>
//
//		ST7735_DrawChar7x11(5+(i*14),5, X1[i*2],TXT_COLOR,BGR_COLOR);
//		ST7735_DrawChar7x11(5+(i*14),22,X2[i*2],TXT_COLOR,BGR_COLOR);
	}
	ST7735_DrawString7x11(7,7,X1,TXT_COLOR,BGR_COLOR);
 800039c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80003a0:	2311      	movs	r3, #17
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003a8:	2107      	movs	r1, #7
 80003aa:	2007      	movs	r0, #7
 80003ac:	f002 fe62 	bl	8003074 <ST7735_DrawString7x11>
	ST7735_DrawString7x11(7,25,X2,TXT_COLOR,BGR_COLOR);
 80003b0:	f107 020c 	add.w	r2, r7, #12
 80003b4:	2311      	movs	r3, #17
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003bc:	2119      	movs	r1, #25
 80003be:	2007      	movs	r0, #7
 80003c0:	f002 fe58 	bl	8003074 <ST7735_DrawString7x11>
	if(MaxLen >9)
 80003c4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80003c8:	2b09      	cmp	r3, #9
 80003ca:	d971      	bls.n	80004b0 <DisplayChekSchem+0x1cc>
	{
		memset(&X1,0,NLin);
 80003cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003d0:	2220      	movs	r2, #32
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f007 ffdc 	bl	8008392 <memset>
		memset(&X2,0,NLin);
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2220      	movs	r2, #32
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f007 ffd5 	bl	8008392 <memset>
		ST7735_DrawRectangle (3,48,150,35,TXT_COLOR);
 80003e8:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2323      	movs	r3, #35	; 0x23
 80003f0:	2296      	movs	r2, #150	; 0x96
 80003f2:	2130      	movs	r1, #48	; 0x30
 80003f4:	2003      	movs	r0, #3
 80003f6:	f002 fe9f 	bl	8003138 <ST7735_DrawRectangle>
		for(uint8_t i=9; i<MaxLen; i++)
 80003fa:	2309      	movs	r3, #9
 80003fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000400:	e03c      	b.n	800047c <DisplayChekSchem+0x198>
			{
				memset(&str,0,4);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2204      	movs	r2, #4
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f007 ffc1 	bl	8008392 <memset>
				sprintf(str, "%d ", Env->DataForTest[0][i]);
 8000410:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	3324      	adds	r3, #36	; 0x24
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4925      	ldr	r1, [pc, #148]	; (80004b8 <DisplayChekSchem+0x1d4>)
 8000424:	4618      	mov	r0, r3
 8000426:	f007 ffbd 	bl	80083a4 <siprintf>
				strcat( &X1, &str);
 800042a:	f107 0208 	add.w	r2, r7, #8
 800042e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f008 f801 	bl	800843c <strcat>
				memset(&str,0,4);
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	2204      	movs	r2, #4
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f007 ffa5 	bl	8008392 <memset>
				sprintf(str, "%d ", Env->DataForTest[1][i]);
 8000448:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	3344      	adds	r3, #68	; 0x44
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4413      	add	r3, r2
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4917      	ldr	r1, [pc, #92]	; (80004b8 <DisplayChekSchem+0x1d4>)
 800045c:	4618      	mov	r0, r3
 800045e:	f007 ffa1 	bl	80083a4 <siprintf>
				strcat( &X2, &str);
 8000462:	f107 0208 	add.w	r2, r7, #8
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f007 ffe5 	bl	800843c <strcat>
		for(uint8_t i=9; i<MaxLen; i++)
 8000472:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000476:	3301      	adds	r3, #1
 8000478:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800047c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000480:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000484:	429a      	cmp	r2, r3
 8000486:	d3bc      	bcc.n	8000402 <DisplayChekSchem+0x11e>
//				sprintf(&X1[i*2], "%d", Env->DataForTest[0][i]);
//				sprintf(&X2[i*2], "%d", Env->DataForTest[1][i]);
//				ST7735_DrawChar7x11(5+((i-9)*14),50, X1[i*2],TXT_COLOR,BGR_COLOR);
//				ST7735_DrawChar7x11(5+((i-9)*14),67, X2[i*2],TXT_COLOR,BGR_COLOR);
			}
		ST7735_DrawString7x11(7,50,&X1,TXT_COLOR,BGR_COLOR);
 8000488:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800048c:	2311      	movs	r3, #17
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000494:	2132      	movs	r1, #50	; 0x32
 8000496:	2007      	movs	r0, #7
 8000498:	f002 fdec 	bl	8003074 <ST7735_DrawString7x11>
		ST7735_DrawString7x11(7,67,&X2,TXT_COLOR,BGR_COLOR);
 800049c:	f107 020c 	add.w	r2, r7, #12
 80004a0:	2311      	movs	r3, #17
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80004a8:	2143      	movs	r1, #67	; 0x43
 80004aa:	2007      	movs	r0, #7
 80004ac:	f002 fde2 	bl	8003074 <ST7735_DrawString7x11>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3790      	adds	r7, #144	; 0x90
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	080095d8 	.word	0x080095d8

080004bc <DisplayTest>:

void DisplayTest(typeEnv *Env)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	char EncoderString[12] = "Test";
 80004c4:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <DisplayTest+0x48>)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ce:	6018      	str	r0, [r3, #0]
 80004d0:	3304      	adds	r3, #4
 80004d2:	7019      	strb	r1, [r3, #0]
 80004d4:	f107 0311 	add.w	r3, r7, #17
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f8c3 2003 	str.w	r2, [r3, #3]
	ST7735_Clear(BGR_COLOR);
 80004e0:	2011      	movs	r0, #17
 80004e2:	f002 fc81 	bl	8002de8 <ST7735_Clear>
	ST7735_DrawString7x11(1,1,EncoderString,TXT_COLOR,BGR_COLOR);
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	2311      	movs	r3, #17
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	f24f 73df 	movw	r3, #63455	; 0xf7df
 80004f2:	2101      	movs	r1, #1
 80004f4:	2001      	movs	r0, #1
 80004f6:	f002 fdbd 	bl	8003074 <ST7735_DrawString7x11>
}
 80004fa:	bf00      	nop
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	080095dc 	.word	0x080095dc

08000508 <DisplayResult>:

void DisplayResult(typeEnv *Env)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af02      	add	r7, sp, #8
 800050e:	6078      	str	r0, [r7, #4]
	char EncoderString[12] = "Result";
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <DisplayResult+0x4c>)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051a:	6018      	str	r0, [r3, #0]
 800051c:	3304      	adds	r3, #4
 800051e:	8019      	strh	r1, [r3, #0]
 8000520:	3302      	adds	r3, #2
 8000522:	0c0a      	lsrs	r2, r1, #16
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	f107 0313 	add.w	r3, r7, #19
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	711a      	strb	r2, [r3, #4]
	ST7735_Clear(BGR_COLOR);
 8000530:	2011      	movs	r0, #17
 8000532:	f002 fc59 	bl	8002de8 <ST7735_Clear>
	ST7735_DrawString7x11(1,1,EncoderString,TXT_COLOR,BGR_COLOR);
 8000536:	f107 020c 	add.w	r2, r7, #12
 800053a:	2311      	movs	r3, #17
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000542:	2101      	movs	r1, #1
 8000544:	2001      	movs	r0, #1
 8000546:	f002 fd95 	bl	8003074 <ST7735_DrawString7x11>
}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	080095e8 	.word	0x080095e8

08000558 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000562:	699a      	ldr	r2, [r3, #24]
 8000564:	4907      	ldr	r1, [pc, #28]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <LL_APB2_GRP1_EnableClock+0x2c>)
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4013      	ands	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29a      	uxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	611a      	str	r2, [r3, #16]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	615a      	str	r2, [r3, #20]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80005d8:	2010      	movs	r0, #16
 80005da:	f7ff ffbd 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80005de:	2020      	movs	r0, #32
 80005e0:	f7ff ffba 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff ffb7 	bl	8000558 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80005ea:	2008      	movs	r0, #8
 80005ec:	f7ff ffb4 	bl	8000558 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80005f0:	4936      	ldr	r1, [pc, #216]	; (80006cc <MX_GPIO_Init+0x108>)
 80005f2:	4837      	ldr	r0, [pc, #220]	; (80006d0 <MX_GPIO_Init+0x10c>)
 80005f4:	f7ff ffd7 	bl	80005a6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin|LCD_CS_Pin|IN_A_Pin
 80005f8:	4936      	ldr	r1, [pc, #216]	; (80006d4 <MX_GPIO_Init+0x110>)
 80005fa:	4837      	ldr	r0, [pc, #220]	; (80006d8 <MX_GPIO_Init+0x114>)
 80005fc:	f7ff ffd3 	bl	80005a6 <LL_GPIO_ResetOutputPin>
                          |IN_B_Pin|IN_C_Pin|IN_EN_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SD_CS_Pin|OUT_A_Pin|OUT_B_Pin|OUT_C_Pin
 8000600:	4936      	ldr	r1, [pc, #216]	; (80006dc <MX_GPIO_Init+0x118>)
 8000602:	4837      	ldr	r0, [pc, #220]	; (80006e0 <MX_GPIO_Init+0x11c>)
 8000604:	f7ff ffcf 	bl	80005a6 <LL_GPIO_ResetOutputPin>
                          |OUT_EN_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_GPIO_Init+0x108>)
 800060a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	482c      	ldr	r0, [pc, #176]	; (80006d0 <MX_GPIO_Init+0x10c>)
 800061e:	f003 f91f 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8000622:	f241 2312 	movw	r3, #4626	; 0x1212
 8000626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000634:	2301      	movs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4826      	ldr	r0, [pc, #152]	; (80006d8 <MX_GPIO_Init+0x114>)
 800063e:	f003 f90f 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_A0_Pin|IN_A_Pin|IN_B_Pin|IN_C_Pin
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0x120>)
 8000644:	607b      	str	r3, [r7, #4]
                          |IN_EN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x114>)
 8000658:	f003 f902 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800065c:	f240 2302 	movw	r3, #514	; 0x202
 8000660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000662:	2301      	movs	r3, #1
 8000664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x11c>)
 8000678:	f003 f8f2 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUT_OK_Pin|BUT_UP_Pin|BUT_DW_Pin;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_GPIO_Init+0x124>)
 800067e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000680:	2308      	movs	r3, #8
 8000682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <MX_GPIO_Init+0x11c>)
 800068e:	f003 f8e7 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|OUT_EN_Pin;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_GPIO_Init+0x128>)
 8000694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x11c>)
 80006a8:	f003 f8da 	bl	8003860 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x12c>)
 80006ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006b0:	2308      	movs	r3, #8
 80006b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_GPIO_Init+0x114>)
 80006be:	f003 f8cf 	bl	8003860 <LL_GPIO_Init>
//   for(uint8_t indx=0; indx<20; indx++)
//   {
//	   LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_0);
//   }

}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	04200020 	.word	0x04200020
 80006d0:	40011000 	.word	0x40011000
 80006d4:	04171a1f 	.word	0x04171a1f
 80006d8:	40010800 	.word	0x40010800
 80006dc:	04f002f2 	.word	0x04f002f2
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	0417081f 	.word	0x0417081f
 80006e8:	040c404c 	.word	0x040c404c
 80006ec:	04f000f0 	.word	0x04f000f0
 80006f0:	04800080 	.word	0x04800080

080006f4 <GPIO_WriteBit>:

/* USER CODE BEGIN 2 */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint8_t BitVal)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	71fb      	strb	r3, [r7, #7]
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//DWT_CYCCNT = 0;// обнуляем значение
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//BitVal ?  LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin) : LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin) ;
  if (BitVal != RESET)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d004      	beq.n	8000712 <GPIO_WriteBit+0x1e>
  {
    LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin);
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff3c 	bl	8000588 <LL_GPIO_SetOutputPin>
  }
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	//	   count_tic = DWT_CYCCNT;//смотрим сколько натикало
	/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

}
 8000710:	e003      	b.n	800071a <GPIO_WriteBit+0x26>
	  LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f7ff ff46 	bl	80005a6 <LL_GPIO_ResetOutputPin>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <LL_RCC_HSE_Enable+0x18>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <LL_RCC_HSE_Enable+0x18>)
 800072e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000

08000740 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LL_RCC_HSE_IsReady+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f023 0203 	bic.w	r2, r3, #3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	604b      	str	r3, [r1, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <LL_RCC_GetSysClkSource+0x14>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 030c 	and.w	r3, r3, #12
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000

080007a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007b4:	4904      	ldr	r1, [pc, #16]	; (80007c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	604b      	str	r3, [r1, #4]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	604b      	str	r3, [r1, #4]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <LL_RCC_PLL_Enable+0x18>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <LL_RCC_PLL_Enable+0x18>)
 8000826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_PLL_IsReady+0x20>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	430b      	orrs	r3, r1
 8000878:	4903      	ldr	r1, [pc, #12]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800087a:	4313      	orrs	r3, r2
 800087c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <LL_FLASH_SetLatency+0x24>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f023 0207 	bic.w	r2, r3, #7
 800089c:	4904      	ldr	r1, [pc, #16]	; (80008b0 <LL_FLASH_SetLatency+0x24>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	600b      	str	r3, [r1, #0]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <LL_FLASH_GetLatency+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0307 	and.w	r3, r3, #7
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40022000 	.word	0x40022000

080008cc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f043 0201 	orr.w	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	621a      	str	r2, [r3, #32]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <LL_GPIO_SetPinMode>:
{
 8000942:	b490      	push	{r4, r7}
 8000944:	b088      	sub	sp, #32
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	0e1b      	lsrs	r3, r3, #24
 8000956:	4413      	add	r3, r2
 8000958:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800095a:	6822      	ldr	r2, [r4, #0]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa93 f3a3 	rbit	r3, r3
 8000966:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	210f      	movs	r1, #15
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	61bb      	str	r3, [r7, #24]
  return result;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	6023      	str	r3, [r4, #0]
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc90      	pop	{r4, r7}
 80009a4:	4770      	bx	lr

080009a6 <LL_GPIO_SetPinPull>:
{
 80009a6:	b480      	push	{r7}
 80009a8:	b087      	sub	sp, #28
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	68da      	ldr	r2, [r3, #12]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	43db      	mvns	r3, r3
 80009bc:	401a      	ands	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa93 f3a3 	rbit	r3, r3
 80009ca:	613b      	str	r3, [r7, #16]
  return result;
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	408b      	lsls	r3, r1
 80009da:	431a      	orrs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80009fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a06:	6053      	str	r3, [r2, #4]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40010000 	.word	0x40010000

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8000a1a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS	FatFs; 	//Fatfs handle
	FRESULT resFS;
	char status[20] = "123456";
 8000a1c:	f107 0208 	add.w	r2, r7, #8
 8000a20:	49a5      	ldr	r1, [pc, #660]	; (8000cb8 <main+0x2a4>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	c903      	ldmia	r1, {r0, r1}
 8000a26:	6018      	str	r0, [r3, #0]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	8019      	strh	r1, [r3, #0]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	0c09      	lsrs	r1, r1, #16
 8000a30:	7019      	strb	r1, [r3, #0]
 8000a32:	1dd3      	adds	r3, r2, #7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	731a      	strb	r2, [r3, #12]
	uint8_t waitCHR[4]= {0x7C, 0x2F, 0x2D, 0x5C}, w_indx=0;//   / - \ |
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4a9e      	ldr	r2, [pc, #632]	; (8000cbc <main+0x2a8>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	Env.Menu.ActiveItem=0;
 8000a4c:	4b9c      	ldr	r3, [pc, #624]	; (8000cc0 <main+0x2ac>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Env.Menu.ActivePage=0;
 8000a54:	4b9a      	ldr	r3, [pc, #616]	; (8000cc0 <main+0x2ac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	Env.period=0;
 8000a5c:	4b98      	ldr	r3, [pc, #608]	; (8000cc0 <main+0x2ac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
	Env.pulse=0;
 8000a64:	4b96      	ldr	r3, [pc, #600]	; (8000cc0 <main+0x2ac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	Env.Mode = MENU;
 8000a6c:	4b94      	ldr	r3, [pc, #592]	; (8000cc0 <main+0x2ac>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	uint8_t mode = Env.Mode;
 8000a74:	4b92      	ldr	r3, [pc, #584]	; (8000cc0 <main+0x2ac>)
 8000a76:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000a7a:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	f_RefreshScreen = 1;
 8000a7e:	4b91      	ldr	r3, [pc, #580]	; (8000cc4 <main+0x2b0>)
 8000a80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000a8a:	f043 0314 	orr.w	r3, r3, #20
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2301      	movs	r3, #1
 8000a92:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f002 fc6e 	bl	8003374 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  		  SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;// разрешаем использовать DWT // измерение времени выполнения куска кода в машинных тиках
 8000a98:	4b8b      	ldr	r3, [pc, #556]	; (8000cc8 <main+0x2b4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a8a      	ldr	r2, [pc, #552]	; (8000cc8 <main+0x2b4>)
 8000a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa2:	6013      	str	r3, [r2, #0]
  		  DWT_CYCCNT = 0;// обнуляем значение
 8000aa4:	4b89      	ldr	r3, [pc, #548]	; (8000ccc <main+0x2b8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
  		  DWT_CONTROL|= DWT_CTRL_CYCCNTENA_Msk; // включаем счётчик
 8000aaa:	4b89      	ldr	r3, [pc, #548]	; (8000cd0 <main+0x2bc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a88      	ldr	r2, [pc, #544]	; (8000cd0 <main+0x2bc>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
  		/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f925 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff fd83 	bl	80005c4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000abe:	f7ff fb65 	bl	800018c <MX_CRC_Init>
  MX_SPI1_Init();
 8000ac2:	f000 fc6b 	bl	800139c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ac6:	f003 fe91 	bl	80047ec <MX_FATFS_Init>
  MX_TIM3_Init();
 8000aca:	f001 feb9 	bl	8002840 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ace:	f001 fda7 	bl	8002620 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ad2:	f001 fe45 	bl	8002760 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ad6:	f001 ff29 	bl	800292c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000ada:	2208      	movs	r2, #8
 8000adc:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ae0:	487c      	ldr	r0, [pc, #496]	; (8000cd4 <main+0x2c0>)
 8000ae2:	f7ff ff2e 	bl	8000942 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_UP);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000aec:	4879      	ldr	r0, [pc, #484]	; (8000cd4 <main+0x2c0>)
 8000aee:	f7ff ff5a 	bl	80009a6 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8000af2:	2208      	movs	r2, #8
 8000af4:	f242 0120 	movw	r1, #8224	; 0x2020
 8000af8:	4876      	ldr	r0, [pc, #472]	; (8000cd4 <main+0x2c0>)
 8000afa:	f7ff ff22 	bl	8000942 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f242 0120 	movw	r1, #8224	; 0x2020
 8000b04:	4873      	ldr	r0, [pc, #460]	; (8000cd4 <main+0x2c0>)
 8000b06:	f7ff ff4e 	bl	80009a6 <LL_GPIO_SetPinPull>
	LL_TIM_SetCounter(TIM3, 0x7fff);
 8000b0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b0e:	4872      	ldr	r0, [pc, #456]	; (8000cd8 <main+0x2c4>)
 8000b10:	f7ff fefa 	bl	8000908 <LL_TIM_SetCounter>
	LL_GPIO_AF_RemapPartial_TIM3();
 8000b14:	f7ff ff6a 	bl	80009ec <LL_GPIO_AF_RemapPartial_TIM3>
	LL_TIM_EnableCounter(TIM3);
 8000b18:	486f      	ldr	r0, [pc, #444]	; (8000cd8 <main+0x2c4>)
 8000b1a:	f7ff fee6 	bl	80008ea <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	486e      	ldr	r0, [pc, #440]	; (8000cdc <main+0x2c8>)
 8000b24:	f7ff fefd 	bl	8000922 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b2e:	f7ff fef8 	bl	8000922 <LL_TIM_CC_EnableChannel>
//	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
	LL_TIM_CC_EnableChannel(TIM4, LL_TIM_CHANNEL_CH2);
 8000b32:	2110      	movs	r1, #16
 8000b34:	486a      	ldr	r0, [pc, #424]	; (8000ce0 <main+0x2cc>)
 8000b36:	f7ff fef4 	bl	8000922 <LL_TIM_CC_EnableChannel>

	LL_TIM_EnableCounter(TIM1);
 8000b3a:	4868      	ldr	r0, [pc, #416]	; (8000cdc <main+0x2c8>)
 8000b3c:	f7ff fed5 	bl	80008ea <LL_TIM_EnableCounter>
//	LL_TIM_EnableCounter(TIM4);
	HAL_Delay(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b44:	f002 fc78 	bl	8003438 <HAL_Delay>
	LL_SPI_Enable(SPI1);// включить SPI после инициализации ДО иниц. FATFS
 8000b48:	4866      	ldr	r0, [pc, #408]	; (8000ce4 <main+0x2d0>)
 8000b4a:	f7ff febf 	bl	80008cc <LL_SPI_Enable>
	resFS = f_mount(&FatFs, "", 1); //Монтируем файловую систему до первого использования SPI дисплеем
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2201      	movs	r2, #1
 8000b54:	4964      	ldr	r1, [pc, #400]	; (8000ce8 <main+0x2d4>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 fdf0 	bl	800773c <f_mount>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d

	HAL_ST7735_Init();
 8000b62:	f001 ffb7 	bl	8002ad4 <HAL_ST7735_Init>

	if(resFS != FR_OK)
 8000b66:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d067      	beq.n	8000c3e <main+0x22a>
				{
				ST7735_Clear(DANGER_BGR_COLOR);
 8000b6e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000b72:	f002 f939 	bl	8002de8 <ST7735_Clear>
				sprintf(status, "SD card" );
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <main+0x2d8>)
 8000b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b80:	e883 0003 	stmia.w	r3, {r0, r1}
				ST7735_DrawString7x11(39,1, status,DANGER_TXT_COLOR,DANGER_BGR_COLOR);
 8000b84:	f107 0208 	add.w	r2, r7, #8
 8000b88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b92:	2101      	movs	r1, #1
 8000b94:	2027      	movs	r0, #39	; 0x27
 8000b96:	f002 fa6d 	bl	8003074 <ST7735_DrawString7x11>
				sprintf(status, "not find" );
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4a54      	ldr	r2, [pc, #336]	; (8000cf0 <main+0x2dc>)
 8000ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba2:	c303      	stmia	r3!, {r0, r1}
 8000ba4:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(27,LINE_HEIGTH*1, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000ba6:	f107 0208 	add.w	r2, r7, #8
 8000baa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	201b      	movs	r0, #27
 8000bb8:	f002 fa5c 	bl	8003074 <ST7735_DrawString7x11>
				sprintf(status, "Insert SD card" );
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <main+0x2e0>)
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc8:	c407      	stmia	r4!, {r0, r1, r2}
 8000bca:	8023      	strh	r3, [r4, #0]
 8000bcc:	3402      	adds	r4, #2
 8000bce:	0c1b      	lsrs	r3, r3, #16
 8000bd0:	7023      	strb	r3, [r4, #0]
				ST7735_DrawString7x11(8,LINE_HEIGTH*2, status, DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000bd2:	f107 0208 	add.w	r2, r7, #8
 8000bd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	211a      	movs	r1, #26
 8000be2:	2008      	movs	r0, #8
 8000be4:	f002 fa46 	bl	8003074 <ST7735_DrawString7x11>
				sprintf(status, "and reboot" );
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <main+0x2e4>)
 8000bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf0:	c303      	stmia	r3!, {r0, r1}
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	0c12      	lsrs	r2, r2, #16
 8000bf8:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(29,LINE_HEIGTH*3, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000bfa:	f107 0208 	add.w	r2, r7, #8
 8000bfe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c08:	2127      	movs	r1, #39	; 0x27
 8000c0a:	201d      	movs	r0, #29
 8000c0c:	f002 fa32 	bl	8003074 <ST7735_DrawString7x11>
				sprintf(status, "device" );
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <main+0x2e8>)
 8000c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1a:	6018      	str	r0, [r3, #0]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	8019      	strh	r1, [r3, #0]
 8000c20:	3302      	adds	r3, #2
 8000c22:	0c0a      	lsrs	r2, r1, #16
 8000c24:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString7x11(42,LINE_HEIGTH*4, status,DANGER_TXT_COLOR, DANGER_BGR_COLOR);
 8000c26:	f107 0208 	add.w	r2, r7, #8
 8000c2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	2134      	movs	r1, #52	; 0x34
 8000c36:	202a      	movs	r0, #42	; 0x2a
 8000c38:	f002 fa1c 	bl	8003074 <ST7735_DrawString7x11>
				while( 1);
 8000c3c:	e7fe      	b.n	8000c3c <main+0x228>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ST7735_Clear(BGR_COLOR);
 8000c3e:	2011      	movs	r0, #17
 8000c40:	f002 f8d2 	bl	8002de8 <ST7735_Clear>
	FS_GetFileList( &Env);
 8000c44:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <main+0x2ac>)
 8000c46:	f003 fdeb 	bl	8004820 <FS_GetFileList>
	Env.Menu.NmbrAllPages = (uint32_t)(Env.Menu.NmbrAllFiles/ITEM_ON_PAGE_MAX);
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <main+0x2ac>)
 8000c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c50:	4a2b      	ldr	r2, [pc, #172]	; (8000d00 <main+0x2ec>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	085b      	lsrs	r3, r3, #1
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <main+0x2ac>)
 8000c5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  while (1)
  {
	ReadKeyPad();
 8000c5e:	f000 fa15 	bl	800108c <ReadKeyPad>
	mode = Env.Mode;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <main+0x2ac>)
 8000c64:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000c68:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
	switch(mode)	// назначить действие в зависимости от текущего режима
 8000c6c:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8000c70:	3b01      	subs	r3, #1
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d81a      	bhi.n	8000cac <main+0x298>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <main+0x268>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000c95 	.word	0x08000c95
 8000c84:	08000c9d 	.word	0x08000c9d
 8000c88:	08000ca5 	.word	0x08000ca5
			{
				case MENU: 			Menu(&Env); 		break;
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <main+0x2ac>)
 8000c8e:	f000 f8ad 	bl	8000dec <Menu>
 8000c92:	e00c      	b.n	8000cae <main+0x29a>
				case CHECK_SCHEME: 	ChekSchem(&Env);  	break;
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <main+0x2ac>)
 8000c96:	f000 f96b 	bl	8000f70 <ChekSchem>
 8000c9a:	e008      	b.n	8000cae <main+0x29a>
				case TEST: 			Test(&Env);			break;
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <main+0x2ac>)
 8000c9e:	f000 fe57 	bl	8001950 <Test>
 8000ca2:	e004      	b.n	8000cae <main+0x29a>
				case RESULT: 		Result(&Env);		break;
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <main+0x2ac>)
 8000ca6:	f000 f9b9 	bl	800101c <Result>
 8000caa:	e000      	b.n	8000cae <main+0x29a>
					default: break;
 8000cac:	bf00      	nop
			}
	Display(&Env);
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <main+0x2ac>)
 8000cb0:	f7ff fa74 	bl	800019c <Display>
	ReadKeyPad();
 8000cb4:	e7d3      	b.n	8000c5e <main+0x24a>
 8000cb6:	bf00      	nop
 8000cb8:	08009630 	.word	0x08009630
 8000cbc:	08009644 	.word	0x08009644
 8000cc0:	20000260 	.word	0x20000260
 8000cc4:	20000404 	.word	0x20000404
 8000cc8:	e000edfc 	.word	0xe000edfc
 8000ccc:	e0001004 	.word	0xe0001004
 8000cd0:	e0001000 	.word	0xe0001000
 8000cd4:	40010c00 	.word	0x40010c00
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	40000800 	.word	0x40000800
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	080095f4 	.word	0x080095f4
 8000cec:	080095f8 	.word	0x080095f8
 8000cf0:	08009600 	.word	0x08009600
 8000cf4:	0800960c 	.word	0x0800960c
 8000cf8:	0800961c 	.word	0x0800961c
 8000cfc:	08009628 	.word	0x08009628
 8000d00:	38e38e39 	.word	0x38e38e39

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fdbf 	bl	800088c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000d0e:	bf00      	nop
 8000d10:	f7ff fdd0 	bl	80008b4 <LL_FLASH_GetLatency>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d1fa      	bne.n	8000d10 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000d1a:	f7ff fd03 	bl	8000724 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d1e:	bf00      	nop
 8000d20:	f7ff fd0e 	bl	8000740 <LL_RCC_HSE_IsReady>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1fa      	bne.n	8000d20 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000d2a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000d2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d32:	f7ff fd93 	bl	800085c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d36:	f7ff fd71 	bl	800081c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff fd7c 	bl	8000838 <LL_RCC_PLL_IsReady>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d1fa      	bne.n	8000d3c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fd2c 	bl	80007a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000d4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d50:	f7ff fd3c 	bl	80007cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fd4d 	bl	80007f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f7ff fd02 	bl	8000764 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d60:	bf00      	nop
 8000d62:	f7ff fd13 	bl	800078c <LL_RCC_GetSysClkSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d1fa      	bne.n	8000d62 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <SystemClock_Config+0x84>)
 8000d6e:	f003 fd2f 	bl	80047d0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	2000      	movs	r0, #0
 8000d74:	f002 fb14 	bl	80033a0 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d7e:	f000 f805 	bl	8000d8c <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	044aa200 	.word	0x044aa200

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <Error_Handler+0x6>

08000d94 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <LL_TIM_GetCounter>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <LL_GPIO_IsInputPinSet>:
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <Menu>:
const uint16_t  COLORS565[140] = {0xF7DF, 0xFF5A, 0x07FF, 0x7FFA, 0xF7FF, 0xF7BB, 0xFF38, 0x0, 0xFF59, 0x001F, 0x895C, 0xA145, 0xDDD0, 0x5CF4, 0x7FE0, 0xD343, 0xFBEA, 0x64BD, 0xFFDB, 0xD8A7, 0x07FF, 0x11, 0x451, 0xBC21, 0xAD55, 0x320, 0xBDAD, 0x8811, 0x5345, 0xFC60, 0x9999, 0x8800, 0xECAF, 0x8DF1, 0x49F1, 0x2A69, 0x067A, 0x901A, 0xF8B2, 0x05FF, 0x6B4D, 0x1C9F, 0xB104, 0xFFDE, 0x2444, 0xF81F, 0xDEFB, 0xFFDF, 0xFEA0, 0xDD24, 0x8410, 0x400, 0xAFE5, 0xF7FE, 0xFB56, 0xCAEB, 0x4810, 0xFFFE, 0xF731, 0xE73F, 0xFF9E, 0x7FE0, 0xFFD9, 0xAEDC, 0xF410, 0xE7FF, 0xFFDA, 0xD69A, 0x9772, 0xFDB8, 0xFD0F, 0x2595, 0x867F, 0x7453, 0xB63B, 0xFFFC, 0x7, 0x3666, 0xFF9C, 0xF81F, 0x8000, 0x6675, 0x19, 0xBABA, 0x939B, 0x3D8E, 0x7B5D, 0x07D3, 0x4E99, 0xC0B0, 0x18CE, 0xF7FF, 0xFF3C, 0xFF36, 0xFEF5, 0x10, 0xFFBC, 0x8400, 0x6C64, 0xFD20, 0xFA20, 0xDB9A, 0xEF55, 0x9FD3, 0xAF7D, 0xDB92, 0xFF7A, 0xFED7, 0xCC27, 0xFE19, 0xDD1B, 0xB71C, 0x8010, 0xF800, 0xBC71, 0x435C, 0x8A22, 0xFC0E, 0xF52C, 0x2C4A, 0xFFBD, 0xA285, 0xC618, 0x867D, 0x6AD9, 0x7412, 0xFFDF, 0x07EF, 0x4416, 0xD5B1, 0x410, 0xDDFB, 0xFB08, 0x471A, 0xEC1D, 0xF6F6, 0xFFFF, 0xF7BE, 0xFFE0, 0x9E66 };



void Menu(typeEnv *Env)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000df8:	60bb      	str	r3, [r7, #8]
	short int ActiveItem = (*Env).Menu.ActiveItem; // ActiveItem сделать указателем
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8000e00:	81fb      	strh	r3, [r7, #14]
	short int ActivePage = (*Env).Menu.ActivePage; // ActivePage оставить переменной
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000e08:	81bb      	strh	r3, [r7, #12]

	if(f_StepMenu != 0) // если необходимо перемещение по меню
 8000e0a:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <Menu+0x180>)
 8000e0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e10:	015b      	lsls	r3, r3, #5
 8000e12:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d078      	beq.n	8000f12 <Menu+0x126>
	{
		f_StepMenu = 0;
 8000e20:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <Menu+0x180>)
 8000e22:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	461a      	mov	r2, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	6013      	str	r3, [r2, #0]
		f_RefreshScreen = 1;				// перерисуй экран
 8000e36:	4b4d      	ldr	r3, [pc, #308]	; (8000f6c <Menu+0x180>)
 8000e38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e3c:	015b      	lsls	r3, r3, #5
 8000e3e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e42:	f043 0314 	orr.w	r3, r3, #20
 8000e46:	461a      	mov	r2, r3
 8000e48:	2301      	movs	r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]
		if(f_DirStepMenu == 0)				//двигаемся вверх по меню
 8000e4c:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <Menu+0x180>)
 8000e4e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e52:	015b      	lsls	r3, r3, #5
 8000e54:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000e58:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <Menu+0xa8>
		{
			ActiveItem--;
 8000e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem < 0)
 8000e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da2c      	bge.n	8000ed0 <Menu+0xe4>
			{
				ActiveItem = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	81fb      	strh	r3, [r7, #14]
				ActivePage--;
 8000e7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	81bb      	strh	r3, [r7, #12]
				if(ActivePage < 0) {ActivePage = 0;}
 8000e86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da20      	bge.n	8000ed0 <Menu+0xe4>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	81bb      	strh	r3, [r7, #12]
 8000e92:	e01d      	b.n	8000ed0 <Menu+0xe4>
			}
		}
		else // двигаемся вниз по меню
		{
			ActiveItem++;
 8000e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	81fb      	strh	r3, [r7, #14]
			if(ActiveItem >= end_list)
 8000ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d812      	bhi.n	8000ed0 <Menu+0xe4>
				{
				ActiveItem = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	81fb      	strh	r3, [r7, #14]
				ActivePage++;
 8000eae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	81bb      	strh	r3, [r7, #12]
				if(ActivePage > Env->Menu.NmbrAllPages) {ActivePage = Env->Menu.NmbrAllPages;}
 8000eba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d903      	bls.n	8000ed0 <Menu+0xe4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ece:	81bb      	strh	r3, [r7, #12]
				}
		}
		if(ActivePage != (*Env).Menu.ActivePage)	// при переходе на новую страницу меню
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8000ed6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d009      	beq.n	8000ef2 <Menu+0x106>
				{
					(*Env).Menu.ActivePage = ActivePage;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	89ba      	ldrh	r2, [r7, #12]
 8000ee2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
					FS_GetFileList(Env);			// получи новый список файлов
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f003 fc9a 	bl	8004820 <FS_GetFileList>
					ST7735_Clear(BGR_COLOR);
 8000eec:	2011      	movs	r0, #17
 8000eee:	f001 ff7b 	bl	8002de8 <ST7735_Clear>
				}
				//EncoderCount = currentCount;
		(*Env).Menu.ActiveItem = ActiveItem;	// ActiveItem сделать указателем
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		(*Env).FileNameForTest = Env->Menu.FileList[ActiveItem];
 8000efa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	if(f_Action !=0)    // если нужно действие в меню (кнопка OK!)
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <Menu+0x180>)
 8000f14:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f18:	015b      	lsls	r3, r3, #5
 8000f1a:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f1e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01c      	beq.n	8000f62 <Menu+0x176>
	{
		f_Action =0;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <Menu+0x180>)
 8000f2a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f34:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	6013      	str	r3, [r2, #0]

		FS_ReadFile(Env);			// прочитать выделенный файл
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f003 fd1a 	bl	8004978 <FS_ReadFile>
		(*Env).Mode = CHECK_SCHEME;	// перейти в режим проверки схемы соединений
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2202      	movs	r2, #2
 8000f48:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		f_RefreshScreen = 1;				// перерисуй экран
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <Menu+0x180>)
 8000f4e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f58:	f043 0314 	orr.w	r3, r3, #20
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2301      	movs	r3, #1
 8000f60:	6013      	str	r3, [r2, #0]
	}
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000404 	.word	0x20000404

08000f70 <ChekSchem>:

void ChekSchem(typeEnv *Env)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(f_StepMenu != 0) // если вверх или вниз, направление не важно
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <ChekSchem+0xa8>)
 8000f7a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f7e:	015b      	lsls	r3, r3, #5
 8000f80:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d019      	beq.n	8000fc2 <ChekSchem+0x52>
		{
			f_StepMenu = 0;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <ChekSchem+0xa8>)
 8000f90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6013      	str	r3, [r2, #0]
			(*Env).Mode = MENU;	// перейти в режим меню
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			f_RefreshScreen = 1;				// перерисуй экран
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <ChekSchem+0xa8>)
 8000fae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fb8:	f043 0314 	orr.w	r3, r3, #20
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]
		}
	if(f_Action !=0)    // если нужно действие
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <ChekSchem+0xa8>)
 8000fc4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fc8:	015b      	lsls	r3, r3, #5
 8000fca:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fce:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d019      	beq.n	800100c <ChekSchem+0x9c>
		{
			f_Action = 0;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <ChekSchem+0xa8>)
 8000fda:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fe4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	6013      	str	r3, [r2, #0]
			(*Env).Mode = TEST;	// перейти в режим ТЕСТ
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			f_RefreshScreen = 1;				// перерисуй экран
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <ChekSchem+0xa8>)
 8000ff8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001002:	f043 0314 	orr.w	r3, r3, #20
 8001006:	461a      	mov	r2, r3
 8001008:	2301      	movs	r3, #1
 800100a:	6013      	str	r3, [r2, #0]


	/* процедура проверки схемы*/


}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000404 	.word	0x20000404

0800101c <Result>:


void Result(typeEnv *Env)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if(f_StepMenu != 0) // если вверх или вниз
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <Result+0x6c>)
 8001026:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <Result+0x34>
		{
			f_StepMenu = 0;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <Result+0x6c>)
 800103c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	461a      	mov	r2, r3
 800104c:	2300      	movs	r3, #0
 800104e:	6013      	str	r3, [r2, #0]

		}
	if(f_Action !=0)    // если нужно действие
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <Result+0x6c>)
 8001052:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001056:	015b      	lsls	r3, r3, #5
 8001058:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800105c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <Result+0x60>
		{
			f_Action =0;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <Result+0x6c>)
 8001068:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800106c:	015b      	lsls	r3, r3, #5
 800106e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001072:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001076:	461a      	mov	r2, r3
 8001078:	2300      	movs	r3, #0
 800107a:	6013      	str	r3, [r2, #0]

		}
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000404 	.word	0x20000404

0800108c <ReadKeyPad>:

/* Чтение состояние кнопок и энкодера*/
void ReadKeyPad(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	static uint16_t LastEncCount=0;
	uint16_t CurrEncCount=LL_TIM_GetCounter(TIM3);
 8001092:	4840      	ldr	r0, [pc, #256]	; (8001194 <ReadKeyPad+0x108>)
 8001094:	f7ff fe88 	bl	8000da8 <LL_TIM_GetCounter>
 8001098:	4603      	mov	r3, r0
 800109a:	80fb      	strh	r3, [r7, #6]
	static uint8_t but_latch=0, but_press=0, key=0;
	uint8_t but_OK=0, but_DWN=0, but_UP=0, but_ENC=0;
 800109c:	2300      	movs	r3, #0
 800109e:	717b      	strb	r3, [r7, #5]
 80010a0:	2300      	movs	r3, #0
 80010a2:	713b      	strb	r3, [r7, #4]
 80010a4:	2300      	movs	r3, #0
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	2300      	movs	r3, #0
 80010aa:	70bb      	strb	r3, [r7, #2]

	if(f_ReadKeyPad !=0)	// по таймеру
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <ReadKeyPad+0x10c>)
 80010ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010b8:	f043 0318 	orr.w	r3, r3, #24
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d064      	beq.n	800118c <ReadKeyPad+0x100>
	{
		f_ReadKeyPad =0;
 80010c2:	4b35      	ldr	r3, [pc, #212]	; (8001198 <ReadKeyPad+0x10c>)
 80010c4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80010ce:	f043 0318 	orr.w	r3, r3, #24
 80010d2:	461a      	mov	r2, r3
 80010d4:	2300      	movs	r3, #0
 80010d6:	6013      	str	r3, [r2, #0]
		but_ENC = LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin)<<3;
 80010d8:	4930      	ldr	r1, [pc, #192]	; (800119c <ReadKeyPad+0x110>)
 80010da:	4831      	ldr	r0, [pc, #196]	; (80011a0 <ReadKeyPad+0x114>)
 80010dc:	f7ff fe6f 	bl	8000dbe <LL_GPIO_IsInputPinSet>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	70bb      	strb	r3, [r7, #2]
		but_UP  = LL_GPIO_IsInputPinSet(BUT_UP_GPIO_Port, BUT_UP_Pin)<<2;
 80010e8:	492e      	ldr	r1, [pc, #184]	; (80011a4 <ReadKeyPad+0x118>)
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <ReadKeyPad+0x11c>)
 80010ec:	f7ff fe67 	bl	8000dbe <LL_GPIO_IsInputPinSet>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	70fb      	strb	r3, [r7, #3]
		but_OK  = LL_GPIO_IsInputPinSet(BUT_OK_GPIO_Port, BUT_OK_Pin)<<1;
 80010f8:	492c      	ldr	r1, [pc, #176]	; (80011ac <ReadKeyPad+0x120>)
 80010fa:	482b      	ldr	r0, [pc, #172]	; (80011a8 <ReadKeyPad+0x11c>)
 80010fc:	f7ff fe5f 	bl	8000dbe <LL_GPIO_IsInputPinSet>
 8001100:	4603      	mov	r3, r0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	717b      	strb	r3, [r7, #5]
		but_DWN = LL_GPIO_IsInputPinSet(BUT_DW_GPIO_Port,BUT_DW_Pin);
 8001108:	f244 0140 	movw	r1, #16448	; 0x4040
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <ReadKeyPad+0x11c>)
 800110e:	f7ff fe56 	bl	8000dbe <LL_GPIO_IsInputPinSet>
 8001112:	4603      	mov	r3, r0
 8001114:	713b      	strb	r3, [r7, #4]
		but_latch = but_ENC | but_UP | but_OK | but_DWN;
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	4313      	orrs	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	4313      	orrs	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	793b      	ldrb	r3, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <ReadKeyPad+0x124>)
 800112c:	701a      	strb	r2, [r3, #0]

		if(but_latch !=0xF)
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <ReadKeyPad+0x124>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	d007      	beq.n	8001146 <ReadKeyPad+0xba>
		{
			but_press=1;						// фиксируем нажатие
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <ReadKeyPad+0x128>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			key = but_latch;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <ReadKeyPad+0x124>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <ReadKeyPad+0x12c>)
 8001142:	701a      	strb	r2, [r3, #0]
		{
			Encoder_handler(LastEncCount, CurrEncCount );		// обработка поворота энкодера
			LastEncCount = CurrEncCount;
		}
	}
}
 8001144:	e022      	b.n	800118c <ReadKeyPad+0x100>
		else if( but_latch==0xF &&  but_press == 1)
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <ReadKeyPad+0x124>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	d10f      	bne.n	800116e <ReadKeyPad+0xe2>
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <ReadKeyPad+0x128>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10b      	bne.n	800116e <ReadKeyPad+0xe2>
			Keyboard_handler(key);		// обработка нажатия после отпускания
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <ReadKeyPad+0x12c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f86c 	bl	8001238 <Keyboard_handler>
			but_press=0;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <ReadKeyPad+0x128>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
			key=0;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <ReadKeyPad+0x12c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
}
 800116c:	e00e      	b.n	800118c <ReadKeyPad+0x100>
		else if(CurrEncCount != LastEncCount)
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <ReadKeyPad+0x130>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	429a      	cmp	r2, r3
 8001176:	d009      	beq.n	800118c <ReadKeyPad+0x100>
			Encoder_handler(LastEncCount, CurrEncCount );		// обработка поворота энкодера
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <ReadKeyPad+0x130>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f89b 	bl	80012bc <Encoder_handler>
			LastEncCount = CurrEncCount;
 8001186:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <ReadKeyPad+0x130>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	8013      	strh	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40000400 	.word	0x40000400
 8001198:	20000404 	.word	0x20000404
 800119c:	04800080 	.word	0x04800080
 80011a0:	40010800 	.word	0x40010800
 80011a4:	04080008 	.word	0x04080008
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	04040004 	.word	0x04040004
 80011b0:	2000021e 	.word	0x2000021e
 80011b4:	2000021f 	.word	0x2000021f
 80011b8:	20000220 	.word	0x20000220
 80011bc:	20000222 	.word	0x20000222

080011c0 <StepUP>:



void StepUP(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	f_DirStepMenu=0; f_StepMenu = 1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <StepUP+0x38>)
 80011c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011ca:	015b      	lsls	r3, r3, #5
 80011cc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011d0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011d4:	461a      	mov	r2, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <StepUP+0x38>)
 80011dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	461a      	mov	r2, r3
 80011ec:	2301      	movs	r3, #1
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000404 	.word	0x20000404

080011fc <StepDOWN>:

void StepDOWN(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	f_DirStepMenu=1; f_StepMenu = 1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <StepDOWN+0x38>)
 8001202:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800120c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8001210:	461a      	mov	r2, r3
 8001212:	2301      	movs	r3, #1
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <StepDOWN+0x38>)
 8001218:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	461a      	mov	r2, r3
 8001228:	2301      	movs	r3, #1
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000404 	.word	0x20000404

08001238 <Keyboard_handler>:

void Keyboard_handler(uint8_t key)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
//	char String[8]={0};
//	sprintf(&String, "%X", key);
//	ST7735_DrawString7x11(100,92,String,TXT_COLOR,BGR_COLOR);
	switch(key)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	3b07      	subs	r3, #7
 8001246:	2b07      	cmp	r3, #7
 8001248:	d830      	bhi.n	80012ac <Keyboard_handler+0x74>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <Keyboard_handler+0x18>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001295 	.word	0x08001295
 8001254:	080012ad 	.word	0x080012ad
 8001258:	080012ad 	.word	0x080012ad
 800125c:	080012ad 	.word	0x080012ad
 8001260:	08001271 	.word	0x08001271
 8001264:	080012ad 	.word	0x080012ad
 8001268:	08001277 	.word	0x08001277
 800126c:	0800128f 	.word	0x0800128f
	{
	case UP: 		StepUP(); break;
 8001270:	f7ff ffa6 	bl	80011c0 <StepUP>
 8001274:	e01b      	b.n	80012ae <Keyboard_handler+0x76>
	case OK: 		f_Action = 1; break;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <Keyboard_handler+0x80>)
 8001278:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001282:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001286:	461a      	mov	r2, r3
 8001288:	2301      	movs	r3, #1
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e00f      	b.n	80012ae <Keyboard_handler+0x76>
	case DOWN: 		StepDOWN(); break;
 800128e:	f7ff ffb5 	bl	80011fc <StepDOWN>
 8001292:	e00c      	b.n	80012ae <Keyboard_handler+0x76>
	case ENC_BUT: 	f_Action = 1; break;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <Keyboard_handler+0x80>)
 8001296:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800129a:	015b      	lsls	r3, r3, #5
 800129c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80012a0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80012a4:	461a      	mov	r2, r3
 80012a6:	2301      	movs	r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e000      	b.n	80012ae <Keyboard_handler+0x76>
		default: break;
 80012ac:	bf00      	nop
	}
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000404 	.word	0x20000404

080012bc <Encoder_handler>:

void Encoder_handler(uint16_t LastCount, uint16_t CurrCount )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	80fb      	strh	r3, [r7, #6]
 80012c8:	4613      	mov	r3, r2
 80012ca:	80bb      	strh	r3, [r7, #4]
	if( LastCount > CurrCount)
 80012cc:	88fa      	ldrh	r2, [r7, #6]
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d902      	bls.n	80012da <Encoder_handler+0x1e>
	{
		StepDOWN();
 80012d4:	f7ff ff92 	bl	80011fc <StepDOWN>
	}
	else
	{
		StepUP();
	}
}
 80012d8:	e001      	b.n	80012de <Encoder_handler+0x22>
		StepUP();
 80012da:	f7ff ff71 	bl	80011c0 <StepUP>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <LL_APB2_GRP1_EnableClock>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b02      	cmp	r3, #2
 800134e:	d101      	bne.n	8001354 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	b2db      	uxtb	r3, r3
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	330c      	adds	r3, #12
 8001388:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	2228      	movs	r2, #40	; 0x28
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fff1 	bl	8008392 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80013be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013c2:	f7ff ff91 	bl	80012e8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80013c6:	2004      	movs	r0, #4
 80013c8:	f7ff ff8e 	bl	80012e8 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 80013cc:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 80013d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d2:	2309      	movs	r3, #9
 80013d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <MX_SPI1_Init+0xa0>)
 80013e4:	f002 fa3c 	bl	8003860 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80013e8:	f244 0340 	movw	r3, #16448	; 0x4040
 80013ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80013ee:	2304      	movs	r3, #4
 80013f0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_SPI1_Init+0xa0>)
 80013f8:	f002 fa32 	bl	8003860 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001400:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001404:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8001418:	2330      	movs	r3, #48	; 0x30
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001424:	230a      	movs	r3, #10
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_SPI1_Init+0xa4>)
 8001430:	f002 fb10 	bl	8003a54 <LL_SPI_Init>

}
 8001434:	bf00      	nop
 8001436:	3740      	adds	r7, #64	; 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010800 	.word	0x40010800
 8001440:	40013000 	.word	0x40013000

08001444 <LL_SPI_TransmitReceive>:

/* USER CODE BEGIN 1 */
uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	while(	LL_SPI_IsActiveFlag_TXE(SPIx) == RESET	);
 8001450:	bf00      	nop
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff72 	bl	800133c <LL_SPI_IsActiveFlag_TXE>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f9      	beq.n	8001452 <LL_SPI_TransmitReceive+0xe>
	LL_SPI_TransmitData8(SPIx, TxByte);
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff88 	bl	8001378 <LL_SPI_TransmitData8>

	while(	LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET	);
 8001468:	bf00      	nop
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff54 	bl	8001318 <LL_SPI_IsActiveFlag_RXNE>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f9      	beq.n	800146a <LL_SPI_TransmitReceive+0x26>
	return LL_SPI_ReceiveData8(SPIx);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff72 	bl	8001360 <LL_SPI_ReceiveData8>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_MspInit+0x5c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_MspInit+0x5c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_MspInit+0x60>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_MspInit+0x60>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000

080014ec <LL_TIM_SetCounter>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_TIM_OC_GetCompareCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f06f 0201 	mvn.w	r2, #1
 8001540:	611a      	str	r2, [r3, #16]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f06f 0202 	mvn.w	r2, #2
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d101      	bne.n	80015a2 <LL_TIM_IsActiveFlag_CC1+0x18>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_TIM_IsActiveFlag_CC1+0x1a>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <HardFault_Handler+0x4>

080015ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <BusFault_Handler+0x4>

080015c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f001 ff04 	bl	8003400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_1ms();
 80015f8:	f000 f856 	bl	80016a8 <timer_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1))
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <TIM1_TRG_COM_IRQHandler+0x1c>)
 8001606:	f7ff ffa1 	bl	800154c <LL_TIM_IsActiveFlag_UPDATE>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <TIM1_TRG_COM_IRQHandler+0x16>
		{
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM1_TRG_COM_IRQHandler+0x1c>)
 8001612:	f7ff ff8e 	bl	8001532 <LL_TIM_ClearFlag_UPDATE>
		}
  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012c00 	.word	0x40012c00

08001620 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
extern uint16_t Pulse, Period, N_periods;
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM2))
 8001624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001628:	f7ff ffaf 	bl	800158a <LL_TIM_IsActiveFlag_CC1>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d022      	beq.n	8001678 <TIM2_IRQHandler+0x58>
		{
			LL_TIM_ClearFlag_CC1(TIM2);
 8001632:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001636:	f7ff ff9b 	bl	8001570 <LL_TIM_ClearFlag_CC1>
			Period += LL_TIM_OC_GetCompareCH1(TIM2);
 800163a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800163e:	f7ff ff62 	bl	8001506 <LL_TIM_OC_GetCompareCH1>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <TIM2_IRQHandler+0x5c>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <TIM2_IRQHandler+0x5c>)
 8001650:	801a      	strh	r2, [r3, #0]
			Pulse  = LL_TIM_OC_GetCompareCH2(TIM2);
 8001652:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001656:	f7ff ff61 	bl	800151c <LL_TIM_OC_GetCompareCH2>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <TIM2_IRQHandler+0x60>)
 8001660:	801a      	strh	r2, [r3, #0]
			N_periods++;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <TIM2_IRQHandler+0x64>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <TIM2_IRQHandler+0x64>)
 800166c:	801a      	strh	r2, [r3, #0]
			LL_TIM_SetCounter(TIM2, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001674:	f7ff ff3a 	bl	80014ec <LL_TIM_SetCounter>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000021a 	.word	0x2000021a
 8001680:	20000218 	.word	0x20000218
 8001684:	2000021c 	.word	0x2000021c

08001688 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4) == 1)
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <TIM4_IRQHandler+0x1c>)
 800168e:	f7ff ff5d 	bl	800154c <LL_TIM_IsActiveFlag_UPDATE>
 8001692:	4603      	mov	r3, r0
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <TIM4_IRQHandler+0x16>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM4_IRQHandler+0x1c>)
 800169a:	f7ff ff4a 	bl	8001532 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40000800 	.word	0x40000800

080016a8 <timer_1ms>:

/* USER CODE BEGIN 1 */
void timer_1ms(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	if (    (f_1ms = !f_1ms)==0        )
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <timer_1ms+0x38>)
 80016ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016b2:	015b      	lsls	r3, r3, #5
 80016b4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf0c      	ite	eq
 80016be:	2301      	moveq	r3, #1
 80016c0:	2300      	movne	r3, #0
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <timer_1ms+0x38>)
 80016c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <timer_1ms+0x34>
	  {
	   Flags_1ms();
 80016d8:	f000 f804 	bl	80016e4 <Flags_1ms>
	  }
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000404 	.word	0x20000404

080016e4 <Flags_1ms>:

void Flags_1ms(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	f_1ms = 1; // user flag every 1 ms
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <Flags_1ms+0x38>)
 80016ea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80016f4:	461a      	mov	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	6013      	str	r3, [r2, #0]


	  if (--t_10ms == 0x00)
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <Flags_1ms+0x3c>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <Flags_1ms+0x3c>)
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <Flags_1ms+0x3c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <Flags_1ms+0x34>
	    {
	      t_10ms = cl_ms10;
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <Flags_1ms+0x3c>)
 8001710:	220a      	movs	r2, #10
 8001712:	801a      	strh	r2, [r3, #0]
	      Flags_10msec();
 8001714:	f000 f806 	bl	8001724 <Flags_10msec>
	    }
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000404 	.word	0x20000404
 8001720:	20000000 	.word	0x20000000

08001724 <Flags_10msec>:

void Flags_10msec()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	f_10ms = 1;		// user flag every 10 ms
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <Flags_10msec+0x54>)
 800172a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6013      	str	r3, [r2, #0]
	f_ReadKeyPad=1;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <Flags_10msec+0x54>)
 8001740:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800174a:	f043 0318 	orr.w	r3, r3, #24
 800174e:	461a      	mov	r2, r3
 8001750:	2301      	movs	r3, #1
 8001752:	6013      	str	r3, [r2, #0]
	  if (--t_100ms == 0x00)
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <Flags_10msec+0x58>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <Flags_10msec+0x58>)
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <Flags_10msec+0x58>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <Flags_10msec+0x4e>
		{
		  t_100ms = cl_ms100;
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <Flags_10msec+0x58>)
 800176a:	220a      	movs	r2, #10
 800176c:	801a      	strh	r2, [r3, #0]
		  Flags_100ms();
 800176e:	f000 f807 	bl	8001780 <Flags_100ms>
		}
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000404 	.word	0x20000404
 800177c:	20000002 	.word	0x20000002

08001780 <Flags_100ms>:

void Flags_100ms(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	f_100ms = 1;		// user flag every 100 ms
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <Flags_100ms+0x3c>)
 8001786:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	461a      	mov	r2, r3
 8001796:	2301      	movs	r3, #1
 8001798:	6013      	str	r3, [r2, #0]
	//f_EncoderRead = 1;
	  if (--t_sec == 0x00)
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <Flags_100ms+0x40>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <Flags_100ms+0x40>)
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <Flags_100ms+0x40>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <Flags_100ms+0x38>
		{
		  t_sec = cl_sec;
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <Flags_100ms+0x40>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	801a      	strh	r2, [r3, #0]
		  Flags_1s();
 80017b4:	f000 f806 	bl	80017c4 <Flags_1s>
		}
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000404 	.word	0x20000404
 80017c0:	20000004 	.word	0x20000004

080017c4 <Flags_1s>:

void Flags_1s(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	f_1sec = 1;		// user flag every 1 sec
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <Flags_1s+0x54>)
 80017ca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017ce:	015b      	lsls	r3, r3, #5
 80017d0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017d4:	f043 030c 	orr.w	r3, r3, #12
 80017d8:	461a      	mov	r2, r3
 80017da:	2301      	movs	r3, #1
 80017dc:	6013      	str	r3, [r2, #0]

	if (--t_min == 0x00)
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <Flags_1s+0x58>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <Flags_1s+0x58>)
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <Flags_1s+0x58>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10d      	bne.n	800180e <Flags_1s+0x4a>
			{
				f_1min = 1;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <Flags_1s+0x54>)
 80017f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	461a      	mov	r2, r3
 8001804:	2301      	movs	r3, #1
 8001806:	6013      	str	r3, [r2, #0]
				t_min = cl_min;
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <Flags_1s+0x58>)
 800180a:	223c      	movs	r2, #60	; 0x3c
 800180c:	801a      	strh	r2, [r3, #0]

			}
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000404 	.word	0x20000404
 800181c:	20000006 	.word	0x20000006

08001820 <_sbrk>:
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
 8001850:	f006 fd5c 	bl	800830c <__errno>
 8001854:	4602      	mov	r2, r0
 8001856:	230c      	movs	r3, #12
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20005000 	.word	0x20005000
 8001880:	00000400 	.word	0x00000400
 8001884:	20000224 	.word	0x20000224
 8001888:	20000880 	.word	0x20000880

0800188c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_TIM_EnableCounter>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_TIM_DisableCounter>:
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0201 	bic.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_TIM_ClearFlag_UPDATE>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f06f 0201 	mvn.w	r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <LL_TIM_IsActiveFlag_UPDATE>:
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f043 0202 	orr.w	r2, r3, #2
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <LL_TIM_DisableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_DisableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f023 0202 	bic.w	r2, r3, #2
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <Test>:
void DrawTable(typeEnv *Env, uint8_t res);

extern uint16_t Pulse, Period, N_periods;

void Test(typeEnv *Env)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	static uint8_t addr=0;
	if(f_StepMenu != 0) // если вверх или вниз
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <Test+0xd0>)
 800195a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <Test+0x52>
		{
			f_StepMenu = 0;
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <Test+0xd0>)
 8001970:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800197a:	f043 0320 	orr.w	r3, r3, #32
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6013      	str	r3, [r2, #0]
			(*Env).Mode = CHECK_SCHEME;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

			f_RefreshScreen = 1;				// перерисуй экран
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <Test+0xd0>)
 800198e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001992:	015b      	lsls	r3, r3, #5
 8001994:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001998:	f043 0314 	orr.w	r3, r3, #20
 800199c:	461a      	mov	r2, r3
 800199e:	2301      	movs	r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
		}
	if(f_Action !=0)    // если нужно действие
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <Test+0xd0>)
 80019a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019a8:	015b      	lsls	r3, r3, #5
 80019aa:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019ae:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d015      	beq.n	80019e4 <Test+0x94>
		{
			f_Action =0;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <Test+0xd0>)
 80019ba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019c4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80019c8:	461a      	mov	r2, r3
 80019ca:	2300      	movs	r3, #0
 80019cc:	6013      	str	r3, [r2, #0]
			f_StartTest	= 1;// запустить тест
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <Test+0xd0>)
 80019d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019d4:	015b      	lsls	r3, r3, #5
 80019d6:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019da:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
		}


	if(f_StartTest	== 1)
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <Test+0xd0>)
 80019e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80019f0:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <Test+0xc6>
	{
		f_StartTest = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <Test+0xd0>)
 80019fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001a06:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
		/* сам тест*/
		TestProsed(Env);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f807 	bl	8001a24 <TestProsed>

	}
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000404 	.word	0x20000404

08001a24 <TestProsed>:
 *
 *
 * **********************************/

void TestProsed(typeEnv *Env)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0c6      	sub	sp, #280	; 0x118
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	6018      	str	r0, [r3, #0]
	uint16_t X1[8][8] = {0}, X2[8][8] = {0};
 8001a2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f006 fcab 	bl	8008392 <memset>
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	461a      	mov	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f006 fca3 	bl	8008392 <memset>
	uint16_t in_addr=0, out_addr=0, n_line=0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	uint16_t check=0, indx=0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	LL_TIM_EnableIT_CC1(TIM2); // захват принятого сигнала
 8001a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a6e:	f7ff ff50 	bl	8001912 <LL_TIM_EnableIT_CC1>

	//LL_TIM_EnableCounter(TIM1);// генерация тестового сигнала
	LL_TIM_ClearFlag_UPDATE(TIM4);
 8001a72:	48a3      	ldr	r0, [pc, #652]	; (8001d00 <TestProsed+0x2dc>)
 8001a74:	f7ff ff2e 	bl	80018d4 <LL_TIM_ClearFlag_UPDATE>
	memset(X1, 0, sizeof(X1));
 8001a78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f006 fc86 	bl	8008392 <memset>
	memset(X2, 0, sizeof(X2));
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 fc7f 	bl	8008392 <memset>
	memset((*Env).CheckLine, 0 ,sizeof((*Env).CheckLine));
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 fc76 	bl	8008392 <memset>

	for( indx=0; indx<NCheckLine; indx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001aac:	e02f      	b.n	8001b0e <TestProsed+0xea>
	{
		uint8_t i, j;
		i=(*Env).DataForTest[0][indx];
 8001aae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001ab2:	1d3a      	adds	r2, r7, #4
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	3324      	adds	r3, #36	; 0x24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
		j=(*Env).DataForTest[1][indx];
 8001ac2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001ac6:	1d3a      	adds	r2, r7, #4
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	3344      	adds	r3, #68	; 0x44
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
		if(i!=0 || j!=0)
 8001ad6:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <TestProsed+0xc2>
 8001ade:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <TestProsed+0xe0>
		{
			X1[i-1][j-1]=1;
 8001ae6:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8001af0:	3b01      	subs	r3, #1
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001afc:	4413      	add	r3, r2
 8001afe:	2201      	movs	r2, #1
 8001b00:	f823 2c90 	strh.w	r2, [r3, #-144]
	for( indx=0; indx<NCheckLine; indx++)
 8001b04:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001b0e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001b12:	2b07      	cmp	r3, #7
 8001b14:	d9cb      	bls.n	8001aae <TestProsed+0x8a>
		}
	}

			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001b1c:	e05b      	b.n	8001bd6 <TestProsed+0x1b2>
			{
				MuxSetOUT_Addr(out_addr);	// установить номер выхода X1
 8001b1e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 fa3f 	bl	8001fa8 <MuxSetOUT_Addr>
				GPIO_WriteBit(GPIOB, OUT_EN_Pin, RESET);// включить мультиплексор выходной
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4975      	ldr	r1, [pc, #468]	; (8001d04 <TestProsed+0x2e0>)
 8001b2e:	4876      	ldr	r0, [pc, #472]	; (8001d08 <TestProsed+0x2e4>)
 8001b30:	f7fe fde0 	bl	80006f4 <GPIO_WriteBit>
				for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001b3a:	e03e      	b.n	8001bba <TestProsed+0x196>
				{

					MuxSetIN_Addr(in_addr);	// установить номер входа X2
 8001b3c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9fe 	bl	8001f44 <MuxSetIN_Addr>
					GPIO_WriteBit(GPIOA, IN_EN_Pin, RESET);// включить мультиплексор входной
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4970      	ldr	r1, [pc, #448]	; (8001d0c <TestProsed+0x2e8>)
 8001b4c:	4870      	ldr	r0, [pc, #448]	; (8001d10 <TestProsed+0x2ec>)
 8001b4e:	f7fe fdd1 	bl	80006f4 <GPIO_WriteBit>

					LL_TIM_EnableCounter(TIM2);// включить захват принятого сигнала
 8001b52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b56:	f7ff fe9f 	bl	8001898 <LL_TIM_EnableCounter>
					N_periods=0;
 8001b5a:	4b6e      	ldr	r3, [pc, #440]	; (8001d14 <TestProsed+0x2f0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
					LL_TIM_EnableCounter(TIM4);	// триггер для запуска тестового сигнала
 8001b60:	4867      	ldr	r0, [pc, #412]	; (8001d00 <TestProsed+0x2dc>)
 8001b62:	f7ff fe99 	bl	8001898 <LL_TIM_EnableCounter>

					while( !LL_TIM_IsActiveFlag_UPDATE(TIM4)){}
 8001b66:	bf00      	nop
 8001b68:	4865      	ldr	r0, [pc, #404]	; (8001d00 <TestProsed+0x2dc>)
 8001b6a:	f7ff fec0 	bl	80018ee <LL_TIM_IsActiveFlag_UPDATE>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f9      	beq.n	8001b68 <TestProsed+0x144>
					LL_TIM_DisableCounter(TIM4);// вЫключить триггер для запуска тестового сигнала
 8001b74:	4862      	ldr	r0, [pc, #392]	; (8001d00 <TestProsed+0x2dc>)
 8001b76:	f7ff fe9e 	bl	80018b6 <LL_TIM_DisableCounter>
					LL_TIM_ClearFlag_UPDATE(TIM4);
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <TestProsed+0x2dc>)
 8001b7c:	f7ff feaa 	bl	80018d4 <LL_TIM_ClearFlag_UPDATE>
					LL_TIM_DisableCounter(TIM2);// вЫключить захват принятого сигнала
 8001b80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b84:	f7ff fe97 	bl	80018b6 <LL_TIM_DisableCounter>

					GPIO_WriteBit(GPIOA, IN_EN_Pin, SET);// вЫключить мультиплексор входной
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4960      	ldr	r1, [pc, #384]	; (8001d0c <TestProsed+0x2e8>)
 8001b8c:	4860      	ldr	r0, [pc, #384]	; (8001d10 <TestProsed+0x2ec>)
 8001b8e:	f7fe fdb1 	bl	80006f4 <GPIO_WriteBit>
					if( N_periods == 10)
 8001b92:	4b60      	ldr	r3, [pc, #384]	; (8001d14 <TestProsed+0x2f0>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d10a      	bne.n	8001bb0 <TestProsed+0x18c>
					{
						X2[out_addr][in_addr]=1;
 8001b9a:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8001b9e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	00c9      	lsls	r1, r1, #3
 8001ba8:	440a      	add	r2, r1
 8001baa:	2101      	movs	r1, #1
 8001bac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001bb0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001bba:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d9bc      	bls.n	8001b3c <TestProsed+0x118>
					}

				}
				GPIO_WriteBit(GPIOB, OUT_EN_Pin, SET);// вЫключить мультиплексор выходной
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	494f      	ldr	r1, [pc, #316]	; (8001d04 <TestProsed+0x2e0>)
 8001bc6:	4850      	ldr	r0, [pc, #320]	; (8001d08 <TestProsed+0x2e4>)
 8001bc8:	f7fe fd94 	bl	80006f4 <GPIO_WriteBit>
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001bcc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001bd6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d99f      	bls.n	8001b1e <TestProsed+0xfa>

			}

			uint16_t NoLineX1=0, NoLineX2=0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
			n_line = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001bf6:	e070      	b.n	8001cda <TestProsed+0x2b6>
			{
				NoLineX1=0, NoLineX2=0, check =0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

					for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c10:	e044      	b.n	8001c9c <TestProsed+0x278>
						{
						NoLineX1+=X1[out_addr][in_addr];  // сумма значений в столбце, если ==0, не соединений
 8001c12:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001c16:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c1a:	00d2      	lsls	r2, r2, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c24:	4413      	add	r3, r2
 8001c26:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8001c2a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001c2e:	4413      	add	r3, r2
 8001c30:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
						NoLineX2+=X2[out_addr][in_addr];
 8001c34:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8001c38:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	00c9      	lsls	r1, r1, #3
 8001c42:	440a      	add	r2, r1
 8001c44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001c48:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

							if(X1[out_addr][in_addr] == X2[out_addr][in_addr])
 8001c52:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001c56:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c5a:	00d2      	lsls	r2, r2, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c64:	4413      	add	r3, r2
 8001c66:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8001c6a:	f8b7 0114 	ldrh.w	r0, [r7, #276]	; 0x114
 8001c6e:	f8b7 1116 	ldrh.w	r1, [r7, #278]	; 0x116
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	00c0      	lsls	r0, r0, #3
 8001c78:	4401      	add	r1, r0
 8001c7a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d103      	bne.n	8001c8a <TestProsed+0x266>
							{
								check = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8001c88:	e003      	b.n	8001c92 <TestProsed+0x26e>
							}
							else
							{
								check = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
								break;
 8001c90:	e008      	b.n	8001ca4 <TestProsed+0x280>
					for( in_addr=0; in_addr<NCheckLine; in_addr++)
 8001c92:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c96:	3301      	adds	r3, #1
 8001c98:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c9c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	d9b6      	bls.n	8001c12 <TestProsed+0x1ee>
							}
						}


					if(NoLineX1 != 0 && NoLineX2 != 0 )
 8001ca4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d011      	beq.n	8001cd0 <TestProsed+0x2ac>
 8001cac:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <TestProsed+0x2ac>
					{
						(*Env).CheckLine[n_line++] = check;
 8001cb4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	f8a7 2112 	strh.w	r2, [r7, #274]	; 0x112
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
			for( out_addr=0; out_addr<NCheckLine; out_addr++)
 8001cd0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001cda:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d98a      	bls.n	8001bf8 <TestProsed+0x1d4>
					}
			}



	DrawTable(Env, 0);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f000 f816 	bl	8001d18 <DrawTable>
	LL_TIM_DisableIT_CC1(TIM2);
 8001cec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cf0:	f7ff fe1e 	bl	8001930 <LL_TIM_DisableIT_CC1>

}
 8001cf4:	bf00      	nop
 8001cf6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40000800 	.word	0x40000800
 8001d04:	04800080 	.word	0x04800080
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	04100010 	.word	0x04100010
 8001d10:	40010800 	.word	0x40010800
 8001d14:	2000021c 	.word	0x2000021c

08001d18 <DrawTable>:

void DrawTable(typeEnv *Env, uint8_t res)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
	uint8_t h=17, w=16;
 8001d24:	2311      	movs	r3, #17
 8001d26:	74fb      	strb	r3, [r7, #19]
 8001d28:	2310      	movs	r3, #16
 8001d2a:	74bb      	strb	r3, [r7, #18]
	uint8_t col=8, row=5;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	747b      	strb	r3, [r7, #17]
 8001d30:	2305      	movs	r3, #5
 8001d32:	743b      	strb	r3, [r7, #16]
	uint8_t sx=20, ex=col*w+sx;
 8001d34:	2314      	movs	r3, #20
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	7c7b      	ldrb	r3, [r7, #17]
 8001d3a:	7cba      	ldrb	r2, [r7, #18]
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	4413      	add	r3, r2
 8001d46:	73bb      	strb	r3, [r7, #14]
	uint8_t sy=23, ey=row*h+sy;
 8001d48:	2317      	movs	r3, #23
 8001d4a:	737b      	strb	r3, [r7, #13]
 8001d4c:	7c3b      	ldrb	r3, [r7, #16]
 8001d4e:	7cfa      	ldrb	r2, [r7, #19]
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	7b7b      	ldrb	r3, [r7, #13]
 8001d58:	4413      	add	r3, r2
 8001d5a:	733b      	strb	r3, [r7, #12]
	uint8_t indx_col=0, indx_row=0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75fb      	strb	r3, [r7, #23]
 8001d60:	2300      	movs	r3, #0
 8001d62:	75bb      	strb	r3, [r7, #22]
	uint8_t CHR[3]={0};
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	2100      	movs	r1, #0
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	460a      	mov	r2, r1
 8001d70:	709a      	strb	r2, [r3, #2]
	uint16_t color=0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	82bb      	strh	r3, [r7, #20]
	memset(CHR,0,sizeof(CHR));
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f006 fb07 	bl	8008392 <memset>
	for(indx_col=0; indx_col<=col; indx_col++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
 8001d88:	e010      	b.n	8001dac <DrawTable+0x94>
	{
		ST7735_DrawVLine(sx+indx_col*w,sy,ey,TXT_COLOR);
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	7cba      	ldrb	r2, [r7, #18]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2d8      	uxtb	r0, r3
 8001d9a:	7b3a      	ldrb	r2, [r7, #12]
 8001d9c:	7b79      	ldrb	r1, [r7, #13]
 8001d9e:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001da2:	f001 f891 	bl	8002ec8 <ST7735_DrawVLine>
	for(indx_col=0; indx_col<=col; indx_col++)
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	3301      	adds	r3, #1
 8001daa:	75fb      	strb	r3, [r7, #23]
 8001dac:	7dfa      	ldrb	r2, [r7, #23]
 8001dae:	7c7b      	ldrb	r3, [r7, #17]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d9ea      	bls.n	8001d8a <DrawTable+0x72>
	}
	for(indx_row=0;indx_row<=row;indx_row++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	75bb      	strb	r3, [r7, #22]
 8001db8:	e010      	b.n	8001ddc <DrawTable+0xc4>
	{
		ST7735_DrawHLine(sx,ex,sy+indx_row*h,TXT_COLOR);
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	7cfa      	ldrb	r2, [r7, #19]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	7bb9      	ldrb	r1, [r7, #14]
 8001dcc:	7bf8      	ldrb	r0, [r7, #15]
 8001dce:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001dd2:	f001 f837 	bl	8002e44 <ST7735_DrawHLine>
	for(indx_row=0;indx_row<=row;indx_row++)
 8001dd6:	7dbb      	ldrb	r3, [r7, #22]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	75bb      	strb	r3, [r7, #22]
 8001ddc:	7dba      	ldrb	r2, [r7, #22]
 8001dde:	7c3b      	ldrb	r3, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d9ea      	bls.n	8001dba <DrawTable+0xa2>
	}

	for(indx_col=0; indx_col<col; indx_col++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	75fb      	strb	r3, [r7, #23]
 8001de8:	e02d      	b.n	8001e46 <DrawTable+0x12e>
	{
		memset(CHR,0,sizeof(CHR));
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2203      	movs	r2, #3
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 facd 	bl	8008392 <memset>
		sprintf(CHR, "%d ", (*Env).DataForTest[0][indx_col]);
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	3324      	adds	r3, #36	; 0x24
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	494c      	ldr	r1, [pc, #304]	; (8001f3c <DrawTable+0x224>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 faca 	bl	80083a4 <siprintf>
		ST7735_DrawString7x11(sx+5+indx_col*w,sy+4+h,CHR,TXT_COLOR,BGR_COLOR);
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	7cba      	ldrb	r2, [r7, #18]
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3305      	adds	r3, #5
 8001e22:	b2d8      	uxtb	r0, r3
 8001e24:	7b7a      	ldrb	r2, [r7, #13]
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	b2d9      	uxtb	r1, r3
 8001e30:	f107 0208 	add.w	r2, r7, #8
 8001e34:	2311      	movs	r3, #17
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001e3c:	f001 f91a 	bl	8003074 <ST7735_DrawString7x11>
	for(indx_col=0; indx_col<col; indx_col++)
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	3301      	adds	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
 8001e46:	7dfa      	ldrb	r2, [r7, #23]
 8001e48:	7c7b      	ldrb	r3, [r7, #17]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3cd      	bcc.n	8001dea <DrawTable+0xd2>
	}

	for(indx_col=0; indx_col<col; indx_col++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
 8001e52:	e031      	b.n	8001eb8 <DrawTable+0x1a0>
	{
		memset(CHR,0,sizeof(CHR));
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	2203      	movs	r2, #3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fa98 	bl	8008392 <memset>
		sprintf(CHR, "%d ", (*Env).DataForTest[1][indx_col]);
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	3344      	adds	r3, #68	; 0x44
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4932      	ldr	r1, [pc, #200]	; (8001f3c <DrawTable+0x224>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f006 fa95 	bl	80083a4 <siprintf>
		ST7735_DrawString7x11(sx+5+indx_col*w,sy+4+3*h,CHR,TXT_COLOR,BGR_COLOR);
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	7cba      	ldrb	r2, [r7, #18]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	4413      	add	r3, r2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3305      	adds	r3, #5
 8001e8c:	b2d8      	uxtb	r0, r3
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	461a      	mov	r2, r3
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	7b7b      	ldrb	r3, [r7, #13]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	b2d9      	uxtb	r1, r3
 8001ea2:	f107 0208 	add.w	r2, r7, #8
 8001ea6:	2311      	movs	r3, #17
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8001eae:	f001 f8e1 	bl	8003074 <ST7735_DrawString7x11>
	for(indx_col=0; indx_col<col; indx_col++)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	75fb      	strb	r3, [r7, #23]
 8001eb8:	7dfa      	ldrb	r2, [r7, #23]
 8001eba:	7c7b      	ldrb	r3, [r7, #17]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3c9      	bcc.n	8001e54 <DrawTable+0x13c>
	}
	for(indx_col=0; indx_col<NCheckLine; indx_col++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	75fb      	strb	r3, [r7, #23]
 8001ec4:	e033      	b.n	8001f2e <DrawTable+0x216>
	{
		if( (*Env).CheckLine[indx_col] == 1)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d103      	bne.n	8001edc <DrawTable+0x1c4>
		{
			color = COLOR565_LAWN_GREEN;
 8001ed4:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8001ed8:	82bb      	strh	r3, [r7, #20]
 8001eda:	e00c      	b.n	8001ef6 <DrawTable+0x1de>
		}
		else if((*Env).CheckLine[indx_col] == 2)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <DrawTable+0x1da>
		{
			color = COLOR565_ORANGE_RED;
 8001eea:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8001eee:	82bb      	strh	r3, [r7, #20]
 8001ef0:	e001      	b.n	8001ef6 <DrawTable+0x1de>
		}
		else
		{
			color = BGR_COLOR;
 8001ef2:	2311      	movs	r3, #17
 8001ef4:	82bb      	strh	r3, [r7, #20]
		}
		ST7735_DrawString7x11(sx+5+indx_col*w,sy+4+2*h,"*",color,BGR_COLOR);
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	7cba      	ldrb	r2, [r7, #18]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	4413      	add	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3305      	adds	r3, #5
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	7b7b      	ldrb	r3, [r7, #13]
 8001f12:	4413      	add	r3, r2
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3304      	adds	r3, #4
 8001f18:	b2d9      	uxtb	r1, r3
 8001f1a:	8aba      	ldrh	r2, [r7, #20]
 8001f1c:	2311      	movs	r3, #17
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <DrawTable+0x228>)
 8001f24:	f001 f8a6 	bl	8003074 <ST7735_DrawString7x11>
	for(indx_col=0; indx_col<NCheckLine; indx_col++)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d9c8      	bls.n	8001ec6 <DrawTable+0x1ae>
	}
}
 8001f34:	bf00      	nop
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	08009648 	.word	0x08009648
 8001f40:	0800964c 	.word	0x0800964c

08001f44 <MuxSetIN_Addr>:
{
	LL_GPIO_ReetOutputPin(GPIOA, IN_EN_Pin);
}

void MuxSetIN_Addr(uint8_t addr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_A_Pin, mask);
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <MuxSetIN_Addr+0x54>)
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <MuxSetIN_Addr+0x58>)
 8001f62:	f7fe fbc7 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x02;
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_B_Pin, mask);
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	461a      	mov	r2, r3
 8001f72:	490b      	ldr	r1, [pc, #44]	; (8001fa0 <MuxSetIN_Addr+0x5c>)
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MuxSetIN_Addr+0x58>)
 8001f76:	f7fe fbbd 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x04;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOA, IN_C_Pin, mask);
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <MuxSetIN_Addr+0x60>)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MuxSetIN_Addr+0x58>)
 8001f8a:	f7fe fbb3 	bl	80006f4 <GPIO_WriteBit>
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	04010001 	.word	0x04010001
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	04020002 	.word	0x04020002
 8001fa4:	04040004 	.word	0x04040004

08001fa8 <MuxSetOUT_Addr>:


void MuxSetOUT_Addr(uint8_t addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
uint8_t mask = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
mask= addr & 0x01;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_A_Pin, mask);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <MuxSetOUT_Addr+0x54>)
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <MuxSetOUT_Addr+0x58>)
 8001fc6:	f7fe fb95 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x02;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_B_Pin, mask);
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	490b      	ldr	r1, [pc, #44]	; (8002004 <MuxSetOUT_Addr+0x5c>)
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <MuxSetOUT_Addr+0x58>)
 8001fda:	f7fe fb8b 	bl	80006f4 <GPIO_WriteBit>
mask= addr & 0x04;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	73fb      	strb	r3, [r7, #15]
	GPIO_WriteBit(GPIOB, OUT_C_Pin, mask);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4907      	ldr	r1, [pc, #28]	; (8002008 <MuxSetOUT_Addr+0x60>)
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <MuxSetOUT_Addr+0x58>)
 8001fee:	f7fe fb81 	bl	80006f4 <GPIO_WriteBit>

}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	04100010 	.word	0x04100010
 8002000:	40010c00 	.word	0x40010c00
 8002004:	04200020 	.word	0x04200020
 8002008:	04400040 	.word	0x04400040

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <LL_APB1_GRP1_EnableClock>:
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <LL_APB1_GRP1_EnableClock+0x2c>)
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4013      	ands	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000

08002148 <LL_APB2_GRP1_EnableClock>:
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <LL_APB2_GRP1_EnableClock+0x2c>)
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <LL_TIM_SetOnePulseMode>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0208 	bic.w	r2, r3, #8
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <LL_TIM_DisableARRPreload>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
	...

080021bc <LL_TIM_OC_DisableFast>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d01c      	beq.n	8002206 <LL_TIM_OC_DisableFast+0x4a>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d017      	beq.n	8002202 <LL_TIM_OC_DisableFast+0x46>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d012      	beq.n	80021fe <LL_TIM_OC_DisableFast+0x42>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d00d      	beq.n	80021fa <LL_TIM_OC_DisableFast+0x3e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d007      	beq.n	80021f6 <LL_TIM_OC_DisableFast+0x3a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	d101      	bne.n	80021f2 <LL_TIM_OC_DisableFast+0x36>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e00a      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 80021f2:	2306      	movs	r3, #6
 80021f4:	e008      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_TIM_OC_DisableFast+0x4c>
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3318      	adds	r3, #24
 800220e:	4619      	mov	r1, r3
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <LL_TIM_OC_DisableFast+0x80>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	440b      	add	r3, r1
 8002218:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <LL_TIM_OC_DisableFast+0x84>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	4619      	mov	r1, r3
 8002226:	2304      	movs	r3, #4
 8002228:	408b      	lsls	r3, r1
 800222a:	43db      	mvns	r3, r3
 800222c:	401a      	ands	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	080097cc 	.word	0x080097cc
 8002240:	080097d4 	.word	0x080097d4

08002244 <LL_TIM_OC_EnablePreload>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d01c      	beq.n	800228e <LL_TIM_OC_EnablePreload+0x4a>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d017      	beq.n	800228a <LL_TIM_OC_EnablePreload+0x46>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d012      	beq.n	8002286 <LL_TIM_OC_EnablePreload+0x42>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d00d      	beq.n	8002282 <LL_TIM_OC_EnablePreload+0x3e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226c:	d007      	beq.n	800227e <LL_TIM_OC_EnablePreload+0x3a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d101      	bne.n	800227a <LL_TIM_OC_EnablePreload+0x36>
 8002276:	2305      	movs	r3, #5
 8002278:	e00a      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 800227a:	2306      	movs	r3, #6
 800227c:	e008      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 800227e:	2304      	movs	r3, #4
 8002280:	e006      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 8002282:	2303      	movs	r3, #3
 8002284:	e004      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 8002286:	2302      	movs	r3, #2
 8002288:	e002      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_TIM_OC_EnablePreload+0x4c>
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3318      	adds	r3, #24
 8002296:	4619      	mov	r1, r3
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <LL_TIM_OC_EnablePreload+0x80>)
 800229c:	5cd3      	ldrb	r3, [r2, r3]
 800229e:	440b      	add	r3, r1
 80022a0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <LL_TIM_OC_EnablePreload+0x84>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	4619      	mov	r1, r3
 80022ae:	2308      	movs	r3, #8
 80022b0:	408b      	lsls	r3, r1
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	080097cc 	.word	0x080097cc
 80022c8:	080097d4 	.word	0x080097d4

080022cc <LL_TIM_IC_SetActiveInput>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d01c      	beq.n	8002318 <LL_TIM_IC_SetActiveInput+0x4c>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d017      	beq.n	8002314 <LL_TIM_IC_SetActiveInput+0x48>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d012      	beq.n	8002310 <LL_TIM_IC_SetActiveInput+0x44>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d00d      	beq.n	800230c <LL_TIM_IC_SetActiveInput+0x40>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f6:	d007      	beq.n	8002308 <LL_TIM_IC_SetActiveInput+0x3c>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fe:	d101      	bne.n	8002304 <LL_TIM_IC_SetActiveInput+0x38>
 8002300:	2305      	movs	r3, #5
 8002302:	e00a      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 8002304:	2306      	movs	r3, #6
 8002306:	e008      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 8002308:	2304      	movs	r3, #4
 800230a:	e006      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 800230c:	2303      	movs	r3, #3
 800230e:	e004      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 8002310:	2302      	movs	r3, #2
 8002312:	e002      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_TIM_IC_SetActiveInput+0x4e>
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3318      	adds	r3, #24
 8002320:	4619      	mov	r1, r3
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <LL_TIM_IC_SetActiveInput+0x90>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	440b      	add	r3, r1
 800232a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	490b      	ldr	r1, [pc, #44]	; (8002360 <LL_TIM_IC_SetActiveInput+0x94>)
 8002334:	5ccb      	ldrb	r3, [r1, r3]
 8002336:	4619      	mov	r1, r3
 8002338:	2303      	movs	r3, #3
 800233a:	408b      	lsls	r3, r1
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	7df9      	ldrb	r1, [r7, #23]
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <LL_TIM_IC_SetActiveInput+0x94>)
 8002348:	5c41      	ldrb	r1, [r0, r1]
 800234a:	408b      	lsls	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	080097cc 	.word	0x080097cc
 8002360:	080097dc 	.word	0x080097dc

08002364 <LL_TIM_IC_SetPrescaler>:
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d01c      	beq.n	80023b0 <LL_TIM_IC_SetPrescaler+0x4c>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d017      	beq.n	80023ac <LL_TIM_IC_SetPrescaler+0x48>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d012      	beq.n	80023a8 <LL_TIM_IC_SetPrescaler+0x44>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d00d      	beq.n	80023a4 <LL_TIM_IC_SetPrescaler+0x40>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238e:	d007      	beq.n	80023a0 <LL_TIM_IC_SetPrescaler+0x3c>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002396:	d101      	bne.n	800239c <LL_TIM_IC_SetPrescaler+0x38>
 8002398:	2305      	movs	r3, #5
 800239a:	e00a      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 800239c:	2306      	movs	r3, #6
 800239e:	e008      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e006      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e004      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e002      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_TIM_IC_SetPrescaler+0x4e>
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3318      	adds	r3, #24
 80023b8:	4619      	mov	r1, r3
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <LL_TIM_IC_SetPrescaler+0x90>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	440b      	add	r3, r1
 80023c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	490b      	ldr	r1, [pc, #44]	; (80023f8 <LL_TIM_IC_SetPrescaler+0x94>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	4619      	mov	r1, r3
 80023d0:	230c      	movs	r3, #12
 80023d2:	408b      	lsls	r3, r1
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	7df9      	ldrb	r1, [r7, #23]
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <LL_TIM_IC_SetPrescaler+0x94>)
 80023e0:	5c41      	ldrb	r1, [r0, r1]
 80023e2:	408b      	lsls	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	080097cc 	.word	0x080097cc
 80023f8:	080097dc 	.word	0x080097dc

080023fc <LL_TIM_IC_SetFilter>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d01c      	beq.n	8002448 <LL_TIM_IC_SetFilter+0x4c>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d017      	beq.n	8002444 <LL_TIM_IC_SetFilter+0x48>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d012      	beq.n	8002440 <LL_TIM_IC_SetFilter+0x44>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d00d      	beq.n	800243c <LL_TIM_IC_SetFilter+0x40>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002426:	d007      	beq.n	8002438 <LL_TIM_IC_SetFilter+0x3c>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d101      	bne.n	8002434 <LL_TIM_IC_SetFilter+0x38>
 8002430:	2305      	movs	r3, #5
 8002432:	e00a      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 8002434:	2306      	movs	r3, #6
 8002436:	e008      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 8002438:	2304      	movs	r3, #4
 800243a:	e006      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 800243c:	2303      	movs	r3, #3
 800243e:	e004      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_TIM_IC_SetFilter+0x4e>
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3318      	adds	r3, #24
 8002450:	4619      	mov	r1, r3
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <LL_TIM_IC_SetFilter+0x90>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	440b      	add	r3, r1
 800245a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	490b      	ldr	r1, [pc, #44]	; (8002490 <LL_TIM_IC_SetFilter+0x94>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	4619      	mov	r1, r3
 8002468:	23f0      	movs	r3, #240	; 0xf0
 800246a:	408b      	lsls	r3, r1
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	7df9      	ldrb	r1, [r7, #23]
 8002476:	4806      	ldr	r0, [pc, #24]	; (8002490 <LL_TIM_IC_SetFilter+0x94>)
 8002478:	5c41      	ldrb	r1, [r0, r1]
 800247a:	408b      	lsls	r3, r1
 800247c:	431a      	orrs	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	080097cc 	.word	0x080097cc
 8002490:	080097dc 	.word	0x080097dc

08002494 <LL_TIM_IC_SetPolarity>:
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d01c      	beq.n	80024e0 <LL_TIM_IC_SetPolarity+0x4c>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d017      	beq.n	80024dc <LL_TIM_IC_SetPolarity+0x48>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d012      	beq.n	80024d8 <LL_TIM_IC_SetPolarity+0x44>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d00d      	beq.n	80024d4 <LL_TIM_IC_SetPolarity+0x40>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d007      	beq.n	80024d0 <LL_TIM_IC_SetPolarity+0x3c>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d101      	bne.n	80024cc <LL_TIM_IC_SetPolarity+0x38>
 80024c8:	2305      	movs	r3, #5
 80024ca:	e00a      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024cc:	2306      	movs	r3, #6
 80024ce:	e008      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e006      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e004      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024d8:	2302      	movs	r3, #2
 80024da:	e002      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_TIM_IC_SetPolarity+0x4e>
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <LL_TIM_IC_SetPolarity+0x80>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	4619      	mov	r1, r3
 80024f0:	230a      	movs	r3, #10
 80024f2:	408b      	lsls	r3, r1
 80024f4:	43db      	mvns	r3, r3
 80024f6:	401a      	ands	r2, r3
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	4906      	ldr	r1, [pc, #24]	; (8002514 <LL_TIM_IC_SetPolarity+0x80>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	4619      	mov	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	408b      	lsls	r3, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	080097e4 	.word	0x080097e4

08002518 <LL_TIM_SetEncoderMode>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	609a      	str	r2, [r3, #8]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_TIM_SetTriggerOutput>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	605a      	str	r2, [r3, #4]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_TIM_SetSlaveMode>:
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_TIM_SetTriggerInput>:
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <LL_TIM_EnableMasterSlaveMode>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <LL_TIM_DisableMasterSlaveMode>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60da      	str	r2, [r3, #12]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b098      	sub	sp, #96	; 0x60
 8002624:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263a:	2220      	movs	r2, #32
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f005 fea7 	bl	8008392 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	463b      	mov	r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002664:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002668:	f7ff fd6e 	bl	8002148 <LL_APB2_GRP1_EnableClock>
  /* TIM1 interrupt Init */
//  NVIC_SetPriority(TIM1_TRG_COM_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
//  NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);


  TIM_InitStruct.Prescaler = 71;
 800266c:	2347      	movs	r3, #71	; 0x47
 800266e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002672:	2300      	movs	r3, #0
 8002674:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 4;
 8002676:	2304      	movs	r3, #4
 8002678:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 19;
 800267e:	2313      	movs	r3, #19
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002686:	4619      	mov	r1, r3
 8002688:	4832      	ldr	r0, [pc, #200]	; (8002754 <MX_TIM1_Init+0x134>)
 800268a:	f001 fb4b 	bl	8003d24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800268e:	4831      	ldr	r0, [pc, #196]	; (8002754 <MX_TIM1_Init+0x134>)
 8002690:	f7ff fd84 	bl	800219c <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8002694:	2330      	movs	r3, #48	; 0x30
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80026b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b4:	461a      	mov	r2, r3
 80026b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ba:	4826      	ldr	r0, [pc, #152]	; (8002754 <MX_TIM1_Init+0x134>)
 80026bc:	f001 fbd2 	bl	8003e64 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80026c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c4:	4823      	ldr	r0, [pc, #140]	; (8002754 <MX_TIM1_Init+0x134>)
 80026c6:	f7ff fd79 	bl	80021bc <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM1, LL_TIM_ONEPULSEMODE_SINGLE );
 80026ca:	2108      	movs	r1, #8
 80026cc:	4821      	ldr	r0, [pc, #132]	; (8002754 <MX_TIM1_Init+0x134>)
 80026ce:	f7ff fd53 	bl	8002178 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerInput(TIM1, LL_TIM_TS_ITR3);
 80026d2:	2130      	movs	r1, #48	; 0x30
 80026d4:	481f      	ldr	r0, [pc, #124]	; (8002754 <MX_TIM1_Init+0x134>)
 80026d6:	f7ff ff55 	bl	8002584 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM1, LL_TIM_SLAVEMODE_TRIGGER);
 80026da:	2106      	movs	r1, #6
 80026dc:	481d      	ldr	r0, [pc, #116]	; (8002754 <MX_TIM1_Init+0x134>)
 80026de:	f7ff ff3f 	bl	8002560 <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM1);
 80026e2:	481c      	ldr	r0, [pc, #112]	; (8002754 <MX_TIM1_Init+0x134>)
 80026e4:	f7ff ff7e 	bl	80025e4 <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM1);
 80026e8:	481a      	ldr	r0, [pc, #104]	; (8002754 <MX_TIM1_Init+0x134>)
 80026ea:	f7ff ff8a 	bl	8002602 <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80026ee:	2100      	movs	r1, #0
 80026f0:	4818      	ldr	r0, [pc, #96]	; (8002754 <MX_TIM1_Init+0x134>)
 80026f2:	f7ff ff23 	bl	800253c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80026f6:	4817      	ldr	r0, [pc, #92]	; (8002754 <MX_TIM1_Init+0x134>)
 80026f8:	f7ff ff65 	bl	80025c6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8002718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <MX_TIM1_Init+0x134>)
 8002726:	f001 fbd5 	bl	8003ed4 <LL_TIM_BDTR_Init>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800272a:	2004      	movs	r0, #4
 800272c:	f7ff fd0c 	bl	8002148 <LL_APB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_TIM1_Init+0x138>)
 8002732:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002734:	2309      	movs	r3, #9
 8002736:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002738:	2302      	movs	r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	463b      	mov	r3, r7
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_TIM1_Init+0x13c>)
 8002746:	f001 f88b 	bl	8003860 <LL_GPIO_Init>

}
 800274a:	bf00      	nop
 800274c:	3760      	adds	r7, #96	; 0x60
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	04080008 	.word	0x04080008
 800275c:	40010800 	.word	0x40010800

08002760 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	463b      	mov	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002784:	2001      	movs	r0, #1
 8002786:	f7ff fcc7 	bl	8002118 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800278a:	2004      	movs	r0, #4
 800278c:	f7ff fcdc 	bl	8002148 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA0-WKUP   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002790:	f240 1301 	movw	r3, #257	; 0x101
 8002794:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002796:	2304      	movs	r3, #4
 8002798:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	463b      	mov	r3, r7
 800279c:	4619      	mov	r1, r3
 800279e:	4827      	ldr	r0, [pc, #156]	; (800283c <MX_TIM2_Init+0xdc>)
 80027a0:	f001 f85e 	bl	8003860 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027a4:	f7ff fc32 	bl	800200c <__NVIC_GetPriorityGrouping>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fc80 	bl	80020b4 <NVIC_EncodePriority>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4619      	mov	r1, r3
 80027b8:	201c      	movs	r0, #28
 80027ba:	f7ff fc51 	bl	8002060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80027be:	201c      	movs	r0, #28
 80027c0:	f7ff fc32 	bl	8002028 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 71;
 80027c4:	2347      	movs	r3, #71	; 0x47
 80027c6:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 60000;
 80027cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80027d0:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027e0:	f001 faa0 	bl	8003d24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80027e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027e8:	f7ff fcd8 	bl	800219c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80027ec:	2100      	movs	r1, #0
 80027ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027f2:	f7ff fea3 	bl	800253c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80027f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027fa:	f7ff fee4 	bl	80025c6 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80027fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002802:	2101      	movs	r1, #1
 8002804:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002808:	f7ff fd60 	bl	80022cc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800280c:	2200      	movs	r2, #0
 800280e:	2101      	movs	r1, #1
 8002810:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002814:	f7ff fda6 	bl	8002364 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1_N2);
 8002818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800281c:	2101      	movs	r1, #1
 800281e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002822:	f7ff fdeb 	bl	80023fc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_FALLING );//LL_TIM_IC_POLARITY_RISING
 8002826:	2202      	movs	r2, #2
 8002828:	2101      	movs	r1, #1
 800282a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800282e:	f7ff fe31 	bl	8002494 <LL_TIM_IC_SetPolarity>
 /* LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_INDIRECTTI);
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1_N2);
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_FALLING);
*/
}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40010800 	.word	0x40010800

08002840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	463b      	mov	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002864:	2002      	movs	r0, #2
 8002866:	f7ff fc57 	bl	8002118 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800286a:	2008      	movs	r0, #8
 800286c:	f7ff fc6c 	bl	8002148 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002870:	f243 0330 	movw	r3, #12336	; 0x3030
 8002874:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002876:	2304      	movs	r3, #4
 8002878:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	463b      	mov	r3, r7
 800287c:	4619      	mov	r1, r3
 800287e:	4829      	ldr	r0, [pc, #164]	; (8002924 <MX_TIM3_Init+0xe4>)
 8002880:	f000 ffee 	bl	8003860 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002884:	2103      	movs	r1, #3
 8002886:	4828      	ldr	r0, [pc, #160]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002888:	f7ff fe46 	bl	8002518 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800288c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002890:	2101      	movs	r1, #1
 8002892:	4825      	ldr	r0, [pc, #148]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002894:	f7ff fd1a 	bl	80022cc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV2);
 8002898:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800289c:	2101      	movs	r1, #1
 800289e:	4822      	ldr	r0, [pc, #136]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028a0:	f7ff fd60 	bl	8002364 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV4_N6);
 80028a4:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80028a8:	2101      	movs	r1, #1
 80028aa:	481f      	ldr	r0, [pc, #124]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028ac:	f7ff fda6 	bl	80023fc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	481c      	ldr	r0, [pc, #112]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028b6:	f7ff fded 	bl	8002494 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80028ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028be:	2110      	movs	r1, #16
 80028c0:	4819      	ldr	r0, [pc, #100]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028c2:	f7ff fd03 	bl	80022cc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV2);
 80028c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028ca:	2110      	movs	r1, #16
 80028cc:	4816      	ldr	r0, [pc, #88]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028ce:	f7ff fd49 	bl	8002364 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV4_N6);
 80028d2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80028d6:	2110      	movs	r1, #16
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028da:	f7ff fd8f 	bl	80023fc <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80028de:	2200      	movs	r2, #0
 80028e0:	2110      	movs	r1, #16
 80028e2:	4811      	ldr	r0, [pc, #68]	; (8002928 <MX_TIM3_Init+0xe8>)
 80028e4:	f7ff fdd6 	bl	8002494 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 80028f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f4:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	4809      	ldr	r0, [pc, #36]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002902:	f001 fa0f 	bl	8003d24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002906:	4808      	ldr	r0, [pc, #32]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002908:	f7ff fc48 	bl	800219c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800290c:	2100      	movs	r1, #0
 800290e:	4806      	ldr	r0, [pc, #24]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002910:	f7ff fe14 	bl	800253c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_TIM3_Init+0xe8>)
 8002916:	f7ff fe56 	bl	80025c6 <LL_TIM_DisableMasterSlaveMode>

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40010c00 	.word	0x40010c00
 8002928:	40000400 	.word	0x40000400

0800292c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b092      	sub	sp, #72	; 0x48
 8002930:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002932:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
 8002940:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	2220      	movs	r2, #32
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f005 fd21 	bl	8008392 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	463b      	mov	r3, r7
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800295e:	2004      	movs	r0, #4
 8002960:	f7ff fbda 	bl	8002118 <LL_APB1_GRP1_EnableClock>
  /* TIM4 interrupt Init */
//  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
//  NVIC_EnableIRQ(TIM4_IRQn);


  TIM_InitStruct.Prescaler = 71;
 8002964:	2347      	movs	r3, #71	; 0x47
 8002966:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002968:	2300      	movs	r3, #0
 800296a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 199;
 800296c:	23c7      	movs	r3, #199	; 0xc7
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002970:	2300      	movs	r3, #0
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
//  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002974:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002978:	4619      	mov	r1, r3
 800297a:	481f      	ldr	r0, [pc, #124]	; (80029f8 <MX_TIM4_Init+0xcc>)
 800297c:	f001 f9d2 	bl	8003d24 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002980:	481d      	ldr	r0, [pc, #116]	; (80029f8 <MX_TIM4_Init+0xcc>)
 8002982:	f7ff fc0b 	bl	800219c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002986:	2110      	movs	r1, #16
 8002988:	481b      	ldr	r0, [pc, #108]	; (80029f8 <MX_TIM4_Init+0xcc>)
 800298a:	f7ff fc5b 	bl	8002244 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800298e:	2360      	movs	r3, #96	; 0x60
 8002990:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	461a      	mov	r2, r3
 80029a8:	2110      	movs	r1, #16
 80029aa:	4813      	ldr	r0, [pc, #76]	; (80029f8 <MX_TIM4_Init+0xcc>)
 80029ac:	f001 fa5a 	bl	8003e64 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80029b0:	2110      	movs	r1, #16
 80029b2:	4811      	ldr	r0, [pc, #68]	; (80029f8 <MX_TIM4_Init+0xcc>)
 80029b4:	f7ff fc02 	bl	80021bc <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM4, LL_TIM_ONEPULSEMODE_REPETITIVE ); //   LL_TIM_ONEPULSEMODE_REPETITIVE
 80029b8:	2100      	movs	r1, #0
 80029ba:	480f      	ldr	r0, [pc, #60]	; (80029f8 <MX_TIM4_Init+0xcc>)
 80029bc:	f7ff fbdc 	bl	8002178 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_ENABLE );  //LL_TIM_TRGO_OC2REF
 80029c0:	2110      	movs	r1, #16
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_TIM4_Init+0xcc>)
 80029c4:	f7ff fdba 	bl	800253c <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM4);
 80029c8:	480b      	ldr	r0, [pc, #44]	; (80029f8 <MX_TIM4_Init+0xcc>)
 80029ca:	f7ff fded 	bl	80025a8 <LL_TIM_EnableMasterSlaveMode>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80029ce:	2008      	movs	r0, #8
 80029d0:	f7ff fbba 	bl	8002148 <LL_APB2_GRP1_EnableClock>
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80029d4:	f248 0380 	movw	r3, #32896	; 0x8080
 80029d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029da:	2309      	movs	r3, #9
 80029dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029de:	2302      	movs	r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	463b      	mov	r3, r7
 80029e8:	4619      	mov	r1, r3
 80029ea:	4804      	ldr	r0, [pc, #16]	; (80029fc <MX_TIM4_Init+0xd0>)
 80029ec:	f000 ff38 	bl	8003860 <LL_GPIO_Init>

}
 80029f0:	bf00      	nop
 80029f2:	3748      	adds	r7, #72	; 0x48
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40010c00 	.word	0x40010c00

08002a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a02:	e003      	b.n	8002a0c <LoopCopyDataInit>

08002a04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a0a:	3104      	adds	r1, #4

08002a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a0c:	480a      	ldr	r0, [pc, #40]	; (8002a38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a14:	d3f6      	bcc.n	8002a04 <CopyDataInit>
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a18:	e002      	b.n	8002a20 <LoopFillZerobss>

08002a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a1c:	f842 3b04 	str.w	r3, [r2], #4

08002a20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a24:	d3f9      	bcc.n	8002a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a26:	f7fe ff31 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f005 fc75 	bl	8008318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2e:	f7fd fff1 	bl	8000a14 <main>
  bx lr
 8002a32:	4770      	bx	lr
  ldr r3, =_sidata
 8002a34:	0800a270 	.word	0x0800a270
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a3c:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8002a40:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 8002a44:	2000087c 	.word	0x2000087c

08002a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC1_2_IRQHandler>
	...

08002a4c <ST7735_write>:

uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte);


void ST7735_write(uint8_t data)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
CS_LOW_ST7735  ;
 8002a56:	2200      	movs	r2, #0
 8002a58:	2110      	movs	r1, #16
 8002a5a:	4808      	ldr	r0, [pc, #32]	; (8002a7c <ST7735_write+0x30>)
 8002a5c:	f000 fe16 	bl	800368c <HAL_GPIO_WritePin>
LL_SPI_TransmitReceive(SPI1, data);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	4619      	mov	r1, r3
 8002a64:	4806      	ldr	r0, [pc, #24]	; (8002a80 <ST7735_write+0x34>)
 8002a66:	f7fe fced 	bl	8001444 <LL_SPI_TransmitReceive>
CS_HIGH_ST7735 ;
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <ST7735_write+0x30>)
 8002a70:	f000 fe0c 	bl	800368c <HAL_GPIO_WritePin>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010800 	.word	0x40010800
 8002a80:	40013000 	.word	0x40013000

08002a84 <ST7735_SendData>:
#define ST7735_Send(x) ST7735_write(x)

void ST7735_SendData(uint8_t data)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	A0_HIGH_ST7735 ; //A0_HIGH;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2108      	movs	r1, #8
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <ST7735_SendData+0x24>)
 8002a94:	f000 fdfa 	bl	800368c <HAL_GPIO_WritePin>
	ST7735_write(data);
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ffd6 	bl	8002a4c <ST7735_write>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010800 	.word	0x40010800

08002aac <ST7735_SendCmd>:

void ST7735_SendCmd(uint8_t cmd)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
	A0_LOW_ST7735 ; //A0_LOW;
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2108      	movs	r1, #8
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <ST7735_SendCmd+0x24>)
 8002abc:	f000 fde6 	bl	800368c <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ffc2 	bl	8002a4c <ST7735_write>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40010800 	.word	0x40010800

08002ad4 <HAL_ST7735_Init>:

void HAL_ST7735_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
/*#1*/
    CS_HIGH_ST7735 ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2110      	movs	r1, #16
 8002adc:	489d      	ldr	r0, [pc, #628]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002ade:	f000 fdd5 	bl	800368c <HAL_GPIO_WritePin>
	RESET_HIGH_ST7735 ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	489b      	ldr	r0, [pc, #620]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002ae8:	f000 fdd0 	bl	800368c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002aec:	200a      	movs	r0, #10
 8002aee:	f000 fca3 	bl	8003438 <HAL_Delay>
	RESET_LOW_ST7735 ;
 8002af2:	2200      	movs	r2, #0
 8002af4:	2102      	movs	r1, #2
 8002af6:	4897      	ldr	r0, [pc, #604]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002af8:	f000 fdc8 	bl	800368c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002afc:	200a      	movs	r0, #10
 8002afe:	f000 fc9b 	bl	8003438 <HAL_Delay>
	RESET_HIGH_ST7735 ;
 8002b02:	2201      	movs	r2, #1
 8002b04:	2102      	movs	r1, #2
 8002b06:	4893      	ldr	r0, [pc, #588]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002b08:	f000 fdc0 	bl	800368c <HAL_GPIO_WritePin>
    CS_LOW_ST7735 ;
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	4890      	ldr	r0, [pc, #576]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002b12:	f000 fdbb 	bl	800368c <HAL_GPIO_WritePin>
	
	ST7735_SendCmd(ST7735_SWRESET);// программный ресет
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7ff ffc8 	bl	8002aac <ST7735_SendCmd>
	HAL_Delay(150);
 8002b1c:	2096      	movs	r0, #150	; 0x96
 8002b1e:	f000 fc8b 	bl	8003438 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_SLPOUT); // выход из спящего режима
 8002b22:	2011      	movs	r0, #17
 8002b24:	f7ff ffc2 	bl	8002aac <ST7735_SendCmd>
	HAL_Delay(500);
 8002b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b2c:	f000 fc84 	bl	8003438 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_FRMCTR1);//FRMCTR1 (B1h): Frame Rate Control (In normal mode/ Full colors)
 8002b30:	20b1      	movs	r0, #177	; 0xb1
 8002b32:	f7ff ffbb 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7ff ffa4 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	f7ff ffa1 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002b42:	202d      	movs	r0, #45	; 0x2d
 8002b44:	f7ff ff9e 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR2);//Frame Rate Control (In Idle mode/ 8-colors)
 8002b48:	20b2      	movs	r0, #178	; 0xb2
 8002b4a:	f7ff ffaf 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff ff98 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002b54:	202c      	movs	r0, #44	; 0x2c
 8002b56:	f7ff ff95 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002b5a:	202d      	movs	r0, #45	; 0x2d
 8002b5c:	f7ff ff92 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR3);//Frame Rate Control (In Partial mode/ full colors)
 8002b60:	20b3      	movs	r0, #179	; 0xb3
 8002b62:	f7ff ffa3 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7ff ff8c 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	f7ff ff89 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002b72:	202d      	movs	r0, #45	; 0x2d
 8002b74:	f7ff ff86 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x01);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff ff83 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002b7e:	202c      	movs	r0, #44	; 0x2c
 8002b80:	f7ff ff80 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002b84:	202d      	movs	r0, #45	; 0x2d
 8002b86:	f7ff ff7d 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVCTR); //  Display Inversion Control
 8002b8a:	20b4      	movs	r0, #180	; 0xb4
 8002b8c:	f7ff ff8e 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x07);
 8002b90:	2007      	movs	r0, #7
 8002b92:	f7ff ff77 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR1);
 8002b96:	20c0      	movs	r0, #192	; 0xc0
 8002b98:	f7ff ff88 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0xA2);
 8002b9c:	20a2      	movs	r0, #162	; 0xa2
 8002b9e:	f7ff ff71 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x02);
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f7ff ff6e 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x84);
 8002ba8:	2084      	movs	r0, #132	; 0x84
 8002baa:	f7ff ff6b 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR2);
 8002bae:	20c1      	movs	r0, #193	; 0xc1
 8002bb0:	f7ff ff7c 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0xC5);
 8002bb4:	20c5      	movs	r0, #197	; 0xc5
 8002bb6:	f7ff ff65 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR3);
 8002bba:	20c2      	movs	r0, #194	; 0xc2
 8002bbc:	f7ff ff76 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x0A);
 8002bc0:	200a      	movs	r0, #10
 8002bc2:	f7ff ff5f 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7ff ff5c 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR4);
 8002bcc:	20c3      	movs	r0, #195	; 0xc3
 8002bce:	f7ff ff6d 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8002bd2:	208a      	movs	r0, #138	; 0x8a
 8002bd4:	f7ff ff56 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2A);
 8002bd8:	202a      	movs	r0, #42	; 0x2a
 8002bda:	f7ff ff53 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR5);
 8002bde:	20c4      	movs	r0, #196	; 0xc4
 8002be0:	f7ff ff64 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 8002be4:	208a      	movs	r0, #138	; 0x8a
 8002be6:	f7ff ff4d 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0xEE);
 8002bea:	20ee      	movs	r0, #238	; 0xee
 8002bec:	f7ff ff4a 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_VMCTR1);
 8002bf0:	20c5      	movs	r0, #197	; 0xc5
 8002bf2:	f7ff ff5b 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x0E);
 8002bf6:	200e      	movs	r0, #14
 8002bf8:	f7ff ff44 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVOFF);
 8002bfc:	2020      	movs	r0, #32
 8002bfe:	f7ff ff55 	bl	8002aac <ST7735_SendCmd>
	
	ST7735_SendCmd(ST7735_MADCTL);	//
 8002c02:	2036      	movs	r0, #54	; 0x36
 8002c04:	f7ff ff52 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0xC8);			// RGB =1 => BGR color filter panel)
 8002c08:	20c8      	movs	r0, #200	; 0xc8
 8002c0a:	f7ff ff3b 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_COLMOD);
 8002c0e:	203a      	movs	r0, #58	; 0x3a
 8002c10:	f7ff ff4c 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x05);
 8002c14:	2005      	movs	r0, #5
 8002c16:	f7ff ff35 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_CASET);
 8002c1a:	202a      	movs	r0, #42	; 0x2a
 8002c1c:	f7ff ff46 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff ff2f 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7ff ff2c 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff ff29 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x7F);
 8002c32:	207f      	movs	r0, #127	; 0x7f
 8002c34:	f7ff ff26 	bl	8002a84 <ST7735_SendData>

	ST7735_SendCmd(ST7735_RASET);
 8002c38:	202b      	movs	r0, #43	; 0x2b
 8002c3a:	f7ff ff37 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7ff ff20 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7ff ff1d 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7ff ff1a 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x9F);
 8002c50:	209f      	movs	r0, #159	; 0x9f
 8002c52:	f7ff ff17 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRP1);
 8002c56:	20e0      	movs	r0, #224	; 0xe0
 8002c58:	f7ff ff28 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x02);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7ff ff11 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x1c);
 8002c62:	201c      	movs	r0, #28
 8002c64:	f7ff ff0e 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x07);
 8002c68:	2007      	movs	r0, #7
 8002c6a:	f7ff ff0b 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x12);
 8002c6e:	2012      	movs	r0, #18
 8002c70:	f7ff ff08 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x37);
 8002c74:	2037      	movs	r0, #55	; 0x37
 8002c76:	f7ff ff05 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x32);
 8002c7a:	2032      	movs	r0, #50	; 0x32
 8002c7c:	f7ff ff02 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x29);
 8002c80:	2029      	movs	r0, #41	; 0x29
 8002c82:	f7ff feff 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2d);
 8002c86:	202d      	movs	r0, #45	; 0x2d
 8002c88:	f7ff fefc 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x29);
 8002c8c:	2029      	movs	r0, #41	; 0x29
 8002c8e:	f7ff fef9 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x25);
 8002c92:	2025      	movs	r0, #37	; 0x25
 8002c94:	f7ff fef6 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2B);
 8002c98:	202b      	movs	r0, #43	; 0x2b
 8002c9a:	f7ff fef3 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x39);	
 8002c9e:	2039      	movs	r0, #57	; 0x39
 8002ca0:	f7ff fef0 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff feed 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x01);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7ff feea 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x03);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f7ff fee7 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x10);
 8002cb6:	2010      	movs	r0, #16
 8002cb8:	f7ff fee4 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRN1);
 8002cbc:	20e1      	movs	r0, #225	; 0xe1
 8002cbe:	f7ff fef5 	bl	8002aac <ST7735_SendCmd>
	ST7735_SendData(0x03);
 8002cc2:	2003      	movs	r0, #3
 8002cc4:	f7ff fede 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x1d);
 8002cc8:	201d      	movs	r0, #29
 8002cca:	f7ff fedb 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x07);
 8002cce:	2007      	movs	r0, #7
 8002cd0:	f7ff fed8 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x06);
 8002cd4:	2006      	movs	r0, #6
 8002cd6:	f7ff fed5 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8002cda:	202e      	movs	r0, #46	; 0x2e
 8002cdc:	f7ff fed2 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8002ce0:	202c      	movs	r0, #44	; 0x2c
 8002ce2:	f7ff fecf 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x29);
 8002ce6:	2029      	movs	r0, #41	; 0x29
 8002ce8:	f7ff fecc 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8002cec:	202d      	movs	r0, #45	; 0x2d
 8002cee:	f7ff fec9 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8002cf2:	202e      	movs	r0, #46	; 0x2e
 8002cf4:	f7ff fec6 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8002cf8:	202e      	movs	r0, #46	; 0x2e
 8002cfa:	f7ff fec3 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x37);
 8002cfe:	2037      	movs	r0, #55	; 0x37
 8002d00:	f7ff fec0 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x3F);	
 8002d04:	203f      	movs	r0, #63	; 0x3f
 8002d06:	f7ff febd 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff feba 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7ff feb7 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x02);
 8002d16:	2002      	movs	r0, #2
 8002d18:	f7ff feb4 	bl	8002a84 <ST7735_SendData>
	ST7735_SendData(0x10);
 8002d1c:	2010      	movs	r0, #16
 8002d1e:	f7ff feb1 	bl	8002a84 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_NORON);//  Normal Display Mode On
 8002d22:	2013      	movs	r0, #19
 8002d24:	f7ff fec2 	bl	8002aac <ST7735_SendCmd>
	HAL_Delay(10);
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f000 fb85 	bl	8003438 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_DISPON); // Display On
 8002d2e:	2029      	movs	r0, #41	; 0x29
 8002d30:	f7ff febc 	bl	8002aac <ST7735_SendCmd>
	HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f000 fb7f 	bl	8003438 <HAL_Delay>
	
	ST7735_SendCmd(ST7735_MADCTL);  // Memory Data Access Control
 8002d3a:	2036      	movs	r0, #54	; 0x36
 8002d3c:	f7ff feb6 	bl	8002aac <ST7735_SendCmd>
#ifdef VERTICAL
	ST7735_SendData(0x00);		    // Parameter D7 D6 D5 D4 D3  D2 D1 D0
									//			 MY MX MV ML RGB MH x  x
#endif									//           0  1  1  0   0  0  0  0   -> 0x60 - rotate display 90
	ST7735_SendData(0x60);
 8002d40:	2060      	movs	r0, #96	; 0x60
 8002d42:	f7ff fe9f 	bl	8002a84 <ST7735_SendData>

	CS_HIGH_ST7735 ;
 8002d46:	2201      	movs	r2, #1
 8002d48:	2110      	movs	r1, #16
 8002d4a:	4802      	ldr	r0, [pc, #8]	; (8002d54 <HAL_ST7735_Init+0x280>)
 8002d4c:	f000 fc9e 	bl	800368c <HAL_GPIO_WritePin>

}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40010800 	.word	0x40010800

08002d58 <ST7735_AddrSet>:




void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80bb      	strh	r3, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	807b      	strh	r3, [r7, #2]
 8002d72:	4613      	mov	r3, r2
 8002d74:	803b      	strh	r3, [r7, #0]
  ST7735_SendCmd(ST7735_CASET); // Column address set
 8002d76:	202a      	movs	r0, #42	; 0x2a
 8002d78:	f7ff fe98 	bl	8002aac <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2108      	movs	r1, #8
 8002d80:	4818      	ldr	r0, [pc, #96]	; (8002de4 <ST7735_AddrSet+0x8c>)
 8002d82:	f000 fc83 	bl	800368c <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff fe60 	bl	8002a4c <ST7735_write>
	ST7735_write(XS);
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe5b 	bl	8002a4c <ST7735_write>
	ST7735_write(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff fe58 	bl	8002a4c <ST7735_write>
	ST7735_write(XE);
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fe53 	bl	8002a4c <ST7735_write>

  ST7735_SendCmd(ST7735_RASET); // Row address set
 8002da6:	202b      	movs	r0, #43	; 0x2b
 8002da8:	f7ff fe80 	bl	8002aac <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	2108      	movs	r1, #8
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <ST7735_AddrSet+0x8c>)
 8002db2:	f000 fc6b 	bl	800368c <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7ff fe48 	bl	8002a4c <ST7735_write>
	ST7735_write(YS);
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fe43 	bl	8002a4c <ST7735_write>
	ST7735_write(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7ff fe40 	bl	8002a4c <ST7735_write>
	ST7735_write(YE);
 8002dcc:	883b      	ldrh	r3, [r7, #0]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fe3b 	bl	8002a4c <ST7735_write>

  ST7735_SendCmd(ST7735_RAMWR); // Memory write
 8002dd6:	202c      	movs	r0, #44	; 0x2c
 8002dd8:	f7ff fe68 	bl	8002aac <ST7735_SendCmd>
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	40010800 	.word	0x40010800

08002de8 <ST7735_Clear>:

void ST7735_Clear(uint16_t Color)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
	//	ST7735_Send(Color);


	uint16_t i;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(0,0,WIDTH+1,HEIGHT+1);
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	22a0      	movs	r2, #160	; 0xa0
 8002e02:	2100      	movs	r1, #0
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff ffa7 	bl	8002d58 <ST7735_AddrSet>
	A0_HIGH_ST7735 ;
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	480c      	ldr	r0, [pc, #48]	; (8002e40 <ST7735_Clear+0x58>)
 8002e10:	f000 fc3c 	bl	800368c <HAL_GPIO_WritePin>
	for(i=0;i<20480;i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	e00a      	b.n	8002e30 <ST7735_Clear+0x48>
	{
		ST7735_write(CH);
 8002e1a:	7b3b      	ldrb	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe15 	bl	8002a4c <ST7735_write>
		ST7735_write(CL);
 8002e22:	7b7b      	ldrb	r3, [r7, #13]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fe11 	bl	8002a4c <ST7735_write>
	for(i=0;i<20480;i++)
 8002e2a:	89fb      	ldrh	r3, [r7, #14]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	81fb      	strh	r3, [r7, #14]
 8002e30:	89fb      	ldrh	r3, [r7, #14]
 8002e32:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e36:	d3f0      	bcc.n	8002e1a <ST7735_Clear+0x32>
	}
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40010800 	.word	0x40010800

08002e44 <ST7735_DrawHLine>:
	ST7735_Send(CH);
	ST7735_Send(CL);
}

void ST7735_DrawHLine(uint8_t x,uint8_t x1,uint8_t y,uint16_t Color)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	4603      	mov	r3, r0
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	717b      	strb	r3, [r7, #5]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x1,y);
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	b298      	uxth	r0, r3
 8002e72:	797b      	ldrb	r3, [r7, #5]
 8002e74:	b299      	uxth	r1, r3
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	797b      	ldrb	r3, [r7, #5]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f7ff ff6b 	bl	8002d58 <ST7735_AddrSet>
	len = x1-x;
 8002e82:	79bb      	ldrb	r3, [r7, #6]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2108      	movs	r1, #8
 8002e92:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <ST7735_DrawHLine+0x80>)
 8002e94:	f000 fbfa 	bl	800368c <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	81fb      	strh	r3, [r7, #14]
 8002e9c:	e00a      	b.n	8002eb4 <ST7735_DrawHLine+0x70>
	{
		ST7735_Send(CH);
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fdd3 	bl	8002a4c <ST7735_write>
		ST7735_Send(CL);
 8002ea6:	7b7b      	ldrb	r3, [r7, #13]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdcf 	bl	8002a4c <ST7735_write>
	for(i=0;i<len;i++)
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	81fb      	strh	r3, [r7, #14]
 8002eb4:	89fa      	ldrh	r2, [r7, #14]
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3f0      	bcc.n	8002e9e <ST7735_DrawHLine+0x5a>
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x,uint8_t y,uint8_t y1,uint16_t Color)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	4603      	mov	r3, r0
 8002edc:	71bb      	strb	r3, [r7, #6]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	717b      	strb	r3, [r7, #5]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x,y1);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	b298      	uxth	r0, r3
 8002ef6:	79bb      	ldrb	r3, [r7, #6]
 8002ef8:	b299      	uxth	r1, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	797b      	ldrb	r3, [r7, #5]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f7ff ff29 	bl	8002d58 <ST7735_AddrSet>
	len = y1-y;
 8002f06:	797b      	ldrb	r3, [r7, #5]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	79bb      	ldrb	r3, [r7, #6]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 8002f12:	2201      	movs	r2, #1
 8002f14:	2108      	movs	r1, #8
 8002f16:	480c      	ldr	r0, [pc, #48]	; (8002f48 <ST7735_DrawVLine+0x80>)
 8002f18:	f000 fbb8 	bl	800368c <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	81fb      	strh	r3, [r7, #14]
 8002f20:	e00a      	b.n	8002f38 <ST7735_DrawVLine+0x70>
	{
		ST7735_Send(CH);
 8002f22:	7b3b      	ldrb	r3, [r7, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fd91 	bl	8002a4c <ST7735_write>
		ST7735_Send(CL);
 8002f2a:	7b7b      	ldrb	r3, [r7, #13]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fd8d 	bl	8002a4c <ST7735_write>
	for(i=0;i<len;i++)
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	3301      	adds	r3, #1
 8002f36:	81fb      	strh	r3, [r7, #14]
 8002f38:	89fa      	ldrh	r2, [r7, #14]
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d3f0      	bcc.n	8002f22 <ST7735_DrawVLine+0x5a>
	}
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	40010800 	.word	0x40010800

08002f4c <ST7735_DrawChar7x11>:
	}
}


void ST7735_DrawChar7x11(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4604      	mov	r4, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	71fb      	strb	r3, [r7, #7]
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71bb      	strb	r3, [r7, #6]
 8002f62:	460b      	mov	r3, r1
 8002f64:	717b      	strb	r3, [r7, #5]
 8002f66:	4613      	mov	r3, r2
 8002f68:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[11];	// содержит код символа uint8_t chr
	
	CL = color & 0xFF;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	777b      	strb	r3, [r7, #29]
	CH = (color>>8) & 0xFF;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	773b      	strb	r3, [r7, #28]
	
	BCL = background_color & 0xFF;
 8002f76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f78:	76fb      	strb	r3, [r7, #27]
	BCH = (background_color>>8) & 0xFF;
 8002f7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	76bb      	strb	r3, [r7, #26]
	
	memcpy(buffer,&Font7x11[(chr-32)*11],11);	// 32 - символ пробела - с него начинаются символы алфавита ASCII;
 8002f82:	797b      	ldrb	r3, [r7, #5]
 8002f84:	f1a3 0220 	sub.w	r2, r3, #32
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <ST7735_DrawChar7x11+0x120>)
 8002f94:	441a      	add	r2, r3
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	6810      	ldr	r0, [r2, #0]
 8002f9c:	6851      	ldr	r1, [r2, #4]
 8002f9e:	c303      	stmia	r3!, {r0, r1}
 8002fa0:	8911      	ldrh	r1, [r2, #8]
 8002fa2:	7a92      	ldrb	r2, [r2, #10]
 8002fa4:	8019      	strh	r1, [r3, #0]
 8002fa6:	709a      	strb	r2, [r3, #2]
												//таблица шрифтов начинается с символа пробела
												// копируем от начала символа, в таблице шрифтов, 11 элементов,
												//из 11 элементов состоит один символ шрифта
	ST7735_AddrSet(x,y,x+7,y+11);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	b298      	uxth	r0, r3
 8002fac:	79bb      	ldrb	r3, [r7, #6]
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	79bb      	ldrb	r3, [r7, #6]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	330b      	adds	r3, #11
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f7ff feca 	bl	8002d58 <ST7735_AddrSet>
	A0_HIGH_ST7735;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2108      	movs	r1, #8
 8002fc8:	4829      	ldr	r0, [pc, #164]	; (8003070 <ST7735_DrawChar7x11+0x124>)
 8002fca:	f000 fb5f 	bl	800368c <HAL_GPIO_WritePin>
	for(j=0;j<11;j++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	77bb      	strb	r3, [r7, #30]
 8002fd2:	e032      	b.n	800303a <ST7735_DrawChar7x11+0xee>
	{
		for(i=0;i<7;i++)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e021      	b.n	800301e <ST7735_DrawChar7x11+0xd2>
		{
			if((buffer[j] & (1<<i))==0)
 8002fda:	7fbb      	ldrb	r3, [r7, #30]
 8002fdc:	f107 0220 	add.w	r2, r7, #32
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	fa42 f303 	asr.w	r3, r2, r3
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <ST7735_DrawChar7x11+0xbc>
			{
				ST7735_write(BCH);
 8002ff6:	7ebb      	ldrb	r3, [r7, #26]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fd27 	bl	8002a4c <ST7735_write>
				ST7735_write(BCL);
 8002ffe:	7efb      	ldrb	r3, [r7, #27]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fd23 	bl	8002a4c <ST7735_write>
 8003006:	e007      	b.n	8003018 <ST7735_DrawChar7x11+0xcc>
			}
			else
			{
				ST7735_write(CH);
 8003008:	7f3b      	ldrb	r3, [r7, #28]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fd1e 	bl	8002a4c <ST7735_write>
				ST7735_write(CL);
 8003010:	7f7b      	ldrb	r3, [r7, #29]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fd1a 	bl	8002a4c <ST7735_write>
		for(i=0;i<7;i++)
 8003018:	7ffb      	ldrb	r3, [r7, #31]
 800301a:	3301      	adds	r3, #1
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d9da      	bls.n	8002fda <ST7735_DrawChar7x11+0x8e>
			}			
		}
		ST7735_write(BCH);
 8003024:	7ebb      	ldrb	r3, [r7, #26]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd10 	bl	8002a4c <ST7735_write>
		ST7735_write(BCL);
 800302c:	7efb      	ldrb	r3, [r7, #27]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fd0c 	bl	8002a4c <ST7735_write>
	for(j=0;j<11;j++)
 8003034:	7fbb      	ldrb	r3, [r7, #30]
 8003036:	3301      	adds	r3, #1
 8003038:	77bb      	strb	r3, [r7, #30]
 800303a:	7fbb      	ldrb	r3, [r7, #30]
 800303c:	2b0a      	cmp	r3, #10
 800303e:	d9c9      	bls.n	8002fd4 <ST7735_DrawChar7x11+0x88>
	}
	for(i=0;i<8;i++)
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e00a      	b.n	800305c <ST7735_DrawChar7x11+0x110>
	{
		ST7735_write(BCH);
 8003046:	7ebb      	ldrb	r3, [r7, #26]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fcff 	bl	8002a4c <ST7735_write>
		ST7735_write(BCL);
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fcfb 	bl	8002a4c <ST7735_write>
	for(i=0;i<8;i++)
 8003056:	7ffb      	ldrb	r3, [r7, #31]
 8003058:	3301      	adds	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	2b07      	cmp	r3, #7
 8003060:	d9f1      	bls.n	8003046 <ST7735_DrawChar7x11+0xfa>
	}
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	080097ec 	.word	0x080097ec
 8003070:	40010800 	.word	0x40010800

08003074 <ST7735_DrawString7x11>:

void ST7735_DrawString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af02      	add	r7, sp, #8
 800307a:	603a      	str	r2, [r7, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
 8003082:	460b      	mov	r3, r1
 8003084:	71bb      	strb	r3, [r7, #6]
 8003086:	4613      	mov	r3, r2
 8003088:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 800308e:	e013      	b.n	80030b8 <ST7735_DrawString7x11+0x44>
	{
		ST7735_DrawChar7x11(x+(8*i),y,chr[i],color,background_color);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	b2da      	uxtb	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4413      	add	r3, r2
 800309a:	b2d8      	uxtb	r0, r3
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	88bc      	ldrh	r4, [r7, #4]
 80030a6:	79b9      	ldrb	r1, [r7, #6]
 80030a8:	8c3b      	ldrh	r3, [r7, #32]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4623      	mov	r3, r4
 80030ae:	f7ff ff4d 	bl	8002f4c <ST7735_DrawChar7x11>
		i++;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	3301      	adds	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <ST7735_DrawString7x11+0x1c>
	}
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <ST7735_DrawNString7x11>:

void ST7735_DrawNString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color, uint8_t n)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	603a      	str	r2, [r7, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	460b      	mov	r3, r1
 80030dc:	71bb      	strb	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
	uint8_t CHR=0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73bb      	strb	r3, [r7, #14]
	while(n-- != 0)
 80030ea:	e01a      	b.n	8003122 <ST7735_DrawNString7x11+0x56>
	{
		//ST7735_DrawChar7x11(x+(8*i),y, *chr++,color,background_color);
		CHR = chr[i];
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	73bb      	strb	r3, [r7, #14]
		if(CHR == '\0') CHR=0x20;
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <ST7735_DrawNString7x11+0x34>
 80030fc:	2320      	movs	r3, #32
 80030fe:	73bb      	strb	r3, [r7, #14]
		ST7735_DrawChar7x11(x+(8*i),y,CHR,color,background_color);
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	4413      	add	r3, r2
 800310a:	b2d8      	uxtb	r0, r3
 800310c:	88bc      	ldrh	r4, [r7, #4]
 800310e:	7bba      	ldrb	r2, [r7, #14]
 8003110:	79b9      	ldrb	r1, [r7, #6]
 8003112:	8c3b      	ldrh	r3, [r7, #32]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4623      	mov	r3, r4
 8003118:	f7ff ff18 	bl	8002f4c <ST7735_DrawChar7x11>
		i++;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	3301      	adds	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
	while(n-- != 0)
 8003122:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1dd      	bne.n	80030ec <ST7735_DrawNString7x11+0x20>
	}
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle (uint8_t x,uint8_t y,uint8_t w,uint8_t h,uint16_t Color)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4623      	mov	r3, r4
 8003148:	71fb      	strb	r3, [r7, #7]
 800314a:	4603      	mov	r3, r0
 800314c:	71bb      	strb	r3, [r7, #6]
 800314e:	460b      	mov	r3, r1
 8003150:	717b      	strb	r3, [r7, #5]
 8003152:	4613      	mov	r3, r2
 8003154:	713b      	strb	r3, [r7, #4]
	ST7735_DrawHLine(x,x+w,y,Color);
 8003156:	79fa      	ldrb	r2, [r7, #7]
 8003158:	797b      	ldrb	r3, [r7, #5]
 800315a:	4413      	add	r3, r2
 800315c:	b2d9      	uxtb	r1, r3
 800315e:	8b3b      	ldrh	r3, [r7, #24]
 8003160:	79ba      	ldrb	r2, [r7, #6]
 8003162:	79f8      	ldrb	r0, [r7, #7]
 8003164:	f7ff fe6e 	bl	8002e44 <ST7735_DrawHLine>
	ST7735_DrawVLine(x+w,y,y+h+1,Color);
 8003168:	79fa      	ldrb	r2, [r7, #7]
 800316a:	797b      	ldrb	r3, [r7, #5]
 800316c:	4413      	add	r3, r2
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	79ba      	ldrb	r2, [r7, #6]
 8003172:	793b      	ldrb	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	8b3b      	ldrh	r3, [r7, #24]
 800317e:	79b9      	ldrb	r1, [r7, #6]
 8003180:	f7ff fea2 	bl	8002ec8 <ST7735_DrawVLine>
	ST7735_DrawHLine(x,x+w,y+h,Color);
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	797b      	ldrb	r3, [r7, #5]
 8003188:	4413      	add	r3, r2
 800318a:	b2d9      	uxtb	r1, r3
 800318c:	79ba      	ldrb	r2, [r7, #6]
 800318e:	793b      	ldrb	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	b2da      	uxtb	r2, r3
 8003194:	8b3b      	ldrh	r3, [r7, #24]
 8003196:	79f8      	ldrb	r0, [r7, #7]
 8003198:	f7ff fe54 	bl	8002e44 <ST7735_DrawHLine>
	ST7735_DrawVLine(x,y,y+h,Color);
 800319c:	79ba      	ldrb	r2, [r7, #6]
 800319e:	793b      	ldrb	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8b3b      	ldrh	r3, [r7, #24]
 80031a6:	79b9      	ldrb	r1, [r7, #6]
 80031a8:	79f8      	ldrb	r0, [r7, #7]
 80031aa:	f7ff fe8d 	bl	8002ec8 <ST7735_DrawVLine>
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
	...

080031b8 <ST7735_ListBox_Draw>:
		ST7735_Send(BCL);
	}
}
//ListBox
void ST7735_ListBox_Draw(ST7735_ListBox* lb)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
	uint8_t BCH,BCL,SCH,SCL;
	uint16_t tmp,i, item, BGCol;
	
	ST7735_DrawRectangle(lb->x,lb->y,lb->w,lb->h,lb->BorderColor);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7818      	ldrb	r0, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7859      	ldrb	r1, [r3, #1]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	78da      	ldrb	r2, [r3, #3]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	789c      	ldrb	r4, [r3, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	889b      	ldrh	r3, [r3, #4]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7ff ffae 	bl	8003138 <ST7735_DrawRectangle>
	ST7735_DrawRectangle(lb->x+2,lb->y+2,lb->w-4,lb->h-4,lb->BorderColor);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	3302      	adds	r3, #2
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	3302      	adds	r3, #2
 80031ea:	b2d9      	uxtb	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	3b04      	subs	r3, #4
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	789b      	ldrb	r3, [r3, #2]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	b2dc      	uxtb	r4, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	889b      	ldrh	r3, [r3, #4]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4623      	mov	r3, r4
 8003204:	f7ff ff98 	bl	8003138 <ST7735_DrawRectangle>

	ST7735_AddrSet(lb->x+1,lb->y+1,lb->x+lb->w-1,lb->y+lb->h-1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	3301      	adds	r3, #1
 8003210:	b298      	uxth	r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	b29b      	uxth	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	b299      	uxth	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	78db      	ldrb	r3, [r3, #3]
 8003226:	b29b      	uxth	r3, r3
 8003228:	4413      	add	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29c      	uxth	r4, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	789b      	ldrb	r3, [r3, #2]
 800323a:	b29b      	uxth	r3, r3
 800323c:	4413      	add	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	4622      	mov	r2, r4
 8003246:	f7ff fd87 	bl	8002d58 <ST7735_AddrSet>
	tmp = lb->w * lb->h;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	78db      	ldrb	r3, [r3, #3]
 800324e:	b29b      	uxth	r3, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	7892      	ldrb	r2, [r2, #2]
 8003254:	b292      	uxth	r2, r2
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	827b      	strh	r3, [r7, #18]
	
	BCL = lb->BackgroundColor & 0xFF;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	88db      	ldrh	r3, [r3, #6]
 8003260:	747b      	strb	r3, [r7, #17]
	BCH = (lb->BackgroundColor>>8) & 0xFF;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	88db      	ldrh	r3, [r3, #6]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	743b      	strb	r3, [r7, #16]
	SCL = lb->SelectedItemColor & 0xFF;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	895b      	ldrh	r3, [r3, #10]
 8003270:	73fb      	strb	r3, [r7, #15]
	SCH = (lb->SelectedItemColor>>8) & 0xFF;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	895b      	ldrh	r3, [r3, #10]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b29b      	uxth	r3, r3
 800327a:	73bb      	strb	r3, [r7, #14]
	A0_HIGH_ST7735;
 800327c:	2201      	movs	r2, #1
 800327e:	2108      	movs	r1, #8
 8003280:	4825      	ldr	r0, [pc, #148]	; (8003318 <ST7735_ListBox_Draw+0x160>)
 8003282:	f000 fa03 	bl	800368c <HAL_GPIO_WritePin>
		ST7735_Send(BCH);
		ST7735_Send(BCL);
	}*/
	
	//item = 0;
	for(i=0;i<lb->items_count;i++)
 8003286:	2300      	movs	r3, #0
 8003288:	82fb      	strh	r3, [r7, #22]
 800328a:	e03b      	b.n	8003304 <ST7735_ListBox_Draw+0x14c>
	{
		if(lb->items[i].visible == 1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	8afb      	ldrh	r3, [r7, #22]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	791b      	ldrb	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d130      	bne.n	80032fe <ST7735_ListBox_Draw+0x146>
		{
			BGCol = lb->BackgroundColor;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	88db      	ldrh	r3, [r3, #6]
 80032a0:	82bb      	strh	r3, [r7, #20]
			uint16_t ty = lb->y + (LINE_HEIGTH*i)+5;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	8afb      	ldrh	r3, [r7, #22]
 80032aa:	4619      	mov	r1, r3
 80032ac:	0049      	lsls	r1, r1, #1
 80032ae:	4419      	add	r1, r3
 80032b0:	0089      	lsls	r1, r1, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3305      	adds	r3, #5
 80032bc:	81bb      	strh	r3, [r7, #12]
			if(lb->items[i].selected)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	8afb      	ldrh	r3, [r7, #22]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	795b      	ldrb	r3, [r3, #5]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <ST7735_ListBox_Draw+0x11c>
				for(j = 0;j<colored;j++)
				{
					ST7735_Send(SCH);
					ST7735_Send(SCL);
				}*/
				BGCol = lb->SelectedItemColor;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	895b      	ldrh	r3, [r3, #10]
 80032d2:	82bb      	strh	r3, [r7, #20]
			}
			ST7735_DrawNString7x11(lb->x+9,ty,(uint8_t *)lb->items[i].text,lb->ItemTextColor,BGCol, FILENAME_SIZE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	3309      	adds	r3, #9
 80032da:	b2d8      	uxtb	r0, r3
 80032dc:	89bb      	ldrh	r3, [r7, #12]
 80032de:	b2d9      	uxtb	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	8afb      	ldrh	r3, [r7, #22]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	891c      	ldrh	r4, [r3, #8]
 80032f0:	230d      	movs	r3, #13
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	8abb      	ldrh	r3, [r7, #20]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	4623      	mov	r3, r4
 80032fa:	f7ff fee7 	bl	80030cc <ST7735_DrawNString7x11>
	for(i=0;i<lb->items_count;i++)
 80032fe:	8afb      	ldrh	r3, [r7, #22]
 8003300:	3301      	adds	r3, #1
 8003302:	82fb      	strh	r3, [r7, #22]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7c1b      	ldrb	r3, [r3, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	8afa      	ldrh	r2, [r7, #22]
 800330c:	429a      	cmp	r2, r3
 800330e:	d3bd      	bcc.n	800328c <ST7735_ListBox_Draw+0xd4>
		}
	}
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	40010800 	.word	0x40010800

0800331c <ST7735_ListBox_StructInit>:
{
	return lb->items[lb->SelectedItemIndex];
}

void ST7735_ListBox_StructInit(ST7735_ListBox* lb,uint8_t x,uint8_t y,ST7735_ListBox_Item* items,uint8_t item_count)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	72fb      	strb	r3, [r7, #11]
 800332a:	4613      	mov	r3, r2
 800332c:	72bb      	strb	r3, [r7, #10]
	FileList.BorderColor=COLOR565_DARK_SLATE_BLUE;
	FileList.SelectedItemColor=COLOR565_BLANCHED_ALMOND;
	FileList.ItemTextColor=COLOR565_TEAL;*/
	//lb->BackgroundColor = COLOR565_CRIMSON;
	//lb->BorderColor = COLOR565_ALICE_BLUE;
	lb->items = items;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
	lb->items_count = item_count;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	7e3a      	ldrb	r2, [r7, #24]
 8003338:	741a      	strb	r2, [r3, #16]
	//lb->ItemTextColor = COLOR565_ALICE_BLUE;
	//lb->SelectedItemColor = COLOR565_DARK_BLUE;
	lb->SelectedItemIndex = 0;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	745a      	strb	r2, [r3, #17]
	//lb->w = 75;
	lb->w = WIDTH;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	229f      	movs	r2, #159	; 0x9f
 8003344:	70da      	strb	r2, [r3, #3]
	//lb->w = FILENAME_SIZE*8;
	lb->h = item_count *LINE_HEIGTH+7;
 8003346:	7e3b      	ldrb	r3, [r7, #24]
 8003348:	461a      	mov	r2, r3
 800334a:	0052      	lsls	r2, r2, #1
 800334c:	441a      	add	r2, r3
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	4413      	add	r3, r2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3307      	adds	r3, #7
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	709a      	strb	r2, [r3, #2]
	lb->x = x;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	7afa      	ldrb	r2, [r7, #11]
 8003360:	701a      	strb	r2, [r3, #0]
	lb->y = y;///////////////смещение вниз от верхнего края на 15 пикселей
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	7aba      	ldrb	r2, [r7, #10]
 8003366:	705a      	strb	r2, [r3, #1]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_Init+0x28>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <HAL_Init+0x28>)
 800337e:	f043 0310 	orr.w	r3, r3, #16
 8003382:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003384:	2003      	movs	r0, #3
 8003386:	f000 f929 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800338a:	2000      	movs	r0, #0
 800338c:	f000 f808 	bl	80033a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003390:	f7fe f87a 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40022000 	.word	0x40022000

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_InitTick+0x54>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_InitTick+0x58>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f958 	bl	8003674 <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00e      	b.n	80033ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d80a      	bhi.n	80033ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d4:	2200      	movs	r2, #0
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f000 f91e 	bl	800361c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <HAL_InitTick+0x5c>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000008 	.word	0x20000008
 80033f8:	20000010 	.word	0x20000010
 80033fc:	2000000c 	.word	0x2000000c

08003400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_IncTick+0x1c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_IncTick+0x20>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_IncTick+0x20>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000010 	.word	0x20000010
 8003420:	20000408 	.word	0x20000408

08003424 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b02      	ldr	r3, [pc, #8]	; (8003434 <HAL_GetTick+0x10>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	20000408 	.word	0x20000408

08003438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003440:	f7ff fff0 	bl	8003424 <HAL_GetTick>
 8003444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d005      	beq.n	800345e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_Delay+0x40>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800345e:	bf00      	nop
 8003460:	f7ff ffe0 	bl	8003424 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d8f7      	bhi.n	8003460 <HAL_Delay+0x28>
  {
  }
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000010 	.word	0x20000010

0800347c <__NVIC_SetPriorityGrouping>:
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ae:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60d3      	str	r3, [r2, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_GetPriorityGrouping>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__NVIC_GetPriorityGrouping+0x18>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0307 	and.w	r3, r3, #7
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_SetPriority>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	; (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f7ff ff90 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b07      	cmp	r3, #7
 80035e8:	d00f      	beq.n	800360a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d00c      	beq.n	800360a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d009      	beq.n	800360a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d006      	beq.n	800360a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d003      	beq.n	800360a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003602:	2192      	movs	r1, #146	; 0x92
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003606:	f7fd fbc5 	bl	8000d94 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff36 	bl	800347c <__NVIC_SetPriorityGrouping>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	08009650 	.word	0x08009650

0800361c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d903      	bls.n	800363c <HAL_NVIC_SetPriority+0x20>
 8003634:	21aa      	movs	r1, #170	; 0xaa
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <HAL_NVIC_SetPriority+0x54>)
 8003638:	f7fd fbac 	bl	8000d94 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	d903      	bls.n	800364a <HAL_NVIC_SetPriority+0x2e>
 8003642:	21ab      	movs	r1, #171	; 0xab
 8003644:	480a      	ldr	r0, [pc, #40]	; (8003670 <HAL_NVIC_SetPriority+0x54>)
 8003646:	f7fd fba5 	bl	8000d94 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364a:	f7ff ff3b 	bl	80034c4 <__NVIC_GetPriorityGrouping>
 800364e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7ff ff6d 	bl	8003534 <NVIC_EncodePriority>
 800365a:	4602      	mov	r2, r0
 800365c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff3c 	bl	80034e0 <__NVIC_SetPriority>
}
 8003668:	bf00      	nop
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	08009650 	.word	0x08009650

08003674 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff8b 	bl	8003598 <SysTick_Config>
 8003682:	4603      	mov	r3, r0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <HAL_GPIO_WritePin+0x20>
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_GPIO_WritePin+0x2a>
 80036ac:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80036b0:	480e      	ldr	r0, [pc, #56]	; (80036ec <HAL_GPIO_WritePin+0x60>)
 80036b2:	f7fd fb6f 	bl	8000d94 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80036b6:	787b      	ldrb	r3, [r7, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_GPIO_WritePin+0x40>
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d004      	beq.n	80036cc <HAL_GPIO_WritePin+0x40>
 80036c2:	f240 11d5 	movw	r1, #469	; 0x1d5
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <HAL_GPIO_WritePin+0x60>)
 80036c8:	f7fd fb64 	bl	8000d94 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036d8:	e003      	b.n	80036e2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	041a      	lsls	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	0800968c 	.word	0x0800968c

080036f0 <LL_GPIO_SetPinMode>:
{
 80036f0:	b490      	push	{r4, r7}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	0e1b      	lsrs	r3, r3, #24
 8003704:	4413      	add	r3, r2
 8003706:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	613b      	str	r3, [r7, #16]
  return result;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	210f      	movs	r1, #15
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	61bb      	str	r3, [r7, #24]
  return result;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	4313      	orrs	r3, r2
 8003748:	6023      	str	r3, [r4, #0]
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bc90      	pop	{r4, r7}
 8003752:	4770      	bx	lr

08003754 <LL_GPIO_SetPinSpeed>:
{
 8003754:	b490      	push	{r4, r7}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0e1b      	lsrs	r3, r3, #24
 8003768:	4413      	add	r3, r2
 800376a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	613b      	str	r3, [r7, #16]
  return result;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	2103      	movs	r1, #3
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	61bb      	str	r3, [r7, #24]
  return result;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	6023      	str	r3, [r4, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc90      	pop	{r4, r7}
 80037b6:	4770      	bx	lr

080037b8 <LL_GPIO_SetPinOutputType>:
{
 80037b8:	b490      	push	{r4, r7}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	0e1b      	lsrs	r3, r3, #24
 80037cc:	4413      	add	r3, r2
 80037ce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	613b      	str	r3, [r7, #16]
  return result;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	2104      	movs	r1, #4
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	401a      	ands	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	61bb      	str	r3, [r7, #24]
  return result;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	4313      	orrs	r3, r2
 8003810:	6023      	str	r3, [r4, #0]
}
 8003812:	bf00      	nop
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bc90      	pop	{r4, r7}
 800381a:	4770      	bx	lr

0800381c <LL_GPIO_SetPinPull>:
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	613b      	str	r3, [r7, #16]
  return result;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4619      	mov	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	408b      	lsls	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60da      	str	r2, [r3, #12]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a62      	ldr	r2, [pc, #392]	; (80039f8 <LL_GPIO_Init+0x198>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <LL_GPIO_Init+0x3a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a61      	ldr	r2, [pc, #388]	; (80039fc <LL_GPIO_Init+0x19c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <LL_GPIO_Init+0x3a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a60      	ldr	r2, [pc, #384]	; (8003a00 <LL_GPIO_Init+0x1a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <LL_GPIO_Init+0x3a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a5f      	ldr	r2, [pc, #380]	; (8003a04 <LL_GPIO_Init+0x1a4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <LL_GPIO_Init+0x3a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a5e      	ldr	r2, [pc, #376]	; (8003a08 <LL_GPIO_Init+0x1a8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <LL_GPIO_Init+0x3a>
 8003892:	21a3      	movs	r1, #163	; 0xa3
 8003894:	485d      	ldr	r0, [pc, #372]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 8003896:	f7fd fa7d 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <LL_GPIO_Init+0x52>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <LL_GPIO_Init+0x5a>
 80038b2:	21a4      	movs	r1, #164	; 0xa4
 80038b4:	4855      	ldr	r0, [pc, #340]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 80038b6:	f7fd fa6d 	bl	8000d94 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	60fb      	str	r3, [r7, #12]
  return result;
 80038d0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80038da:	e080      	b.n	80039de <LL_GPIO_Init+0x17e>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	409a      	lsls	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d076      	beq.n	80039d8 <LL_GPIO_Init+0x178>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d806      	bhi.n	80038fe <LL_GPIO_Init+0x9e>
      {
        currentpin = (0x00000101uL << pinpos);
 80038f0:	f240 1201 	movw	r2, #257	; 0x101
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e008      	b.n	8003910 <LL_GPIO_Init+0xb0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b08      	subs	r3, #8
 8003902:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390e:	61bb      	str	r3, [r7, #24]
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <LL_GPIO_Init+0xe0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d00f      	beq.n	8003940 <LL_GPIO_Init+0xe0>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d00b      	beq.n	8003940 <LL_GPIO_Init+0xe0>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d007      	beq.n	8003940 <LL_GPIO_Init+0xe0>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b09      	cmp	r3, #9
 8003936:	d003      	beq.n	8003940 <LL_GPIO_Init+0xe0>
 8003938:	21bd      	movs	r1, #189	; 0xbd
 800393a:	4834      	ldr	r0, [pc, #208]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 800393c:	f7fd fa2a 	bl	8000d94 <assert_failed>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <LL_GPIO_Init+0xf8>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d003      	beq.n	8003958 <LL_GPIO_Init+0xf8>
 8003950:	21be      	movs	r1, #190	; 0xbe
 8003952:	482e      	ldr	r0, [pc, #184]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 8003954:	f7fd fa1e 	bl	8000d94 <assert_failed>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	461a      	mov	r2, r3
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff5b 	bl	800381c <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff febe 	bl	80036f0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d003      	beq.n	8003984 <LL_GPIO_Init+0x124>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b09      	cmp	r3, #9
 8003982:	d129      	bne.n	80039d8 <LL_GPIO_Init+0x178>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d00b      	beq.n	80039a4 <LL_GPIO_Init+0x144>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d007      	beq.n	80039a4 <LL_GPIO_Init+0x144>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <LL_GPIO_Init+0x144>
 800399c:	21c9      	movs	r1, #201	; 0xc9
 800399e:	481b      	ldr	r0, [pc, #108]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 80039a0:	f7fd f9f8 	bl	8000d94 <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <LL_GPIO_Init+0x15c>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d003      	beq.n	80039bc <LL_GPIO_Init+0x15c>
 80039b4:	21ca      	movs	r1, #202	; 0xca
 80039b6:	4815      	ldr	r0, [pc, #84]	; (8003a0c <LL_GPIO_Init+0x1ac>)
 80039b8:	f7fd f9ec 	bl	8000d94 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	461a      	mov	r2, r3
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fec5 	bl	8003754 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fef0 	bl	80037b8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3301      	adds	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f47f af78 	bne.w	80038dc <LL_GPIO_Init+0x7c>
  }
  return (SUCCESS);
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40010800 	.word	0x40010800
 80039fc:	40010c00 	.word	0x40010c00
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	40011800 	.word	0x40011800
 8003a0c:	080096c8 	.word	0x080096c8

08003a10 <LL_SPI_IsEnabled>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d101      	bne.n	8003a28 <LL_SPI_IsEnabled+0x18>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <LL_SPI_IsEnabled+0x1a>
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <LL_SPI_SetCRCPolynomial>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
	...

08003a54 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a77      	ldr	r2, [pc, #476]	; (8003c44 <LL_SPI_Init+0x1f0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <LL_SPI_Init+0x26>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a76      	ldr	r2, [pc, #472]	; (8003c48 <LL_SPI_Init+0x1f4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <LL_SPI_Init+0x26>
 8003a72:	21b7      	movs	r1, #183	; 0xb7
 8003a74:	4875      	ldr	r0, [pc, #468]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003a76:	f7fd f98d 	bl	8000d94 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <LL_SPI_Init+0x54>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d00d      	beq.n	8003aa8 <LL_SPI_Init+0x54>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a94:	d008      	beq.n	8003aa8 <LL_SPI_Init+0x54>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a9e:	d003      	beq.n	8003aa8 <LL_SPI_Init+0x54>
 8003aa0:	21ba      	movs	r1, #186	; 0xba
 8003aa2:	486a      	ldr	r0, [pc, #424]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003aa4:	f7fd f976 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab0:	d007      	beq.n	8003ac2 <LL_SPI_Init+0x6e>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <LL_SPI_Init+0x6e>
 8003aba:	21bb      	movs	r1, #187	; 0xbb
 8003abc:	4863      	ldr	r0, [pc, #396]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003abe:	f7fd f969 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <LL_SPI_Init+0x88>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad2:	d003      	beq.n	8003adc <LL_SPI_Init+0x88>
 8003ad4:	21bc      	movs	r1, #188	; 0xbc
 8003ad6:	485d      	ldr	r0, [pc, #372]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003ad8:	f7fd f95c 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <LL_SPI_Init+0xa0>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d003      	beq.n	8003af4 <LL_SPI_Init+0xa0>
 8003aec:	21bd      	movs	r1, #189	; 0xbd
 8003aee:	4857      	ldr	r0, [pc, #348]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003af0:	f7fd f950 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <LL_SPI_Init+0xb8>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d003      	beq.n	8003b0c <LL_SPI_Init+0xb8>
 8003b04:	21be      	movs	r1, #190	; 0xbe
 8003b06:	4851      	ldr	r0, [pc, #324]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003b08:	f7fd f944 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d00c      	beq.n	8003b30 <LL_SPI_Init+0xdc>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <LL_SPI_Init+0xdc>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b26:	d003      	beq.n	8003b30 <LL_SPI_Init+0xdc>
 8003b28:	21bf      	movs	r1, #191	; 0xbf
 8003b2a:	4848      	ldr	r0, [pc, #288]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003b2c:	f7fd f932 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01f      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d01b      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d017      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b18      	cmp	r3, #24
 8003b4e:	d013      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d00f      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b28      	cmp	r3, #40	; 0x28
 8003b5e:	d00b      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d007      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b38      	cmp	r3, #56	; 0x38
 8003b6e:	d003      	beq.n	8003b78 <LL_SPI_Init+0x124>
 8003b70:	21c0      	movs	r1, #192	; 0xc0
 8003b72:	4836      	ldr	r0, [pc, #216]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003b74:	f7fd f90e 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d007      	beq.n	8003b90 <LL_SPI_Init+0x13c>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <LL_SPI_Init+0x13c>
 8003b88:	21c1      	movs	r1, #193	; 0xc1
 8003b8a:	4830      	ldr	r0, [pc, #192]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003b8c:	f7fd f902 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d007      	beq.n	8003baa <LL_SPI_Init+0x156>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <LL_SPI_Init+0x156>
 8003ba2:	21c2      	movs	r1, #194	; 0xc2
 8003ba4:	4829      	ldr	r0, [pc, #164]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003ba6:	f7fd f8f5 	bl	8000d94 <assert_failed>

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff30 	bl	8003a10 <LL_SPI_IsEnabled>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d141      	bne.n	8003c3a <LL_SPI_Init+0x1e6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bbe:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6852      	ldr	r2, [r2, #4]
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	4311      	orrs	r1, r2
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6912      	ldr	r2, [r2, #16]
 8003bdc:	4311      	orrs	r1, r2
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	6952      	ldr	r2, [r2, #20]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	6992      	ldr	r2, [r2, #24]
 8003be8:	4311      	orrs	r1, r2
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	69d2      	ldr	r2, [r2, #28]
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	6a12      	ldr	r2, [r2, #32]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 0204 	bic.w	r2, r3, #4
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d10d      	bne.n	8003c36 <LL_SPI_Init+0x1e2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <LL_SPI_Init+0x1d6>
 8003c22:	21e5      	movs	r1, #229	; 0xe5
 8003c24:	4809      	ldr	r0, [pc, #36]	; (8003c4c <LL_SPI_Init+0x1f8>)
 8003c26:	f7fd f8b5 	bl	8000d94 <assert_failed>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff feff 	bl	8003a34 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40013000 	.word	0x40013000
 8003c48:	40003800 	.word	0x40003800
 8003c4c:	08009700 	.word	0x08009700

08003c50 <LL_TIM_SetPrescaler>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <LL_TIM_SetAutoReload>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <LL_TIM_SetRepetitionCounter>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <LL_TIM_OC_SetCompareCH1>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <LL_TIM_OC_SetCompareCH2>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_TIM_OC_SetCompareCH3>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <LL_TIM_OC_SetCompareCH4>:
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	615a      	str	r2, [r3, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a48      	ldr	r2, [pc, #288]	; (8003e54 <LL_TIM_Init+0x130>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d010      	beq.n	8003d58 <LL_TIM_Init+0x34>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d00c      	beq.n	8003d58 <LL_TIM_Init+0x34>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a45      	ldr	r2, [pc, #276]	; (8003e58 <LL_TIM_Init+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d008      	beq.n	8003d58 <LL_TIM_Init+0x34>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a44      	ldr	r2, [pc, #272]	; (8003e5c <LL_TIM_Init+0x138>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <LL_TIM_Init+0x34>
 8003d4e:	f240 1149 	movw	r1, #329	; 0x149
 8003d52:	4843      	ldr	r0, [pc, #268]	; (8003e60 <LL_TIM_Init+0x13c>)
 8003d54:	f7fd f81e 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d014      	beq.n	8003d8a <LL_TIM_Init+0x66>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d010      	beq.n	8003d8a <LL_TIM_Init+0x66>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d00c      	beq.n	8003d8a <LL_TIM_Init+0x66>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d008      	beq.n	8003d8a <LL_TIM_Init+0x66>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b60      	cmp	r3, #96	; 0x60
 8003d7e:	d004      	beq.n	8003d8a <LL_TIM_Init+0x66>
 8003d80:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003d84:	4836      	ldr	r0, [pc, #216]	; (8003e60 <LL_TIM_Init+0x13c>)
 8003d86:	f7fd f805 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <LL_TIM_Init+0x8c>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d009      	beq.n	8003db0 <LL_TIM_Init+0x8c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d004      	beq.n	8003db0 <LL_TIM_Init+0x8c>
 8003da6:	f240 114b 	movw	r1, #331	; 0x14b
 8003daa:	482d      	ldr	r0, [pc, #180]	; (8003e60 <LL_TIM_Init+0x13c>)
 8003dac:	f7fc fff2 	bl	8000d94 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <LL_TIM_Init+0x130>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <LL_TIM_Init+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d007      	beq.n	8003dd6 <LL_TIM_Init+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <LL_TIM_Init+0x134>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <LL_TIM_Init+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <LL_TIM_Init+0x138>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d106      	bne.n	8003de4 <LL_TIM_Init+0xc0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <LL_TIM_Init+0x130>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <LL_TIM_Init+0xe0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d007      	beq.n	8003e04 <LL_TIM_Init+0xe0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <LL_TIM_Init+0x134>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <LL_TIM_Init+0xe0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <LL_TIM_Init+0x138>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d106      	bne.n	8003e12 <LL_TIM_Init+0xee>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff23 	bl	8003c6a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff10 	bl	8003c50 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <LL_TIM_Init+0x130>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d105      	bne.n	8003e44 <LL_TIM_Init+0x120>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff20 	bl	8003c84 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff5e 	bl	8003d06 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	08009738 	.word	0x08009738

08003e64 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d012      	beq.n	8003ea0 <LL_TIM_OC_Init+0x3c>
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d802      	bhi.n	8003e84 <LL_TIM_OC_Init+0x20>
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003e82:	e022      	b.n	8003eca <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d011      	beq.n	8003eae <LL_TIM_OC_Init+0x4a>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d015      	beq.n	8003ebc <LL_TIM_OC_Init+0x58>
      break;
 8003e90:	e01b      	b.n	8003eca <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8cf 	bl	8004038 <OC1Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9e:	e014      	b.n	8003eca <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f9be 	bl	8004224 <OC2Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	e00d      	b.n	8003eca <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fab1 	bl	8004418 <OC3Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	e006      	b.n	8003eca <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fba4 	bl	800460c <OC4Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	bf00      	nop
  }

  return result;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(TIMx));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <LL_TIM_BDTR_Init+0x15c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <LL_TIM_BDTR_Init+0x20>
 8003eea:	f240 21bf 	movw	r1, #703	; 0x2bf
 8003eee:	4851      	ldr	r0, [pc, #324]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003ef0:	f7fc ff50 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OSSR_STATE(TIM_BDTRInitStruct->OSSRState));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <LL_TIM_BDTR_Init+0x3c>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d004      	beq.n	8003f10 <LL_TIM_BDTR_Init+0x3c>
 8003f06:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8003f0a:	484a      	ldr	r0, [pc, #296]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003f0c:	f7fc ff42 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OSSI_STATE(TIM_BDTRInitStruct->OSSIState));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <LL_TIM_BDTR_Init+0x58>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d004      	beq.n	8003f2c <LL_TIM_BDTR_Init+0x58>
 8003f22:	f240 21c1 	movw	r1, #705	; 0x2c1
 8003f26:	4843      	ldr	r0, [pc, #268]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003f28:	f7fc ff34 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->LockLevel));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <LL_TIM_BDTR_Init+0x88>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d00e      	beq.n	8003f5c <LL_TIM_BDTR_Init+0x88>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f46:	d009      	beq.n	8003f5c <LL_TIM_BDTR_Init+0x88>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f50:	d004      	beq.n	8003f5c <LL_TIM_BDTR_Init+0x88>
 8003f52:	f240 21c2 	movw	r1, #706	; 0x2c2
 8003f56:	4837      	ldr	r0, [pc, #220]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003f58:	f7fc ff1c 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_STATE(TIM_BDTRInitStruct->BreakState));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	89db      	ldrh	r3, [r3, #14]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <LL_TIM_BDTR_Init+0xa4>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	89db      	ldrh	r3, [r3, #14]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6c:	d004      	beq.n	8003f78 <LL_TIM_BDTR_Init+0xa4>
 8003f6e:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003f72:	4830      	ldr	r0, [pc, #192]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003f74:	f7fc ff0e 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->BreakPolarity));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <LL_TIM_BDTR_Init+0xc0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d004      	beq.n	8003f94 <LL_TIM_BDTR_Init+0xc0>
 8003f8a:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8003f8e:	4829      	ldr	r0, [pc, #164]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003f90:	f7fc ff00 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->AutomaticOutput));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <LL_TIM_BDTR_Init+0xdc>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d004      	beq.n	8003fb0 <LL_TIM_BDTR_Init+0xdc>
 8003fa6:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003faa:	4822      	ldr	r0, [pc, #136]	; (8004034 <LL_TIM_BDTR_Init+0x160>)
 8003fac:	f7fc fef2 	bl	8000d94 <assert_failed>

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	7b12      	ldrb	r2, [r2, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	89d2      	ldrh	r2, [r2, #14]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40012c00 	.word	0x40012c00
 8004034:	08009738 	.word	0x08009738

08004038 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a73      	ldr	r2, [pc, #460]	; (8004214 <OC1Config+0x1dc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d010      	beq.n	800406c <OC1Config+0x34>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d00c      	beq.n	800406c <OC1Config+0x34>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a70      	ldr	r2, [pc, #448]	; (8004218 <OC1Config+0x1e0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d008      	beq.n	800406c <OC1Config+0x34>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a6f      	ldr	r2, [pc, #444]	; (800421c <OC1Config+0x1e4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <OC1Config+0x34>
 8004062:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8004066:	486e      	ldr	r0, [pc, #440]	; (8004220 <OC1Config+0x1e8>)
 8004068:	f7fc fe94 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <OC1Config+0x7e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b10      	cmp	r3, #16
 800407a:	d01c      	beq.n	80040b6 <OC1Config+0x7e>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b20      	cmp	r3, #32
 8004082:	d018      	beq.n	80040b6 <OC1Config+0x7e>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d014      	beq.n	80040b6 <OC1Config+0x7e>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d010      	beq.n	80040b6 <OC1Config+0x7e>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d00c      	beq.n	80040b6 <OC1Config+0x7e>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d008      	beq.n	80040b6 <OC1Config+0x7e>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d004      	beq.n	80040b6 <OC1Config+0x7e>
 80040ac:	f240 21f5 	movw	r1, #757	; 0x2f5
 80040b0:	485b      	ldr	r0, [pc, #364]	; (8004220 <OC1Config+0x1e8>)
 80040b2:	f7fc fe6f 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <OC1Config+0x98>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d004      	beq.n	80040d0 <OC1Config+0x98>
 80040c6:	f240 21f6 	movw	r1, #758	; 0x2f6
 80040ca:	4855      	ldr	r0, [pc, #340]	; (8004220 <OC1Config+0x1e8>)
 80040cc:	f7fc fe62 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <OC1Config+0xb2>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d004      	beq.n	80040ea <OC1Config+0xb2>
 80040e0:	f240 21f7 	movw	r1, #759	; 0x2f7
 80040e4:	484e      	ldr	r0, [pc, #312]	; (8004220 <OC1Config+0x1e8>)
 80040e6:	f7fc fe55 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <OC1Config+0xcc>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d004      	beq.n	8004104 <OC1Config+0xcc>
 80040fa:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80040fe:	4848      	ldr	r0, [pc, #288]	; (8004220 <OC1Config+0x1e8>)
 8004100:	f7fc fe48 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <OC1Config+0xe6>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d004      	beq.n	800411e <OC1Config+0xe6>
 8004114:	f240 21f9 	movw	r1, #761	; 0x2f9
 8004118:	4841      	ldr	r0, [pc, #260]	; (8004220 <OC1Config+0x1e8>)
 800411a:	f7fc fe3b 	bl	8000d94 <assert_failed>

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 0202 	bic.w	r2, r3, #2
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <OC1Config+0x1dc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d13a      	bne.n	80041ec <OC1Config+0x1b4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <OC1Config+0x15a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d004      	beq.n	8004192 <OC1Config+0x15a>
 8004188:	f240 3115 	movw	r1, #789	; 0x315
 800418c:	4824      	ldr	r0, [pc, #144]	; (8004220 <OC1Config+0x1e8>)
 800418e:	f7fc fe01 	bl	8000d94 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <OC1Config+0x176>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	d004      	beq.n	80041ae <OC1Config+0x176>
 80041a4:	f240 3116 	movw	r1, #790	; 0x316
 80041a8:	481d      	ldr	r0, [pc, #116]	; (8004220 <OC1Config+0x1e8>)
 80041aa:	f7fc fdf3 	bl	8000d94 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 0208 	bic.w	r2, r3, #8
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 0204 	bic.w	r2, r3, #4
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd4d 	bl	8003c9e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	08009738 	.word	0x08009738

08004224 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(TIMx));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a75      	ldr	r2, [pc, #468]	; (8004408 <OC2Config+0x1e4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d010      	beq.n	8004258 <OC2Config+0x34>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d00c      	beq.n	8004258 <OC2Config+0x34>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a72      	ldr	r2, [pc, #456]	; (800440c <OC2Config+0x1e8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d008      	beq.n	8004258 <OC2Config+0x34>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a71      	ldr	r2, [pc, #452]	; (8004410 <OC2Config+0x1ec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <OC2Config+0x34>
 800424e:	f240 3143 	movw	r1, #835	; 0x343
 8004252:	4870      	ldr	r0, [pc, #448]	; (8004414 <OC2Config+0x1f0>)
 8004254:	f7fc fd9e 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <OC2Config+0x7e>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b10      	cmp	r3, #16
 8004266:	d01c      	beq.n	80042a2 <OC2Config+0x7e>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b20      	cmp	r3, #32
 800426e:	d018      	beq.n	80042a2 <OC2Config+0x7e>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d014      	beq.n	80042a2 <OC2Config+0x7e>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d010      	beq.n	80042a2 <OC2Config+0x7e>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b50      	cmp	r3, #80	; 0x50
 8004286:	d00c      	beq.n	80042a2 <OC2Config+0x7e>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d008      	beq.n	80042a2 <OC2Config+0x7e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d004      	beq.n	80042a2 <OC2Config+0x7e>
 8004298:	f44f 7151 	mov.w	r1, #836	; 0x344
 800429c:	485d      	ldr	r0, [pc, #372]	; (8004414 <OC2Config+0x1f0>)
 800429e:	f7fc fd79 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <OC2Config+0x98>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d004      	beq.n	80042bc <OC2Config+0x98>
 80042b2:	f240 3145 	movw	r1, #837	; 0x345
 80042b6:	4857      	ldr	r0, [pc, #348]	; (8004414 <OC2Config+0x1f0>)
 80042b8:	f7fc fd6c 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <OC2Config+0xb2>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d004      	beq.n	80042d6 <OC2Config+0xb2>
 80042cc:	f240 3146 	movw	r1, #838	; 0x346
 80042d0:	4850      	ldr	r0, [pc, #320]	; (8004414 <OC2Config+0x1f0>)
 80042d2:	f7fc fd5f 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <OC2Config+0xcc>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d004      	beq.n	80042f0 <OC2Config+0xcc>
 80042e6:	f240 3147 	movw	r1, #839	; 0x347
 80042ea:	484a      	ldr	r0, [pc, #296]	; (8004414 <OC2Config+0x1f0>)
 80042ec:	f7fc fd52 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <OC2Config+0xe6>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d004      	beq.n	800430a <OC2Config+0xe6>
 8004300:	f44f 7152 	mov.w	r1, #840	; 0x348
 8004304:	4843      	ldr	r0, [pc, #268]	; (8004414 <OC2Config+0x1f0>)
 8004306:	f7fc fd45 	bl	8000d94 <assert_failed>

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0210 	bic.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0220 	bic.w	r2, r3, #32
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <OC2Config+0x1e4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d13b      	bne.n	80043e0 <OC2Config+0x1bc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <OC2Config+0x160>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d004      	beq.n	8004384 <OC2Config+0x160>
 800437a:	f44f 7159 	mov.w	r1, #868	; 0x364
 800437e:	4825      	ldr	r0, [pc, #148]	; (8004414 <OC2Config+0x1f0>)
 8004380:	f7fc fd08 	bl	8000d94 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <OC2Config+0x17c>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d004      	beq.n	80043a0 <OC2Config+0x17c>
 8004396:	f240 3165 	movw	r1, #869	; 0x365
 800439a:	481e      	ldr	r0, [pc, #120]	; (8004414 <OC2Config+0x1f0>)
 800439c:	f7fc fcfa 	bl	8000d94 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	019b      	lsls	r3, r3, #6
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	019b      	lsls	r3, r3, #6
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fc60 	bl	8003cb8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	08009738 	.word	0x08009738

08004418 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC3_INSTANCE(TIMx));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a75      	ldr	r2, [pc, #468]	; (80045fc <OC3Config+0x1e4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d010      	beq.n	800444c <OC3Config+0x34>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d00c      	beq.n	800444c <OC3Config+0x34>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a72      	ldr	r2, [pc, #456]	; (8004600 <OC3Config+0x1e8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d008      	beq.n	800444c <OC3Config+0x34>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a71      	ldr	r2, [pc, #452]	; (8004604 <OC3Config+0x1ec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <OC3Config+0x34>
 8004442:	f240 3192 	movw	r1, #914	; 0x392
 8004446:	4870      	ldr	r0, [pc, #448]	; (8004608 <OC3Config+0x1f0>)
 8004448:	f7fc fca4 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <OC3Config+0x7e>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b10      	cmp	r3, #16
 800445a:	d01c      	beq.n	8004496 <OC3Config+0x7e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b20      	cmp	r3, #32
 8004462:	d018      	beq.n	8004496 <OC3Config+0x7e>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b30      	cmp	r3, #48	; 0x30
 800446a:	d014      	beq.n	8004496 <OC3Config+0x7e>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d010      	beq.n	8004496 <OC3Config+0x7e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b50      	cmp	r3, #80	; 0x50
 800447a:	d00c      	beq.n	8004496 <OC3Config+0x7e>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d008      	beq.n	8004496 <OC3Config+0x7e>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d004      	beq.n	8004496 <OC3Config+0x7e>
 800448c:	f240 3193 	movw	r1, #915	; 0x393
 8004490:	485d      	ldr	r0, [pc, #372]	; (8004608 <OC3Config+0x1f0>)
 8004492:	f7fc fc7f 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <OC3Config+0x98>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d004      	beq.n	80044b0 <OC3Config+0x98>
 80044a6:	f44f 7165 	mov.w	r1, #916	; 0x394
 80044aa:	4857      	ldr	r0, [pc, #348]	; (8004608 <OC3Config+0x1f0>)
 80044ac:	f7fc fc72 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <OC3Config+0xb2>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d004      	beq.n	80044ca <OC3Config+0xb2>
 80044c0:	f240 3195 	movw	r1, #917	; 0x395
 80044c4:	4850      	ldr	r0, [pc, #320]	; (8004608 <OC3Config+0x1f0>)
 80044c6:	f7fc fc65 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <OC3Config+0xcc>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d004      	beq.n	80044e4 <OC3Config+0xcc>
 80044da:	f240 3196 	movw	r1, #918	; 0x396
 80044de:	484a      	ldr	r0, [pc, #296]	; (8004608 <OC3Config+0x1f0>)
 80044e0:	f7fc fc58 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <OC3Config+0xe6>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d004      	beq.n	80044fe <OC3Config+0xe6>
 80044f4:	f240 3197 	movw	r1, #919	; 0x397
 80044f8:	4843      	ldr	r0, [pc, #268]	; (8004608 <OC3Config+0x1f0>)
 80044fa:	f7fc fc4b 	bl	8000d94 <assert_failed>

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a29      	ldr	r2, [pc, #164]	; (80045fc <OC3Config+0x1e4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d13b      	bne.n	80045d2 <OC3Config+0x1ba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <OC3Config+0x15e>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d004      	beq.n	8004576 <OC3Config+0x15e>
 800456c:	f240 31b3 	movw	r1, #947	; 0x3b3
 8004570:	4825      	ldr	r0, [pc, #148]	; (8004608 <OC3Config+0x1f0>)
 8004572:	f7fc fc0f 	bl	8000d94 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <OC3Config+0x17a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d004      	beq.n	8004592 <OC3Config+0x17a>
 8004588:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 800458c:	481e      	ldr	r0, [pc, #120]	; (8004608 <OC3Config+0x1f0>)
 800458e:	f7fc fc01 	bl	8000d94 <assert_failed>

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	015b      	lsls	r3, r3, #5
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fb74 	bl	8003cd2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	08009738 	.word	0x08009738

0800460c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Check the parameters */
  assert_param(IS_TIM_CC4_INSTANCE(TIMx));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <OC4Config+0x1b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d010      	beq.n	8004640 <OC4Config+0x34>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d00c      	beq.n	8004640 <OC4Config+0x34>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <OC4Config+0x1b8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d008      	beq.n	8004640 <OC4Config+0x34>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <OC4Config+0x1bc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <OC4Config+0x34>
 8004636:	f240 31e1 	movw	r1, #993	; 0x3e1
 800463a:	4864      	ldr	r0, [pc, #400]	; (80047cc <OC4Config+0x1c0>)
 800463c:	f7fc fbaa 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <OC4Config+0x7e>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b10      	cmp	r3, #16
 800464e:	d01c      	beq.n	800468a <OC4Config+0x7e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b20      	cmp	r3, #32
 8004656:	d018      	beq.n	800468a <OC4Config+0x7e>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d014      	beq.n	800468a <OC4Config+0x7e>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d010      	beq.n	800468a <OC4Config+0x7e>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d00c      	beq.n	800468a <OC4Config+0x7e>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d008      	beq.n	800468a <OC4Config+0x7e>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b70      	cmp	r3, #112	; 0x70
 800467e:	d004      	beq.n	800468a <OC4Config+0x7e>
 8004680:	f240 31e2 	movw	r1, #994	; 0x3e2
 8004684:	4851      	ldr	r0, [pc, #324]	; (80047cc <OC4Config+0x1c0>)
 8004686:	f7fc fb85 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <OC4Config+0x98>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d004      	beq.n	80046a4 <OC4Config+0x98>
 800469a:	f240 31e3 	movw	r1, #995	; 0x3e3
 800469e:	484b      	ldr	r0, [pc, #300]	; (80047cc <OC4Config+0x1c0>)
 80046a0:	f7fc fb78 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <OC4Config+0xb2>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d004      	beq.n	80046be <OC4Config+0xb2>
 80046b4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 80046b8:	4844      	ldr	r0, [pc, #272]	; (80047cc <OC4Config+0x1c0>)
 80046ba:	f7fc fb6b 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <OC4Config+0xcc>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d004      	beq.n	80046d8 <OC4Config+0xcc>
 80046ce:	f240 31e5 	movw	r1, #997	; 0x3e5
 80046d2:	483e      	ldr	r0, [pc, #248]	; (80047cc <OC4Config+0x1c0>)
 80046d4:	f7fc fb5e 	bl	8000d94 <assert_failed>
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <OC4Config+0xe6>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d004      	beq.n	80046f2 <OC4Config+0xe6>
 80046e8:	f240 31e6 	movw	r1, #998	; 0x3e6
 80046ec:	4837      	ldr	r0, [pc, #220]	; (80047cc <OC4Config+0x1c0>)
 80046ee:	f7fc fb51 	bl	8000d94 <assert_failed>

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	031b      	lsls	r3, r3, #12
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <OC4Config+0x1b4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d123      	bne.n	8004798 <OC4Config+0x18c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <OC4Config+0x160>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d004      	beq.n	800476c <OC4Config+0x160>
 8004762:	f240 4102 	movw	r1, #1026	; 0x402
 8004766:	4819      	ldr	r0, [pc, #100]	; (80047cc <OC4Config+0x1c0>)
 8004768:	f7fc fb14 	bl	8000d94 <assert_failed>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <OC4Config+0x17c>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477c:	d004      	beq.n	8004788 <OC4Config+0x17c>
 800477e:	f240 4103 	movw	r1, #1027	; 0x403
 8004782:	4812      	ldr	r0, [pc, #72]	; (80047cc <OC4Config+0x1c0>)
 8004784:	f7fc fb06 	bl	8000d94 <assert_failed>

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	019b      	lsls	r3, r3, #6
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fa9e 	bl	8003cec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	08009738 	.word	0x08009738

080047d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047d8:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <LL_SetSystemCoreClock+0x18>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000008 	.word	0x20000008

080047ec <MX_FATFS_Init>:
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path);

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80047f0:	4904      	ldr	r1, [pc, #16]	; (8004804 <MX_FATFS_Init+0x18>)
 80047f2:	4805      	ldr	r0, [pc, #20]	; (8004808 <MX_FATFS_Init+0x1c>)
 80047f4:	f003 fd7a 	bl	80082ec <FATFS_LinkDriver>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <MX_FATFS_Init+0x20>)
 80047fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000040c 	.word	0x2000040c
 8004808:	20000014 	.word	0x20000014
 800480c:	20000410 	.word	0x20000410

08004810 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004814:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
	...

08004820 <FS_GetFileList>:
#include "main.h"
//extern ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];


uint8_t FS_GetFileList(typeEnv *Env)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8004826:	af00      	add	r7, sp, #0
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	6018      	str	r0, [r3, #0]
	DIR dir;
	FRESULT fs_result;
	FILINFO fs_info;
	char* path ="";
 800482c:	4b51      	ldr	r3, [pc, #324]	; (8004974 <FS_GetFileList+0x154>)
 800482e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t cnt_file=0, indx=0;
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t start_list=0, end_list=0;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	fs_result = f_opendir (&dir, path);
 800484a:	f107 0320 	add.w	r3, r7, #32
 800484e:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8004852:	4618      	mov	r0, r3
 8004854:	f003 fc12 	bl	800807c <f_opendir>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if(fs_result != FR_OK)
 800485e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <FS_GetFileList+0x4a>
	{ return 1; }
 8004866:	2301      	movs	r3, #1
 8004868:	e07e      	b.n	8004968 <FS_GetFileList+0x148>

	start_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX ;
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004872:	461a      	mov	r2, r3
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	end_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX + (ITEM_ON_PAGE_MAX);
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	memset( &(Env->Menu.FileList[0][0]), 0, sizeof(Env->Menu.FileList));
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2275      	movs	r2, #117	; 0x75
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f003 fd79 	bl	8008392 <memset>

	for (;;)
	{
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 80048a0:	f107 0208 	add.w	r2, r7, #8
 80048a4:	f107 0320 	add.w	r3, r7, #32
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f003 fc8d 	bl	80081ca <f_readdir>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (fs_result != FR_OK || fs_info.fname[0] == 0 ){ break;} /* Останов цикла при ошибке или при достижении конца списка директории */
 80048b6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d14e      	bne.n	800495c <FS_GetFileList+0x13c>
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	7a5b      	ldrb	r3, [r3, #9]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d049      	beq.n	800495c <FS_GetFileList+0x13c>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	7a5b      	ldrb	r3, [r3, #9]
 80048ce:	2b2e      	cmp	r3, #46	; 0x2e
 80048d0:	d040      	beq.n	8004954 <FS_GetFileList+0x134>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	7a1b      	ldrb	r3, [r3, #8]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d13b      	bne.n	8004958 <FS_GetFileList+0x138>
		else
		{   /* Это файл. Заносим название в список файлов */
			if(cnt_file >= start_list && cnt_file < end_list)
 80048e0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80048e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d327      	bcc.n	800493c <FS_GetFileList+0x11c>
 80048ec:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80048f0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d221      	bcs.n	800493c <FS_GetFileList+0x11c>
			{
				strncpy( &(Env->Menu.FileList[indx][0]),  &fs_info.fname, strlen(fs_info.fname));
 80048f8:	1d39      	adds	r1, r7, #4
 80048fa:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	680a      	ldr	r2, [r1, #0]
 800490a:	18d4      	adds	r4, r2, r3
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	3309      	adds	r3, #9
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fc1a 	bl	800014c <strlen>
 8004918:	4602      	mov	r2, r0
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	3309      	adds	r3, #9
 8004920:	4619      	mov	r1, r3
 8004922:	4620      	mov	r0, r4
 8004924:	f003 fda6 	bl	8008474 <strncpy>
				indx++;
 8004928:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800492c:	3301      	adds	r3, #1
 800492e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				Env->Menu.NmbrOnPageFiles=indx;
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800493a:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			cnt_file++;
 800493c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004940:	3301      	adds	r3, #1
 8004942:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		}
		Env->Menu.NmbrAllFiles=cnt_file;
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004952:	e7a5      	b.n	80048a0 <FS_GetFileList+0x80>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8004954:	bf00      	nop
 8004956:	e7a3      	b.n	80048a0 <FS_GetFileList+0x80>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8004958:	bf00      	nop
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 800495a:	e7a1      	b.n	80048a0 <FS_GetFileList+0x80>
	}

	f_closedir(&dir);
 800495c:	f107 0320 	add.w	r3, r7, #32
 8004960:	4618      	mov	r0, r3
 8004962:	f003 fc0d 	bl	8008180 <f_closedir>
	return 0;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 800496e:	46bd      	mov	sp, r7
 8004970:	bd90      	pop	{r4, r7, pc}
 8004972:	bf00      	nop
 8004974:	08009770 	.word	0x08009770

08004978 <FS_ReadFile>:

uint8_t FS_ReadFile(typeEnv *Env)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	f2ad 5df4 	subw	sp, sp, #1524	; 0x5f4
 800497e:	af1e      	add	r7, sp, #120	; 0x78
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	6018      	str	r0, [r3, #0]
	char *FileName = (*Env).FileNameForTest;
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	//memset((*Env).DataForTest, 0, sizeof((*Env).DataForTest));
	char X1[NLin*2]={0}, X2[NLin*2]={0};
 8004990:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8004994:	2240      	movs	r2, #64	; 0x40
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f003 fcfa 	bl	8008392 <memset>
 800499e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f003 fcf3 	bl	8008392 <memset>
	char string[DATA_TEST_SIZE]={0}; // строка прочитанная из файла ; 255 байт
 80049ac:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80049b0:	4618      	mov	r0, r3
 80049b2:	23ff      	movs	r3, #255	; 0xff
 80049b4:	461a      	mov	r2, r3
 80049b6:	2100      	movs	r1, #0
 80049b8:	f003 fceb 	bl	8008392 <memset>
	char FormatStr[5*NLin]={0};// 5 символов в строке форматирования "%d%*c" для одного значения
 80049bc:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80049c0:	4618      	mov	r0, r3
 80049c2:	23a0      	movs	r3, #160	; 0xa0
 80049c4:	461a      	mov	r2, r3
 80049c6:	2100      	movs	r1, #0
 80049c8:	f003 fce3 	bl	8008392 <memset>
	char *p_start=0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
	char *p_end=0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	int LenData=0, MaxLen=0;
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
	uint32_t DataBuf[2][NLin]={0};
 80049e4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80049e8:	4618      	mov	r0, r3
 80049ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ee:	461a      	mov	r2, r3
 80049f0:	2100      	movs	r1, #0
 80049f2:	f003 fcce 	bl	8008392 <memset>
	//uint32_t *DataBuf=(*Env).DataForTest;
	FIL fs_file;
	FRESULT fs_result=0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
	uint32_t byteRead=0;
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
	uint32_t ofs=0;	// смещение от начала файла
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	fs_result = f_open(&fs_file, FileName, FA_READ);
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fed9 	bl	80077cc <f_open>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
		if(fs_result != FR_OK)	{ return 1; }
 8004a20:	f897 355f 	ldrb.w	r3, [r7, #1375]	; 0x55f
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <FS_ReadFile+0xb4>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e1d9      	b.n	8004de0 <FS_ReadFile+0x468>
// читаем всесь файл в буфер
		fs_result = f_read(&fs_file, string, DATA_TEST_SIZE, &byteRead);
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	f507 7176 	add.w	r1, r7, #984	; 0x3d8
 8004a34:	f107 000c 	add.w	r0, r7, #12
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	f003 f8d2 	bl	8007be2 <f_read>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 355f 	strb.w	r3, [r7, #1375]	; 0x55f
		if(fs_result != FR_OK)	{ return 1; }
 8004a44:	f897 355f 	ldrb.w	r3, [r7, #1375]	; 0x55f
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <FS_ReadFile+0xd8>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e1c7      	b.n	8004de0 <FS_ReadFile+0x468>
		(*Env).RealDataSize = byteRead;
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

		// выделяем данные заключенные в скобки [] для разъёма X1
		p_start = strchr(&string, PARS_START_DATA);
 8004a60:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004a64:	215b      	movs	r1, #91	; 0x5b
 8004a66:	4618      	mov	r0, r3
 8004a68:	f003 fcf7 	bl	800845a <strchr>
 8004a6c:	f8c7 0568 	str.w	r0, [r7, #1384]	; 0x568
		p_end = strchr(&string, PARS_END_DATA);
 8004a70:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004a74:	215d      	movs	r1, #93	; 0x5d
 8004a76:	4618      	mov	r0, r3
 8004a78:	f003 fcef 	bl	800845a <strchr>
 8004a7c:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
		LenData = p_end - p_start;
 8004a80:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8004a84:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
		MaxLen = LenData;
 8004a8e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004a92:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
		memmove(&X1, (p_start+1),  LenData-1);
 8004a96:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f003 fc59 	bl	8008360 <memmove>
		for(uint8_t i=0; i<LenData/2;i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3573 	strb.w	r3, [r7, #1395]	; 0x573
 8004ab4:	e013      	b.n	8004ade <FS_ReadFile+0x166>
		{
			strcat( &FormatStr,  "%d%*c");
 8004ab6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fb fb46 	bl	800014c <strlen>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004ac8:	4413      	add	r3, r2
 8004aca:	4ac8      	ldr	r2, [pc, #800]	; (8004dec <FS_ReadFile+0x474>)
 8004acc:	6810      	ldr	r0, [r2, #0]
 8004ace:	6018      	str	r0, [r3, #0]
 8004ad0:	8892      	ldrh	r2, [r2, #4]
 8004ad2:	809a      	strh	r2, [r3, #4]
		for(uint8_t i=0; i<LenData/2;i++)
 8004ad4:	f897 3573 	ldrb.w	r3, [r7, #1395]	; 0x573
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f887 3573 	strb.w	r3, [r7, #1395]	; 0x573
 8004ade:	f897 2573 	ldrb.w	r2, [r7, #1395]	; 0x573
 8004ae2:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004ae6:	0fd9      	lsrs	r1, r3, #31
 8004ae8:	440b      	add	r3, r1
 8004aea:	105b      	asrs	r3, r3, #1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	dbe2      	blt.n	8004ab6 <FS_ReadFile+0x13e>

		}
		sscanf(&X1, &FormatStr,			&DataBuf[0][0], \
 8004af0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004af4:	1d1c      	adds	r4, r3, #4
 8004af6:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8004afa:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8004afe:	f507 60a3 	add.w	r0, r7, #1304	; 0x518
 8004b02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b06:	337c      	adds	r3, #124	; 0x7c
 8004b08:	931d      	str	r3, [sp, #116]	; 0x74
 8004b0a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b0e:	3378      	adds	r3, #120	; 0x78
 8004b10:	931c      	str	r3, [sp, #112]	; 0x70
 8004b12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b16:	3374      	adds	r3, #116	; 0x74
 8004b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b1a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b1e:	3370      	adds	r3, #112	; 0x70
 8004b20:	931a      	str	r3, [sp, #104]	; 0x68
 8004b22:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b26:	336c      	adds	r3, #108	; 0x6c
 8004b28:	9319      	str	r3, [sp, #100]	; 0x64
 8004b2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b2e:	3368      	adds	r3, #104	; 0x68
 8004b30:	9318      	str	r3, [sp, #96]	; 0x60
 8004b32:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b36:	3364      	adds	r3, #100	; 0x64
 8004b38:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b3a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b3e:	3360      	adds	r3, #96	; 0x60
 8004b40:	9316      	str	r3, [sp, #88]	; 0x58
 8004b42:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b46:	335c      	adds	r3, #92	; 0x5c
 8004b48:	9315      	str	r3, [sp, #84]	; 0x54
 8004b4a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b4e:	3358      	adds	r3, #88	; 0x58
 8004b50:	9314      	str	r3, [sp, #80]	; 0x50
 8004b52:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b56:	3354      	adds	r3, #84	; 0x54
 8004b58:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b5a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b5e:	3350      	adds	r3, #80	; 0x50
 8004b60:	9312      	str	r3, [sp, #72]	; 0x48
 8004b62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b66:	334c      	adds	r3, #76	; 0x4c
 8004b68:	9311      	str	r3, [sp, #68]	; 0x44
 8004b6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b6e:	3348      	adds	r3, #72	; 0x48
 8004b70:	9310      	str	r3, [sp, #64]	; 0x40
 8004b72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b76:	3344      	adds	r3, #68	; 0x44
 8004b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b7a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b7e:	3340      	adds	r3, #64	; 0x40
 8004b80:	930e      	str	r3, [sp, #56]	; 0x38
 8004b82:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b86:	333c      	adds	r3, #60	; 0x3c
 8004b88:	930d      	str	r3, [sp, #52]	; 0x34
 8004b8a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b8e:	3338      	adds	r3, #56	; 0x38
 8004b90:	930c      	str	r3, [sp, #48]	; 0x30
 8004b92:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b96:	3334      	adds	r3, #52	; 0x34
 8004b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b9a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b9e:	3330      	adds	r3, #48	; 0x30
 8004ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ba2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ba6:	332c      	adds	r3, #44	; 0x2c
 8004ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8004baa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bae:	3328      	adds	r3, #40	; 0x28
 8004bb0:	9308      	str	r3, [sp, #32]
 8004bb2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bb6:	3324      	adds	r3, #36	; 0x24
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bbe:	3320      	adds	r3, #32
 8004bc0:	9306      	str	r3, [sp, #24]
 8004bc2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bc6:	331c      	adds	r3, #28
 8004bc8:	9305      	str	r3, [sp, #20]
 8004bca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bce:	3318      	adds	r3, #24
 8004bd0:	9304      	str	r3, [sp, #16]
 8004bd2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bde:	3310      	adds	r3, #16
 8004be0:	9302      	str	r3, [sp, #8]
 8004be2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004be6:	330c      	adds	r3, #12
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	f003 fbf6 	bl	80083e4 <siscanf>
										&DataBuf[0][23], &DataBuf[0][24],\
										&DataBuf[0][25], &DataBuf[0][26], \
										&DataBuf[0][27], &DataBuf[0][28],\
										&DataBuf[0][29], &DataBuf[0][30], &DataBuf[0][31]);
		// выделяем данные заключенные в скобки [] для разъёма X2
		p_start = strchr(p_end, PARS_START_DATA);
 8004bf8:	215b      	movs	r1, #91	; 0x5b
 8004bfa:	f8d7 0564 	ldr.w	r0, [r7, #1380]	; 0x564
 8004bfe:	f003 fc2c 	bl	800845a <strchr>
 8004c02:	f8c7 0568 	str.w	r0, [r7, #1384]	; 0x568
		p_end = strchr(p_start, PARS_END_DATA);
 8004c06:	215d      	movs	r1, #93	; 0x5d
 8004c08:	f8d7 0568 	ldr.w	r0, [r7, #1384]	; 0x568
 8004c0c:	f003 fc25 	bl	800845a <strchr>
 8004c10:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
		LenData = p_end - p_start;
 8004c14:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8004c18:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
		if(LenData > MaxLen) {MaxLen = LenData; }
 8004c22:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8004c26:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	dd03      	ble.n	8004c36 <FS_ReadFile+0x2be>
 8004c2e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004c32:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

		memmove(&X2, (p_start+1),  LenData-1);
 8004c36:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004c40:	3b01      	subs	r3, #1
 8004c42:	461a      	mov	r2, r3
 8004c44:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f003 fb89 	bl	8008360 <memmove>

		memset(FormatStr,0, sizeof(FormatStr));
 8004c4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004c52:	22a0      	movs	r2, #160	; 0xa0
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 fb9b 	bl	8008392 <memset>
		for(uint8_t i=0; i<LenData/2;i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3572 	strb.w	r3, [r7, #1394]	; 0x572
 8004c62:	e013      	b.n	8004c8c <FS_ReadFile+0x314>
				{			strcat( &FormatStr,  "%d%*c");				}
 8004c64:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fa6f 	bl	800014c <strlen>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8004c76:	4413      	add	r3, r2
 8004c78:	4a5c      	ldr	r2, [pc, #368]	; (8004dec <FS_ReadFile+0x474>)
 8004c7a:	6810      	ldr	r0, [r2, #0]
 8004c7c:	6018      	str	r0, [r3, #0]
 8004c7e:	8892      	ldrh	r2, [r2, #4]
 8004c80:	809a      	strh	r2, [r3, #4]
		for(uint8_t i=0; i<LenData/2;i++)
 8004c82:	f897 3572 	ldrb.w	r3, [r7, #1394]	; 0x572
 8004c86:	3301      	adds	r3, #1
 8004c88:	f887 3572 	strb.w	r3, [r7, #1394]	; 0x572
 8004c8c:	f897 2572 	ldrb.w	r2, [r7, #1394]	; 0x572
 8004c90:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8004c94:	0fd9      	lsrs	r1, r3, #31
 8004c96:	440b      	add	r3, r1
 8004c98:	105b      	asrs	r3, r3, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dbe2      	blt.n	8004c64 <FS_ReadFile+0x2ec>

		sscanf(&X2, &FormatStr, 	&DataBuf[1][0],  &DataBuf[1][1], \
 8004c9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ca2:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8004ca6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004caa:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004cae:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8004cb2:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8004cb6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cba:	33fc      	adds	r3, #252	; 0xfc
 8004cbc:	931d      	str	r3, [sp, #116]	; 0x74
 8004cbe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cc2:	33f8      	adds	r3, #248	; 0xf8
 8004cc4:	931c      	str	r3, [sp, #112]	; 0x70
 8004cc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cca:	33f4      	adds	r3, #244	; 0xf4
 8004ccc:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cd2:	33f0      	adds	r3, #240	; 0xf0
 8004cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004cd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cda:	33ec      	adds	r3, #236	; 0xec
 8004cdc:	9319      	str	r3, [sp, #100]	; 0x64
 8004cde:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ce2:	33e8      	adds	r3, #232	; 0xe8
 8004ce4:	9318      	str	r3, [sp, #96]	; 0x60
 8004ce6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cea:	33e4      	adds	r3, #228	; 0xe4
 8004cec:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cf2:	33e0      	adds	r3, #224	; 0xe0
 8004cf4:	9316      	str	r3, [sp, #88]	; 0x58
 8004cf6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cfa:	33dc      	adds	r3, #220	; 0xdc
 8004cfc:	9315      	str	r3, [sp, #84]	; 0x54
 8004cfe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d02:	33d8      	adds	r3, #216	; 0xd8
 8004d04:	9314      	str	r3, [sp, #80]	; 0x50
 8004d06:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d0a:	33d4      	adds	r3, #212	; 0xd4
 8004d0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d0e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d12:	33d0      	adds	r3, #208	; 0xd0
 8004d14:	9312      	str	r3, [sp, #72]	; 0x48
 8004d16:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d1a:	33cc      	adds	r3, #204	; 0xcc
 8004d1c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d1e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d22:	33c8      	adds	r3, #200	; 0xc8
 8004d24:	9310      	str	r3, [sp, #64]	; 0x40
 8004d26:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d2a:	33c4      	adds	r3, #196	; 0xc4
 8004d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d32:	33c0      	adds	r3, #192	; 0xc0
 8004d34:	930e      	str	r3, [sp, #56]	; 0x38
 8004d36:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d3a:	33bc      	adds	r3, #188	; 0xbc
 8004d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8004d3e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d42:	33b8      	adds	r3, #184	; 0xb8
 8004d44:	930c      	str	r3, [sp, #48]	; 0x30
 8004d46:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d4a:	33b4      	adds	r3, #180	; 0xb4
 8004d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d4e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d52:	33b0      	adds	r3, #176	; 0xb0
 8004d54:	930a      	str	r3, [sp, #40]	; 0x28
 8004d56:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d5a:	33ac      	adds	r3, #172	; 0xac
 8004d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d62:	33a8      	adds	r3, #168	; 0xa8
 8004d64:	9308      	str	r3, [sp, #32]
 8004d66:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d6a:	33a4      	adds	r3, #164	; 0xa4
 8004d6c:	9307      	str	r3, [sp, #28]
 8004d6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d72:	33a0      	adds	r3, #160	; 0xa0
 8004d74:	9306      	str	r3, [sp, #24]
 8004d76:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d7a:	339c      	adds	r3, #156	; 0x9c
 8004d7c:	9305      	str	r3, [sp, #20]
 8004d7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d82:	3398      	adds	r3, #152	; 0x98
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d8a:	3394      	adds	r3, #148	; 0x94
 8004d8c:	9303      	str	r3, [sp, #12]
 8004d8e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d92:	3390      	adds	r3, #144	; 0x90
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d9a:	338c      	adds	r3, #140	; 0x8c
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004da2:	3388      	adds	r3, #136	; 0x88
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4623      	mov	r3, r4
 8004da8:	f003 fb1c 	bl	80083e4 <siscanf>
									&DataBuf[1][22], &DataBuf[1][23],\
									&DataBuf[1][24], &DataBuf[1][25],\
									&DataBuf[1][26], &DataBuf[1][27],\
									&DataBuf[1][28], &DataBuf[1][29],\
									&DataBuf[1][30], &DataBuf[1][31]);
	f_close(&fs_file);
 8004dac:	f107 030c 	add.w	r3, r7, #12
 8004db0:	4618      	mov	r0, r3
 8004db2:	f003 f93b 	bl	800802c <f_close>
	Env->RealDataSize=MaxLen/2;
 8004db6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8004dba:	0fda      	lsrs	r2, r3, #31
 8004dbc:	4413      	add	r3, r2
 8004dbe:	105b      	asrs	r3, r3, #1
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
	memmove( (*Env).DataForTest, &DataBuf, sizeof(DataBuf)	);
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3394      	adds	r3, #148	; 0x94
 8004dd0:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8004dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f003 fac1 	bl	8008360 <memmove>
	return 0;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	f207 577c 	addw	r7, r7, #1404	; 0x57c
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	08009774 	.word	0x08009774

08004df0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fa05 	bl	800520c <USER_SPI_initialize>
 8004e02:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fad7 	bl	80053cc <USER_SPI_status>
 8004e1e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004e38:	7bf8      	ldrb	r0, [r7, #15]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	f000 fad8 	bl	80053f4 <USER_SPI_read>
 8004e44:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8004e5e:	7bf8      	ldrb	r0, [r7, #15]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	f000 fb2b 	bl	80054c0 <USER_SPI_write>
 8004e6a:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	603a      	str	r2, [r7, #0]
 8004e7e:	71fb      	strb	r3, [r7, #7]
 8004e80:	460b      	mov	r3, r1
 8004e82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8004e84:	79b9      	ldrb	r1, [r7, #6]
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fb94 	bl	80055b8 <USER_SPI_ioctl>
 8004e90:	4603      	mov	r3, r0
//   n res;
  /* USER CODE END IOCTL */
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <LL_SPI_SetBaudRatePrescaler>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <LL_GPIO_SetOutputPin>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <LL_GPIO_ResetOutputPin>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	615a      	str	r2, [r3, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
	...

08004efc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004f04:	f7fe fa8e 	bl	8003424 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <SPI_Timer_On+0x20>)
 8004f0c:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <SPI_Timer_On+0x24>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000870 	.word	0x20000870
 8004f20:	20000874 	.word	0x20000874

08004f24 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004f28:	f7fe fa7c 	bl	8003424 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SPI_Timer_Status+0x24>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <SPI_Timer_Status+0x28>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bf34      	ite	cc
 8004f3c:	2301      	movcc	r3, #1
 8004f3e:	2300      	movcs	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000870 	.word	0x20000870
 8004f4c:	20000874 	.word	0x20000874

08004f50 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
  //  HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
	rxDat = LL_SPI_TransmitReceive(SPI1, dat);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4805      	ldr	r0, [pc, #20]	; (8004f74 <xchg_spi+0x24>)
 8004f60:	f7fc fa70 	bl	8001444 <LL_SPI_TransmitReceive>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
	return rxDat;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40013000 	.word	0x40013000

08004f78 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e00a      	b.n	8004f9e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	18d4      	adds	r4, r2, r3
 8004f8e:	20ff      	movs	r0, #255	; 0xff
 8004f90:	f7ff ffde 	bl	8004f50 <xchg_spi>
 8004f94:	4603      	mov	r3, r0
 8004f96:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3f0      	bcc.n	8004f88 <rcvr_spi_multi+0x10>
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd90      	pop	{r4, r7, pc}

08004fae <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e009      	b.n	8004fd2 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ffc2 	bl	8004f50 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3f1      	bcc.n	8004fbe <xmit_spi_multi+0x10>
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004fea:	f7fe fa1b 	bl	8003424 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004ff4:	20ff      	movs	r0, #255	; 0xff
 8004ff6:	f7ff ffab 	bl	8004f50 <xchg_spi>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2bff      	cmp	r3, #255	; 0xff
 8005002:	d007      	beq.n	8005014 <wait_ready+0x32>
 8005004:	f7fe fa0e 	bl	8003424 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8ef      	bhi.n	8004ff4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2bff      	cmp	r3, #255	; 0xff
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800502c:	f240 2102 	movw	r1, #514	; 0x202
 8005030:	4803      	ldr	r0, [pc, #12]	; (8005040 <despiselect+0x18>)
 8005032:	f7ff ff44 	bl	8004ebe <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005036:	20ff      	movs	r0, #255	; 0xff
 8005038:	f7ff ff8a 	bl	8004f50 <xchg_spi>

}
 800503c:	bf00      	nop
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40010c00 	.word	0x40010c00

08005044 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005048:	f240 2102 	movw	r1, #514	; 0x202
 800504c:	4809      	ldr	r0, [pc, #36]	; (8005074 <spiselect+0x30>)
 800504e:	f7ff ff45 	bl	8004edc <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005052:	20ff      	movs	r0, #255	; 0xff
 8005054:	f7ff ff7c 	bl	8004f50 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800505c:	f7ff ffc1 	bl	8004fe2 <wait_ready>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <spiselect+0x26>
 8005066:	2301      	movs	r3, #1
 8005068:	e002      	b.n	8005070 <spiselect+0x2c>

	despiselect();
 800506a:	f7ff ffdd 	bl	8005028 <despiselect>
	return 0;	/* Timeout */
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40010c00 	.word	0x40010c00

08005078 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005082:	20c8      	movs	r0, #200	; 0xc8
 8005084:	f7ff ff3a 	bl	8004efc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005088:	20ff      	movs	r0, #255	; 0xff
 800508a:	f7ff ff61 	bl	8004f50 <xchg_spi>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2bff      	cmp	r3, #255	; 0xff
 8005096:	d104      	bne.n	80050a2 <rcvr_datablock+0x2a>
 8005098:	f7ff ff44 	bl	8004f24 <SPI_Timer_Status>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f2      	bne.n	8005088 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2bfe      	cmp	r3, #254	; 0xfe
 80050a6:	d001      	beq.n	80050ac <rcvr_datablock+0x34>
 80050a8:	2300      	movs	r3, #0
 80050aa:	e00a      	b.n	80050c2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ff62 	bl	8004f78 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80050b4:	20ff      	movs	r0, #255	; 0xff
 80050b6:	f7ff ff4b 	bl	8004f50 <xchg_spi>
 80050ba:	20ff      	movs	r0, #255	; 0xff
 80050bc:	f7ff ff48 	bl	8004f50 <xchg_spi>

	return 1;						/* Function succeeded */
 80050c0:	2301      	movs	r3, #1
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80050d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050da:	f7ff ff82 	bl	8004fe2 <wait_ready>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <xmit_datablock+0x1e>
 80050e4:	2300      	movs	r3, #0
 80050e6:	e01e      	b.n	8005126 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ff30 	bl	8004f50 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2bfd      	cmp	r3, #253	; 0xfd
 80050f4:	d016      	beq.n	8005124 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80050f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff ff57 	bl	8004fae <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005100:	20ff      	movs	r0, #255	; 0xff
 8005102:	f7ff ff25 	bl	8004f50 <xchg_spi>
 8005106:	20ff      	movs	r0, #255	; 0xff
 8005108:	f7ff ff22 	bl	8004f50 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800510c:	20ff      	movs	r0, #255	; 0xff
 800510e:	f7ff ff1f 	bl	8004f50 <xchg_spi>
 8005112:	4603      	mov	r3, r0
 8005114:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2b05      	cmp	r3, #5
 800511e:	d001      	beq.n	8005124 <xmit_datablock+0x5a>
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <xmit_datablock+0x5c>
	}
	return 1;
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	6039      	str	r1, [r7, #0]
 8005138:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	da0e      	bge.n	8005160 <send_cmd+0x32>
		cmd &= 0x7F;
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005148:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800514a:	2100      	movs	r1, #0
 800514c:	2037      	movs	r0, #55	; 0x37
 800514e:	f7ff ffee 	bl	800512e <send_cmd>
 8005152:	4603      	mov	r3, r0
 8005154:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005156:	7bbb      	ldrb	r3, [r7, #14]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d901      	bls.n	8005160 <send_cmd+0x32>
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	e051      	b.n	8005204 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d008      	beq.n	8005178 <send_cmd+0x4a>
		despiselect();
 8005166:	f7ff ff5f 	bl	8005028 <despiselect>
		if (!spiselect()) return 0xFF;
 800516a:	f7ff ff6b 	bl	8005044 <spiselect>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <send_cmd+0x4a>
 8005174:	23ff      	movs	r3, #255	; 0xff
 8005176:	e045      	b.n	8005204 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fee5 	bl	8004f50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	0e1b      	lsrs	r3, r3, #24
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fedf 	bl	8004f50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	b2db      	uxtb	r3, r3
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fed9 	bl	8004f50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fed3 	bl	8004f50 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fece 	bl	8004f50 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <send_cmd+0x94>
 80051be:	2395      	movs	r3, #149	; 0x95
 80051c0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d101      	bne.n	80051cc <send_cmd+0x9e>
 80051c8:	2387      	movs	r3, #135	; 0x87
 80051ca:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff febe 	bl	8004f50 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d102      	bne.n	80051e0 <send_cmd+0xb2>
 80051da:	20ff      	movs	r0, #255	; 0xff
 80051dc:	f7ff feb8 	bl	8004f50 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80051e0:	230a      	movs	r3, #10
 80051e2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80051e4:	20ff      	movs	r0, #255	; 0xff
 80051e6:	f7ff feb3 	bl	8004f50 <xchg_spi>
 80051ea:	4603      	mov	r3, r0
 80051ec:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80051ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da05      	bge.n	8005202 <send_cmd+0xd4>
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005202:	7bbb      	ldrb	r3, [r7, #14]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USER_SPI_initialize+0x14>
 800521c:	2301      	movs	r3, #1
 800521e:	e0ca      	b.n	80053b6 <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005220:	4b67      	ldr	r3, [pc, #412]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <USER_SPI_initialize+0x2a>
 800522e:	4b64      	ldr	r3, [pc, #400]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e0bf      	b.n	80053b6 <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8005236:	2130      	movs	r1, #48	; 0x30
 8005238:	4862      	ldr	r0, [pc, #392]	; (80053c4 <USER_SPI_initialize+0x1b8>)
 800523a:	f7ff fe2e 	bl	8004e9a <LL_SPI_SetBaudRatePrescaler>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800523e:	230a      	movs	r3, #10
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e005      	b.n	8005250 <USER_SPI_initialize+0x44>
 8005244:	20ff      	movs	r0, #255	; 0xff
 8005246:	f7ff fe83 	bl	8004f50 <xchg_spi>
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3b01      	subs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f6      	bne.n	8005244 <USER_SPI_initialize+0x38>

	ty = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800525a:	2100      	movs	r1, #0
 800525c:	2000      	movs	r0, #0
 800525e:	f7ff ff66 	bl	800512e <send_cmd>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	f040 808b 	bne.w	8005380 <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800526a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800526e:	f7ff fe45 	bl	8004efc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005272:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005276:	2008      	movs	r0, #8
 8005278:	f7ff ff59 	bl	800512e <send_cmd>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d151      	bne.n	8005326 <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	e00d      	b.n	80052a4 <USER_SPI_initialize+0x98>
 8005288:	7bfc      	ldrb	r4, [r7, #15]
 800528a:	20ff      	movs	r0, #255	; 0xff
 800528c:	f7ff fe60 	bl	8004f50 <xchg_spi>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	4423      	add	r3, r4
 800529a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	3301      	adds	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d9ee      	bls.n	8005288 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80052aa:	7abb      	ldrb	r3, [r7, #10]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d167      	bne.n	8005380 <USER_SPI_initialize+0x174>
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	2baa      	cmp	r3, #170	; 0xaa
 80052b4:	d164      	bne.n	8005380 <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80052b6:	bf00      	nop
 80052b8:	f7ff fe34 	bl	8004f24 <SPI_Timer_Status>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <USER_SPI_initialize+0xc6>
 80052c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80052c6:	20a9      	movs	r0, #169	; 0xa9
 80052c8:	f7ff ff31 	bl	800512e <send_cmd>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f2      	bne.n	80052b8 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80052d2:	f7ff fe27 	bl	8004f24 <SPI_Timer_Status>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d051      	beq.n	8005380 <USER_SPI_initialize+0x174>
 80052dc:	2100      	movs	r1, #0
 80052de:	203a      	movs	r0, #58	; 0x3a
 80052e0:	f7ff ff25 	bl	800512e <send_cmd>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d14a      	bne.n	8005380 <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	e00d      	b.n	800530c <USER_SPI_initialize+0x100>
 80052f0:	7bfc      	ldrb	r4, [r7, #15]
 80052f2:	20ff      	movs	r0, #255	; 0xff
 80052f4:	f7ff fe2c 	bl	8004f50 <xchg_spi>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	4423      	add	r3, r4
 8005302:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	3301      	adds	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d9ee      	bls.n	80052f0 <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005312:	7a3b      	ldrb	r3, [r7, #8]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <USER_SPI_initialize+0x114>
 800531c:	230c      	movs	r3, #12
 800531e:	e000      	b.n	8005322 <USER_SPI_initialize+0x116>
 8005320:	2304      	movs	r3, #4
 8005322:	737b      	strb	r3, [r7, #13]
 8005324:	e02c      	b.n	8005380 <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005326:	2100      	movs	r1, #0
 8005328:	20a9      	movs	r0, #169	; 0xa9
 800532a:	f7ff ff00 	bl	800512e <send_cmd>
 800532e:	4603      	mov	r3, r0
 8005330:	2b01      	cmp	r3, #1
 8005332:	d804      	bhi.n	800533e <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005334:	2302      	movs	r3, #2
 8005336:	737b      	strb	r3, [r7, #13]
 8005338:	23a9      	movs	r3, #169	; 0xa9
 800533a:	73bb      	strb	r3, [r7, #14]
 800533c:	e003      	b.n	8005346 <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800533e:	2301      	movs	r3, #1
 8005340:	737b      	strb	r3, [r7, #13]
 8005342:	2301      	movs	r3, #1
 8005344:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005346:	bf00      	nop
 8005348:	f7ff fdec 	bl	8004f24 <SPI_Timer_Status>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <USER_SPI_initialize+0x156>
 8005352:	7bbb      	ldrb	r3, [r7, #14]
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fee9 	bl	800512e <send_cmd>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f2      	bne.n	8005348 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005362:	f7ff fddf 	bl	8004f24 <SPI_Timer_Status>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <USER_SPI_initialize+0x170>
 800536c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005370:	2010      	movs	r0, #16
 8005372:	f7ff fedc 	bl	800512e <send_cmd>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <USER_SPI_initialize+0x174>
				ty = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <USER_SPI_initialize+0x1bc>)
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005386:	f7ff fe4f 	bl	8005028 <despiselect>

	if (ty) {			/* OK */
 800538a:	7b7b      	ldrb	r3, [r7, #13]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 8005390:	2118      	movs	r1, #24
 8005392:	480c      	ldr	r0, [pc, #48]	; (80053c4 <USER_SPI_initialize+0x1b8>)
 8005394:	f7ff fd81 	bl	8004e9a <LL_SPI_SetBaudRatePrescaler>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <USER_SPI_initialize+0x1b4>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd90      	pop	{r4, r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000028 	.word	0x20000028
 80053c4:	40013000 	.word	0x40013000
 80053c8:	20000228 	.word	0x20000228

080053cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <USER_SPI_status+0x14>
 80053dc:	2301      	movs	r3, #1
 80053de:	e002      	b.n	80053e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <USER_SPI_status+0x24>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	b2db      	uxtb	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr
 80053f0:	20000028 	.word	0x20000028

080053f4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <USER_SPI_read+0x1c>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <USER_SPI_read+0x20>
 8005410:	2304      	movs	r3, #4
 8005412:	e04d      	b.n	80054b0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <USER_SPI_read+0xc4>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <USER_SPI_read+0x32>
 8005422:	2303      	movs	r3, #3
 8005424:	e044      	b.n	80054b0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005426:	4b25      	ldr	r3, [pc, #148]	; (80054bc <USER_SPI_read+0xc8>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <USER_SPI_read+0x44>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	025b      	lsls	r3, r3, #9
 8005436:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d111      	bne.n	8005462 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	2011      	movs	r0, #17
 8005442:	f7ff fe74 	bl	800512e <send_cmd>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d129      	bne.n	80054a0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800544c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005450:	68b8      	ldr	r0, [r7, #8]
 8005452:	f7ff fe11 	bl	8005078 <rcvr_datablock>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d021      	beq.n	80054a0 <USER_SPI_read+0xac>
			count = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	e01e      	b.n	80054a0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	2012      	movs	r0, #18
 8005466:	f7ff fe62 	bl	800512e <send_cmd>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d117      	bne.n	80054a0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005474:	68b8      	ldr	r0, [r7, #8]
 8005476:	f7ff fdff 	bl	8005078 <rcvr_datablock>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <USER_SPI_read+0xa2>
				buff += 512;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005486:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ed      	bne.n	8005470 <USER_SPI_read+0x7c>
 8005494:	e000      	b.n	8005498 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005496:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005498:	2100      	movs	r1, #0
 800549a:	200c      	movs	r0, #12
 800549c:	f7ff fe47 	bl	800512e <send_cmd>
		}
	}
	despiselect();
 80054a0:	f7ff fdc2 	bl	8005028 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000028 	.word	0x20000028
 80054bc:	20000228 	.word	0x20000228

080054c0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <USER_SPI_write+0x1c>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <USER_SPI_write+0x20>
 80054dc:	2304      	movs	r3, #4
 80054de:	e063      	b.n	80055a8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80054e0:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <USER_SPI_write+0xf0>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <USER_SPI_write+0x32>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e05a      	b.n	80055a8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <USER_SPI_write+0xf0>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USER_SPI_write+0x44>
 8005500:	2302      	movs	r3, #2
 8005502:	e051      	b.n	80055a8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005504:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <USER_SPI_write+0xf4>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <USER_SPI_write+0x56>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d110      	bne.n	800553e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	2018      	movs	r0, #24
 8005520:	f7ff fe05 	bl	800512e <send_cmd>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d136      	bne.n	8005598 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800552a:	21fe      	movs	r1, #254	; 0xfe
 800552c:	68b8      	ldr	r0, [r7, #8]
 800552e:	f7ff fdcc 	bl	80050ca <xmit_datablock>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02f      	beq.n	8005598 <USER_SPI_write+0xd8>
			count = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	e02c      	b.n	8005598 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <USER_SPI_write+0xf4>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <USER_SPI_write+0x92>
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	2097      	movs	r0, #151	; 0x97
 800554e:	f7ff fdee 	bl	800512e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	2019      	movs	r0, #25
 8005556:	f7ff fdea 	bl	800512e <send_cmd>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d11b      	bne.n	8005598 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005560:	21fc      	movs	r1, #252	; 0xfc
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f7ff fdb1 	bl	80050ca <xmit_datablock>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <USER_SPI_write+0xc4>
				buff += 512;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005574:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	3b01      	subs	r3, #1
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ee      	bne.n	8005560 <USER_SPI_write+0xa0>
 8005582:	e000      	b.n	8005586 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005584:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005586:	21fd      	movs	r1, #253	; 0xfd
 8005588:	2000      	movs	r0, #0
 800558a:	f7ff fd9e 	bl	80050ca <xmit_datablock>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <USER_SPI_write+0xd8>
 8005594:	2301      	movs	r3, #1
 8005596:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005598:	f7ff fd46 	bl	8005028 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000028 	.word	0x20000028
 80055b4:	20000228 	.word	0x20000228

080055b8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	603a      	str	r2, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
 80055c4:	460b      	mov	r3, r1
 80055c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <USER_SPI_ioctl+0x1a>
 80055ce:	2304      	movs	r3, #4
 80055d0:	e15a      	b.n	8005888 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80055d2:	4baf      	ldr	r3, [pc, #700]	; (8005890 <USER_SPI_ioctl+0x2d8>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <USER_SPI_ioctl+0x2c>
 80055e0:	2303      	movs	r3, #3
 80055e2:	e151      	b.n	8005888 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80055ea:	79bb      	ldrb	r3, [r7, #6]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	f200 8136 	bhi.w	800585e <USER_SPI_ioctl+0x2a6>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <USER_SPI_ioctl+0x40>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800560d 	.word	0x0800560d
 80055fc:	08005621 	.word	0x08005621
 8005600:	0800585f 	.word	0x0800585f
 8005604:	080056cd 	.word	0x080056cd
 8005608:	080057c3 	.word	0x080057c3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800560c:	f7ff fd1a 	bl	8005044 <spiselect>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8127 	beq.w	8005866 <USER_SPI_ioctl+0x2ae>
 8005618:	2300      	movs	r3, #0
 800561a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800561e:	e122      	b.n	8005866 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005620:	2100      	movs	r1, #0
 8005622:	2009      	movs	r0, #9
 8005624:	f7ff fd83 	bl	800512e <send_cmd>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 811d 	bne.w	800586a <USER_SPI_ioctl+0x2b2>
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	2110      	movs	r1, #16
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fd1e 	bl	8005078 <rcvr_datablock>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8113 	beq.w	800586a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005644:	7b3b      	ldrb	r3, [r7, #12]
 8005646:	099b      	lsrs	r3, r3, #6
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d111      	bne.n	8005672 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800564e:	7d7b      	ldrb	r3, [r7, #21]
 8005650:	461a      	mov	r2, r3
 8005652:	7d3b      	ldrb	r3, [r7, #20]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	4413      	add	r3, r2
 8005658:	461a      	mov	r2, r3
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005662:	4413      	add	r3, r2
 8005664:	3301      	adds	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	029a      	lsls	r2, r3, #10
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e028      	b.n	80056c4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005672:	7c7b      	ldrb	r3, [r7, #17]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	b2da      	uxtb	r2, r3
 800567a:	7dbb      	ldrb	r3, [r7, #22]
 800567c:	09db      	lsrs	r3, r3, #7
 800567e:	b2db      	uxtb	r3, r3
 8005680:	4413      	add	r3, r2
 8005682:	b2da      	uxtb	r2, r3
 8005684:	7d7b      	ldrb	r3, [r7, #21]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f003 0306 	and.w	r3, r3, #6
 800568e:	b2db      	uxtb	r3, r3
 8005690:	4413      	add	r3, r2
 8005692:	b2db      	uxtb	r3, r3
 8005694:	3302      	adds	r3, #2
 8005696:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800569a:	7d3b      	ldrb	r3, [r7, #20]
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	7cbb      	ldrb	r3, [r7, #18]
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056b0:	4413      	add	r3, r2
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80056b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ba:	3b09      	subs	r3, #9
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	409a      	lsls	r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80056ca:	e0ce      	b.n	800586a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80056cc:	4b71      	ldr	r3, [pc, #452]	; (8005894 <USER_SPI_ioctl+0x2dc>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d031      	beq.n	800573c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80056d8:	2100      	movs	r1, #0
 80056da:	208d      	movs	r0, #141	; 0x8d
 80056dc:	f7ff fd27 	bl	800512e <send_cmd>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 80c3 	bne.w	800586e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80056e8:	20ff      	movs	r0, #255	; 0xff
 80056ea:	f7ff fc31 	bl	8004f50 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80056ee:	f107 030c 	add.w	r3, r7, #12
 80056f2:	2110      	movs	r1, #16
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fcbf 	bl	8005078 <rcvr_datablock>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80b6 	beq.w	800586e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005702:	2330      	movs	r3, #48	; 0x30
 8005704:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005708:	e007      	b.n	800571a <USER_SPI_ioctl+0x162>
 800570a:	20ff      	movs	r0, #255	; 0xff
 800570c:	f7ff fc20 	bl	8004f50 <xchg_spi>
 8005710:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005714:	3b01      	subs	r3, #1
 8005716:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800571a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f3      	bne.n	800570a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005722:	7dbb      	ldrb	r3, [r7, #22]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	2310      	movs	r3, #16
 800572c:	fa03 f202 	lsl.w	r2, r3, r2
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800573a:	e098      	b.n	800586e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800573c:	2100      	movs	r1, #0
 800573e:	2009      	movs	r0, #9
 8005740:	f7ff fcf5 	bl	800512e <send_cmd>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 8091 	bne.w	800586e <USER_SPI_ioctl+0x2b6>
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	2110      	movs	r1, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fc90 	bl	8005078 <rcvr_datablock>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8087 	beq.w	800586e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005760:	4b4c      	ldr	r3, [pc, #304]	; (8005894 <USER_SPI_ioctl+0x2dc>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800576c:	7dbb      	ldrb	r3, [r7, #22]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005774:	7dfa      	ldrb	r2, [r7, #23]
 8005776:	09d2      	lsrs	r2, r2, #7
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4413      	add	r3, r2
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	7e7b      	ldrb	r3, [r7, #25]
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	461a      	mov	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e013      	b.n	80057ba <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005792:	7dbb      	ldrb	r3, [r7, #22]
 8005794:	109b      	asrs	r3, r3, #2
 8005796:	b29b      	uxth	r3, r3
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	3301      	adds	r3, #1
 800579e:	7dfa      	ldrb	r2, [r7, #23]
 80057a0:	00d2      	lsls	r2, r2, #3
 80057a2:	f002 0218 	and.w	r2, r2, #24
 80057a6:	7df9      	ldrb	r1, [r7, #23]
 80057a8:	0949      	lsrs	r1, r1, #5
 80057aa:	b2c9      	uxtb	r1, r1
 80057ac:	440a      	add	r2, r1
 80057ae:	3201      	adds	r2, #1
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80057c0:	e055      	b.n	800586e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80057c2:	4b34      	ldr	r3, [pc, #208]	; (8005894 <USER_SPI_ioctl+0x2dc>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d051      	beq.n	8005872 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80057ce:	f107 020c 	add.w	r2, r7, #12
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	210b      	movs	r1, #11
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff feee 	bl	80055b8 <USER_SPI_ioctl>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d149      	bne.n	8005876 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80057e2:	7b3b      	ldrb	r3, [r7, #12]
 80057e4:	099b      	lsrs	r3, r3, #6
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <USER_SPI_ioctl+0x23e>
 80057ec:	7dbb      	ldrb	r3, [r7, #22]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d041      	beq.n	800587a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <USER_SPI_ioctl+0x2dc>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	025b      	lsls	r3, r3, #9
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	025b      	lsls	r3, r3, #9
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800581e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005820:	2020      	movs	r0, #32
 8005822:	f7ff fc84 	bl	800512e <send_cmd>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d128      	bne.n	800587e <USER_SPI_ioctl+0x2c6>
 800582c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582e:	2021      	movs	r0, #33	; 0x21
 8005830:	f7ff fc7d 	bl	800512e <send_cmd>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d121      	bne.n	800587e <USER_SPI_ioctl+0x2c6>
 800583a:	2100      	movs	r1, #0
 800583c:	2026      	movs	r0, #38	; 0x26
 800583e:	f7ff fc76 	bl	800512e <send_cmd>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11a      	bne.n	800587e <USER_SPI_ioctl+0x2c6>
 8005848:	f247 5030 	movw	r0, #30000	; 0x7530
 800584c:	f7ff fbc9 	bl	8004fe2 <wait_ready>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005856:	2300      	movs	r3, #0
 8005858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800585c:	e00f      	b.n	800587e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800585e:	2304      	movs	r3, #4
 8005860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005864:	e00c      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		break;
 8005866:	bf00      	nop
 8005868:	e00a      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		break;
 800586a:	bf00      	nop
 800586c:	e008      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		break;
 800586e:	bf00      	nop
 8005870:	e006      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005872:	bf00      	nop
 8005874:	e004      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <USER_SPI_ioctl+0x2c8>
		break;
 800587e:	bf00      	nop
	}

	despiselect();
 8005880:	f7ff fbd2 	bl	8005028 <despiselect>

	return res;
 8005884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005888:	4618      	mov	r0, r3
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000028 	.word	0x20000028
 8005894:	20000228 	.word	0x20000228

08005898 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <disk_status+0x30>)
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	79fa      	ldrb	r2, [r7, #7]
 80058b0:	4905      	ldr	r1, [pc, #20]	; (80058c8 <disk_status+0x30>)
 80058b2:	440a      	add	r2, r1
 80058b4:	7a12      	ldrb	r2, [r2, #8]
 80058b6:	4610      	mov	r0, r2
 80058b8:	4798      	blx	r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	2000024c 	.word	0x2000024c

080058cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <disk_initialize+0x48>)
 80058de:	5cd3      	ldrb	r3, [r2, r3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d111      	bne.n	8005908 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <disk_initialize+0x48>)
 80058e8:	2101      	movs	r1, #1
 80058ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <disk_initialize+0x48>)
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	79fa      	ldrb	r2, [r7, #7]
 80058fa:	4906      	ldr	r1, [pc, #24]	; (8005914 <disk_initialize+0x48>)
 80058fc:	440a      	add	r2, r1
 80058fe:	7a12      	ldrb	r2, [r2, #8]
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000024c 	.word	0x2000024c

08005918 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <disk_read+0x3c>)
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	689c      	ldr	r4, [r3, #8]
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <disk_read+0x3c>)
 8005938:	4413      	add	r3, r2
 800593a:	7a18      	ldrb	r0, [r3, #8]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	47a0      	blx	r4
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]
  return res;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	2000024c 	.word	0x2000024c

08005958 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <disk_write+0x3c>)
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68dc      	ldr	r4, [r3, #12]
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <disk_write+0x3c>)
 8005978:	4413      	add	r3, r2
 800597a:	7a18      	ldrb	r0, [r3, #8]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	47a0      	blx	r4
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]
  return res;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	bf00      	nop
 8005994:	2000024c 	.word	0x2000024c

08005998 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	603a      	str	r2, [r7, #0]
 80059a2:	71fb      	strb	r3, [r7, #7]
 80059a4:	460b      	mov	r3, r1
 80059a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <disk_ioctl+0x38>)
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	79fa      	ldrb	r2, [r7, #7]
 80059b6:	4906      	ldr	r1, [pc, #24]	; (80059d0 <disk_ioctl+0x38>)
 80059b8:	440a      	add	r2, r1
 80059ba:	7a10      	ldrb	r0, [r2, #8]
 80059bc:	79b9      	ldrb	r1, [r7, #6]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	4798      	blx	r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000024c 	.word	0x2000024c

080059d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80059e8:	e007      	b.n	80059fa <mem_cpy+0x26>
		*d++ = *s++;
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	1c53      	adds	r3, r2, #1
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1c59      	adds	r1, r3, #1
 80059f4:	6179      	str	r1, [r7, #20]
 80059f6:	7812      	ldrb	r2, [r2, #0]
 80059f8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f2      	bne.n	80059ea <mem_cpy+0x16>
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005a1e:	e005      	b.n	8005a2c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	617a      	str	r2, [r7, #20]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1e5a      	subs	r2, r3, #1
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f4      	bne.n	8005a20 <mem_set+0x12>
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005a58:	bf00      	nop
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <mem_cmp+0x40>
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	61fa      	str	r2, [r7, #28]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	61ba      	str	r2, [r7, #24]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	1acb      	subs	r3, r1, r3
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0ec      	beq.n	8005a5a <mem_cmp+0x1a>
	return r;
 8005a80:	697b      	ldr	r3, [r7, #20]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr

08005a8c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a96:	e002      	b.n	8005a9e <chk_chr+0x12>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <chk_chr+0x26>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d1f2      	bne.n	8005a98 <chk_chr+0xc>
	return *str;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e038      	b.n	8005b46 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005ad4:	492f      	ldr	r1, [pc, #188]	; (8005b94 <chk_lock+0xd4>)
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d029      	beq.n	8005b3c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005ae8:	492a      	ldr	r1, [pc, #168]	; (8005b94 <chk_lock+0xd4>)
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d11e      	bne.n	8005b40 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005b02:	4924      	ldr	r1, [pc, #144]	; (8005b94 <chk_lock+0xd4>)
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4613      	mov	r3, r2
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3304      	adds	r3, #4
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d110      	bne.n	8005b40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005b1e:	491d      	ldr	r1, [pc, #116]	; (8005b94 <chk_lock+0xd4>)
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d102      	bne.n	8005b40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005b3a:	e007      	b.n	8005b4c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d9c3      	bls.n	8005ad4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d109      	bne.n	8005b66 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <chk_lock+0x9e>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d101      	bne.n	8005b62 <chk_lock+0xa2>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e013      	b.n	8005b8a <chk_lock+0xca>
 8005b62:	2312      	movs	r3, #18
 8005b64:	e011      	b.n	8005b8a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <chk_lock+0xc4>
 8005b6c:	4909      	ldr	r1, [pc, #36]	; (8005b94 <chk_lock+0xd4>)
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	330a      	adds	r3, #10
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d101      	bne.n	8005b88 <chk_lock+0xc8>
 8005b84:	2310      	movs	r3, #16
 8005b86:	e000      	b.n	8005b8a <chk_lock+0xca>
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr
 8005b94:	20000234 	.word	0x20000234

08005b98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	e002      	b.n	8005baa <enq_lock+0x12>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d809      	bhi.n	8005bc4 <enq_lock+0x2c>
 8005bb0:	490a      	ldr	r1, [pc, #40]	; (8005bdc <enq_lock+0x44>)
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ef      	bne.n	8005ba4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000234 	.word	0x20000234

08005be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e02b      	b.n	8005c48 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005bf0:	4955      	ldr	r1, [pc, #340]	; (8005d48 <inc_lock+0x168>)
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d11b      	bne.n	8005c42 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005c0a:	494f      	ldr	r1, [pc, #316]	; (8005d48 <inc_lock+0x168>)
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	3304      	adds	r3, #4
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10d      	bne.n	8005c42 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005c26:	4948      	ldr	r1, [pc, #288]	; (8005d48 <inc_lock+0x168>)
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3308      	adds	r3, #8
 8005c36:	881a      	ldrh	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d006      	beq.n	8005c50 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d9d0      	bls.n	8005bf0 <inc_lock+0x10>
 8005c4e:	e000      	b.n	8005c52 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005c50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d145      	bne.n	8005ce4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e002      	b.n	8005c64 <inc_lock+0x84>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d809      	bhi.n	8005c7e <inc_lock+0x9e>
 8005c6a:	4937      	ldr	r1, [pc, #220]	; (8005d48 <inc_lock+0x168>)
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ef      	bne.n	8005c5e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d101      	bne.n	8005c88 <inc_lock+0xa8>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e05a      	b.n	8005d3e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005c8e:	482e      	ldr	r0, [pc, #184]	; (8005d48 <inc_lock+0x168>)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4613      	mov	r3, r2
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4403      	add	r3, r0
 8005c9c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005ca4:	4828      	ldr	r0, [pc, #160]	; (8005d48 <inc_lock+0x168>)
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4403      	add	r3, r0
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005cbc:	4922      	ldr	r1, [pc, #136]	; (8005d48 <inc_lock+0x168>)
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	3308      	adds	r3, #8
 8005ccc:	4602      	mov	r2, r0
 8005cce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005cd0:	491d      	ldr	r1, [pc, #116]	; (8005d48 <inc_lock+0x168>)
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	330a      	adds	r3, #10
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <inc_lock+0x124>
 8005cea:	4917      	ldr	r1, [pc, #92]	; (8005d48 <inc_lock+0x168>)
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	330a      	adds	r3, #10
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <inc_lock+0x124>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e01c      	b.n	8005d3e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <inc_lock+0x142>
 8005d0a:	490f      	ldr	r1, [pc, #60]	; (8005d48 <inc_lock+0x168>)
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	330a      	adds	r3, #10
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	e001      	b.n	8005d26 <inc_lock+0x146>
 8005d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d26:	4808      	ldr	r0, [pc, #32]	; (8005d48 <inc_lock+0x168>)
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4403      	add	r3, r0
 8005d34:	330a      	adds	r3, #10
 8005d36:	460a      	mov	r2, r1
 8005d38:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr
 8005d48:	20000234 	.word	0x20000234

08005d4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d82e      	bhi.n	8005dbe <dec_lock+0x72>
		n = Files[i].ctr;
 8005d60:	491b      	ldr	r1, [pc, #108]	; (8005dd0 <dec_lock+0x84>)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	330a      	adds	r3, #10
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d74:	89fb      	ldrh	r3, [r7, #14]
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d101      	bne.n	8005d80 <dec_lock+0x34>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <dec_lock+0x40>
 8005d86:	89fb      	ldrh	r3, [r7, #14]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d8c:	4910      	ldr	r1, [pc, #64]	; (8005dd0 <dec_lock+0x84>)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	330a      	adds	r3, #10
 8005d9c:	89fa      	ldrh	r2, [r7, #14]
 8005d9e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005da0:	89fb      	ldrh	r3, [r7, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d108      	bne.n	8005db8 <dec_lock+0x6c>
 8005da6:	490a      	ldr	r1, [pc, #40]	; (8005dd0 <dec_lock+0x84>)
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	737b      	strb	r3, [r7, #13]
 8005dbc:	e001      	b.n	8005dc2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005dc2:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000234 	.word	0x20000234

08005dd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e016      	b.n	8005e10 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005de2:	490f      	ldr	r1, [pc, #60]	; (8005e20 <clear_lock+0x4c>)
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d108      	bne.n	8005e0a <clear_lock+0x36>
 8005df8:	4909      	ldr	r1, [pc, #36]	; (8005e20 <clear_lock+0x4c>)
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d9e5      	bls.n	8005de2 <clear_lock+0xe>
	}
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	20000234 	.word	0x20000234

08005e24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d038      	beq.n	8005eac <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005e40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	f7ff fd83 	bl	8005958 <disk_write>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e026      	b.n	8005eac <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d218      	bcs.n	8005eac <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e010      	b.n	8005ea6 <sync_window+0x82>
					wsect += fs->fsize;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	f7ff fd5c 	bl	8005958 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d8eb      	bhi.n	8005e84 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d01b      	beq.n	8005f08 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff ffa7 	bl	8005e24 <sync_window>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d113      	bne.n	8005f08 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	f7ff fd14 	bl	8005918 <disk_read>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff82 	bl	8005e24 <sync_window>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 809b 	bne.w	8006062 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	f040 8088 	bne.w	8006048 <sync_fs+0x136>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	f040 8082 	bne.w	8006048 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fd5e 	bl	8005a0e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2255      	movs	r2, #85	; 0x55
 8005f56:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	22aa      	movs	r2, #170	; 0xaa
 8005f5e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2252      	movs	r2, #82	; 0x52
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2252      	movs	r2, #82	; 0x52
 8005f6c:	705a      	strb	r2, [r3, #1]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2261      	movs	r2, #97	; 0x61
 8005f72:	709a      	strb	r2, [r3, #2]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2241      	movs	r2, #65	; 0x41
 8005f78:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2272      	movs	r2, #114	; 0x72
 8005f7e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2272      	movs	r2, #114	; 0x72
 8005f86:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2241      	movs	r2, #65	; 0x41
 8005f8e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2261      	movs	r2, #97	; 0x61
 8005f96:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006014:	0e1b      	lsrs	r3, r3, #24
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800603a:	2301      	movs	r3, #1
 800603c:	f7ff fc8c 	bl	8005958 <disk_write>
			fs->fsi_flag = 0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800604e:	2200      	movs	r2, #0
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fca0 	bl	8005998 <disk_ioctl>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3b02      	subs	r3, #2
 800607a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006082:	3b02      	subs	r3, #2
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d301      	bcc.n	800608e <clust2sect+0x22>
 800608a:	2300      	movs	r3, #0
 800608c:	e00a      	b.n	80060a4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006094:	461a      	mov	r2, r3
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	fb03 f202 	mul.w	r2, r3, r2
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80060a2:	4413      	add	r3, r2
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d905      	bls.n	80060ca <get_fat+0x1c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <get_fat+0x22>
		val = 1;	/* Internal error */
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e0a0      	b.n	8006212 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d044      	beq.n	800616a <get_fat+0xbc>
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d063      	beq.n	80061ac <get_fat+0xfe>
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 808a 	bne.w	80061fe <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	0a5b      	lsrs	r3, r3, #9
 8006102:	4413      	add	r3, r2
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fed5 	bl	8005eb6 <move_window>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d178      	bne.n	8006204 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	60fa      	str	r2, [r7, #12]
 8006118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	0a5b      	lsrs	r3, r3, #9
 800612c:	4413      	add	r3, r2
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fec0 	bl	8005eb6 <move_window>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d165      	bne.n	8006208 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	5cd3      	ldrb	r3, [r2, r3]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <get_fat+0xb2>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	e002      	b.n	8006166 <get_fat+0xb8>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006166:	617b      	str	r3, [r7, #20]
			break;
 8006168:	e053      	b.n	8006212 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	4413      	add	r3, r2
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fe9c 	bl	8005eb6 <move_window>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d143      	bne.n	800620c <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3301      	adds	r3, #1
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	b21a      	sxth	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b21b      	sxth	r3, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	617b      	str	r3, [r7, #20]
			break;
 80061aa:	e032      	b.n	8006212 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	4413      	add	r3, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fe7b 	bl	8005eb6 <move_window>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d124      	bne.n	8006210 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	3303      	adds	r3, #3
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	061a      	lsls	r2, r3, #24
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3302      	adds	r3, #2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	4313      	orrs	r3, r2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	3201      	adds	r2, #1
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	0212      	lsls	r2, r2, #8
 80061ee:	4313      	orrs	r3, r2
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061fa:	617b      	str	r3, [r7, #20]
			break;
 80061fc:	e009      	b.n	8006212 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80061fe:	2301      	movs	r3, #1
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	e006      	b.n	8006212 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006204:	bf00      	nop
 8006206:	e004      	b.n	8006212 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006210:	bf00      	nop
		}
	}

	return val;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d905      	bls.n	800623a <put_fat+0x1e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	d302      	bcc.n	8006240 <put_fat+0x24>
		res = FR_INT_ERR;
 800623a:	2302      	movs	r3, #2
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e0f3      	b.n	8006428 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006246:	2b02      	cmp	r3, #2
 8006248:	d074      	beq.n	8006334 <put_fat+0x118>
 800624a:	2b03      	cmp	r3, #3
 800624c:	f000 8099 	beq.w	8006382 <put_fat+0x166>
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 80df 	bne.w	8006414 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	0a5b      	lsrs	r3, r3, #9
 800626e:	4413      	add	r3, r2
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fe1f 	bl	8005eb6 <move_window>
 8006278:	4603      	mov	r3, r0
 800627a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800627c:	7ffb      	ldrb	r3, [r7, #31]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 80cb 	bne.w	800641a <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	617a      	str	r2, [r7, #20]
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <put_fat+0x9e>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	b25a      	sxtb	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e001      	b.n	80062be <put_fat+0xa2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	0a5b      	lsrs	r3, r3, #9
 80062d4:	4413      	add	r3, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fdec 	bl	8005eb6 <move_window>
 80062de:	4603      	mov	r3, r0
 80062e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062e2:	7ffb      	ldrb	r3, [r7, #31]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 809a 	bne.w	800641e <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <put_fat+0xec>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	091b      	lsrs	r3, r3, #4
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e00e      	b.n	8006326 <put_fat+0x10a>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f023 030f 	bic.w	r3, r3, #15
 8006312:	b25a      	sxtb	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	b25b      	sxtb	r3, r3
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	b25b      	sxtb	r3, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	b25b      	sxtb	r3, r3
 8006324:	b2db      	uxtb	r3, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006332:	e079      	b.n	8006428 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	4413      	add	r3, r2
 8006340:	4619      	mov	r1, r3
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fdb7 	bl	8005eb6 <move_window>
 8006348:	4603      	mov	r3, r0
 800634a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800634c:	7ffb      	ldrb	r3, [r7, #31]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d167      	bne.n	8006422 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	b29b      	uxth	r3, r3
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	b29a      	uxth	r2, r3
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	3301      	adds	r3, #1
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006380:	e052      	b.n	8006428 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	09db      	lsrs	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fd90 	bl	8005eb6 <move_window>
 8006396:	4603      	mov	r3, r0
 8006398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d142      	bne.n	8006426 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	3303      	adds	r3, #3
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	061a      	lsls	r2, r3, #24
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	3302      	adds	r3, #2
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	4313      	orrs	r3, r2
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	3201      	adds	r2, #1
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0212      	lsls	r2, r2, #8
 80063c8:	4313      	orrs	r3, r2
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	7812      	ldrb	r2, [r2, #0]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3301      	adds	r3, #1
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0c1a      	lsrs	r2, r3, #16
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3302      	adds	r3, #2
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0e1a      	lsrs	r2, r3, #24
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3303      	adds	r3, #3
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006412:	e009      	b.n	8006428 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e006      	b.n	8006428 <put_fat+0x20c>
			if (res != FR_OK) break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <put_fat+0x20c>
			if (res != FR_OK) break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006426:	bf00      	nop
		}
	}

	return res;
 8006428:	7ffb      	ldrb	r3, [r7, #31]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d905      	bls.n	800644e <remove_chain+0x1c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <remove_chain+0x22>
		res = FR_INT_ERR;
 800644e:	2302      	movs	r3, #2
 8006450:	73fb      	strb	r3, [r7, #15]
 8006452:	e043      	b.n	80064dc <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006458:	e036      	b.n	80064c8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fe26 	bl	80060ae <get_fat>
 8006462:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d035      	beq.n	80064d6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d102      	bne.n	8006476 <remove_chain+0x44>
 8006470:	2302      	movs	r3, #2
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e032      	b.n	80064dc <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d102      	bne.n	8006484 <remove_chain+0x52>
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
 8006482:	e02b      	b.n	80064dc <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006484:	2200      	movs	r2, #0
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fec7 	bl	800621c <put_fat>
 800648e:	4603      	mov	r3, r0
 8006490:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d120      	bne.n	80064da <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d00f      	beq.n	80064c4 <remove_chain+0x92>
				fs->free_clust++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d3c2      	bcc.n	800645a <remove_chain+0x28>
 80064d4:	e002      	b.n	80064dc <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <remove_chain+0xaa>
			if (res != FR_OK) break;
 80064da:	bf00      	nop
		}
	}

	return res;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80064fc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <create_chain+0x2a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	429a      	cmp	r2, r3
 800650e:	d31c      	bcc.n	800654a <create_chain+0x64>
 8006510:	2301      	movs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e019      	b.n	800654a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fdc8 	bl	80060ae <get_fat>
 800651e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d801      	bhi.n	800652a <create_chain+0x44>
 8006526:	2301      	movs	r3, #1
 8006528:	e076      	b.n	8006618 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d101      	bne.n	8006536 <create_chain+0x50>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	e070      	b.n	8006618 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d201      	bcs.n	8006546 <create_chain+0x60>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	e068      	b.n	8006618 <create_chain+0x132>
		scl = clst;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3301      	adds	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	429a      	cmp	r2, r3
 800655e:	d307      	bcc.n	8006570 <create_chain+0x8a>
			ncl = 2;
 8006560:	2302      	movs	r3, #2
 8006562:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	429a      	cmp	r2, r3
 800656a:	d901      	bls.n	8006570 <create_chain+0x8a>
 800656c:	2300      	movs	r3, #0
 800656e:	e053      	b.n	8006618 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006570:	6979      	ldr	r1, [r7, #20]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff fd9b 	bl	80060ae <get_fat>
 8006578:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00e      	beq.n	800659e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d002      	beq.n	800658e <create_chain+0xa8>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <create_chain+0xac>
			return cs;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	e042      	b.n	8006618 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d1d9      	bne.n	800654e <create_chain+0x68>
 800659a:	2300      	movs	r3, #0
 800659c:	e03c      	b.n	8006618 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800659e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80065a0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fe38 	bl	800621c <put_fat>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <create_chain+0xe4>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d006      	beq.n	80065ca <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fe2b 	bl	800621c <put_fat>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d11a      	bne.n	8006606 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d018      	beq.n	8006616 <create_chain+0x130>
			fs->free_clust--;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006604:	e007      	b.n	8006616 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d102      	bne.n	8006612 <create_chain+0x12c>
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	e000      	b.n	8006614 <create_chain+0x12e>
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006616:	697b      	ldr	r3, [r7, #20]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006630:	3304      	adds	r3, #4
 8006632:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	0a5b      	lsrs	r3, r3, #9
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800663e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006642:	fbb3 f3f2 	udiv	r3, r3, r2
 8006646:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	613a      	str	r2, [r7, #16]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <clmt_clust+0x3c>
 8006658:	2300      	movs	r3, #0
 800665a:	e010      	b.n	800667e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d307      	bcc.n	8006674 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3304      	adds	r3, #4
 8006670:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006672:	e7e9      	b.n	8006648 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006674:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
}
 800667e:	4618      	mov	r0, r3
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80066a2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d007      	beq.n	80066ba <dir_sdi+0x32>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d301      	bcc.n	80066be <dir_sdi+0x36>
		return FR_INT_ERR;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e074      	b.n	80067a8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10c      	bne.n	80066de <dir_sdi+0x56>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d105      	bne.n	80066de <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80066dc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d111      	bne.n	8006708 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80066ee:	461a      	mov	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d301      	bcc.n	80066fa <dir_sdi+0x72>
			return FR_INT_ERR;
 80066f6:	2302      	movs	r3, #2
 80066f8:	e056      	b.n	80067a8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006700:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	e032      	b.n	800676e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800670e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006716:	e01e      	b.n	8006756 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fcc4 	bl	80060ae <get_fat>
 8006726:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d101      	bne.n	8006734 <dir_sdi+0xac>
 8006730:	2301      	movs	r3, #1
 8006732:	e039      	b.n	80067a8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d907      	bls.n	800674a <dir_sdi+0xc2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	d301      	bcc.n	800674e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800674a:	2302      	movs	r3, #2
 800674c:	e02c      	b.n	80067a8 <dir_sdi+0x120>
			idx -= ic;
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d2dc      	bcs.n	8006718 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fc80 	bl	800606c <clust2sect>
 800676c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <dir_sdi+0xf8>
 800677c:	2302      	movs	r3, #2
 800677e:	e013      	b.n	80067a8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	091a      	lsrs	r2, r3, #4
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	441a      	add	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006794:	461a      	mov	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	015b      	lsls	r3, r3, #5
 800679e:	441a      	add	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <dir_next+0x26>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <dir_next+0x2a>
		return FR_NO_FILE;
 80067d6:	2304      	movs	r3, #4
 80067d8:	e0dd      	b.n	8006996 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 80c6 	bne.w	8006972 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006804:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006808:	461a      	mov	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4293      	cmp	r3, r2
 800680e:	f0c0 80b0 	bcc.w	8006972 <dir_next+0x1c2>
				return FR_NO_FILE;
 8006812:	2304      	movs	r3, #4
 8006814:	e0bf      	b.n	8006996 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006820:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006824:	3a01      	subs	r2, #1
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 80a2 	bne.w	8006972 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f7ff fc36 	bl	80060ae <get_fat>
 8006842:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d801      	bhi.n	800684e <dir_next+0x9e>
 800684a:	2302      	movs	r3, #2
 800684c:	e0a3      	b.n	8006996 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d101      	bne.n	800685a <dir_next+0xaa>
 8006856:	2301      	movs	r3, #1
 8006858:	e09d      	b.n	8006996 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006860:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	429a      	cmp	r2, r3
 8006868:	d374      	bcc.n	8006954 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <dir_next+0xc4>
 8006870:	2304      	movs	r3, #4
 8006872:	e090      	b.n	8006996 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7ff fe2f 	bl	80064e6 <create_chain>
 8006888:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <dir_next+0xe4>
 8006890:	2307      	movs	r3, #7
 8006892:	e080      	b.n	8006996 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <dir_next+0xee>
 800689a:	2302      	movs	r3, #2
 800689c:	e07b      	b.n	8006996 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d101      	bne.n	80068aa <dir_next+0xfa>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e075      	b.n	8006996 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fab7 	bl	8005e24 <sync_window>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <dir_next+0x110>
 80068bc:	2301      	movs	r3, #1
 80068be:	e06a      	b.n	8006996 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f89e 	bl	8005a0e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80068de:	6979      	ldr	r1, [r7, #20]
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7ff fbc3 	bl	800606c <clust2sect>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	e01b      	b.n	800692a <dir_next+0x17a>
						dp->fs->wflag = 1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fa8d 	bl	8005e24 <sync_window>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <dir_next+0x164>
 8006910:	2301      	movs	r3, #1
 8006912:	e040      	b.n	8006996 <dir_next+0x1e6>
						dp->fs->winsect++;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800691a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800691e:	3201      	adds	r2, #1
 8006920:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3301      	adds	r3, #1
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006930:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006934:	461a      	mov	r2, r3
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4293      	cmp	r3, r2
 800693a:	d3da      	bcc.n	80068f2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006942:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	1a8a      	subs	r2, r1, r2
 8006950:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fb81 	bl	800606c <clust2sect>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	015b      	lsls	r3, r3, #5
 800698c:	441a      	add	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	bd90      	pop	{r4, r7, pc}

0800699e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80069a8:	2100      	movs	r1, #0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fe6c 	bl	8006688 <dir_sdi>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d131      	bne.n	8006a1e <dir_alloc+0x80>
		n = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7ff fa72 	bl	8005eb6 <move_window>
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11f      	bne.n	8006a1c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2be5      	cmp	r3, #229	; 0xe5
 80069e6:	d005      	beq.n	80069f4 <dir_alloc+0x56>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d102      	bne.n	8006a08 <dir_alloc+0x6a>
 8006a02:	e00c      	b.n	8006a1e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006a08:	2101      	movs	r1, #1
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fed0 	bl	80067b0 <dir_next>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0d1      	beq.n	80069be <dir_alloc+0x20>
 8006a1a:	e000      	b.n	8006a1e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006a1c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d101      	bne.n	8006a28 <dir_alloc+0x8a>
 8006a24:	2307      	movs	r3, #7
 8006a26:	73fb      	strb	r3, [r7, #15]
	return res;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	331b      	adds	r3, #27
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	331a      	adds	r3, #26
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	b21b      	sxth	r3, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d10f      	bne.n	8006a80 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	3315      	adds	r3, #21
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	b21a      	sxth	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b21b      	sxth	r3, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

	return cl;
 8006a80:	68fb      	ldr	r3, [r7, #12]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	331a      	adds	r3, #26
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	331b      	adds	r3, #27
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	0c1a      	lsrs	r2, r3, #16
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3315      	adds	r3, #21
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fdd0 	bl	8006688 <dir_sdi>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <dir_find+0x1e>
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	e03b      	b.n	8006b6e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7ff f9d6 	bl	8005eb6 <move_window>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d128      	bne.n	8006b66 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b1a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <dir_find+0x56>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	75fb      	strb	r3, [r7, #23]
 8006b2c:	e01e      	b.n	8006b6c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	330b      	adds	r3, #11
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <dir_find+0x7a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b42:	220b      	movs	r2, #11
 8006b44:	4619      	mov	r1, r3
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f7fe ff7a 	bl	8005a40 <mem_cmp>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006b52:	2100      	movs	r1, #0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff fe2b 	bl	80067b0 <dir_next>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0c8      	beq.n	8006af6 <dir_find+0x1e>
 8006b64:	e002      	b.n	8006b6c <dir_find+0x94>
		if (res != FR_OK) break;
 8006b66:	bf00      	nop
 8006b68:	e000      	b.n	8006b6c <dir_find+0x94>
			break;
 8006b6a:	bf00      	nop

	return res;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8006b80:	2304      	movs	r3, #4
 8006b82:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8006b84:	e03f      	b.n	8006c06 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7ff f98e 	bl	8005eb6 <move_window>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d136      	bne.n	8006c12 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006baa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <dir_read+0x48>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	75fb      	strb	r3, [r7, #23]
 8006bbc:	e02e      	b.n	8006c1c <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	330b      	adds	r3, #11
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc8:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2be5      	cmp	r3, #229	; 0xe5
 8006bce:	d011      	beq.n	8006bf4 <dir_read+0x7e>
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd4:	d00e      	beq.n	8006bf4 <dir_read+0x7e>
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b0f      	cmp	r3, #15
 8006bda:	d00b      	beq.n	8006bf4 <dir_read+0x7e>
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	f023 0320 	bic.w	r3, r3, #32
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d010      	beq.n	8006c16 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fdda 	bl	80067b0 <dir_next>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <dir_read+0xa4>
	while (dp->sect) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ba      	bne.n	8006b86 <dir_read+0x10>
 8006c10:	e004      	b.n	8006c1c <dir_read+0xa6>
		if (res != FR_OK) break;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <dir_read+0xa6>
			break;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <dir_read+0xa6>
		if (res != FR_OK) break;
 8006c1a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <dir_read+0xb4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fead 	bl	800699e <dir_alloc>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d126      	bne.n	8006c9c <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7ff f92a 	bl	8005eb6 <move_window>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d117      	bne.n	8006c9c <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c72:	2220      	movs	r2, #32
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fec9 	bl	8005a0e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c88:	220b      	movs	r2, #11
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f7fe fea2 	bl	80059d4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	3309      	adds	r3, #9
 8006cb4:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05a      	beq.n	8006d76 <get_fileinfo+0xd0>
		dir = dp->dir;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cc6:	60bb      	str	r3, [r7, #8]
		i = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006ccc:	e01c      	b.n	8006d08 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	617a      	str	r2, [r7, #20]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d100      	bne.n	8006ce4 <get_fileinfo+0x3e>
 8006ce2:	e011      	b.n	8006d08 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d101      	bne.n	8006cee <get_fileinfo+0x48>
 8006cea:	23e5      	movs	r3, #229	; 0xe5
 8006cec:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	d104      	bne.n	8006cfe <get_fileinfo+0x58>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	613a      	str	r2, [r7, #16]
 8006cfa:	222e      	movs	r2, #46	; 0x2e
 8006cfc:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	613a      	str	r2, [r7, #16]
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b0a      	cmp	r3, #10
 8006d0c:	d9df      	bls.n	8006cce <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7ada      	ldrb	r2, [r3, #11]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	331f      	adds	r3, #31
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	061a      	lsls	r2, r3, #24
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	331e      	adds	r3, #30
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	4313      	orrs	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	321d      	adds	r2, #29
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	0212      	lsls	r2, r2, #8
 8006d30:	4313      	orrs	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	321c      	adds	r2, #28
 8006d36:	7812      	ldrb	r2, [r2, #0]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3319      	adds	r3, #25
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	b21a      	sxth	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	3318      	adds	r3, #24
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b21b      	sxth	r3, r3
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3317      	adds	r3, #23
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b21a      	sxth	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	3316      	adds	r3, #22
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b21b      	sxth	r3, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr
	...

08006d88 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e002      	b.n	8006da0 <create_name+0x18>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b2f      	cmp	r3, #47	; 0x2f
 8006da6:	d0f8      	beq.n	8006d9a <create_name+0x12>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b5c      	cmp	r3, #92	; 0x5c
 8006dae:	d0f4      	beq.n	8006d9a <create_name+0x12>
	sfn = dp->fn;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006db6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006db8:	220b      	movs	r2, #11
 8006dba:	2120      	movs	r1, #32
 8006dbc:	68b8      	ldr	r0, [r7, #8]
 8006dbe:	f7fe fe26 	bl	8005a0e <mem_set>
	si = i = b = 0; ni = 8;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	2308      	movs	r3, #8
 8006dd0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	617a      	str	r2, [r7, #20]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006de0:	7fbb      	ldrb	r3, [r7, #30]
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d953      	bls.n	8006e8e <create_name+0x106>
 8006de6:	7fbb      	ldrb	r3, [r7, #30]
 8006de8:	2b2f      	cmp	r3, #47	; 0x2f
 8006dea:	d050      	beq.n	8006e8e <create_name+0x106>
 8006dec:	7fbb      	ldrb	r3, [r7, #30]
 8006dee:	2b5c      	cmp	r3, #92	; 0x5c
 8006df0:	d04d      	beq.n	8006e8e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006df2:	7fbb      	ldrb	r3, [r7, #30]
 8006df4:	2b2e      	cmp	r3, #46	; 0x2e
 8006df6:	d003      	beq.n	8006e00 <create_name+0x78>
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d30f      	bcc.n	8006e20 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d102      	bne.n	8006e0c <create_name+0x84>
 8006e06:	7fbb      	ldrb	r3, [r7, #30]
 8006e08:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0a:	d001      	beq.n	8006e10 <create_name+0x88>
 8006e0c:	2306      	movs	r3, #6
 8006e0e:	e073      	b.n	8006ef8 <create_name+0x170>
			i = 8; ni = 11;
 8006e10:	2308      	movs	r3, #8
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	230b      	movs	r3, #11
 8006e16:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006e18:	7ffb      	ldrb	r3, [r7, #31]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e035      	b.n	8006e8c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006e20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da08      	bge.n	8006e3a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	f043 0303 	orr.w	r3, r3, #3
 8006e2e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006e30:	7fbb      	ldrb	r3, [r7, #30]
 8006e32:	3b80      	subs	r3, #128	; 0x80
 8006e34:	4a32      	ldr	r2, [pc, #200]	; (8006f00 <create_name+0x178>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006e3a:	7fbb      	ldrb	r3, [r7, #30]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4831      	ldr	r0, [pc, #196]	; (8006f04 <create_name+0x17c>)
 8006e40:	f7fe fe24 	bl	8005a8c <chk_chr>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <create_name+0xc6>
				return FR_INVALID_NAME;
 8006e4a:	2306      	movs	r3, #6
 8006e4c:	e054      	b.n	8006ef8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006e4e:	7fbb      	ldrb	r3, [r7, #30]
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d907      	bls.n	8006e64 <create_name+0xdc>
 8006e54:	7fbb      	ldrb	r3, [r7, #30]
 8006e56:	2b5a      	cmp	r3, #90	; 0x5a
 8006e58:	d804      	bhi.n	8006e64 <create_name+0xdc>
				b |= 2;
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
 8006e5c:	f043 0302 	orr.w	r3, r3, #2
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e00c      	b.n	8006e7e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006e64:	7fbb      	ldrb	r3, [r7, #30]
 8006e66:	2b60      	cmp	r3, #96	; 0x60
 8006e68:	d909      	bls.n	8006e7e <create_name+0xf6>
 8006e6a:	7fbb      	ldrb	r3, [r7, #30]
 8006e6c:	2b7a      	cmp	r3, #122	; 0x7a
 8006e6e:	d806      	bhi.n	8006e7e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	7fbb      	ldrb	r3, [r7, #30]
 8006e7a:	3b20      	subs	r3, #32
 8006e7c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	613a      	str	r2, [r7, #16]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	4413      	add	r3, r2
 8006e88:	7fba      	ldrb	r2, [r7, #30]
 8006e8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006e8c:	e7a1      	b.n	8006dd2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	441a      	add	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006e98:	7fbb      	ldrb	r3, [r7, #30]
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d801      	bhi.n	8006ea2 <create_name+0x11a>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e000      	b.n	8006ea4 <create_name+0x11c>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <create_name+0x128>
 8006eac:	2306      	movs	r3, #6
 8006eae:	e023      	b.n	8006ef8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2be5      	cmp	r3, #229	; 0xe5
 8006eb6:	d102      	bne.n	8006ebe <create_name+0x136>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2205      	movs	r2, #5
 8006ebc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d102      	bne.n	8006eca <create_name+0x142>
 8006ec4:	7ffb      	ldrb	r3, [r7, #31]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006eca:	7ffb      	ldrb	r3, [r7, #31]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d103      	bne.n	8006edc <create_name+0x154>
 8006ed4:	7fbb      	ldrb	r3, [r7, #30]
 8006ed6:	f043 0310 	orr.w	r3, r3, #16
 8006eda:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006edc:	7ffb      	ldrb	r3, [r7, #31]
 8006ede:	f003 030c 	and.w	r3, r3, #12
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d103      	bne.n	8006eee <create_name+0x166>
 8006ee6:	7fbb      	ldrb	r3, [r7, #30]
 8006ee8:	f043 0308 	orr.w	r3, r3, #8
 8006eec:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	330b      	adds	r3, #11
 8006ef2:	7fba      	ldrb	r2, [r7, #30]
 8006ef4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006ef6:	2300      	movs	r3, #0
#endif
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	0800a02c 	.word	0x0800a02c
 8006f04:	0800977c 	.word	0x0800977c

08006f08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b2f      	cmp	r3, #47	; 0x2f
 8006f18:	d003      	beq.n	8006f22 <follow_path+0x1a>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b5c      	cmp	r3, #92	; 0x5c
 8006f20:	d102      	bne.n	8006f28 <follow_path+0x20>
		path++;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b1f      	cmp	r3, #31
 8006f36:	d80a      	bhi.n	8006f4e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006f38:	2100      	movs	r1, #0
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fba4 	bl	8006688 <dir_sdi>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006f4c:	e045      	b.n	8006fda <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f4e:	463b      	mov	r3, r7
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ff18 	bl	8006d88 <create_name>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d136      	bne.n	8006fd0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fdb8 	bl	8006ad8 <dir_find>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f72:	7adb      	ldrb	r3, [r3, #11]
 8006f74:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d128      	bne.n	8006fd4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d123      	bne.n	8006fd4 <follow_path+0xcc>
 8006f8c:	2305      	movs	r3, #5
 8006f8e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006f90:	e020      	b.n	8006fd4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d11d      	bne.n	8006fd8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	330b      	adds	r3, #11
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006fb2:	2305      	movs	r3, #5
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e010      	b.n	8006fda <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff fd36 	bl	8006a32 <ld_clust>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006fce:	e7be      	b.n	8006f4e <follow_path+0x46>
			if (res != FR_OK) break;
 8006fd0:	bf00      	nop
 8006fd2:	e002      	b.n	8006fda <follow_path+0xd2>
				break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fd8:	bf00      	nop
		}
	}

	return res;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d031      	beq.n	800705e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e002      	b.n	8007008 <get_ldnumber+0x24>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	3301      	adds	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b20      	cmp	r3, #32
 800700e:	d903      	bls.n	8007018 <get_ldnumber+0x34>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b3a      	cmp	r3, #58	; 0x3a
 8007016:	d1f4      	bne.n	8007002 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b3a      	cmp	r3, #58	; 0x3a
 800701e:	d11c      	bne.n	800705a <get_ldnumber+0x76>
			tp = *path;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	60fa      	str	r2, [r7, #12]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	3b30      	subs	r3, #48	; 0x30
 8007030:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b09      	cmp	r3, #9
 8007036:	d80e      	bhi.n	8007056 <get_ldnumber+0x72>
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	429a      	cmp	r2, r3
 800703e:	d10a      	bne.n	8007056 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <get_ldnumber+0x72>
					vol = (int)i;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	3301      	adds	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	e002      	b.n	8007060 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800705e:	693b      	ldr	r3, [r7, #16]
}
 8007060:	4618      	mov	r0, r3
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
	...

0800706c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f04f 32ff 	mov.w	r2, #4294967295
 8007084:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fe ff13 	bl	8005eb6 <move_window>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <check_fs+0x2e>
		return 3;
 8007096:	2303      	movs	r3, #3
 8007098:	e04a      	b.n	8007130 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070a0:	3301      	adds	r3, #1
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	4a20      	ldr	r2, [pc, #128]	; (8007138 <check_fs+0xcc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d001      	beq.n	80070be <check_fs+0x52>
		return 2;
 80070ba:	2302      	movs	r3, #2
 80070bc:	e038      	b.n	8007130 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3336      	adds	r3, #54	; 0x36
 80070c2:	3303      	adds	r3, #3
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	061a      	lsls	r2, r3, #24
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3336      	adds	r3, #54	; 0x36
 80070cc:	3302      	adds	r3, #2
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	4313      	orrs	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	3236      	adds	r2, #54	; 0x36
 80070d8:	3201      	adds	r2, #1
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	0212      	lsls	r2, r2, #8
 80070de:	4313      	orrs	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	4a13      	ldr	r2, [pc, #76]	; (800713c <check_fs+0xd0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <check_fs+0x8a>
		return 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e01c      	b.n	8007130 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3352      	adds	r3, #82	; 0x52
 80070fa:	3303      	adds	r3, #3
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	061a      	lsls	r2, r3, #24
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3352      	adds	r3, #82	; 0x52
 8007104:	3302      	adds	r3, #2
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	041b      	lsls	r3, r3, #16
 800710a:	4313      	orrs	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	3252      	adds	r2, #82	; 0x52
 8007110:	3201      	adds	r2, #1
 8007112:	7812      	ldrb	r2, [r2, #0]
 8007114:	0212      	lsls	r2, r2, #8
 8007116:	4313      	orrs	r3, r2
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800711e:	4313      	orrs	r3, r2
 8007120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007124:	4a05      	ldr	r2, [pc, #20]	; (800713c <check_fs+0xd0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d101      	bne.n	800712e <check_fs+0xc2>
		return 0;
 800712a:	2300      	movs	r3, #0
 800712c:	e000      	b.n	8007130 <check_fs+0xc4>

	return 1;
 800712e:	2301      	movs	r3, #1
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	ffffaa55 	.word	0xffffaa55
 800713c:	00544146 	.word	0x00544146

08007140 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b096      	sub	sp, #88	; 0x58
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007154:	68b8      	ldr	r0, [r7, #8]
 8007156:	f7ff ff45 	bl	8006fe4 <get_ldnumber>
 800715a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	da01      	bge.n	8007166 <find_volume+0x26>
 8007162:	230b      	movs	r3, #11
 8007164:	e2aa      	b.n	80076bc <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007166:	4a9e      	ldr	r2, [pc, #632]	; (80073e0 <find_volume+0x2a0>)
 8007168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <find_volume+0x3a>
 8007176:	230c      	movs	r3, #12
 8007178:	e2a0      	b.n	80076bc <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01b      	beq.n	80071c2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fb81 	bl	8005898 <disk_status>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800719c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10c      	bne.n	80071c2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <find_volume+0x7e>
 80071ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80071ba:	230a      	movs	r3, #10
 80071bc:	e27e      	b.n	80076bc <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 80071be:	2300      	movs	r3, #0
 80071c0:	e27c      	b.n	80076bc <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fb76 	bl	80058cc <disk_initialize>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80071e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80071f2:	2303      	movs	r3, #3
 80071f4:	e262      	b.n	80076bc <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <find_volume+0xcc>
 80071fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007208:	230a      	movs	r3, #10
 800720a:	e257      	b.n	80076bc <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007210:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007212:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007214:	f7ff ff2a 	bl	800706c <check_fs>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800721e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007222:	2b01      	cmp	r3, #1
 8007224:	d155      	bne.n	80072d2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007226:	2300      	movs	r3, #0
 8007228:	643b      	str	r3, [r7, #64]	; 0x40
 800722a:	e029      	b.n	8007280 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800722c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007236:	4413      	add	r3, r2
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	3304      	adds	r3, #4
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d012      	beq.n	800726a <find_volume+0x12a>
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	330b      	adds	r3, #11
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	061a      	lsls	r2, r3, #24
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	330a      	adds	r3, #10
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	4313      	orrs	r3, r2
 8007256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007258:	3209      	adds	r2, #9
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	0212      	lsls	r2, r2, #8
 800725e:	4313      	orrs	r3, r2
 8007260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007262:	3208      	adds	r2, #8
 8007264:	7812      	ldrb	r2, [r2, #0]
 8007266:	431a      	orrs	r2, r3
 8007268:	e000      	b.n	800726c <find_volume+0x12c>
 800726a:	2200      	movs	r2, #0
 800726c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007274:	440b      	add	r3, r1
 8007276:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800727a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727c:	3301      	adds	r3, #1
 800727e:	643b      	str	r3, [r7, #64]	; 0x40
 8007280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007282:	2b03      	cmp	r3, #3
 8007284:	d9d2      	bls.n	800722c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007286:	2300      	movs	r3, #0
 8007288:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800728a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <find_volume+0x156>
 8007290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007292:	3b01      	subs	r3, #1
 8007294:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800729e:	4413      	add	r3, r2
 80072a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80072a4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80072a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <find_volume+0x178>
 80072ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072b0:	f7ff fedc 	bl	800706c <check_fs>
 80072b4:	4603      	mov	r3, r0
 80072b6:	e000      	b.n	80072ba <find_volume+0x17a>
 80072b8:	2302      	movs	r3, #2
 80072ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80072be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <find_volume+0x192>
 80072c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c8:	3301      	adds	r3, #1
 80072ca:	643b      	str	r3, [r7, #64]	; 0x40
 80072cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d9e1      	bls.n	8007296 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80072d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d101      	bne.n	80072de <find_volume+0x19e>
 80072da:	2301      	movs	r3, #1
 80072dc:	e1ee      	b.n	80076bc <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80072de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <find_volume+0x1aa>
 80072e6:	230d      	movs	r3, #13
 80072e8:	e1e8      	b.n	80076bc <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	7b1b      	ldrb	r3, [r3, #12]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	b21a      	sxth	r2, r3
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	7adb      	ldrb	r3, [r3, #11]
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	b21b      	sxth	r3, r3
 80072fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007300:	d001      	beq.n	8007306 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8007302:	230d      	movs	r3, #13
 8007304:	e1da      	b.n	80076bc <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	7ddb      	ldrb	r3, [r3, #23]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	b21a      	sxth	r2, r3
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	7d9b      	ldrb	r3, [r3, #22]
 8007312:	b21b      	sxth	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b21b      	sxth	r3, r3
 8007318:	b29b      	uxth	r3, r3
 800731a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800731c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d112      	bne.n	8007348 <find_volume+0x208>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007328:	061a      	lsls	r2, r3, #24
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	4313      	orrs	r3, r2
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800733a:	0212      	lsls	r2, r2, #8
 800733c:	4313      	orrs	r3, r2
 800733e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007340:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007344:	4313      	orrs	r3, r2
 8007346:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800734c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	7c1a      	ldrb	r2, [r3, #16]
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007360:	2b01      	cmp	r3, #1
 8007362:	d006      	beq.n	8007372 <find_volume+0x232>
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800736a:	2b02      	cmp	r3, #2
 800736c:	d001      	beq.n	8007372 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800736e:	230d      	movs	r3, #13
 8007370:	e1a4      	b.n	80076bc <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007378:	461a      	mov	r2, r3
 800737a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	7b5a      	ldrb	r2, [r3, #13]
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <find_volume+0x26c>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800739c:	461a      	mov	r2, r3
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 80073ac:	230d      	movs	r3, #13
 80073ae:	e185      	b.n	80076bc <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	7c9b      	ldrb	r3, [r3, #18]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	b21a      	sxth	r2, r3
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	7c5b      	ldrb	r3, [r3, #17]
 80073bc:	b21b      	sxth	r3, r3
 80073be:	4313      	orrs	r3, r2
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 80073da:	230d      	movs	r3, #13
 80073dc:	e16e      	b.n	80076bc <find_volume+0x57c>
 80073de:	bf00      	nop
 80073e0:	2000022c 	.word	0x2000022c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	7cdb      	ldrb	r3, [r3, #19]
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80073fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d112      	bne.n	8007426 <find_volume+0x2e6>
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007406:	061a      	lsls	r2, r3, #24
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	4313      	orrs	r3, r2
 8007412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007414:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007418:	0212      	lsls	r2, r2, #8
 800741a:	4313      	orrs	r3, r2
 800741c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007422:	4313      	orrs	r3, r2
 8007424:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	7bdb      	ldrb	r3, [r3, #15]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	b21a      	sxth	r2, r3
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	7b9b      	ldrb	r3, [r3, #14]
 8007432:	b21b      	sxth	r3, r3
 8007434:	4313      	orrs	r3, r2
 8007436:	b21b      	sxth	r3, r3
 8007438:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800743a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <find_volume+0x304>
 8007440:	230d      	movs	r3, #13
 8007442:	e13b      	b.n	80076bc <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007448:	4413      	add	r3, r2
 800744a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800744c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007450:	0912      	lsrs	r2, r2, #4
 8007452:	b292      	uxth	r2, r2
 8007454:	4413      	add	r3, r2
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	429a      	cmp	r2, r3
 800745e:	d201      	bcs.n	8007464 <find_volume+0x324>
 8007460:	230d      	movs	r3, #13
 8007462:	e12b      	b.n	80076bc <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800746c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007470:	fbb3 f3f2 	udiv	r3, r3, r2
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <find_volume+0x340>
 800747c:	230d      	movs	r3, #13
 800747e:	e11d      	b.n	80076bc <find_volume+0x57c>
	fmt = FS_FAT12;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	f640 72f5 	movw	r2, #4085	; 0xff5
 800748c:	4293      	cmp	r3, r2
 800748e:	d902      	bls.n	8007496 <find_volume+0x356>
 8007490:	2302      	movs	r3, #2
 8007492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800749c:	4293      	cmp	r3, r2
 800749e:	d902      	bls.n	80074a6 <find_volume+0x366>
 80074a0:	2303      	movs	r3, #3
 80074a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80074b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	441a      	add	r2, r3
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80074c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	441a      	add	r2, r3
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80074d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d121      	bne.n	800751c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <find_volume+0x3a6>
 80074e2:	230d      	movs	r3, #13
 80074e4:	e0ea      	b.n	80076bc <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074ec:	061a      	lsls	r2, r3, #24
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	4313      	orrs	r3, r2
 80074f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80074fe:	0212      	lsls	r2, r2, #8
 8007500:	4313      	orrs	r3, r2
 8007502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007504:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007508:	431a      	orrs	r2, r3
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	647b      	str	r3, [r7, #68]	; 0x44
 800751a:	e025      	b.n	8007568 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <find_volume+0x3ea>
 8007526:	230d      	movs	r3, #13
 8007528:	e0c8      	b.n	80076bc <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007532:	441a      	add	r2, r3
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800753a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800753e:	2b02      	cmp	r3, #2
 8007540:	d104      	bne.n	800754c <find_volume+0x40c>
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	e00c      	b.n	8007566 <find_volume+0x426>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007552:	4613      	mov	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4413      	add	r3, r2
 8007558:	085a      	lsrs	r2, r3, #1
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007566:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800756e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007570:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007574:	0a5b      	lsrs	r3, r3, #9
 8007576:	429a      	cmp	r2, r3
 8007578:	d201      	bcs.n	800757e <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800757a:	230d      	movs	r3, #13
 800757c:	e09e      	b.n	80076bc <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800759c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d177      	bne.n	8007694 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	b21a      	sxth	r2, r3
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d16a      	bne.n	8007694 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	3301      	adds	r3, #1
 80075c2:	4619      	mov	r1, r3
 80075c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075c6:	f7fe fc76 	bl	8005eb6 <move_window>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d161      	bne.n	8007694 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	b21a      	sxth	r2, r3
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	4a35      	ldr	r2, [pc, #212]	; (80076c4 <find_volume+0x584>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d14f      	bne.n	8007694 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	061a      	lsls	r2, r3, #24
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	789b      	ldrb	r3, [r3, #2]
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	4313      	orrs	r3, r2
 8007602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007604:	7852      	ldrb	r2, [r2, #1]
 8007606:	0212      	lsls	r2, r2, #8
 8007608:	4313      	orrs	r3, r2
 800760a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <find_volume+0x588>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d13e      	bne.n	8007694 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800761c:	061a      	lsls	r2, r3, #24
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	4313      	orrs	r3, r2
 8007628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800762e:	0212      	lsls	r2, r2, #8
 8007630:	4313      	orrs	r3, r2
 8007632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007634:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007638:	4313      	orrs	r3, r2
 800763a:	4a24      	ldr	r2, [pc, #144]	; (80076cc <find_volume+0x58c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d129      	bne.n	8007694 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007646:	061a      	lsls	r2, r3, #24
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	4313      	orrs	r3, r2
 8007652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007654:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007658:	0212      	lsls	r2, r2, #8
 800765a:	4313      	orrs	r3, r2
 800765c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800765e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007662:	431a      	orrs	r2, r3
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007670:	061a      	lsls	r2, r3, #24
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	4313      	orrs	r3, r2
 800767c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007682:	0212      	lsls	r2, r2, #8
 8007684:	4313      	orrs	r3, r2
 8007686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007688:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800768c:	431a      	orrs	r2, r3
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800769a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <find_volume+0x590>)
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <find_volume+0x590>)
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <find_volume+0x590>)
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80076b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076b6:	f7fe fb8d 	bl	8005dd4 <clear_lock>
#endif

	return FR_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3758      	adds	r7, #88	; 0x58
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	ffffaa55 	.word	0xffffaa55
 80076c8:	41615252 	.word	0x41615252
 80076cc:	61417272 	.word	0x61417272
 80076d0:	20000230 	.word	0x20000230

080076d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d022      	beq.n	800772c <validate+0x58>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01d      	beq.n	800772c <validate+0x58>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <validate+0x58>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007704:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800770e:	429a      	cmp	r2, r3
 8007710:	d10c      	bne.n	800772c <validate+0x58>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007718:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe f8bb 	bl	8005898 <disk_status>
 8007722:	4603      	mov	r3, r0
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800772c:	2309      	movs	r3, #9
 800772e:	e000      	b.n	8007732 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800774e:	f107 0310 	add.w	r3, r7, #16
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fc46 	bl	8006fe4 <get_ldnumber>
 8007758:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da01      	bge.n	8007764 <f_mount+0x28>
 8007760:	230b      	movs	r3, #11
 8007762:	e02d      	b.n	80077c0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <f_mount+0x8c>)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d006      	beq.n	8007782 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007774:	69b8      	ldr	r0, [r7, #24]
 8007776:	f7fe fb2d 	bl	8005dd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	490d      	ldr	r1, [pc, #52]	; (80077c8 <f_mount+0x8c>)
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <f_mount+0x6a>
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d001      	beq.n	80077aa <f_mount+0x6e>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e00a      	b.n	80077c0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80077aa:	f107 0108 	add.w	r1, r7, #8
 80077ae:	f107 030c 	add.w	r3, r7, #12
 80077b2:	2200      	movs	r2, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fcc3 	bl	8007140 <find_volume>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	2000022c 	.word	0x2000022c

080077cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	f107 030c 	add.w	r3, r7, #12
 80077d8:	6018      	str	r0, [r3, #0]
 80077da:	f107 0308 	add.w	r3, r7, #8
 80077de:	6019      	str	r1, [r3, #0]
 80077e0:	1dfb      	adds	r3, r7, #7
 80077e2:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80077e4:	f107 030c 	add.w	r3, r7, #12
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <f_open+0x26>
 80077ee:	2309      	movs	r3, #9
 80077f0:	e1f2      	b.n	8007bd8 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 80077f2:	f107 030c 	add.w	r3, r7, #12
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80077fe:	1dfb      	adds	r3, r7, #7
 8007800:	1dfa      	adds	r2, r7, #7
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	f002 021f 	and.w	r2, r2, #31
 8007808:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800780a:	1dfb      	adds	r3, r7, #7
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	f107 0320 	add.w	r3, r7, #32
 800781c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc8d 	bl	8007140 <find_volume>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800782c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 81cf 	bne.w	8007bd4 <f_open+0x408>
		INIT_BUF(dj);
 8007836:	f107 0320 	add.w	r3, r7, #32
 800783a:	f107 0214 	add.w	r2, r7, #20
 800783e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	f107 0320 	add.w	r3, r7, #32
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fb5a 	bl	8006f08 <follow_path>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800785a:	f107 0320 	add.w	r3, r7, #32
 800785e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007862:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007866:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800786a:	2b00      	cmp	r3, #0
 800786c:	d11a      	bne.n	80078a4 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800786e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8007876:	2306      	movs	r3, #6
 8007878:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800787c:	e012      	b.n	80078a4 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800787e:	1dfb      	adds	r3, r7, #7
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	f107 0320 	add.w	r3, r7, #32
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe f911 	bl	8005ac0 <chk_lock>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80078a4:	1dfb      	adds	r3, r7, #7
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 031c 	and.w	r3, r3, #28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80cc 	beq.w	8007a4a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80078b2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01f      	beq.n	80078fa <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80078ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d10e      	bne.n	80078e0 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80078c2:	f7fe f969 	bl	8005b98 <enq_lock>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <f_open+0x10e>
 80078cc:	f107 0320 	add.w	r3, r7, #32
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff f9af 	bl	8006c34 <dir_register>
 80078d6:	4603      	mov	r3, r0
 80078d8:	e000      	b.n	80078dc <f_open+0x110>
 80078da:	2312      	movs	r3, #18
 80078dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078e0:	1dfb      	adds	r3, r7, #7
 80078e2:	1dfa      	adds	r2, r7, #7
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	f042 0208 	orr.w	r2, r2, #8
 80078ea:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80078ec:	f107 0320 	add.w	r3, r7, #32
 80078f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80078f8:	e014      	b.n	8007924 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80078fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80078fe:	330b      	adds	r3, #11
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0311 	and.w	r3, r3, #17
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <f_open+0x146>
					res = FR_DENIED;
 800790a:	2307      	movs	r3, #7
 800790c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007910:	e008      	b.n	8007924 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007912:	1dfb      	adds	r3, r7, #7
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <f_open+0x158>
						res = FR_EXIST;
 800791e:	2308      	movs	r3, #8
 8007920:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007924:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 80af 	bne.w	8007a8c <f_open+0x2c0>
 800792e:	1dfb      	adds	r3, r7, #7
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 80a8 	beq.w	8007a8c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800793c:	f7fc ff68 	bl	8004810 <get_fattime>
 8007940:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007944:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007948:	330e      	adds	r3, #14
 800794a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007956:	b29b      	uxth	r3, r3
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007960:	330f      	adds	r3, #15
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800796a:	0c1a      	lsrs	r2, r3, #16
 800796c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007970:	3310      	adds	r3, #16
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800797a:	0e1a      	lsrs	r2, r3, #24
 800797c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007980:	3311      	adds	r3, #17
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007986:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800798a:	330b      	adds	r3, #11
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007990:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007994:	331c      	adds	r3, #28
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800799e:	331d      	adds	r3, #29
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80079a8:	331e      	adds	r3, #30
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80079b2:	331f      	adds	r3, #31
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80079b8:	f107 0320 	add.w	r3, r7, #32
 80079bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079c0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff f834 	bl	8006a32 <ld_clust>
 80079ca:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80079ce:	2100      	movs	r1, #0
 80079d0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80079d4:	f7ff f85a 	bl	8006a8c <st_clust>
				dj.fs->wflag = 1;
 80079d8:	f107 0320 	add.w	r3, r7, #32
 80079dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80079e6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d04e      	beq.n	8007a8c <f_open+0x2c0>
					dw = dj.fs->winsect;
 80079ee:	f107 0320 	add.w	r3, r7, #32
 80079f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079f6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80079fa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80079fe:	f107 0320 	add.w	r3, r7, #32
 8007a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a06:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fd11 	bl	8006432 <remove_chain>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007a16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d136      	bne.n	8007a8c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007a1e:	f107 0320 	add.w	r3, r7, #32
 8007a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a26:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8007a30:	f107 0320 	add.w	r3, r7, #32
 8007a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a38:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe fa3a 	bl	8005eb6 <move_window>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007a48:	e020      	b.n	8007a8c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007a4a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d11c      	bne.n	8007a8c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007a52:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007a56:	330b      	adds	r3, #11
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <f_open+0x29e>
					res = FR_NO_FILE;
 8007a62:	2304      	movs	r3, #4
 8007a64:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007a68:	e010      	b.n	8007a8c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007a6a:	1dfb      	adds	r3, r7, #7
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <f_open+0x2c0>
 8007a76:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007a7a:	330b      	adds	r3, #11
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <f_open+0x2c0>
						res = FR_DENIED;
 8007a86:	2307      	movs	r3, #7
 8007a88:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007a8c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d13d      	bne.n	8007b10 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a94:	1dfb      	adds	r3, r7, #7
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8007aa0:	1dfb      	adds	r3, r7, #7
 8007aa2:	1dfa      	adds	r2, r7, #7
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	f042 0220 	orr.w	r2, r2, #32
 8007aaa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007aac:	f107 0320 	add.w	r3, r7, #32
 8007ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ab4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007ac2:	f107 030c 	add.w	r3, r7, #12
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007acc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ad0:	1dfb      	adds	r3, r7, #7
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f023 0301 	bic.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bf14      	ite	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	2300      	moveq	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f107 0320 	add.w	r3, r7, #32
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe f878 	bl	8005be0 <inc_lock>
 8007af0:	4602      	mov	r2, r0
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <f_open+0x344>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007b10:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d15d      	bne.n	8007bd4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	1dfa      	adds	r2, r7, #7
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007b26:	f107 030c 	add.w	r3, r7, #12
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007b32:	f107 0320 	add.w	r3, r7, #32
 8007b36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b3a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe ff77 	bl	8006a32 <ld_clust>
 8007b44:	4602      	mov	r2, r0
 8007b46:	f107 030c 	add.w	r3, r7, #12
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b50:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b54:	331f      	adds	r3, #31
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	061a      	lsls	r2, r3, #24
 8007b5a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b5e:	331e      	adds	r3, #30
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b6a:	321d      	adds	r2, #29
 8007b6c:	7812      	ldrb	r2, [r2, #0]
 8007b6e:	0212      	lsls	r2, r2, #8
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b76:	321c      	adds	r2, #28
 8007b78:	7812      	ldrb	r2, [r2, #0]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	f107 030c 	add.w	r3, r7, #12
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007b86:	f107 030c 	add.w	r3, r7, #12
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007b92:	f107 030c 	add.w	r3, r7, #12
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007baa:	f107 0320 	add.w	r3, r7, #32
 8007bae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007bbc:	f107 030c 	add.w	r3, r7, #12
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bc6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007bca:	f107 030c 	add.w	r3, r7, #12
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007bd4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b08c      	sub	sp, #48	; 0x30
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff fd6a 	bl	80076d4 <validate>
 8007c00:	4603      	mov	r3, r0
 8007c02:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007c04:	7ffb      	ldrb	r3, [r7, #31]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <f_read+0x2c>
 8007c0a:	7ffb      	ldrb	r3, [r7, #31]
 8007c0c:	e150      	b.n	8007eb0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c1e:	e147      	b.n	8007eb0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c2e:	2307      	movs	r3, #7
 8007c30:	e13e      	b.n	8007eb0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	f240 812d 	bls.w	8007ea6 <f_read+0x2c4>
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c50:	e129      	b.n	8007ea6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 80f2 	bne.w	8007e46 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c68:	0a5b      	lsrs	r3, r3, #9
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c72:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d139      	bne.n	8007cf8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c96:	e018      	b.n	8007cca <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ca8:	4619      	mov	r1, r3
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7fe fcb8 	bl	8006620 <clmt_clust>
 8007cb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cb2:	e00a      	b.n	8007cca <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f7fe f9f3 	bl	80060ae <get_fat>
 8007cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d805      	bhi.n	8007cdc <f_read+0xfa>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e0e9      	b.n	8007eb0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d105      	bne.n	8007cf0 <f_read+0x10e>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0df      	b.n	8007eb0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe f9b0 	bl	800606c <clust2sect>
 8007d0c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <f_read+0x13e>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e0c7      	b.n	8007eb0 <f_read+0x2ce>
			sect += csect;
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0a5b      	lsrs	r3, r3, #9
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d046      	beq.n	8007dc2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007d34:	7dfa      	ldrb	r2, [r7, #23]
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	4413      	add	r3, r2
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007d40:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d908      	bls.n	8007d5a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d4e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007d52:	461a      	mov	r2, r3
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d60:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	6a39      	ldr	r1, [r7, #32]
 8007d6a:	f7fd fdd5 	bl	8005918 <disk_read>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e097      	b.n	8007eb0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d015      	beq.n	8007dba <f_read+0x1d8>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d90d      	bls.n	8007dba <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	025b      	lsls	r3, r3, #9
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	4413      	add	r3, r2
 8007dae:	68f9      	ldr	r1, [r7, #12]
 8007db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fe0d 	bl	80059d4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	025b      	lsls	r3, r3, #9
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007dc0:	e05b      	b.n	8007e7a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d037      	beq.n	8007e3e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01d      	beq.n	8007e18 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007de2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007dee:	2301      	movs	r3, #1
 8007df0:	f7fd fdb2 	bl	8005958 <disk_write>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e02:	2301      	movs	r3, #1
 8007e04:	e054      	b.n	8007eb0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e1e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	2301      	movs	r3, #1
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	f7fd fd76 	bl	8005918 <disk_read>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e038      	b.n	8007eb0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d901      	bls.n	8007e62 <f_read+0x280>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e72:	4619      	mov	r1, r3
 8007e74:	6a38      	ldr	r0, [r7, #32]
 8007e76:	f7fd fdad 	bl	80059d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e7a:	6a3a      	ldr	r2, [r7, #32]
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	4413      	add	r3, r2
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	441a      	add	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f aed2 	bne.w	8007c52 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3730      	adds	r7, #48	; 0x30
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fc07 	bl	80076d4 <validate>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 80a8 	bne.w	8008022 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80a0 	beq.w	8008022 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d019      	beq.n	8007f24 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ef6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007f02:	2301      	movs	r3, #1
 8007f04:	f7fd fd28 	bl	8005958 <disk_write>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e088      	b.n	8008024 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fd ffbf 	bl	8005eb6 <move_window>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d16f      	bne.n	8008022 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007f48:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	330b      	adds	r3, #11
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	330b      	adds	r3, #11
 8007f54:	f042 0220 	orr.w	r2, r2, #32
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	331c      	adds	r3, #28
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	331d      	adds	r3, #29
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f84:	0c1a      	lsrs	r2, r3, #16
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	331e      	adds	r3, #30
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f94:	0e1a      	lsrs	r2, r3, #24
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	331f      	adds	r3, #31
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6938      	ldr	r0, [r7, #16]
 8007fa8:	f7fe fd70 	bl	8006a8c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007fac:	f7fc fc30 	bl	8004810 <get_fattime>
 8007fb0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3316      	adds	r3, #22
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3317      	adds	r3, #23
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0c1a      	lsrs	r2, r3, #16
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	3318      	adds	r3, #24
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	0e1a      	lsrs	r2, r3, #24
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	3319      	adds	r3, #25
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3312      	adds	r3, #18
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3313      	adds	r3, #19
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ffa:	f023 0320 	bic.w	r3, r3, #32
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd ff7a 	bl	8005f12 <sync_fs>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008022:	7dfb      	ldrb	r3, [r7, #23]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff ff3f 	bl	8007eb8 <f_sync>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d116      	bne.n	8008072 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fb45 	bl	80076d4 <validate>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10e      	bne.n	8008072 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800805a:	4618      	mov	r0, r3
 800805c:	f7fd fe76 	bl	8005d4c <dec_lock>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <f_opendir+0x14>
 800808c:	2309      	movs	r3, #9
 800808e:	e073      	b.n	8008178 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8008090:	4639      	mov	r1, r7
 8008092:	f107 0318 	add.w	r3, r7, #24
 8008096:	2200      	movs	r2, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff f851 	bl	8007140 <find_volume>
 800809e:	4603      	mov	r3, r0
 80080a0:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80080a2:	7ffb      	ldrb	r3, [r7, #31]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d15f      	bne.n	8008168 <f_opendir+0xec>
		dp->fs = fs;
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f107 020c 	add.w	r2, r7, #12
 80080b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe ff22 	bl	8006f08 <follow_path>
 80080c4:	4603      	mov	r3, r0
 80080c6:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80080c8:	7ffb      	ldrb	r3, [r7, #31]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d147      	bne.n	800815e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d017      	beq.n	8008108 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080de:	330b      	adds	r3, #11
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 0310 	and.w	r3, r3, #16
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe fc9c 	bl	8006a32 <ld_clust>
 80080fa:	4602      	mov	r2, r0
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008102:	e001      	b.n	8008108 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8008104:	2305      	movs	r3, #5
 8008106:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8008108:	7ffb      	ldrb	r3, [r7, #31]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d127      	bne.n	800815e <f_opendir+0xe2>
				dp->id = fs->id;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800811a:	2100      	movs	r1, #0
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fe fab3 	bl	8006688 <dir_sdi>
 8008122:	4603      	mov	r3, r0
 8008124:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8008126:	7ffb      	ldrb	r3, [r7, #31]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d118      	bne.n	800815e <f_opendir+0xe2>
					if (dp->sclust) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00f      	beq.n	8008156 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008136:	2100      	movs	r1, #0
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fd fd51 	bl	8005be0 <inc_lock>
 800813e:	4602      	mov	r2, r0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8008150:	2312      	movs	r3, #18
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e003      	b.n	800815e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800815e:	7ffb      	ldrb	r3, [r7, #31]
 8008160:	2b04      	cmp	r3, #4
 8008162:	d101      	bne.n	8008168 <f_opendir+0xec>
 8008164:	2305      	movs	r3, #5
 8008166:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8008168:	7ffb      	ldrb	r3, [r7, #31]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <f_opendir+0xfa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8008176:	7ffb      	ldrb	r3, [r7, #31]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff faa3 	bl	80076d4 <validate>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d113      	bne.n	80081c0 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fd fdcf 	bl	8005d4c <dec_lock>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fa7d 	bl	80076d4 <validate>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d133      	bne.n	800824c <f_readdir+0x82>
		if (!fno) {
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7fe fa4b 	bl	8006688 <dir_sdi>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
 80081f6:	e029      	b.n	800824c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f107 0208 	add.w	r2, r7, #8
 80081fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7fe fcb6 	bl	8006b76 <dir_read>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d105      	bne.n	8008220 <f_readdir+0x56>
				dp->sect = 0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d112      	bne.n	800824c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7fe fd3c 	bl	8006ca6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fe fabd 	bl	80067b0 <dir_next>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d105      	bne.n	800824c <f_readdir+0x82>
					dp->sect = 0;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800826e:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 8008270:	7a5b      	ldrb	r3, [r3, #9]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	d831      	bhi.n	80082dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 800827a:	7a5b      	ldrb	r3, [r3, #9]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	4b19      	ldr	r3, [pc, #100]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 8008282:	2100      	movs	r1, #0
 8008284:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 8008288:	7a5b      	ldrb	r3, [r3, #9]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 8008298:	7a5b      	ldrb	r3, [r3, #9]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 80082a0:	4413      	add	r3, r2
 80082a2:	79fa      	ldrb	r2, [r7, #7]
 80082a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082a6:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 80082a8:	7a5b      	ldrb	r3, [r3, #9]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	b2d1      	uxtb	r1, r2
 80082b0:	4a0d      	ldr	r2, [pc, #52]	; (80082e8 <FATFS_LinkDriverEx+0x90>)
 80082b2:	7251      	strb	r1, [r2, #9]
 80082b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082b6:	7dbb      	ldrb	r3, [r7, #22]
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3301      	adds	r3, #1
 80082c4:	223a      	movs	r2, #58	; 0x3a
 80082c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3302      	adds	r3, #2
 80082cc:	222f      	movs	r2, #47	; 0x2f
 80082ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3303      	adds	r3, #3
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	2000024c 	.word	0x2000024c

080082ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082f6:	2200      	movs	r2, #0
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff ffac 	bl	8008258 <FATFS_LinkDriverEx>
 8008300:	4603      	mov	r3, r0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <__errno>:
 800830c:	4b01      	ldr	r3, [pc, #4]	; (8008314 <__errno+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000002c 	.word	0x2000002c

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	2500      	movs	r5, #0
 800831c:	4e0c      	ldr	r6, [pc, #48]	; (8008350 <__libc_init_array+0x38>)
 800831e:	4c0d      	ldr	r4, [pc, #52]	; (8008354 <__libc_init_array+0x3c>)
 8008320:	1ba4      	subs	r4, r4, r6
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	42a5      	cmp	r5, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	f001 f94a 	bl	80095c0 <_init>
 800832c:	2500      	movs	r5, #0
 800832e:	4e0a      	ldr	r6, [pc, #40]	; (8008358 <__libc_init_array+0x40>)
 8008330:	4c0a      	ldr	r4, [pc, #40]	; (800835c <__libc_init_array+0x44>)
 8008332:	1ba4      	subs	r4, r4, r6
 8008334:	10a4      	asrs	r4, r4, #2
 8008336:	42a5      	cmp	r5, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008340:	4798      	blx	r3
 8008342:	3501      	adds	r5, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800834a:	4798      	blx	r3
 800834c:	3501      	adds	r5, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	0800a268 	.word	0x0800a268
 8008354:	0800a268 	.word	0x0800a268
 8008358:	0800a268 	.word	0x0800a268
 800835c:	0800a26c 	.word	0x0800a26c

08008360 <memmove>:
 8008360:	4288      	cmp	r0, r1
 8008362:	b510      	push	{r4, lr}
 8008364:	eb01 0302 	add.w	r3, r1, r2
 8008368:	d807      	bhi.n	800837a <memmove+0x1a>
 800836a:	1e42      	subs	r2, r0, #1
 800836c:	4299      	cmp	r1, r3
 800836e:	d00a      	beq.n	8008386 <memmove+0x26>
 8008370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008374:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008378:	e7f8      	b.n	800836c <memmove+0xc>
 800837a:	4283      	cmp	r3, r0
 800837c:	d9f5      	bls.n	800836a <memmove+0xa>
 800837e:	1881      	adds	r1, r0, r2
 8008380:	1ad2      	subs	r2, r2, r3
 8008382:	42d3      	cmn	r3, r2
 8008384:	d100      	bne.n	8008388 <memmove+0x28>
 8008386:	bd10      	pop	{r4, pc}
 8008388:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800838c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008390:	e7f7      	b.n	8008382 <memmove+0x22>

08008392 <memset>:
 8008392:	4603      	mov	r3, r0
 8008394:	4402      	add	r2, r0
 8008396:	4293      	cmp	r3, r2
 8008398:	d100      	bne.n	800839c <memset+0xa>
 800839a:	4770      	bx	lr
 800839c:	f803 1b01 	strb.w	r1, [r3], #1
 80083a0:	e7f9      	b.n	8008396 <memset+0x4>
	...

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083aa:	b500      	push	{lr}
 80083ac:	b09c      	sub	sp, #112	; 0x70
 80083ae:	ab1d      	add	r3, sp, #116	; 0x74
 80083b0:	9002      	str	r0, [sp, #8]
 80083b2:	9006      	str	r0, [sp, #24]
 80083b4:	9107      	str	r1, [sp, #28]
 80083b6:	9104      	str	r1, [sp, #16]
 80083b8:	4808      	ldr	r0, [pc, #32]	; (80083dc <siprintf+0x38>)
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	a902      	add	r1, sp, #8
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	f000 f8c4 	bl	8008554 <_svfiprintf_r>
 80083cc:	2200      	movs	r2, #0
 80083ce:	9b02      	ldr	r3, [sp, #8]
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	2000002c 	.word	0x2000002c
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <siscanf>:
 80083e4:	b40e      	push	{r1, r2, r3}
 80083e6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	b09c      	sub	sp, #112	; 0x70
 80083ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80083f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80083f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80083f8:	9002      	str	r0, [sp, #8]
 80083fa:	9006      	str	r0, [sp, #24]
 80083fc:	f7f7 fea6 	bl	800014c <strlen>
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <siscanf+0x4c>)
 8008402:	9003      	str	r0, [sp, #12]
 8008404:	930b      	str	r3, [sp, #44]	; 0x2c
 8008406:	2300      	movs	r3, #0
 8008408:	930f      	str	r3, [sp, #60]	; 0x3c
 800840a:	9314      	str	r3, [sp, #80]	; 0x50
 800840c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008410:	9007      	str	r0, [sp, #28]
 8008412:	4808      	ldr	r0, [pc, #32]	; (8008434 <siscanf+0x50>)
 8008414:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008418:	462a      	mov	r2, r5
 800841a:	4623      	mov	r3, r4
 800841c:	a902      	add	r1, sp, #8
 800841e:	6800      	ldr	r0, [r0, #0]
 8008420:	9401      	str	r4, [sp, #4]
 8008422:	f000 f9e9 	bl	80087f8 <__ssvfiscanf_r>
 8008426:	b01c      	add	sp, #112	; 0x70
 8008428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842c:	b003      	add	sp, #12
 800842e:	4770      	bx	lr
 8008430:	08008439 	.word	0x08008439
 8008434:	2000002c 	.word	0x2000002c

08008438 <__seofread>:
 8008438:	2000      	movs	r0, #0
 800843a:	4770      	bx	lr

0800843c <strcat>:
 800843c:	4603      	mov	r3, r0
 800843e:	b510      	push	{r4, lr}
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	1c5c      	adds	r4, r3, #1
 8008444:	b93a      	cbnz	r2, 8008456 <strcat+0x1a>
 8008446:	3b01      	subs	r3, #1
 8008448:	f811 2b01 	ldrb.w	r2, [r1], #1
 800844c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008450:	2a00      	cmp	r2, #0
 8008452:	d1f9      	bne.n	8008448 <strcat+0xc>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	4623      	mov	r3, r4
 8008458:	e7f2      	b.n	8008440 <strcat+0x4>

0800845a <strchr>:
 800845a:	b2c9      	uxtb	r1, r1
 800845c:	4603      	mov	r3, r0
 800845e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008462:	b11a      	cbz	r2, 800846c <strchr+0x12>
 8008464:	428a      	cmp	r2, r1
 8008466:	d1f9      	bne.n	800845c <strchr+0x2>
 8008468:	4618      	mov	r0, r3
 800846a:	4770      	bx	lr
 800846c:	2900      	cmp	r1, #0
 800846e:	bf18      	it	ne
 8008470:	2300      	movne	r3, #0
 8008472:	e7f9      	b.n	8008468 <strchr+0xe>

08008474 <strncpy>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	3901      	subs	r1, #1
 800847a:	b902      	cbnz	r2, 800847e <strncpy+0xa>
 800847c:	bd70      	pop	{r4, r5, r6, pc}
 800847e:	4623      	mov	r3, r4
 8008480:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008484:	1e56      	subs	r6, r2, #1
 8008486:	f803 5b01 	strb.w	r5, [r3], #1
 800848a:	b92d      	cbnz	r5, 8008498 <strncpy+0x24>
 800848c:	4414      	add	r4, r2
 800848e:	42a3      	cmp	r3, r4
 8008490:	d0f4      	beq.n	800847c <strncpy+0x8>
 8008492:	f803 5b01 	strb.w	r5, [r3], #1
 8008496:	e7fa      	b.n	800848e <strncpy+0x1a>
 8008498:	461c      	mov	r4, r3
 800849a:	4632      	mov	r2, r6
 800849c:	e7ed      	b.n	800847a <strncpy+0x6>

0800849e <__ssputs_r>:
 800849e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a2:	688e      	ldr	r6, [r1, #8]
 80084a4:	4682      	mov	sl, r0
 80084a6:	429e      	cmp	r6, r3
 80084a8:	460c      	mov	r4, r1
 80084aa:	4690      	mov	r8, r2
 80084ac:	4699      	mov	r9, r3
 80084ae:	d837      	bhi.n	8008520 <__ssputs_r+0x82>
 80084b0:	898a      	ldrh	r2, [r1, #12]
 80084b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084b6:	d031      	beq.n	800851c <__ssputs_r+0x7e>
 80084b8:	2302      	movs	r3, #2
 80084ba:	6825      	ldr	r5, [r4, #0]
 80084bc:	6909      	ldr	r1, [r1, #16]
 80084be:	1a6f      	subs	r7, r5, r1
 80084c0:	6965      	ldr	r5, [r4, #20]
 80084c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c6:	fb95 f5f3 	sdiv	r5, r5, r3
 80084ca:	f109 0301 	add.w	r3, r9, #1
 80084ce:	443b      	add	r3, r7
 80084d0:	429d      	cmp	r5, r3
 80084d2:	bf38      	it	cc
 80084d4:	461d      	movcc	r5, r3
 80084d6:	0553      	lsls	r3, r2, #21
 80084d8:	d530      	bpl.n	800853c <__ssputs_r+0x9e>
 80084da:	4629      	mov	r1, r5
 80084dc:	f000 ffc8 	bl	8009470 <_malloc_r>
 80084e0:	4606      	mov	r6, r0
 80084e2:	b950      	cbnz	r0, 80084fa <__ssputs_r+0x5c>
 80084e4:	230c      	movs	r3, #12
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ea:	f8ca 3000 	str.w	r3, [sl]
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	463a      	mov	r2, r7
 80084fc:	6921      	ldr	r1, [r4, #16]
 80084fe:	f000 ff5f 	bl	80093c0 <memcpy>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	6126      	str	r6, [r4, #16]
 8008510:	443e      	add	r6, r7
 8008512:	6026      	str	r6, [r4, #0]
 8008514:	464e      	mov	r6, r9
 8008516:	6165      	str	r5, [r4, #20]
 8008518:	1bed      	subs	r5, r5, r7
 800851a:	60a5      	str	r5, [r4, #8]
 800851c:	454e      	cmp	r6, r9
 800851e:	d900      	bls.n	8008522 <__ssputs_r+0x84>
 8008520:	464e      	mov	r6, r9
 8008522:	4632      	mov	r2, r6
 8008524:	4641      	mov	r1, r8
 8008526:	6820      	ldr	r0, [r4, #0]
 8008528:	f7ff ff1a 	bl	8008360 <memmove>
 800852c:	68a3      	ldr	r3, [r4, #8]
 800852e:	2000      	movs	r0, #0
 8008530:	1b9b      	subs	r3, r3, r6
 8008532:	60a3      	str	r3, [r4, #8]
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	441e      	add	r6, r3
 8008538:	6026      	str	r6, [r4, #0]
 800853a:	e7dc      	b.n	80084f6 <__ssputs_r+0x58>
 800853c:	462a      	mov	r2, r5
 800853e:	f000 fff1 	bl	8009524 <_realloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	2800      	cmp	r0, #0
 8008546:	d1e2      	bne.n	800850e <__ssputs_r+0x70>
 8008548:	6921      	ldr	r1, [r4, #16]
 800854a:	4650      	mov	r0, sl
 800854c:	f000 ff44 	bl	80093d8 <_free_r>
 8008550:	e7c8      	b.n	80084e4 <__ssputs_r+0x46>
	...

08008554 <_svfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	461d      	mov	r5, r3
 800855a:	898b      	ldrh	r3, [r1, #12]
 800855c:	b09d      	sub	sp, #116	; 0x74
 800855e:	061f      	lsls	r7, r3, #24
 8008560:	4680      	mov	r8, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4616      	mov	r6, r2
 8008566:	d50f      	bpl.n	8008588 <_svfiprintf_r+0x34>
 8008568:	690b      	ldr	r3, [r1, #16]
 800856a:	b96b      	cbnz	r3, 8008588 <_svfiprintf_r+0x34>
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	f000 ff7f 	bl	8009470 <_malloc_r>
 8008572:	6020      	str	r0, [r4, #0]
 8008574:	6120      	str	r0, [r4, #16]
 8008576:	b928      	cbnz	r0, 8008584 <_svfiprintf_r+0x30>
 8008578:	230c      	movs	r3, #12
 800857a:	f8c8 3000 	str.w	r3, [r8]
 800857e:	f04f 30ff 	mov.w	r0, #4294967295
 8008582:	e0c8      	b.n	8008716 <_svfiprintf_r+0x1c2>
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	6163      	str	r3, [r4, #20]
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	2320      	movs	r3, #32
 800858e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008592:	2330      	movs	r3, #48	; 0x30
 8008594:	f04f 0b01 	mov.w	fp, #1
 8008598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800859c:	9503      	str	r5, [sp, #12]
 800859e:	4637      	mov	r7, r6
 80085a0:	463d      	mov	r5, r7
 80085a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085a6:	b10b      	cbz	r3, 80085ac <_svfiprintf_r+0x58>
 80085a8:	2b25      	cmp	r3, #37	; 0x25
 80085aa:	d13e      	bne.n	800862a <_svfiprintf_r+0xd6>
 80085ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80085b0:	d00b      	beq.n	80085ca <_svfiprintf_r+0x76>
 80085b2:	4653      	mov	r3, sl
 80085b4:	4632      	mov	r2, r6
 80085b6:	4621      	mov	r1, r4
 80085b8:	4640      	mov	r0, r8
 80085ba:	f7ff ff70 	bl	800849e <__ssputs_r>
 80085be:	3001      	adds	r0, #1
 80085c0:	f000 80a4 	beq.w	800870c <_svfiprintf_r+0x1b8>
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	4453      	add	r3, sl
 80085c8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ca:	783b      	ldrb	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 809d 	beq.w	800870c <_svfiprintf_r+0x1b8>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f04f 32ff 	mov.w	r2, #4294967295
 80085d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	9307      	str	r3, [sp, #28]
 80085e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085e4:	931a      	str	r3, [sp, #104]	; 0x68
 80085e6:	462f      	mov	r7, r5
 80085e8:	2205      	movs	r2, #5
 80085ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80085ee:	4850      	ldr	r0, [pc, #320]	; (8008730 <_svfiprintf_r+0x1dc>)
 80085f0:	f000 fed8 	bl	80093a4 <memchr>
 80085f4:	9b04      	ldr	r3, [sp, #16]
 80085f6:	b9d0      	cbnz	r0, 800862e <_svfiprintf_r+0xda>
 80085f8:	06d9      	lsls	r1, r3, #27
 80085fa:	bf44      	itt	mi
 80085fc:	2220      	movmi	r2, #32
 80085fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008602:	071a      	lsls	r2, r3, #28
 8008604:	bf44      	itt	mi
 8008606:	222b      	movmi	r2, #43	; 0x2b
 8008608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800860c:	782a      	ldrb	r2, [r5, #0]
 800860e:	2a2a      	cmp	r2, #42	; 0x2a
 8008610:	d015      	beq.n	800863e <_svfiprintf_r+0xea>
 8008612:	462f      	mov	r7, r5
 8008614:	2000      	movs	r0, #0
 8008616:	250a      	movs	r5, #10
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	4639      	mov	r1, r7
 800861c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008620:	3b30      	subs	r3, #48	; 0x30
 8008622:	2b09      	cmp	r3, #9
 8008624:	d94d      	bls.n	80086c2 <_svfiprintf_r+0x16e>
 8008626:	b1b8      	cbz	r0, 8008658 <_svfiprintf_r+0x104>
 8008628:	e00f      	b.n	800864a <_svfiprintf_r+0xf6>
 800862a:	462f      	mov	r7, r5
 800862c:	e7b8      	b.n	80085a0 <_svfiprintf_r+0x4c>
 800862e:	4a40      	ldr	r2, [pc, #256]	; (8008730 <_svfiprintf_r+0x1dc>)
 8008630:	463d      	mov	r5, r7
 8008632:	1a80      	subs	r0, r0, r2
 8008634:	fa0b f000 	lsl.w	r0, fp, r0
 8008638:	4318      	orrs	r0, r3
 800863a:	9004      	str	r0, [sp, #16]
 800863c:	e7d3      	b.n	80085e6 <_svfiprintf_r+0x92>
 800863e:	9a03      	ldr	r2, [sp, #12]
 8008640:	1d11      	adds	r1, r2, #4
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	9103      	str	r1, [sp, #12]
 8008646:	2a00      	cmp	r2, #0
 8008648:	db01      	blt.n	800864e <_svfiprintf_r+0xfa>
 800864a:	9207      	str	r2, [sp, #28]
 800864c:	e004      	b.n	8008658 <_svfiprintf_r+0x104>
 800864e:	4252      	negs	r2, r2
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	9207      	str	r2, [sp, #28]
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	783b      	ldrb	r3, [r7, #0]
 800865a:	2b2e      	cmp	r3, #46	; 0x2e
 800865c:	d10c      	bne.n	8008678 <_svfiprintf_r+0x124>
 800865e:	787b      	ldrb	r3, [r7, #1]
 8008660:	2b2a      	cmp	r3, #42	; 0x2a
 8008662:	d133      	bne.n	80086cc <_svfiprintf_r+0x178>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	3702      	adds	r7, #2
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	9203      	str	r2, [sp, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	bfb8      	it	lt
 8008672:	f04f 33ff 	movlt.w	r3, #4294967295
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	4d2e      	ldr	r5, [pc, #184]	; (8008734 <_svfiprintf_r+0x1e0>)
 800867a:	2203      	movs	r2, #3
 800867c:	7839      	ldrb	r1, [r7, #0]
 800867e:	4628      	mov	r0, r5
 8008680:	f000 fe90 	bl	80093a4 <memchr>
 8008684:	b138      	cbz	r0, 8008696 <_svfiprintf_r+0x142>
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	1b40      	subs	r0, r0, r5
 800868a:	fa03 f000 	lsl.w	r0, r3, r0
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	3701      	adds	r7, #1
 8008692:	4303      	orrs	r3, r0
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	7839      	ldrb	r1, [r7, #0]
 8008698:	2206      	movs	r2, #6
 800869a:	4827      	ldr	r0, [pc, #156]	; (8008738 <_svfiprintf_r+0x1e4>)
 800869c:	1c7e      	adds	r6, r7, #1
 800869e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086a2:	f000 fe7f 	bl	80093a4 <memchr>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d038      	beq.n	800871c <_svfiprintf_r+0x1c8>
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <_svfiprintf_r+0x1e8>)
 80086ac:	bb13      	cbnz	r3, 80086f4 <_svfiprintf_r+0x1a0>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	3307      	adds	r3, #7
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	3308      	adds	r3, #8
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086bc:	444b      	add	r3, r9
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	e76d      	b.n	800859e <_svfiprintf_r+0x4a>
 80086c2:	fb05 3202 	mla	r2, r5, r2, r3
 80086c6:	2001      	movs	r0, #1
 80086c8:	460f      	mov	r7, r1
 80086ca:	e7a6      	b.n	800861a <_svfiprintf_r+0xc6>
 80086cc:	2300      	movs	r3, #0
 80086ce:	250a      	movs	r5, #10
 80086d0:	4619      	mov	r1, r3
 80086d2:	3701      	adds	r7, #1
 80086d4:	9305      	str	r3, [sp, #20]
 80086d6:	4638      	mov	r0, r7
 80086d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086dc:	3a30      	subs	r2, #48	; 0x30
 80086de:	2a09      	cmp	r2, #9
 80086e0:	d903      	bls.n	80086ea <_svfiprintf_r+0x196>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0c8      	beq.n	8008678 <_svfiprintf_r+0x124>
 80086e6:	9105      	str	r1, [sp, #20]
 80086e8:	e7c6      	b.n	8008678 <_svfiprintf_r+0x124>
 80086ea:	fb05 2101 	mla	r1, r5, r1, r2
 80086ee:	2301      	movs	r3, #1
 80086f0:	4607      	mov	r7, r0
 80086f2:	e7f0      	b.n	80086d6 <_svfiprintf_r+0x182>
 80086f4:	ab03      	add	r3, sp, #12
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4622      	mov	r2, r4
 80086fa:	4b11      	ldr	r3, [pc, #68]	; (8008740 <_svfiprintf_r+0x1ec>)
 80086fc:	a904      	add	r1, sp, #16
 80086fe:	4640      	mov	r0, r8
 8008700:	f3af 8000 	nop.w
 8008704:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008708:	4681      	mov	r9, r0
 800870a:	d1d6      	bne.n	80086ba <_svfiprintf_r+0x166>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	f53f af35 	bmi.w	800857e <_svfiprintf_r+0x2a>
 8008714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008716:	b01d      	add	sp, #116	; 0x74
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	ab03      	add	r3, sp, #12
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4622      	mov	r2, r4
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <_svfiprintf_r+0x1ec>)
 8008724:	a904      	add	r1, sp, #16
 8008726:	4640      	mov	r0, r8
 8008728:	f000 fa2c 	bl	8008b84 <_printf_i>
 800872c:	e7ea      	b.n	8008704 <_svfiprintf_r+0x1b0>
 800872e:	bf00      	nop
 8008730:	0800a0ac 	.word	0x0800a0ac
 8008734:	0800a0b2 	.word	0x0800a0b2
 8008738:	0800a0b6 	.word	0x0800a0b6
 800873c:	00000000 	.word	0x00000000
 8008740:	0800849f 	.word	0x0800849f

08008744 <_sungetc_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	1c4b      	adds	r3, r1, #1
 8008748:	4614      	mov	r4, r2
 800874a:	d103      	bne.n	8008754 <_sungetc_r+0x10>
 800874c:	f04f 35ff 	mov.w	r5, #4294967295
 8008750:	4628      	mov	r0, r5
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	8993      	ldrh	r3, [r2, #12]
 8008756:	b2cd      	uxtb	r5, r1
 8008758:	f023 0320 	bic.w	r3, r3, #32
 800875c:	8193      	strh	r3, [r2, #12]
 800875e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008760:	6852      	ldr	r2, [r2, #4]
 8008762:	b18b      	cbz	r3, 8008788 <_sungetc_r+0x44>
 8008764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008766:	4293      	cmp	r3, r2
 8008768:	dd08      	ble.n	800877c <_sungetc_r+0x38>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	1e5a      	subs	r2, r3, #1
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	3301      	adds	r3, #1
 8008778:	6063      	str	r3, [r4, #4]
 800877a:	e7e9      	b.n	8008750 <_sungetc_r+0xc>
 800877c:	4621      	mov	r1, r4
 800877e:	f000 fdb5 	bl	80092ec <__submore>
 8008782:	2800      	cmp	r0, #0
 8008784:	d0f1      	beq.n	800876a <_sungetc_r+0x26>
 8008786:	e7e1      	b.n	800874c <_sungetc_r+0x8>
 8008788:	6921      	ldr	r1, [r4, #16]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	b151      	cbz	r1, 80087a4 <_sungetc_r+0x60>
 800878e:	4299      	cmp	r1, r3
 8008790:	d208      	bcs.n	80087a4 <_sungetc_r+0x60>
 8008792:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008796:	42a9      	cmp	r1, r5
 8008798:	d104      	bne.n	80087a4 <_sungetc_r+0x60>
 800879a:	3b01      	subs	r3, #1
 800879c:	3201      	adds	r2, #1
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	6062      	str	r2, [r4, #4]
 80087a2:	e7d5      	b.n	8008750 <_sungetc_r+0xc>
 80087a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80087a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ac:	6363      	str	r3, [r4, #52]	; 0x34
 80087ae:	2303      	movs	r3, #3
 80087b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80087b2:	4623      	mov	r3, r4
 80087b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	2301      	movs	r3, #1
 80087bc:	e7dc      	b.n	8008778 <_sungetc_r+0x34>

080087be <__ssrefill_r>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087c4:	b169      	cbz	r1, 80087e2 <__ssrefill_r+0x24>
 80087c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ca:	4299      	cmp	r1, r3
 80087cc:	d001      	beq.n	80087d2 <__ssrefill_r+0x14>
 80087ce:	f000 fe03 	bl	80093d8 <_free_r>
 80087d2:	2000      	movs	r0, #0
 80087d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d6:	6360      	str	r0, [r4, #52]	; 0x34
 80087d8:	6063      	str	r3, [r4, #4]
 80087da:	b113      	cbz	r3, 80087e2 <__ssrefill_r+0x24>
 80087dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f043 0320 	orr.w	r3, r3, #32
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e7f3      	b.n	80087e0 <__ssrefill_r+0x22>

080087f8 <__ssvfiscanf_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	460c      	mov	r4, r1
 80087fe:	2100      	movs	r1, #0
 8008800:	4606      	mov	r6, r0
 8008802:	4692      	mov	sl, r2
 8008804:	270a      	movs	r7, #10
 8008806:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800880a:	9144      	str	r1, [sp, #272]	; 0x110
 800880c:	9145      	str	r1, [sp, #276]	; 0x114
 800880e:	499e      	ldr	r1, [pc, #632]	; (8008a88 <__ssvfiscanf_r+0x290>)
 8008810:	f10d 0804 	add.w	r8, sp, #4
 8008814:	91a0      	str	r1, [sp, #640]	; 0x280
 8008816:	499d      	ldr	r1, [pc, #628]	; (8008a8c <__ssvfiscanf_r+0x294>)
 8008818:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8008a90 <__ssvfiscanf_r+0x298>
 800881c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008820:	91a1      	str	r1, [sp, #644]	; 0x284
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 812a 	beq.w	8008a82 <__ssvfiscanf_r+0x28a>
 800882e:	4655      	mov	r5, sl
 8008830:	f000 fd98 	bl	8009364 <__locale_ctype_ptr>
 8008834:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008838:	4458      	add	r0, fp
 800883a:	7843      	ldrb	r3, [r0, #1]
 800883c:	f013 0308 	ands.w	r3, r3, #8
 8008840:	d01c      	beq.n	800887c <__ssvfiscanf_r+0x84>
 8008842:	6863      	ldr	r3, [r4, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd12      	ble.n	800886e <__ssvfiscanf_r+0x76>
 8008848:	f000 fd8c 	bl	8009364 <__locale_ctype_ptr>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	4410      	add	r0, r2
 8008852:	7842      	ldrb	r2, [r0, #1]
 8008854:	0712      	lsls	r2, r2, #28
 8008856:	d401      	bmi.n	800885c <__ssvfiscanf_r+0x64>
 8008858:	46aa      	mov	sl, r5
 800885a:	e7e3      	b.n	8008824 <__ssvfiscanf_r+0x2c>
 800885c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800885e:	3301      	adds	r3, #1
 8008860:	3201      	adds	r2, #1
 8008862:	9245      	str	r2, [sp, #276]	; 0x114
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	3a01      	subs	r2, #1
 800886a:	6062      	str	r2, [r4, #4]
 800886c:	e7e9      	b.n	8008842 <__ssvfiscanf_r+0x4a>
 800886e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008870:	4621      	mov	r1, r4
 8008872:	4630      	mov	r0, r6
 8008874:	4798      	blx	r3
 8008876:	2800      	cmp	r0, #0
 8008878:	d0e6      	beq.n	8008848 <__ssvfiscanf_r+0x50>
 800887a:	e7ed      	b.n	8008858 <__ssvfiscanf_r+0x60>
 800887c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008880:	f040 8082 	bne.w	8008988 <__ssvfiscanf_r+0x190>
 8008884:	9343      	str	r3, [sp, #268]	; 0x10c
 8008886:	9341      	str	r3, [sp, #260]	; 0x104
 8008888:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800888c:	2b2a      	cmp	r3, #42	; 0x2a
 800888e:	d103      	bne.n	8008898 <__ssvfiscanf_r+0xa0>
 8008890:	2310      	movs	r3, #16
 8008892:	f10a 0502 	add.w	r5, sl, #2
 8008896:	9341      	str	r3, [sp, #260]	; 0x104
 8008898:	46aa      	mov	sl, r5
 800889a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800889e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80088a2:	2a09      	cmp	r2, #9
 80088a4:	d922      	bls.n	80088ec <__ssvfiscanf_r+0xf4>
 80088a6:	2203      	movs	r2, #3
 80088a8:	4879      	ldr	r0, [pc, #484]	; (8008a90 <__ssvfiscanf_r+0x298>)
 80088aa:	f000 fd7b 	bl	80093a4 <memchr>
 80088ae:	b138      	cbz	r0, 80088c0 <__ssvfiscanf_r+0xc8>
 80088b0:	eba0 0309 	sub.w	r3, r0, r9
 80088b4:	2001      	movs	r0, #1
 80088b6:	46aa      	mov	sl, r5
 80088b8:	4098      	lsls	r0, r3
 80088ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80088bc:	4318      	orrs	r0, r3
 80088be:	9041      	str	r0, [sp, #260]	; 0x104
 80088c0:	f89a 3000 	ldrb.w	r3, [sl]
 80088c4:	f10a 0501 	add.w	r5, sl, #1
 80088c8:	2b67      	cmp	r3, #103	; 0x67
 80088ca:	d82b      	bhi.n	8008924 <__ssvfiscanf_r+0x12c>
 80088cc:	2b65      	cmp	r3, #101	; 0x65
 80088ce:	f080 809f 	bcs.w	8008a10 <__ssvfiscanf_r+0x218>
 80088d2:	2b47      	cmp	r3, #71	; 0x47
 80088d4:	d810      	bhi.n	80088f8 <__ssvfiscanf_r+0x100>
 80088d6:	2b45      	cmp	r3, #69	; 0x45
 80088d8:	f080 809a 	bcs.w	8008a10 <__ssvfiscanf_r+0x218>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06c      	beq.n	80089ba <__ssvfiscanf_r+0x1c2>
 80088e0:	2b25      	cmp	r3, #37	; 0x25
 80088e2:	d051      	beq.n	8008988 <__ssvfiscanf_r+0x190>
 80088e4:	2303      	movs	r3, #3
 80088e6:	9742      	str	r7, [sp, #264]	; 0x108
 80088e8:	9347      	str	r3, [sp, #284]	; 0x11c
 80088ea:	e027      	b.n	800893c <__ssvfiscanf_r+0x144>
 80088ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80088ee:	fb07 1303 	mla	r3, r7, r3, r1
 80088f2:	3b30      	subs	r3, #48	; 0x30
 80088f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80088f6:	e7cf      	b.n	8008898 <__ssvfiscanf_r+0xa0>
 80088f8:	2b5b      	cmp	r3, #91	; 0x5b
 80088fa:	d06a      	beq.n	80089d2 <__ssvfiscanf_r+0x1da>
 80088fc:	d80c      	bhi.n	8008918 <__ssvfiscanf_r+0x120>
 80088fe:	2b58      	cmp	r3, #88	; 0x58
 8008900:	d1f0      	bne.n	80088e4 <__ssvfiscanf_r+0xec>
 8008902:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	9241      	str	r2, [sp, #260]	; 0x104
 800890a:	2210      	movs	r2, #16
 800890c:	9242      	str	r2, [sp, #264]	; 0x108
 800890e:	2b6e      	cmp	r3, #110	; 0x6e
 8008910:	bf8c      	ite	hi
 8008912:	2304      	movhi	r3, #4
 8008914:	2303      	movls	r3, #3
 8008916:	e010      	b.n	800893a <__ssvfiscanf_r+0x142>
 8008918:	2b63      	cmp	r3, #99	; 0x63
 800891a:	d065      	beq.n	80089e8 <__ssvfiscanf_r+0x1f0>
 800891c:	2b64      	cmp	r3, #100	; 0x64
 800891e:	d1e1      	bne.n	80088e4 <__ssvfiscanf_r+0xec>
 8008920:	9742      	str	r7, [sp, #264]	; 0x108
 8008922:	e7f4      	b.n	800890e <__ssvfiscanf_r+0x116>
 8008924:	2b70      	cmp	r3, #112	; 0x70
 8008926:	d04b      	beq.n	80089c0 <__ssvfiscanf_r+0x1c8>
 8008928:	d826      	bhi.n	8008978 <__ssvfiscanf_r+0x180>
 800892a:	2b6e      	cmp	r3, #110	; 0x6e
 800892c:	d062      	beq.n	80089f4 <__ssvfiscanf_r+0x1fc>
 800892e:	d84c      	bhi.n	80089ca <__ssvfiscanf_r+0x1d2>
 8008930:	2b69      	cmp	r3, #105	; 0x69
 8008932:	d1d7      	bne.n	80088e4 <__ssvfiscanf_r+0xec>
 8008934:	2300      	movs	r3, #0
 8008936:	9342      	str	r3, [sp, #264]	; 0x108
 8008938:	2303      	movs	r3, #3
 800893a:	9347      	str	r3, [sp, #284]	; 0x11c
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd68      	ble.n	8008a14 <__ssvfiscanf_r+0x21c>
 8008942:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008944:	0659      	lsls	r1, r3, #25
 8008946:	d407      	bmi.n	8008958 <__ssvfiscanf_r+0x160>
 8008948:	f000 fd0c 	bl	8009364 <__locale_ctype_ptr>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	4410      	add	r0, r2
 8008952:	7842      	ldrb	r2, [r0, #1]
 8008954:	0712      	lsls	r2, r2, #28
 8008956:	d464      	bmi.n	8008a22 <__ssvfiscanf_r+0x22a>
 8008958:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800895a:	2b02      	cmp	r3, #2
 800895c:	dc73      	bgt.n	8008a46 <__ssvfiscanf_r+0x24e>
 800895e:	466b      	mov	r3, sp
 8008960:	4622      	mov	r2, r4
 8008962:	a941      	add	r1, sp, #260	; 0x104
 8008964:	4630      	mov	r0, r6
 8008966:	f000 fa1f 	bl	8008da8 <_scanf_chars>
 800896a:	2801      	cmp	r0, #1
 800896c:	f000 8089 	beq.w	8008a82 <__ssvfiscanf_r+0x28a>
 8008970:	2802      	cmp	r0, #2
 8008972:	f47f af71 	bne.w	8008858 <__ssvfiscanf_r+0x60>
 8008976:	e01d      	b.n	80089b4 <__ssvfiscanf_r+0x1bc>
 8008978:	2b75      	cmp	r3, #117	; 0x75
 800897a:	d0d1      	beq.n	8008920 <__ssvfiscanf_r+0x128>
 800897c:	2b78      	cmp	r3, #120	; 0x78
 800897e:	d0c0      	beq.n	8008902 <__ssvfiscanf_r+0x10a>
 8008980:	2b73      	cmp	r3, #115	; 0x73
 8008982:	d1af      	bne.n	80088e4 <__ssvfiscanf_r+0xec>
 8008984:	2302      	movs	r3, #2
 8008986:	e7d8      	b.n	800893a <__ssvfiscanf_r+0x142>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	dd0c      	ble.n	80089a8 <__ssvfiscanf_r+0x1b0>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	455a      	cmp	r2, fp
 8008994:	d175      	bne.n	8008a82 <__ssvfiscanf_r+0x28a>
 8008996:	3301      	adds	r3, #1
 8008998:	6862      	ldr	r2, [r4, #4]
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800899e:	3a01      	subs	r2, #1
 80089a0:	3301      	adds	r3, #1
 80089a2:	6062      	str	r2, [r4, #4]
 80089a4:	9345      	str	r3, [sp, #276]	; 0x114
 80089a6:	e757      	b.n	8008858 <__ssvfiscanf_r+0x60>
 80089a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089aa:	4621      	mov	r1, r4
 80089ac:	4630      	mov	r0, r6
 80089ae:	4798      	blx	r3
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0ec      	beq.n	800898e <__ssvfiscanf_r+0x196>
 80089b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d159      	bne.n	8008a6e <__ssvfiscanf_r+0x276>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	e05c      	b.n	8008a7a <__ssvfiscanf_r+0x282>
 80089c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089c2:	f042 0220 	orr.w	r2, r2, #32
 80089c6:	9241      	str	r2, [sp, #260]	; 0x104
 80089c8:	e79b      	b.n	8008902 <__ssvfiscanf_r+0x10a>
 80089ca:	2308      	movs	r3, #8
 80089cc:	9342      	str	r3, [sp, #264]	; 0x108
 80089ce:	2304      	movs	r3, #4
 80089d0:	e7b3      	b.n	800893a <__ssvfiscanf_r+0x142>
 80089d2:	4629      	mov	r1, r5
 80089d4:	4640      	mov	r0, r8
 80089d6:	f000 fb3f 	bl	8009058 <__sccl>
 80089da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089dc:	4605      	mov	r5, r0
 80089de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e2:	9341      	str	r3, [sp, #260]	; 0x104
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7a8      	b.n	800893a <__ssvfiscanf_r+0x142>
 80089e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	9341      	str	r3, [sp, #260]	; 0x104
 80089f0:	2300      	movs	r3, #0
 80089f2:	e7a2      	b.n	800893a <__ssvfiscanf_r+0x142>
 80089f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80089f6:	06c3      	lsls	r3, r0, #27
 80089f8:	f53f af2e 	bmi.w	8008858 <__ssvfiscanf_r+0x60>
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a00:	1d19      	adds	r1, r3, #4
 8008a02:	9100      	str	r1, [sp, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	07c0      	lsls	r0, r0, #31
 8008a08:	bf4c      	ite	mi
 8008a0a:	801a      	strhmi	r2, [r3, #0]
 8008a0c:	601a      	strpl	r2, [r3, #0]
 8008a0e:	e723      	b.n	8008858 <__ssvfiscanf_r+0x60>
 8008a10:	2305      	movs	r3, #5
 8008a12:	e792      	b.n	800893a <__ssvfiscanf_r+0x142>
 8008a14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a16:	4621      	mov	r1, r4
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4798      	blx	r3
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d090      	beq.n	8008942 <__ssvfiscanf_r+0x14a>
 8008a20:	e7c8      	b.n	80089b4 <__ssvfiscanf_r+0x1bc>
 8008a22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a24:	3201      	adds	r2, #1
 8008a26:	9245      	str	r2, [sp, #276]	; 0x114
 8008a28:	6862      	ldr	r2, [r4, #4]
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	6062      	str	r2, [r4, #4]
 8008a30:	dd02      	ble.n	8008a38 <__ssvfiscanf_r+0x240>
 8008a32:	3301      	adds	r3, #1
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	e787      	b.n	8008948 <__ssvfiscanf_r+0x150>
 8008a38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4798      	blx	r3
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d081      	beq.n	8008948 <__ssvfiscanf_r+0x150>
 8008a44:	e7b6      	b.n	80089b4 <__ssvfiscanf_r+0x1bc>
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	dc06      	bgt.n	8008a58 <__ssvfiscanf_r+0x260>
 8008a4a:	466b      	mov	r3, sp
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	a941      	add	r1, sp, #260	; 0x104
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 fa0b 	bl	8008e6c <_scanf_i>
 8008a56:	e788      	b.n	800896a <__ssvfiscanf_r+0x172>
 8008a58:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <__ssvfiscanf_r+0x29c>)
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f43f aefc 	beq.w	8008858 <__ssvfiscanf_r+0x60>
 8008a60:	466b      	mov	r3, sp
 8008a62:	4622      	mov	r2, r4
 8008a64:	a941      	add	r1, sp, #260	; 0x104
 8008a66:	4630      	mov	r0, r6
 8008a68:	f3af 8000 	nop.w
 8008a6c:	e77d      	b.n	800896a <__ssvfiscanf_r+0x172>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a74:	bf18      	it	ne
 8008a76:	f04f 30ff 	movne.w	r0, #4294967295
 8008a7a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a82:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a84:	e7f9      	b.n	8008a7a <__ssvfiscanf_r+0x282>
 8008a86:	bf00      	nop
 8008a88:	08008745 	.word	0x08008745
 8008a8c:	080087bf 	.word	0x080087bf
 8008a90:	0800a0b2 	.word	0x0800a0b2
 8008a94:	00000000 	.word	0x00000000

08008a98 <_printf_common>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	4691      	mov	r9, r2
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	688a      	ldr	r2, [r1, #8]
 8008aa2:	690b      	ldr	r3, [r1, #16]
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	bfb8      	it	lt
 8008aaa:	4613      	movlt	r3, r2
 8008aac:	f8c9 3000 	str.w	r3, [r9]
 8008ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aba:	b112      	cbz	r2, 8008ac2 <_printf_common+0x2a>
 8008abc:	3301      	adds	r3, #1
 8008abe:	f8c9 3000 	str.w	r3, [r9]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	0699      	lsls	r1, r3, #26
 8008ac6:	bf42      	ittt	mi
 8008ac8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008acc:	3302      	addmi	r3, #2
 8008ace:	f8c9 3000 	strmi.w	r3, [r9]
 8008ad2:	6825      	ldr	r5, [r4, #0]
 8008ad4:	f015 0506 	ands.w	r5, r5, #6
 8008ad8:	d107      	bne.n	8008aea <_printf_common+0x52>
 8008ada:	f104 0a19 	add.w	sl, r4, #25
 8008ade:	68e3      	ldr	r3, [r4, #12]
 8008ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	42ab      	cmp	r3, r5
 8008ae8:	dc29      	bgt.n	8008b3e <_printf_common+0xa6>
 8008aea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	3300      	adds	r3, #0
 8008af2:	bf18      	it	ne
 8008af4:	2301      	movne	r3, #1
 8008af6:	0692      	lsls	r2, r2, #26
 8008af8:	d42e      	bmi.n	8008b58 <_printf_common+0xc0>
 8008afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008afe:	4639      	mov	r1, r7
 8008b00:	4630      	mov	r0, r6
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d021      	beq.n	8008b4c <_printf_common+0xb4>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	68e5      	ldr	r5, [r4, #12]
 8008b0c:	f003 0306 	and.w	r3, r3, #6
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	bf18      	it	ne
 8008b14:	2500      	movne	r5, #0
 8008b16:	f8d9 2000 	ldr.w	r2, [r9]
 8008b1a:	f04f 0900 	mov.w	r9, #0
 8008b1e:	bf08      	it	eq
 8008b20:	1aad      	subeq	r5, r5, r2
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	bf08      	it	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfc4      	itt	gt
 8008b30:	1a9b      	subgt	r3, r3, r2
 8008b32:	18ed      	addgt	r5, r5, r3
 8008b34:	341a      	adds	r4, #26
 8008b36:	454d      	cmp	r5, r9
 8008b38:	d11a      	bne.n	8008b70 <_printf_common+0xd8>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e008      	b.n	8008b50 <_printf_common+0xb8>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4652      	mov	r2, sl
 8008b42:	4639      	mov	r1, r7
 8008b44:	4630      	mov	r0, r6
 8008b46:	47c0      	blx	r8
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d103      	bne.n	8008b54 <_printf_common+0xbc>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	3501      	adds	r5, #1
 8008b56:	e7c2      	b.n	8008ade <_printf_common+0x46>
 8008b58:	2030      	movs	r0, #48	; 0x30
 8008b5a:	18e1      	adds	r1, r4, r3
 8008b5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b66:	4422      	add	r2, r4
 8008b68:	3302      	adds	r3, #2
 8008b6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b6e:	e7c4      	b.n	8008afa <_printf_common+0x62>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4622      	mov	r2, r4
 8008b74:	4639      	mov	r1, r7
 8008b76:	4630      	mov	r0, r6
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0e6      	beq.n	8008b4c <_printf_common+0xb4>
 8008b7e:	f109 0901 	add.w	r9, r9, #1
 8008b82:	e7d8      	b.n	8008b36 <_printf_common+0x9e>

08008b84 <_printf_i>:
 8008b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	7e09      	ldrb	r1, [r1, #24]
 8008b90:	b085      	sub	sp, #20
 8008b92:	296e      	cmp	r1, #110	; 0x6e
 8008b94:	4617      	mov	r7, r2
 8008b96:	4606      	mov	r6, r0
 8008b98:	4698      	mov	r8, r3
 8008b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b9c:	f000 80b3 	beq.w	8008d06 <_printf_i+0x182>
 8008ba0:	d822      	bhi.n	8008be8 <_printf_i+0x64>
 8008ba2:	2963      	cmp	r1, #99	; 0x63
 8008ba4:	d036      	beq.n	8008c14 <_printf_i+0x90>
 8008ba6:	d80a      	bhi.n	8008bbe <_printf_i+0x3a>
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	f000 80b9 	beq.w	8008d20 <_printf_i+0x19c>
 8008bae:	2958      	cmp	r1, #88	; 0x58
 8008bb0:	f000 8083 	beq.w	8008cba <_printf_i+0x136>
 8008bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bbc:	e032      	b.n	8008c24 <_printf_i+0xa0>
 8008bbe:	2964      	cmp	r1, #100	; 0x64
 8008bc0:	d001      	beq.n	8008bc6 <_printf_i+0x42>
 8008bc2:	2969      	cmp	r1, #105	; 0x69
 8008bc4:	d1f6      	bne.n	8008bb4 <_printf_i+0x30>
 8008bc6:	6820      	ldr	r0, [r4, #0]
 8008bc8:	6813      	ldr	r3, [r2, #0]
 8008bca:	0605      	lsls	r5, r0, #24
 8008bcc:	f103 0104 	add.w	r1, r3, #4
 8008bd0:	d52a      	bpl.n	8008c28 <_printf_i+0xa4>
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da03      	bge.n	8008be2 <_printf_i+0x5e>
 8008bda:	222d      	movs	r2, #45	; 0x2d
 8008bdc:	425b      	negs	r3, r3
 8008bde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008be2:	486f      	ldr	r0, [pc, #444]	; (8008da0 <_printf_i+0x21c>)
 8008be4:	220a      	movs	r2, #10
 8008be6:	e039      	b.n	8008c5c <_printf_i+0xd8>
 8008be8:	2973      	cmp	r1, #115	; 0x73
 8008bea:	f000 809d 	beq.w	8008d28 <_printf_i+0x1a4>
 8008bee:	d808      	bhi.n	8008c02 <_printf_i+0x7e>
 8008bf0:	296f      	cmp	r1, #111	; 0x6f
 8008bf2:	d020      	beq.n	8008c36 <_printf_i+0xb2>
 8008bf4:	2970      	cmp	r1, #112	; 0x70
 8008bf6:	d1dd      	bne.n	8008bb4 <_printf_i+0x30>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	f043 0320 	orr.w	r3, r3, #32
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	e003      	b.n	8008c0a <_printf_i+0x86>
 8008c02:	2975      	cmp	r1, #117	; 0x75
 8008c04:	d017      	beq.n	8008c36 <_printf_i+0xb2>
 8008c06:	2978      	cmp	r1, #120	; 0x78
 8008c08:	d1d4      	bne.n	8008bb4 <_printf_i+0x30>
 8008c0a:	2378      	movs	r3, #120	; 0x78
 8008c0c:	4865      	ldr	r0, [pc, #404]	; (8008da4 <_printf_i+0x220>)
 8008c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c12:	e055      	b.n	8008cc0 <_printf_i+0x13c>
 8008c14:	6813      	ldr	r3, [r2, #0]
 8008c16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1a:	1d19      	adds	r1, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6011      	str	r1, [r2, #0]
 8008c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c24:	2301      	movs	r3, #1
 8008c26:	e08c      	b.n	8008d42 <_printf_i+0x1be>
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c2e:	6011      	str	r1, [r2, #0]
 8008c30:	bf18      	it	ne
 8008c32:	b21b      	sxthne	r3, r3
 8008c34:	e7cf      	b.n	8008bd6 <_printf_i+0x52>
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1d18      	adds	r0, r3, #4
 8008c3c:	6010      	str	r0, [r2, #0]
 8008c3e:	0628      	lsls	r0, r5, #24
 8008c40:	d501      	bpl.n	8008c46 <_printf_i+0xc2>
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	e002      	b.n	8008c4c <_printf_i+0xc8>
 8008c46:	0668      	lsls	r0, r5, #25
 8008c48:	d5fb      	bpl.n	8008c42 <_printf_i+0xbe>
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	296f      	cmp	r1, #111	; 0x6f
 8008c4e:	bf14      	ite	ne
 8008c50:	220a      	movne	r2, #10
 8008c52:	2208      	moveq	r2, #8
 8008c54:	4852      	ldr	r0, [pc, #328]	; (8008da0 <_printf_i+0x21c>)
 8008c56:	2100      	movs	r1, #0
 8008c58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c5c:	6865      	ldr	r5, [r4, #4]
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	60a5      	str	r5, [r4, #8]
 8008c62:	f2c0 8095 	blt.w	8008d90 <_printf_i+0x20c>
 8008c66:	6821      	ldr	r1, [r4, #0]
 8008c68:	f021 0104 	bic.w	r1, r1, #4
 8008c6c:	6021      	str	r1, [r4, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d13d      	bne.n	8008cee <_printf_i+0x16a>
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	f040 808e 	bne.w	8008d94 <_printf_i+0x210>
 8008c78:	4665      	mov	r5, ip
 8008c7a:	2a08      	cmp	r2, #8
 8008c7c:	d10b      	bne.n	8008c96 <_printf_i+0x112>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07db      	lsls	r3, r3, #31
 8008c82:	d508      	bpl.n	8008c96 <_printf_i+0x112>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	6862      	ldr	r2, [r4, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	bfde      	ittt	le
 8008c8c:	2330      	movle	r3, #48	; 0x30
 8008c8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c96:	ebac 0305 	sub.w	r3, ip, r5
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	f8cd 8000 	str.w	r8, [sp]
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	aa03      	add	r2, sp, #12
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff fef6 	bl	8008a98 <_printf_common>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d14d      	bne.n	8008d4c <_printf_i+0x1c8>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b005      	add	sp, #20
 8008cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cba:	4839      	ldr	r0, [pc, #228]	; (8008da0 <_printf_i+0x21c>)
 8008cbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cc0:	6813      	ldr	r3, [r2, #0]
 8008cc2:	6821      	ldr	r1, [r4, #0]
 8008cc4:	1d1d      	adds	r5, r3, #4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6015      	str	r5, [r2, #0]
 8008cca:	060a      	lsls	r2, r1, #24
 8008ccc:	d50b      	bpl.n	8008ce6 <_printf_i+0x162>
 8008cce:	07ca      	lsls	r2, r1, #31
 8008cd0:	bf44      	itt	mi
 8008cd2:	f041 0120 	orrmi.w	r1, r1, #32
 8008cd6:	6021      	strmi	r1, [r4, #0]
 8008cd8:	b91b      	cbnz	r3, 8008ce2 <_printf_i+0x15e>
 8008cda:	6822      	ldr	r2, [r4, #0]
 8008cdc:	f022 0220 	bic.w	r2, r2, #32
 8008ce0:	6022      	str	r2, [r4, #0]
 8008ce2:	2210      	movs	r2, #16
 8008ce4:	e7b7      	b.n	8008c56 <_printf_i+0xd2>
 8008ce6:	064d      	lsls	r5, r1, #25
 8008ce8:	bf48      	it	mi
 8008cea:	b29b      	uxthmi	r3, r3
 8008cec:	e7ef      	b.n	8008cce <_printf_i+0x14a>
 8008cee:	4665      	mov	r5, ip
 8008cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cf4:	fb02 3311 	mls	r3, r2, r1, r3
 8008cf8:	5cc3      	ldrb	r3, [r0, r3]
 8008cfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008cfe:	460b      	mov	r3, r1
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d1f5      	bne.n	8008cf0 <_printf_i+0x16c>
 8008d04:	e7b9      	b.n	8008c7a <_printf_i+0xf6>
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	6825      	ldr	r5, [r4, #0]
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	6961      	ldr	r1, [r4, #20]
 8008d0e:	6010      	str	r0, [r2, #0]
 8008d10:	0628      	lsls	r0, r5, #24
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	d501      	bpl.n	8008d1a <_printf_i+0x196>
 8008d16:	6019      	str	r1, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <_printf_i+0x19c>
 8008d1a:	066a      	lsls	r2, r5, #25
 8008d1c:	d5fb      	bpl.n	8008d16 <_printf_i+0x192>
 8008d1e:	8019      	strh	r1, [r3, #0]
 8008d20:	2300      	movs	r3, #0
 8008d22:	4665      	mov	r5, ip
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	e7b9      	b.n	8008c9c <_printf_i+0x118>
 8008d28:	6813      	ldr	r3, [r2, #0]
 8008d2a:	1d19      	adds	r1, r3, #4
 8008d2c:	6011      	str	r1, [r2, #0]
 8008d2e:	681d      	ldr	r5, [r3, #0]
 8008d30:	6862      	ldr	r2, [r4, #4]
 8008d32:	2100      	movs	r1, #0
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 fb35 	bl	80093a4 <memchr>
 8008d3a:	b108      	cbz	r0, 8008d40 <_printf_i+0x1bc>
 8008d3c:	1b40      	subs	r0, r0, r5
 8008d3e:	6060      	str	r0, [r4, #4]
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2300      	movs	r3, #0
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4a:	e7a7      	b.n	8008c9c <_printf_i+0x118>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	462a      	mov	r2, r5
 8008d50:	4639      	mov	r1, r7
 8008d52:	4630      	mov	r0, r6
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0aa      	beq.n	8008cb0 <_printf_i+0x12c>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	079b      	lsls	r3, r3, #30
 8008d5e:	d413      	bmi.n	8008d88 <_printf_i+0x204>
 8008d60:	68e0      	ldr	r0, [r4, #12]
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	4298      	cmp	r0, r3
 8008d66:	bfb8      	it	lt
 8008d68:	4618      	movlt	r0, r3
 8008d6a:	e7a3      	b.n	8008cb4 <_printf_i+0x130>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	464a      	mov	r2, r9
 8008d70:	4639      	mov	r1, r7
 8008d72:	4630      	mov	r0, r6
 8008d74:	47c0      	blx	r8
 8008d76:	3001      	adds	r0, #1
 8008d78:	d09a      	beq.n	8008cb0 <_printf_i+0x12c>
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	68e3      	ldr	r3, [r4, #12]
 8008d7e:	9a03      	ldr	r2, [sp, #12]
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	42ab      	cmp	r3, r5
 8008d84:	dcf2      	bgt.n	8008d6c <_printf_i+0x1e8>
 8008d86:	e7eb      	b.n	8008d60 <_printf_i+0x1dc>
 8008d88:	2500      	movs	r5, #0
 8008d8a:	f104 0919 	add.w	r9, r4, #25
 8008d8e:	e7f5      	b.n	8008d7c <_printf_i+0x1f8>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1ac      	bne.n	8008cee <_printf_i+0x16a>
 8008d94:	7803      	ldrb	r3, [r0, #0]
 8008d96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d9e:	e76c      	b.n	8008c7a <_printf_i+0xf6>
 8008da0:	0800a0bd 	.word	0x0800a0bd
 8008da4:	0800a0ce 	.word	0x0800a0ce

08008da8 <_scanf_chars>:
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	4615      	mov	r5, r2
 8008dae:	688a      	ldr	r2, [r1, #8]
 8008db0:	4680      	mov	r8, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b932      	cbnz	r2, 8008dc4 <_scanf_chars+0x1c>
 8008db6:	698a      	ldr	r2, [r1, #24]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	bf14      	ite	ne
 8008dbc:	f04f 32ff 	movne.w	r2, #4294967295
 8008dc0:	2201      	moveq	r2, #1
 8008dc2:	608a      	str	r2, [r1, #8]
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	06d1      	lsls	r1, r2, #27
 8008dca:	bf5f      	itttt	pl
 8008dcc:	681a      	ldrpl	r2, [r3, #0]
 8008dce:	1d11      	addpl	r1, r2, #4
 8008dd0:	6019      	strpl	r1, [r3, #0]
 8008dd2:	6817      	ldrpl	r7, [r2, #0]
 8008dd4:	69a3      	ldr	r3, [r4, #24]
 8008dd6:	b1db      	cbz	r3, 8008e10 <_scanf_chars+0x68>
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d107      	bne.n	8008dec <_scanf_chars+0x44>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	6962      	ldr	r2, [r4, #20]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	5cd3      	ldrb	r3, [r2, r3]
 8008de4:	b9a3      	cbnz	r3, 8008e10 <_scanf_chars+0x68>
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d131      	bne.n	8008e4e <_scanf_chars+0xa6>
 8008dea:	e006      	b.n	8008dfa <_scanf_chars+0x52>
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d007      	beq.n	8008e00 <_scanf_chars+0x58>
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	d12c      	bne.n	8008e4e <_scanf_chars+0xa6>
 8008df4:	69a3      	ldr	r3, [r4, #24]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d129      	bne.n	8008e4e <_scanf_chars+0xa6>
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e00:	f000 fab0 	bl	8009364 <__locale_ctype_ptr>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	4418      	add	r0, r3
 8008e0a:	7843      	ldrb	r3, [r0, #1]
 8008e0c:	071b      	lsls	r3, r3, #28
 8008e0e:	d4ef      	bmi.n	8008df0 <_scanf_chars+0x48>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	3601      	adds	r6, #1
 8008e14:	06da      	lsls	r2, r3, #27
 8008e16:	bf5e      	ittt	pl
 8008e18:	682b      	ldrpl	r3, [r5, #0]
 8008e1a:	781b      	ldrbpl	r3, [r3, #0]
 8008e1c:	703b      	strbpl	r3, [r7, #0]
 8008e1e:	682a      	ldr	r2, [r5, #0]
 8008e20:	686b      	ldr	r3, [r5, #4]
 8008e22:	f102 0201 	add.w	r2, r2, #1
 8008e26:	602a      	str	r2, [r5, #0]
 8008e28:	68a2      	ldr	r2, [r4, #8]
 8008e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e2e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e32:	606b      	str	r3, [r5, #4]
 8008e34:	bf58      	it	pl
 8008e36:	3701      	addpl	r7, #1
 8008e38:	60a2      	str	r2, [r4, #8]
 8008e3a:	b142      	cbz	r2, 8008e4e <_scanf_chars+0xa6>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dcc9      	bgt.n	8008dd4 <_scanf_chars+0x2c>
 8008e40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e44:	4629      	mov	r1, r5
 8008e46:	4640      	mov	r0, r8
 8008e48:	4798      	blx	r3
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d0c2      	beq.n	8008dd4 <_scanf_chars+0x2c>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f013 0310 	ands.w	r3, r3, #16
 8008e54:	d105      	bne.n	8008e62 <_scanf_chars+0xba>
 8008e56:	68e2      	ldr	r2, [r4, #12]
 8008e58:	3201      	adds	r2, #1
 8008e5a:	60e2      	str	r2, [r4, #12]
 8008e5c:	69a2      	ldr	r2, [r4, #24]
 8008e5e:	b102      	cbz	r2, 8008e62 <_scanf_chars+0xba>
 8008e60:	703b      	strb	r3, [r7, #0]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	2000      	movs	r0, #0
 8008e66:	441e      	add	r6, r3
 8008e68:	6126      	str	r6, [r4, #16]
 8008e6a:	e7c7      	b.n	8008dfc <_scanf_chars+0x54>

08008e6c <_scanf_i>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	460c      	mov	r4, r1
 8008e72:	469a      	mov	sl, r3
 8008e74:	4b74      	ldr	r3, [pc, #464]	; (8009048 <_scanf_i+0x1dc>)
 8008e76:	b087      	sub	sp, #28
 8008e78:	4683      	mov	fp, r0
 8008e7a:	4616      	mov	r6, r2
 8008e7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e80:	ab03      	add	r3, sp, #12
 8008e82:	68a7      	ldr	r7, [r4, #8]
 8008e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e88:	4b70      	ldr	r3, [pc, #448]	; (800904c <_scanf_i+0x1e0>)
 8008e8a:	69a1      	ldr	r1, [r4, #24]
 8008e8c:	4a70      	ldr	r2, [pc, #448]	; (8009050 <_scanf_i+0x1e4>)
 8008e8e:	f104 091c 	add.w	r9, r4, #28
 8008e92:	2903      	cmp	r1, #3
 8008e94:	bf08      	it	eq
 8008e96:	461a      	moveq	r2, r3
 8008e98:	1e7b      	subs	r3, r7, #1
 8008e9a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008e9e:	bf84      	itt	hi
 8008ea0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ea4:	60a3      	strhi	r3, [r4, #8]
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	bf88      	it	hi
 8008eaa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008eae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	bf98      	it	ls
 8008eb6:	2700      	movls	r7, #0
 8008eb8:	464b      	mov	r3, r9
 8008eba:	f04f 0800 	mov.w	r8, #0
 8008ebe:	9200      	str	r2, [sp, #0]
 8008ec0:	bf88      	it	hi
 8008ec2:	197f      	addhi	r7, r7, r5
 8008ec4:	6831      	ldr	r1, [r6, #0]
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	ab03      	add	r3, sp, #12
 8008eca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	7809      	ldrb	r1, [r1, #0]
 8008ed2:	f000 fa67 	bl	80093a4 <memchr>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	b330      	cbz	r0, 8008f28 <_scanf_i+0xbc>
 8008eda:	f1b8 0f01 	cmp.w	r8, #1
 8008ede:	d15a      	bne.n	8008f96 <_scanf_i+0x12a>
 8008ee0:	6862      	ldr	r2, [r4, #4]
 8008ee2:	b92a      	cbnz	r2, 8008ef0 <_scanf_i+0x84>
 8008ee4:	2108      	movs	r1, #8
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	6061      	str	r1, [r4, #4]
 8008eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	6822      	ldr	r2, [r4, #0]
 8008ef2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008ef6:	6022      	str	r2, [r4, #0]
 8008ef8:	68a2      	ldr	r2, [r4, #8]
 8008efa:	1e51      	subs	r1, r2, #1
 8008efc:	60a1      	str	r1, [r4, #8]
 8008efe:	b19a      	cbz	r2, 8008f28 <_scanf_i+0xbc>
 8008f00:	6832      	ldr	r2, [r6, #0]
 8008f02:	1c5d      	adds	r5, r3, #1
 8008f04:	1c51      	adds	r1, r2, #1
 8008f06:	6031      	str	r1, [r6, #0]
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	6873      	ldr	r3, [r6, #4]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	6073      	str	r3, [r6, #4]
 8008f14:	dc07      	bgt.n	8008f26 <_scanf_i+0xba>
 8008f16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	4798      	blx	r3
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f040 8087 	bne.w	8009034 <_scanf_i+0x1c8>
 8008f26:	462b      	mov	r3, r5
 8008f28:	f108 0801 	add.w	r8, r8, #1
 8008f2c:	f1b8 0f03 	cmp.w	r8, #3
 8008f30:	d1c8      	bne.n	8008ec4 <_scanf_i+0x58>
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	b90a      	cbnz	r2, 8008f3a <_scanf_i+0xce>
 8008f36:	220a      	movs	r2, #10
 8008f38:	6062      	str	r2, [r4, #4]
 8008f3a:	6862      	ldr	r2, [r4, #4]
 8008f3c:	4945      	ldr	r1, [pc, #276]	; (8009054 <_scanf_i+0x1e8>)
 8008f3e:	6960      	ldr	r0, [r4, #20]
 8008f40:	1a89      	subs	r1, r1, r2
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	f000 f888 	bl	8009058 <__sccl>
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	461d      	mov	r5, r3
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d03b      	beq.n	8008fd0 <_scanf_i+0x164>
 8008f58:	6831      	ldr	r1, [r6, #0]
 8008f5a:	6960      	ldr	r0, [r4, #20]
 8008f5c:	f891 c000 	ldrb.w	ip, [r1]
 8008f60:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d033      	beq.n	8008fd0 <_scanf_i+0x164>
 8008f68:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008f6c:	d121      	bne.n	8008fb2 <_scanf_i+0x146>
 8008f6e:	0510      	lsls	r0, r2, #20
 8008f70:	d51f      	bpl.n	8008fb2 <_scanf_i+0x146>
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	b117      	cbz	r7, 8008f7e <_scanf_i+0x112>
 8008f78:	3301      	adds	r3, #1
 8008f7a:	3f01      	subs	r7, #1
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	6873      	ldr	r3, [r6, #4]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	6073      	str	r3, [r6, #4]
 8008f86:	dd1c      	ble.n	8008fc2 <_scanf_i+0x156>
 8008f88:	6833      	ldr	r3, [r6, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	6033      	str	r3, [r6, #0]
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	e7dc      	b.n	8008f50 <_scanf_i+0xe4>
 8008f96:	f1b8 0f02 	cmp.w	r8, #2
 8008f9a:	d1ad      	bne.n	8008ef8 <_scanf_i+0x8c>
 8008f9c:	6822      	ldr	r2, [r4, #0]
 8008f9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008fa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008fa6:	d1bf      	bne.n	8008f28 <_scanf_i+0xbc>
 8008fa8:	2110      	movs	r1, #16
 8008faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fae:	6061      	str	r1, [r4, #4]
 8008fb0:	e7a1      	b.n	8008ef6 <_scanf_i+0x8a>
 8008fb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	780b      	ldrb	r3, [r1, #0]
 8008fba:	3501      	adds	r5, #1
 8008fbc:	f805 3c01 	strb.w	r3, [r5, #-1]
 8008fc0:	e7dd      	b.n	8008f7e <_scanf_i+0x112>
 8008fc2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4658      	mov	r0, fp
 8008fca:	4798      	blx	r3
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d0de      	beq.n	8008f8e <_scanf_i+0x122>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	05d9      	lsls	r1, r3, #23
 8008fd4:	d50c      	bpl.n	8008ff0 <_scanf_i+0x184>
 8008fd6:	454d      	cmp	r5, r9
 8008fd8:	d908      	bls.n	8008fec <_scanf_i+0x180>
 8008fda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008fde:	1e6f      	subs	r7, r5, #1
 8008fe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	4798      	blx	r3
 8008fea:	463d      	mov	r5, r7
 8008fec:	454d      	cmp	r5, r9
 8008fee:	d029      	beq.n	8009044 <_scanf_i+0x1d8>
 8008ff0:	6822      	ldr	r2, [r4, #0]
 8008ff2:	f012 0210 	ands.w	r2, r2, #16
 8008ff6:	d113      	bne.n	8009020 <_scanf_i+0x1b4>
 8008ff8:	702a      	strb	r2, [r5, #0]
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4658      	mov	r0, fp
 8009000:	9e00      	ldr	r6, [sp, #0]
 8009002:	47b0      	blx	r6
 8009004:	f8da 3000 	ldr.w	r3, [sl]
 8009008:	6821      	ldr	r1, [r4, #0]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	f8ca 2000 	str.w	r2, [sl]
 8009010:	f011 0f20 	tst.w	r1, #32
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	d010      	beq.n	800903a <_scanf_i+0x1ce>
 8009018:	6018      	str	r0, [r3, #0]
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	60e3      	str	r3, [r4, #12]
 8009020:	2000      	movs	r0, #0
 8009022:	eba5 0509 	sub.w	r5, r5, r9
 8009026:	44a8      	add	r8, r5
 8009028:	6925      	ldr	r5, [r4, #16]
 800902a:	4445      	add	r5, r8
 800902c:	6125      	str	r5, [r4, #16]
 800902e:	b007      	add	sp, #28
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	f04f 0800 	mov.w	r8, #0
 8009038:	e7ca      	b.n	8008fd0 <_scanf_i+0x164>
 800903a:	07ca      	lsls	r2, r1, #31
 800903c:	bf4c      	ite	mi
 800903e:	8018      	strhmi	r0, [r3, #0]
 8009040:	6018      	strpl	r0, [r3, #0]
 8009042:	e7ea      	b.n	800901a <_scanf_i+0x1ae>
 8009044:	2001      	movs	r0, #1
 8009046:	e7f2      	b.n	800902e <_scanf_i+0x1c2>
 8009048:	080097c0 	.word	0x080097c0
 800904c:	080091b1 	.word	0x080091b1
 8009050:	080092c9 	.word	0x080092c9
 8009054:	0800a0ef 	.word	0x0800a0ef

08009058 <__sccl>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	780b      	ldrb	r3, [r1, #0]
 800905c:	1e44      	subs	r4, r0, #1
 800905e:	2b5e      	cmp	r3, #94	; 0x5e
 8009060:	bf13      	iteet	ne
 8009062:	1c4a      	addne	r2, r1, #1
 8009064:	1c8a      	addeq	r2, r1, #2
 8009066:	784b      	ldrbeq	r3, [r1, #1]
 8009068:	2100      	movne	r1, #0
 800906a:	bf08      	it	eq
 800906c:	2101      	moveq	r1, #1
 800906e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009072:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009076:	42ac      	cmp	r4, r5
 8009078:	d1fb      	bne.n	8009072 <__sccl+0x1a>
 800907a:	b913      	cbnz	r3, 8009082 <__sccl+0x2a>
 800907c:	3a01      	subs	r2, #1
 800907e:	4610      	mov	r0, r2
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	f081 0401 	eor.w	r4, r1, #1
 8009086:	54c4      	strb	r4, [r0, r3]
 8009088:	1c51      	adds	r1, r2, #1
 800908a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800908e:	1e4e      	subs	r6, r1, #1
 8009090:	2d2d      	cmp	r5, #45	; 0x2d
 8009092:	460a      	mov	r2, r1
 8009094:	d006      	beq.n	80090a4 <__sccl+0x4c>
 8009096:	2d5d      	cmp	r5, #93	; 0x5d
 8009098:	d0f1      	beq.n	800907e <__sccl+0x26>
 800909a:	b90d      	cbnz	r5, 80090a0 <__sccl+0x48>
 800909c:	4632      	mov	r2, r6
 800909e:	e7ee      	b.n	800907e <__sccl+0x26>
 80090a0:	462b      	mov	r3, r5
 80090a2:	e7f0      	b.n	8009086 <__sccl+0x2e>
 80090a4:	780e      	ldrb	r6, [r1, #0]
 80090a6:	2e5d      	cmp	r6, #93	; 0x5d
 80090a8:	d0fa      	beq.n	80090a0 <__sccl+0x48>
 80090aa:	42b3      	cmp	r3, r6
 80090ac:	dcf8      	bgt.n	80090a0 <__sccl+0x48>
 80090ae:	3301      	adds	r3, #1
 80090b0:	429e      	cmp	r6, r3
 80090b2:	54c4      	strb	r4, [r0, r3]
 80090b4:	dcfb      	bgt.n	80090ae <__sccl+0x56>
 80090b6:	3102      	adds	r1, #2
 80090b8:	e7e7      	b.n	800908a <__sccl+0x32>

080090ba <_strtol_l.isra.0>:
 80090ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090be:	4680      	mov	r8, r0
 80090c0:	4689      	mov	r9, r1
 80090c2:	4692      	mov	sl, r2
 80090c4:	461e      	mov	r6, r3
 80090c6:	460f      	mov	r7, r1
 80090c8:	463d      	mov	r5, r7
 80090ca:	9808      	ldr	r0, [sp, #32]
 80090cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090d0:	f000 f944 	bl	800935c <__locale_ctype_ptr_l>
 80090d4:	4420      	add	r0, r4
 80090d6:	7843      	ldrb	r3, [r0, #1]
 80090d8:	f013 0308 	ands.w	r3, r3, #8
 80090dc:	d132      	bne.n	8009144 <_strtol_l.isra.0+0x8a>
 80090de:	2c2d      	cmp	r4, #45	; 0x2d
 80090e0:	d132      	bne.n	8009148 <_strtol_l.isra.0+0x8e>
 80090e2:	2201      	movs	r2, #1
 80090e4:	787c      	ldrb	r4, [r7, #1]
 80090e6:	1cbd      	adds	r5, r7, #2
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	d05d      	beq.n	80091a8 <_strtol_l.isra.0+0xee>
 80090ec:	2e10      	cmp	r6, #16
 80090ee:	d109      	bne.n	8009104 <_strtol_l.isra.0+0x4a>
 80090f0:	2c30      	cmp	r4, #48	; 0x30
 80090f2:	d107      	bne.n	8009104 <_strtol_l.isra.0+0x4a>
 80090f4:	782b      	ldrb	r3, [r5, #0]
 80090f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090fa:	2b58      	cmp	r3, #88	; 0x58
 80090fc:	d14f      	bne.n	800919e <_strtol_l.isra.0+0xe4>
 80090fe:	2610      	movs	r6, #16
 8009100:	786c      	ldrb	r4, [r5, #1]
 8009102:	3502      	adds	r5, #2
 8009104:	2a00      	cmp	r2, #0
 8009106:	bf14      	ite	ne
 8009108:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800910c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009110:	2700      	movs	r7, #0
 8009112:	fbb1 fcf6 	udiv	ip, r1, r6
 8009116:	4638      	mov	r0, r7
 8009118:	fb06 1e1c 	mls	lr, r6, ip, r1
 800911c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009120:	2b09      	cmp	r3, #9
 8009122:	d817      	bhi.n	8009154 <_strtol_l.isra.0+0x9a>
 8009124:	461c      	mov	r4, r3
 8009126:	42a6      	cmp	r6, r4
 8009128:	dd23      	ble.n	8009172 <_strtol_l.isra.0+0xb8>
 800912a:	1c7b      	adds	r3, r7, #1
 800912c:	d007      	beq.n	800913e <_strtol_l.isra.0+0x84>
 800912e:	4584      	cmp	ip, r0
 8009130:	d31c      	bcc.n	800916c <_strtol_l.isra.0+0xb2>
 8009132:	d101      	bne.n	8009138 <_strtol_l.isra.0+0x7e>
 8009134:	45a6      	cmp	lr, r4
 8009136:	db19      	blt.n	800916c <_strtol_l.isra.0+0xb2>
 8009138:	2701      	movs	r7, #1
 800913a:	fb00 4006 	mla	r0, r0, r6, r4
 800913e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009142:	e7eb      	b.n	800911c <_strtol_l.isra.0+0x62>
 8009144:	462f      	mov	r7, r5
 8009146:	e7bf      	b.n	80090c8 <_strtol_l.isra.0+0xe>
 8009148:	2c2b      	cmp	r4, #43	; 0x2b
 800914a:	bf04      	itt	eq
 800914c:	1cbd      	addeq	r5, r7, #2
 800914e:	787c      	ldrbeq	r4, [r7, #1]
 8009150:	461a      	mov	r2, r3
 8009152:	e7c9      	b.n	80090e8 <_strtol_l.isra.0+0x2e>
 8009154:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009158:	2b19      	cmp	r3, #25
 800915a:	d801      	bhi.n	8009160 <_strtol_l.isra.0+0xa6>
 800915c:	3c37      	subs	r4, #55	; 0x37
 800915e:	e7e2      	b.n	8009126 <_strtol_l.isra.0+0x6c>
 8009160:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009164:	2b19      	cmp	r3, #25
 8009166:	d804      	bhi.n	8009172 <_strtol_l.isra.0+0xb8>
 8009168:	3c57      	subs	r4, #87	; 0x57
 800916a:	e7dc      	b.n	8009126 <_strtol_l.isra.0+0x6c>
 800916c:	f04f 37ff 	mov.w	r7, #4294967295
 8009170:	e7e5      	b.n	800913e <_strtol_l.isra.0+0x84>
 8009172:	1c7b      	adds	r3, r7, #1
 8009174:	d108      	bne.n	8009188 <_strtol_l.isra.0+0xce>
 8009176:	2322      	movs	r3, #34	; 0x22
 8009178:	4608      	mov	r0, r1
 800917a:	f8c8 3000 	str.w	r3, [r8]
 800917e:	f1ba 0f00 	cmp.w	sl, #0
 8009182:	d107      	bne.n	8009194 <_strtol_l.isra.0+0xda>
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	b102      	cbz	r2, 800918c <_strtol_l.isra.0+0xd2>
 800918a:	4240      	negs	r0, r0
 800918c:	f1ba 0f00 	cmp.w	sl, #0
 8009190:	d0f8      	beq.n	8009184 <_strtol_l.isra.0+0xca>
 8009192:	b10f      	cbz	r7, 8009198 <_strtol_l.isra.0+0xde>
 8009194:	f105 39ff 	add.w	r9, r5, #4294967295
 8009198:	f8ca 9000 	str.w	r9, [sl]
 800919c:	e7f2      	b.n	8009184 <_strtol_l.isra.0+0xca>
 800919e:	2430      	movs	r4, #48	; 0x30
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	d1af      	bne.n	8009104 <_strtol_l.isra.0+0x4a>
 80091a4:	2608      	movs	r6, #8
 80091a6:	e7ad      	b.n	8009104 <_strtol_l.isra.0+0x4a>
 80091a8:	2c30      	cmp	r4, #48	; 0x30
 80091aa:	d0a3      	beq.n	80090f4 <_strtol_l.isra.0+0x3a>
 80091ac:	260a      	movs	r6, #10
 80091ae:	e7a9      	b.n	8009104 <_strtol_l.isra.0+0x4a>

080091b0 <_strtol_r>:
 80091b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b2:	4c06      	ldr	r4, [pc, #24]	; (80091cc <_strtol_r+0x1c>)
 80091b4:	4d06      	ldr	r5, [pc, #24]	; (80091d0 <_strtol_r+0x20>)
 80091b6:	6824      	ldr	r4, [r4, #0]
 80091b8:	6a24      	ldr	r4, [r4, #32]
 80091ba:	2c00      	cmp	r4, #0
 80091bc:	bf08      	it	eq
 80091be:	462c      	moveq	r4, r5
 80091c0:	9400      	str	r4, [sp, #0]
 80091c2:	f7ff ff7a 	bl	80090ba <_strtol_l.isra.0>
 80091c6:	b003      	add	sp, #12
 80091c8:	bd30      	pop	{r4, r5, pc}
 80091ca:	bf00      	nop
 80091cc:	2000002c 	.word	0x2000002c
 80091d0:	20000090 	.word	0x20000090

080091d4 <_strtoul_l.isra.0>:
 80091d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	4680      	mov	r8, r0
 80091da:	4689      	mov	r9, r1
 80091dc:	4692      	mov	sl, r2
 80091de:	461e      	mov	r6, r3
 80091e0:	460f      	mov	r7, r1
 80091e2:	463d      	mov	r5, r7
 80091e4:	9808      	ldr	r0, [sp, #32]
 80091e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091ea:	f000 f8b7 	bl	800935c <__locale_ctype_ptr_l>
 80091ee:	4420      	add	r0, r4
 80091f0:	7843      	ldrb	r3, [r0, #1]
 80091f2:	f013 0308 	ands.w	r3, r3, #8
 80091f6:	d130      	bne.n	800925a <_strtoul_l.isra.0+0x86>
 80091f8:	2c2d      	cmp	r4, #45	; 0x2d
 80091fa:	d130      	bne.n	800925e <_strtoul_l.isra.0+0x8a>
 80091fc:	2101      	movs	r1, #1
 80091fe:	787c      	ldrb	r4, [r7, #1]
 8009200:	1cbd      	adds	r5, r7, #2
 8009202:	2e00      	cmp	r6, #0
 8009204:	d05c      	beq.n	80092c0 <_strtoul_l.isra.0+0xec>
 8009206:	2e10      	cmp	r6, #16
 8009208:	d109      	bne.n	800921e <_strtoul_l.isra.0+0x4a>
 800920a:	2c30      	cmp	r4, #48	; 0x30
 800920c:	d107      	bne.n	800921e <_strtoul_l.isra.0+0x4a>
 800920e:	782b      	ldrb	r3, [r5, #0]
 8009210:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009214:	2b58      	cmp	r3, #88	; 0x58
 8009216:	d14e      	bne.n	80092b6 <_strtoul_l.isra.0+0xe2>
 8009218:	2610      	movs	r6, #16
 800921a:	786c      	ldrb	r4, [r5, #1]
 800921c:	3502      	adds	r5, #2
 800921e:	f04f 32ff 	mov.w	r2, #4294967295
 8009222:	fbb2 f2f6 	udiv	r2, r2, r6
 8009226:	2300      	movs	r3, #0
 8009228:	fb06 fc02 	mul.w	ip, r6, r2
 800922c:	4618      	mov	r0, r3
 800922e:	ea6f 0c0c 	mvn.w	ip, ip
 8009232:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009236:	2f09      	cmp	r7, #9
 8009238:	d817      	bhi.n	800926a <_strtoul_l.isra.0+0x96>
 800923a:	463c      	mov	r4, r7
 800923c:	42a6      	cmp	r6, r4
 800923e:	dd23      	ble.n	8009288 <_strtoul_l.isra.0+0xb4>
 8009240:	2b00      	cmp	r3, #0
 8009242:	db1e      	blt.n	8009282 <_strtoul_l.isra.0+0xae>
 8009244:	4282      	cmp	r2, r0
 8009246:	d31c      	bcc.n	8009282 <_strtoul_l.isra.0+0xae>
 8009248:	d101      	bne.n	800924e <_strtoul_l.isra.0+0x7a>
 800924a:	45a4      	cmp	ip, r4
 800924c:	db19      	blt.n	8009282 <_strtoul_l.isra.0+0xae>
 800924e:	2301      	movs	r3, #1
 8009250:	fb00 4006 	mla	r0, r0, r6, r4
 8009254:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009258:	e7eb      	b.n	8009232 <_strtoul_l.isra.0+0x5e>
 800925a:	462f      	mov	r7, r5
 800925c:	e7c1      	b.n	80091e2 <_strtoul_l.isra.0+0xe>
 800925e:	2c2b      	cmp	r4, #43	; 0x2b
 8009260:	bf04      	itt	eq
 8009262:	1cbd      	addeq	r5, r7, #2
 8009264:	787c      	ldrbeq	r4, [r7, #1]
 8009266:	4619      	mov	r1, r3
 8009268:	e7cb      	b.n	8009202 <_strtoul_l.isra.0+0x2e>
 800926a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800926e:	2f19      	cmp	r7, #25
 8009270:	d801      	bhi.n	8009276 <_strtoul_l.isra.0+0xa2>
 8009272:	3c37      	subs	r4, #55	; 0x37
 8009274:	e7e2      	b.n	800923c <_strtoul_l.isra.0+0x68>
 8009276:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800927a:	2f19      	cmp	r7, #25
 800927c:	d804      	bhi.n	8009288 <_strtoul_l.isra.0+0xb4>
 800927e:	3c57      	subs	r4, #87	; 0x57
 8009280:	e7dc      	b.n	800923c <_strtoul_l.isra.0+0x68>
 8009282:	f04f 33ff 	mov.w	r3, #4294967295
 8009286:	e7e5      	b.n	8009254 <_strtoul_l.isra.0+0x80>
 8009288:	2b00      	cmp	r3, #0
 800928a:	da09      	bge.n	80092a0 <_strtoul_l.isra.0+0xcc>
 800928c:	2322      	movs	r3, #34	; 0x22
 800928e:	f04f 30ff 	mov.w	r0, #4294967295
 8009292:	f8c8 3000 	str.w	r3, [r8]
 8009296:	f1ba 0f00 	cmp.w	sl, #0
 800929a:	d107      	bne.n	80092ac <_strtoul_l.isra.0+0xd8>
 800929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a0:	b101      	cbz	r1, 80092a4 <_strtoul_l.isra.0+0xd0>
 80092a2:	4240      	negs	r0, r0
 80092a4:	f1ba 0f00 	cmp.w	sl, #0
 80092a8:	d0f8      	beq.n	800929c <_strtoul_l.isra.0+0xc8>
 80092aa:	b10b      	cbz	r3, 80092b0 <_strtoul_l.isra.0+0xdc>
 80092ac:	f105 39ff 	add.w	r9, r5, #4294967295
 80092b0:	f8ca 9000 	str.w	r9, [sl]
 80092b4:	e7f2      	b.n	800929c <_strtoul_l.isra.0+0xc8>
 80092b6:	2430      	movs	r4, #48	; 0x30
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	d1b0      	bne.n	800921e <_strtoul_l.isra.0+0x4a>
 80092bc:	2608      	movs	r6, #8
 80092be:	e7ae      	b.n	800921e <_strtoul_l.isra.0+0x4a>
 80092c0:	2c30      	cmp	r4, #48	; 0x30
 80092c2:	d0a4      	beq.n	800920e <_strtoul_l.isra.0+0x3a>
 80092c4:	260a      	movs	r6, #10
 80092c6:	e7aa      	b.n	800921e <_strtoul_l.isra.0+0x4a>

080092c8 <_strtoul_r>:
 80092c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ca:	4c06      	ldr	r4, [pc, #24]	; (80092e4 <_strtoul_r+0x1c>)
 80092cc:	4d06      	ldr	r5, [pc, #24]	; (80092e8 <_strtoul_r+0x20>)
 80092ce:	6824      	ldr	r4, [r4, #0]
 80092d0:	6a24      	ldr	r4, [r4, #32]
 80092d2:	2c00      	cmp	r4, #0
 80092d4:	bf08      	it	eq
 80092d6:	462c      	moveq	r4, r5
 80092d8:	9400      	str	r4, [sp, #0]
 80092da:	f7ff ff7b 	bl	80091d4 <_strtoul_l.isra.0>
 80092de:	b003      	add	sp, #12
 80092e0:	bd30      	pop	{r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	2000002c 	.word	0x2000002c
 80092e8:	20000090 	.word	0x20000090

080092ec <__submore>:
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	460c      	mov	r4, r1
 80092f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f8:	4299      	cmp	r1, r3
 80092fa:	d11b      	bne.n	8009334 <__submore+0x48>
 80092fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009300:	f000 f8b6 	bl	8009470 <_malloc_r>
 8009304:	b918      	cbnz	r0, 800930e <__submore+0x22>
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009312:	63a3      	str	r3, [r4, #56]	; 0x38
 8009314:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009318:	6360      	str	r0, [r4, #52]	; 0x34
 800931a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800931e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009322:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009326:	7043      	strb	r3, [r0, #1]
 8009328:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800932c:	7003      	strb	r3, [r0, #0]
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	2000      	movs	r0, #0
 8009332:	e7ea      	b.n	800930a <__submore+0x1e>
 8009334:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009336:	0077      	lsls	r7, r6, #1
 8009338:	463a      	mov	r2, r7
 800933a:	f000 f8f3 	bl	8009524 <_realloc_r>
 800933e:	4605      	mov	r5, r0
 8009340:	2800      	cmp	r0, #0
 8009342:	d0e0      	beq.n	8009306 <__submore+0x1a>
 8009344:	eb00 0806 	add.w	r8, r0, r6
 8009348:	4601      	mov	r1, r0
 800934a:	4632      	mov	r2, r6
 800934c:	4640      	mov	r0, r8
 800934e:	f000 f837 	bl	80093c0 <memcpy>
 8009352:	f8c4 8000 	str.w	r8, [r4]
 8009356:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800935a:	e7e9      	b.n	8009330 <__submore+0x44>

0800935c <__locale_ctype_ptr_l>:
 800935c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009360:	4770      	bx	lr
	...

08009364 <__locale_ctype_ptr>:
 8009364:	4b04      	ldr	r3, [pc, #16]	; (8009378 <__locale_ctype_ptr+0x14>)
 8009366:	4a05      	ldr	r2, [pc, #20]	; (800937c <__locale_ctype_ptr+0x18>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	bf08      	it	eq
 8009370:	4613      	moveq	r3, r2
 8009372:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009376:	4770      	bx	lr
 8009378:	2000002c 	.word	0x2000002c
 800937c:	20000090 	.word	0x20000090

08009380 <__ascii_mbtowc>:
 8009380:	b082      	sub	sp, #8
 8009382:	b901      	cbnz	r1, 8009386 <__ascii_mbtowc+0x6>
 8009384:	a901      	add	r1, sp, #4
 8009386:	b142      	cbz	r2, 800939a <__ascii_mbtowc+0x1a>
 8009388:	b14b      	cbz	r3, 800939e <__ascii_mbtowc+0x1e>
 800938a:	7813      	ldrb	r3, [r2, #0]
 800938c:	600b      	str	r3, [r1, #0]
 800938e:	7812      	ldrb	r2, [r2, #0]
 8009390:	1c10      	adds	r0, r2, #0
 8009392:	bf18      	it	ne
 8009394:	2001      	movne	r0, #1
 8009396:	b002      	add	sp, #8
 8009398:	4770      	bx	lr
 800939a:	4610      	mov	r0, r2
 800939c:	e7fb      	b.n	8009396 <__ascii_mbtowc+0x16>
 800939e:	f06f 0001 	mvn.w	r0, #1
 80093a2:	e7f8      	b.n	8009396 <__ascii_mbtowc+0x16>

080093a4 <memchr>:
 80093a4:	b510      	push	{r4, lr}
 80093a6:	b2c9      	uxtb	r1, r1
 80093a8:	4402      	add	r2, r0
 80093aa:	4290      	cmp	r0, r2
 80093ac:	4603      	mov	r3, r0
 80093ae:	d101      	bne.n	80093b4 <memchr+0x10>
 80093b0:	2300      	movs	r3, #0
 80093b2:	e003      	b.n	80093bc <memchr+0x18>
 80093b4:	781c      	ldrb	r4, [r3, #0]
 80093b6:	3001      	adds	r0, #1
 80093b8:	428c      	cmp	r4, r1
 80093ba:	d1f6      	bne.n	80093aa <memchr+0x6>
 80093bc:	4618      	mov	r0, r3
 80093be:	bd10      	pop	{r4, pc}

080093c0 <memcpy>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	1e43      	subs	r3, r0, #1
 80093c4:	440a      	add	r2, r1
 80093c6:	4291      	cmp	r1, r2
 80093c8:	d100      	bne.n	80093cc <memcpy+0xc>
 80093ca:	bd10      	pop	{r4, pc}
 80093cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d4:	e7f7      	b.n	80093c6 <memcpy+0x6>
	...

080093d8 <_free_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	2900      	cmp	r1, #0
 80093de:	d043      	beq.n	8009468 <_free_r+0x90>
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	18e4      	addlt	r4, r4, r3
 80093ec:	f000 f8dd 	bl	80095aa <__malloc_lock>
 80093f0:	4a1e      	ldr	r2, [pc, #120]	; (800946c <_free_r+0x94>)
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	4610      	mov	r0, r2
 80093f6:	b933      	cbnz	r3, 8009406 <_free_r+0x2e>
 80093f8:	6063      	str	r3, [r4, #4]
 80093fa:	6014      	str	r4, [r2, #0]
 80093fc:	4628      	mov	r0, r5
 80093fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009402:	f000 b8d3 	b.w	80095ac <__malloc_unlock>
 8009406:	42a3      	cmp	r3, r4
 8009408:	d90b      	bls.n	8009422 <_free_r+0x4a>
 800940a:	6821      	ldr	r1, [r4, #0]
 800940c:	1862      	adds	r2, r4, r1
 800940e:	4293      	cmp	r3, r2
 8009410:	bf01      	itttt	eq
 8009412:	681a      	ldreq	r2, [r3, #0]
 8009414:	685b      	ldreq	r3, [r3, #4]
 8009416:	1852      	addeq	r2, r2, r1
 8009418:	6022      	streq	r2, [r4, #0]
 800941a:	6063      	str	r3, [r4, #4]
 800941c:	6004      	str	r4, [r0, #0]
 800941e:	e7ed      	b.n	80093fc <_free_r+0x24>
 8009420:	4613      	mov	r3, r2
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	b10a      	cbz	r2, 800942a <_free_r+0x52>
 8009426:	42a2      	cmp	r2, r4
 8009428:	d9fa      	bls.n	8009420 <_free_r+0x48>
 800942a:	6819      	ldr	r1, [r3, #0]
 800942c:	1858      	adds	r0, r3, r1
 800942e:	42a0      	cmp	r0, r4
 8009430:	d10b      	bne.n	800944a <_free_r+0x72>
 8009432:	6820      	ldr	r0, [r4, #0]
 8009434:	4401      	add	r1, r0
 8009436:	1858      	adds	r0, r3, r1
 8009438:	4282      	cmp	r2, r0
 800943a:	6019      	str	r1, [r3, #0]
 800943c:	d1de      	bne.n	80093fc <_free_r+0x24>
 800943e:	6810      	ldr	r0, [r2, #0]
 8009440:	6852      	ldr	r2, [r2, #4]
 8009442:	4401      	add	r1, r0
 8009444:	6019      	str	r1, [r3, #0]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	e7d8      	b.n	80093fc <_free_r+0x24>
 800944a:	d902      	bls.n	8009452 <_free_r+0x7a>
 800944c:	230c      	movs	r3, #12
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	e7d4      	b.n	80093fc <_free_r+0x24>
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1821      	adds	r1, r4, r0
 8009456:	428a      	cmp	r2, r1
 8009458:	bf01      	itttt	eq
 800945a:	6811      	ldreq	r1, [r2, #0]
 800945c:	6852      	ldreq	r2, [r2, #4]
 800945e:	1809      	addeq	r1, r1, r0
 8009460:	6021      	streq	r1, [r4, #0]
 8009462:	6062      	str	r2, [r4, #4]
 8009464:	605c      	str	r4, [r3, #4]
 8009466:	e7c9      	b.n	80093fc <_free_r+0x24>
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000258 	.word	0x20000258

08009470 <_malloc_r>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	1ccd      	adds	r5, r1, #3
 8009474:	f025 0503 	bic.w	r5, r5, #3
 8009478:	3508      	adds	r5, #8
 800947a:	2d0c      	cmp	r5, #12
 800947c:	bf38      	it	cc
 800947e:	250c      	movcc	r5, #12
 8009480:	2d00      	cmp	r5, #0
 8009482:	4606      	mov	r6, r0
 8009484:	db01      	blt.n	800948a <_malloc_r+0x1a>
 8009486:	42a9      	cmp	r1, r5
 8009488:	d903      	bls.n	8009492 <_malloc_r+0x22>
 800948a:	230c      	movs	r3, #12
 800948c:	6033      	str	r3, [r6, #0]
 800948e:	2000      	movs	r0, #0
 8009490:	bd70      	pop	{r4, r5, r6, pc}
 8009492:	f000 f88a 	bl	80095aa <__malloc_lock>
 8009496:	4a21      	ldr	r2, [pc, #132]	; (800951c <_malloc_r+0xac>)
 8009498:	6814      	ldr	r4, [r2, #0]
 800949a:	4621      	mov	r1, r4
 800949c:	b991      	cbnz	r1, 80094c4 <_malloc_r+0x54>
 800949e:	4c20      	ldr	r4, [pc, #128]	; (8009520 <_malloc_r+0xb0>)
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	b91b      	cbnz	r3, 80094ac <_malloc_r+0x3c>
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 f863 	bl	8009570 <_sbrk_r>
 80094aa:	6020      	str	r0, [r4, #0]
 80094ac:	4629      	mov	r1, r5
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 f85e 	bl	8009570 <_sbrk_r>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d124      	bne.n	8009502 <_malloc_r+0x92>
 80094b8:	230c      	movs	r3, #12
 80094ba:	4630      	mov	r0, r6
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	f000 f875 	bl	80095ac <__malloc_unlock>
 80094c2:	e7e4      	b.n	800948e <_malloc_r+0x1e>
 80094c4:	680b      	ldr	r3, [r1, #0]
 80094c6:	1b5b      	subs	r3, r3, r5
 80094c8:	d418      	bmi.n	80094fc <_malloc_r+0x8c>
 80094ca:	2b0b      	cmp	r3, #11
 80094cc:	d90f      	bls.n	80094ee <_malloc_r+0x7e>
 80094ce:	600b      	str	r3, [r1, #0]
 80094d0:	18cc      	adds	r4, r1, r3
 80094d2:	50cd      	str	r5, [r1, r3]
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 f869 	bl	80095ac <__malloc_unlock>
 80094da:	f104 000b 	add.w	r0, r4, #11
 80094de:	1d23      	adds	r3, r4, #4
 80094e0:	f020 0007 	bic.w	r0, r0, #7
 80094e4:	1ac3      	subs	r3, r0, r3
 80094e6:	d0d3      	beq.n	8009490 <_malloc_r+0x20>
 80094e8:	425a      	negs	r2, r3
 80094ea:	50e2      	str	r2, [r4, r3]
 80094ec:	e7d0      	b.n	8009490 <_malloc_r+0x20>
 80094ee:	684b      	ldr	r3, [r1, #4]
 80094f0:	428c      	cmp	r4, r1
 80094f2:	bf16      	itet	ne
 80094f4:	6063      	strne	r3, [r4, #4]
 80094f6:	6013      	streq	r3, [r2, #0]
 80094f8:	460c      	movne	r4, r1
 80094fa:	e7eb      	b.n	80094d4 <_malloc_r+0x64>
 80094fc:	460c      	mov	r4, r1
 80094fe:	6849      	ldr	r1, [r1, #4]
 8009500:	e7cc      	b.n	800949c <_malloc_r+0x2c>
 8009502:	1cc4      	adds	r4, r0, #3
 8009504:	f024 0403 	bic.w	r4, r4, #3
 8009508:	42a0      	cmp	r0, r4
 800950a:	d005      	beq.n	8009518 <_malloc_r+0xa8>
 800950c:	1a21      	subs	r1, r4, r0
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f82e 	bl	8009570 <_sbrk_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d0cf      	beq.n	80094b8 <_malloc_r+0x48>
 8009518:	6025      	str	r5, [r4, #0]
 800951a:	e7db      	b.n	80094d4 <_malloc_r+0x64>
 800951c:	20000258 	.word	0x20000258
 8009520:	2000025c 	.word	0x2000025c

08009524 <_realloc_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	4607      	mov	r7, r0
 8009528:	4614      	mov	r4, r2
 800952a:	460e      	mov	r6, r1
 800952c:	b921      	cbnz	r1, 8009538 <_realloc_r+0x14>
 800952e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009532:	4611      	mov	r1, r2
 8009534:	f7ff bf9c 	b.w	8009470 <_malloc_r>
 8009538:	b922      	cbnz	r2, 8009544 <_realloc_r+0x20>
 800953a:	f7ff ff4d 	bl	80093d8 <_free_r>
 800953e:	4625      	mov	r5, r4
 8009540:	4628      	mov	r0, r5
 8009542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009544:	f000 f833 	bl	80095ae <_malloc_usable_size_r>
 8009548:	42a0      	cmp	r0, r4
 800954a:	d20f      	bcs.n	800956c <_realloc_r+0x48>
 800954c:	4621      	mov	r1, r4
 800954e:	4638      	mov	r0, r7
 8009550:	f7ff ff8e 	bl	8009470 <_malloc_r>
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d0f2      	beq.n	8009540 <_realloc_r+0x1c>
 800955a:	4631      	mov	r1, r6
 800955c:	4622      	mov	r2, r4
 800955e:	f7ff ff2f 	bl	80093c0 <memcpy>
 8009562:	4631      	mov	r1, r6
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff ff37 	bl	80093d8 <_free_r>
 800956a:	e7e9      	b.n	8009540 <_realloc_r+0x1c>
 800956c:	4635      	mov	r5, r6
 800956e:	e7e7      	b.n	8009540 <_realloc_r+0x1c>

08009570 <_sbrk_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	2300      	movs	r3, #0
 8009574:	4c05      	ldr	r4, [pc, #20]	; (800958c <_sbrk_r+0x1c>)
 8009576:	4605      	mov	r5, r0
 8009578:	4608      	mov	r0, r1
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	f7f8 f950 	bl	8001820 <_sbrk>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_sbrk_r+0x1a>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	b103      	cbz	r3, 800958a <_sbrk_r+0x1a>
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000878 	.word	0x20000878

08009590 <__ascii_wctomb>:
 8009590:	b149      	cbz	r1, 80095a6 <__ascii_wctomb+0x16>
 8009592:	2aff      	cmp	r2, #255	; 0xff
 8009594:	bf8b      	itete	hi
 8009596:	238a      	movhi	r3, #138	; 0x8a
 8009598:	700a      	strbls	r2, [r1, #0]
 800959a:	6003      	strhi	r3, [r0, #0]
 800959c:	2001      	movls	r0, #1
 800959e:	bf88      	it	hi
 80095a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80095a4:	4770      	bx	lr
 80095a6:	4608      	mov	r0, r1
 80095a8:	4770      	bx	lr

080095aa <__malloc_lock>:
 80095aa:	4770      	bx	lr

080095ac <__malloc_unlock>:
 80095ac:	4770      	bx	lr

080095ae <_malloc_usable_size_r>:
 80095ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b2:	1f18      	subs	r0, r3, #4
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfbc      	itt	lt
 80095b8:	580b      	ldrlt	r3, [r1, r0]
 80095ba:	18c0      	addlt	r0, r0, r3
 80095bc:	4770      	bx	lr
	...

080095c0 <_init>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr

080095cc <_fini>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr
