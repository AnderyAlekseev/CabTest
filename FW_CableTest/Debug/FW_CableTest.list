
FW_CableTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007290  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08007f74  08007f74  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f74  08007f74  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  20000094  08008010  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08008010  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac84  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d22  00000000  00000000  0003ad41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  0003ea68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  0003fd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d0f0  00000000  00000000  00040e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016375  00000000  00000000  0005def0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000946bc  00000000  00000000  00074265  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  0010899c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08007384 	.word	0x08007384

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08007384 	.word	0x08007384

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000166:	695a      	ldr	r2, [r3, #20]
 8000168:	4907      	ldr	r1, [pc, #28]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	4313      	orrs	r3, r2
 800016e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4013      	ands	r3, r2
 8000178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800017a:	68fb      	ldr	r3, [r7, #12]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8000190:	2040      	movs	r0, #64	; 0x40
 8000192:	f7ff ffe3 	bl	800015c <LL_AHB1_GRP1_EnableClock>

}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <Display>:
#include "main.h"

void Display(typeEnv *Env)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b0a2      	sub	sp, #136	; 0x88
 80001a0:	af02      	add	r7, sp, #8
 80001a2:	6078      	str	r0, [r7, #4]
	ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];
	ST7735_ListBox FileList;
	uint32_t selectedFile = Env->Menu.ActiveItem;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 80001aa:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80001b0:	677b      	str	r3, [r7, #116]	; 0x74
	char EncoderString[12] = "Привет";
 80001b2:	4a3f      	ldr	r2, [pc, #252]	; (80002b0 <Display+0x114>)
 80001b4:	f107 0308 	add.w	r3, r7, #8
 80001b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80001ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//static uint8_t step=0;
	if(f_RefreshScreen == 1)
 80001be:	4b3d      	ldr	r3, [pc, #244]	; (80002b4 <Display+0x118>)
 80001c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001c4:	015b      	lsls	r3, r3, #5
 80001c6:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001ca:	f043 0314 	orr.w	r3, r3, #20
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d15c      	bne.n	800028e <Display+0xf2>
	{
		f_RefreshScreen = 0;
 80001d4:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <Display+0x118>)
 80001d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001da:	015b      	lsls	r3, r3, #5
 80001dc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80001e0:	f043 0314 	orr.w	r3, r3, #20
 80001e4:	461a      	mov	r2, r3
 80001e6:	2300      	movs	r3, #0
 80001e8:	6013      	str	r3, [r2, #0]

		for(uint32_t index =0; index < end_list; index++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80001ee:	e021      	b.n	8000234 <Display+0x98>
			{
				//memset( &(Files_on_SD[index].text), 0, sizeof(Files_on_SD[index].text));
				//strncpy( &(Files_on_SD[index].text),  &(Env->Menu.FileList[index]), FILENAME_SIZE);
				Files_on_SD[index].text  = &(Env->Menu.FileList[index]);
 80001f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80001f2:	4613      	mov	r3, r2
 80001f4:	005b      	lsls	r3, r3, #1
 80001f6:	4413      	add	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	4413      	add	r3, r2
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	441a      	add	r2, r3
 8000200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000208:	440b      	add	r3, r1
 800020a:	f843 2c58 	str.w	r2, [r3, #-88]
				Files_on_SD[index].visible=1;
 800020e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000210:	00db      	lsls	r3, r3, #3
 8000212:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000216:	4413      	add	r3, r2
 8000218:	2201      	movs	r2, #1
 800021a:	f803 2c54 	strb.w	r2, [r3, #-84]
				Files_on_SD[index].selected=0;
 800021e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000226:	4413      	add	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	f803 2c53 	strb.w	r2, [r3, #-83]
		for(uint32_t index =0; index < end_list; index++)
 800022e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000230:	3301      	adds	r3, #1
 8000232:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000234:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000238:	429a      	cmp	r2, r3
 800023a:	d3d9      	bcc.n	80001f0 <Display+0x54>
			}
		ST7735_ListBox_StructInit(&FileList,0,0,&Files_on_SD,end_list);
 800023c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800023e:	b2db      	uxtb	r3, r3
 8000240:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000244:	f107 0014 	add.w	r0, r7, #20
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	4613      	mov	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	f001 ff4e 	bl	80020f0 <ST7735_ListBox_StructInit>
		Files_on_SD[selectedFile].selected=1;
 8000254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000256:	00db      	lsls	r3, r3, #3
 8000258:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800025c:	4413      	add	r3, r2
 800025e:	2201      	movs	r2, #1
 8000260:	f803 2c53 	strb.w	r2, [r3, #-83]
		FileList.BackgroundColor = (*Env).Menu.BGR_Color;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800026a:	837b      	strh	r3, [r7, #26]
		FileList.BorderColor	=	(*Env).Menu.BRD_Color;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000272:	833b      	strh	r3, [r7, #24]
		FileList.ItemTextColor	=	(*Env).Menu.TXT_Color;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800027a:	83bb      	strh	r3, [r7, #28]
		FileList.SelectedItemColor	=(*Env).Menu.SEL_Color;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8000282:	83fb      	strh	r3, [r7, #30]
		ST7735_ListBox_Draw(&FileList);
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fe7f 	bl	8001f8c <ST7735_ListBox_Draw>
	}

	//sprintf(&EncoderString, "I-%2d P-%2d A-%d", selectedFile, Env->Menu.ActivePage, Env->Menu.NmbrAllFiles);
	//ST7735_DrawString7x11(1,1,EncoderString,COLOR565_ALICE_BLUE,COLOR565_DARK_SLATE_BLUE);
char CyrStr='А';
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
char cyr_str='Б';
 8000294:	2391      	movs	r3, #145	; 0x91
 8000296:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
char LatStr='A';
 800029a:	2341      	movs	r3, #65	; 0x41
 800029c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
char lat_str='B';
 80002a0:	2342      	movs	r3, #66	; 0x42
 80002a2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
//	ST7735_DrawChar(110,40, LatStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar(110,52, lat_str,TXT_COLOR,BGR_COLOR);
//	//ST7735_DrawChar(110,64, 0x7f,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,80, CyrStr,TXT_COLOR,BGR_COLOR);
//	ST7735_DrawChar7x11(110,92, cyr_str,TXT_COLOR,BGR_COLOR);
}
 80002a6:	bf00      	nop
 80002a8:	3780      	adds	r7, #128	; 0x80
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	0800739c 	.word	0x0800739c
 80002b4:	20000290 	.word	0x20000290

080002b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c2:	699a      	ldr	r2, [r3, #24]
 80002c4:	4907      	ldr	r1, [pc, #28]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ce:	699a      	ldr	r2, [r3, #24]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d6:	68fb      	ldr	r3, [r7, #12]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	615a      	str	r2, [r3, #20]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
	...

08000308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800031c:	2010      	movs	r0, #16
 800031e:	f7ff ffcb 	bl	80002b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000322:	2020      	movs	r0, #32
 8000324:	f7ff ffc8 	bl	80002b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000328:	2004      	movs	r0, #4
 800032a:	f7ff ffc5 	bl	80002b8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800032e:	2008      	movs	r0, #8
 8000330:	f7ff ffc2 	bl	80002b8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000334:	4936      	ldr	r1, [pc, #216]	; (8000410 <MX_GPIO_Init+0x108>)
 8000336:	4837      	ldr	r0, [pc, #220]	; (8000414 <MX_GPIO_Init+0x10c>)
 8000338:	f7ff ffd6 	bl	80002e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin|LCD_CS_Pin|EN_INP_Pin);
 800033c:	4936      	ldr	r1, [pc, #216]	; (8000418 <MX_GPIO_Init+0x110>)
 800033e:	4837      	ldr	r0, [pc, #220]	; (800041c <MX_GPIO_Init+0x114>)
 8000340:	f7ff ffd2 	bl	80002e8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, SD_CS_Pin|ADR_A_Pin|ADR_B_Pin|ADR_C_Pin
 8000344:	4936      	ldr	r1, [pc, #216]	; (8000420 <MX_GPIO_Init+0x118>)
 8000346:	4837      	ldr	r0, [pc, #220]	; (8000424 <MX_GPIO_Init+0x11c>)
 8000348:	f7ff ffce 	bl	80002e8 <LL_GPIO_ResetOutputPin>
                          |EN_OUT_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800034c:	4b30      	ldr	r3, [pc, #192]	; (8000410 <MX_GPIO_Init+0x108>)
 800034e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000350:	2301      	movs	r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000354:	2302      	movs	r3, #2
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	482c      	ldr	r0, [pc, #176]	; (8000414 <MX_GPIO_Init+0x10c>)
 8000362:	f003 fc91 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8000366:	f241 2312 	movw	r3, #4626	; 0x1212
 800036a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000370:	2302      	movs	r3, #2
 8000372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000378:	2301      	movs	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4826      	ldr	r0, [pc, #152]	; (800041c <MX_GPIO_Init+0x114>)
 8000382:	f003 fc81 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_A0_Pin|EN_INP_Pin;
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <MX_GPIO_Init+0x120>)
 8000388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4820      	ldr	r0, [pc, #128]	; (800041c <MX_GPIO_Init+0x114>)
 800039c:	f003 fc74 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUT_DWN_Pin|BUT_OK_Pin|BUT_UP_Pin;
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <MX_GPIO_Init+0x124>)
 80003a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80003a4:	2308      	movs	r3, #8
 80003a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	481c      	ldr	r0, [pc, #112]	; (8000424 <MX_GPIO_Init+0x11c>)
 80003b2:	f003 fc69 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80003b6:	f240 2302 	movw	r3, #514	; 0x202
 80003ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4814      	ldr	r0, [pc, #80]	; (8000424 <MX_GPIO_Init+0x11c>)
 80003d2:	f003 fc59 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADR_A_Pin|ADR_B_Pin|ADR_C_Pin|EN_OUT_Pin;
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_GPIO_Init+0x128>)
 80003d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003da:	2301      	movs	r3, #1
 80003dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	480e      	ldr	r0, [pc, #56]	; (8000424 <MX_GPIO_Init+0x11c>)
 80003ec:	f003 fc4c 	bl	8003c88 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_GPIO_Init+0x12c>)
 80003f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80003f4:	2308      	movs	r3, #8
 80003f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4619      	mov	r1, r3
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <MX_GPIO_Init+0x114>)
 8000402:	f003 fc41 	bl	8003c88 <LL_GPIO_Init>

}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	04200020 	.word	0x04200020
 8000414:	40011000 	.word	0x40011000
 8000418:	04011a1b 	.word	0x04011a1b
 800041c:	40010800 	.word	0x40010800
 8000420:	04f002f2 	.word	0x04f002f2
 8000424:	40010c00 	.word	0x40010c00
 8000428:	04010809 	.word	0x04010809
 800042c:	040c010d 	.word	0x040c010d
 8000430:	04f000f0 	.word	0x04f000f0
 8000434:	04800080 	.word	0x04800080

08000438 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <LL_RCC_HSE_Enable+0x18>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <LL_RCC_HSE_Enable+0x18>)
 8000442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <LL_RCC_HSE_IsReady+0x20>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000464:	bf0c      	ite	eq
 8000466:	2301      	moveq	r3, #1
 8000468:	2300      	movne	r3, #0
 800046a:	b2db      	uxtb	r3, r3
}
 800046c:	4618      	mov	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <LL_RCC_SetSysClkSource+0x24>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f023 0203 	bic.w	r2, r3, #3
 8000488:	4904      	ldr	r1, [pc, #16]	; (800049c <LL_RCC_SetSysClkSource+0x24>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	604b      	str	r3, [r1, #4]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <LL_RCC_GetSysClkSource+0x14>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 030c 	and.w	r3, r3, #12
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <LL_RCC_SetAHBPrescaler+0x24>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004c8:	4904      	ldr	r1, [pc, #16]	; (80004dc <LL_RCC_SetAHBPrescaler+0x24>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	604b      	str	r3, [r1, #4]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	604b      	str	r3, [r1, #4]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000518:	4904      	ldr	r1, [pc, #16]	; (800052c <LL_RCC_SetAPB2Prescaler+0x24>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	604b      	str	r3, [r1, #4]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <LL_RCC_PLL_Enable+0x18>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <LL_RCC_PLL_Enable+0x18>)
 800053a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_RCC_PLL_IsReady+0x20>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800055c:	bf0c      	ite	eq
 800055e:	2301      	moveq	r3, #1
 8000560:	2300      	movne	r3, #0
 8000562:	b2db      	uxtb	r3, r3
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	430b      	orrs	r3, r1
 800058c:	4903      	ldr	r1, [pc, #12]	; (800059c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800058e:	4313      	orrs	r3, r2
 8000590:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LL_FLASH_SetLatency+0x24>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f023 0207 	bic.w	r2, r3, #7
 80005b0:	4904      	ldr	r1, [pc, #16]	; (80005c4 <LL_FLASH_SetLatency+0x24>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	600b      	str	r3, [r1, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <LL_FLASH_GetLatency+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f003 0307 	and.w	r3, r3, #7
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40022000 	.word	0x40022000

080005e0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <LL_GPIO_SetPinMode>:
{
 8000636:	b490      	push	{r4, r7}
 8000638:	b088      	sub	sp, #32
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	461a      	mov	r2, r3
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	0e1b      	lsrs	r3, r3, #24
 800064a:	4413      	add	r3, r2
 800064c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800064e:	6822      	ldr	r2, [r4, #0]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	fa93 f3a3 	rbit	r3, r3
 800065a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	fab3 f383 	clz	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	210f      	movs	r1, #15
 8000668:	fa01 f303 	lsl.w	r3, r1, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	401a      	ands	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	fa93 f3a3 	rbit	r3, r3
 800067a:	61bb      	str	r3, [r7, #24]
  return result;
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	fab3 f383 	clz	r3, r3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	6023      	str	r3, [r4, #0]
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bc90      	pop	{r4, r7}
 8000698:	4770      	bx	lr

0800069a <LL_GPIO_SetPinPull>:
{
 800069a:	b480      	push	{r7}
 800069c:	b087      	sub	sp, #28
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	43db      	mvns	r3, r3
 80006b0:	401a      	ands	r2, r3
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	fa93 f3a3 	rbit	r3, r3
 80006be:	613b      	str	r3, [r7, #16]
  return result;
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	408b      	lsls	r3, r1
 80006ce:	431a      	orrs	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	60da      	str	r2, [r3, #12]
}
 80006d4:	bf00      	nop
 80006d6:	371c      	adds	r7, #28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80006f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006fa:	6053      	str	r3, [r2, #4]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40010000 	.word	0x40010000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 800070e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FATFS	FatFs; 	//Fatfs handle
	char status[20] = "123456";
 8000710:	1d3a      	adds	r2, r7, #4
 8000712:	4986      	ldr	r1, [pc, #536]	; (800092c <main+0x224>)
 8000714:	4613      	mov	r3, r2
 8000716:	c903      	ldmia	r1, {r0, r1}
 8000718:	6018      	str	r0, [r3, #0]
 800071a:	3304      	adds	r3, #4
 800071c:	8019      	strh	r1, [r3, #0]
 800071e:	3302      	adds	r3, #2
 8000720:	0c09      	lsrs	r1, r1, #16
 8000722:	7019      	strb	r1, [r3, #0]
 8000724:	1dd3      	adds	r3, r2, #7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	731a      	strb	r2, [r3, #12]
	Env.Menu.ActiveItem=0;
 8000730:	4b7f      	ldr	r3, [pc, #508]	; (8000930 <main+0x228>)
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Env.Menu.ActivePage=0;
 8000738:	4b7d      	ldr	r3, [pc, #500]	; (8000930 <main+0x228>)
 800073a:	2200      	movs	r2, #0
 800073c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	Env.Menu.BGR_Color = COLOR565_DARK_BLUE;	// background
 8000740:	4b7b      	ldr	r3, [pc, #492]	; (8000930 <main+0x228>)
 8000742:	2211      	movs	r2, #17
 8000744:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	Env.Menu.TXT_Color	= COLOR565_ALICE_BLUE;	// текст
 8000748:	4b79      	ldr	r3, [pc, #484]	; (8000930 <main+0x228>)
 800074a:	f24f 72df 	movw	r2, #63455	; 0xf7df
 800074e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	Env.Menu.SEL_Color	= COLOR565_BLUE;		// выделение
 8000752:	4b77      	ldr	r3, [pc, #476]	; (8000930 <main+0x228>)
 8000754:	221f      	movs	r2, #31
 8000756:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	Env.Menu.BRD_Color	= COLOR565_ALICE_BLUE;	// border
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <main+0x228>)
 800075c:	f24f 72df 	movw	r2, #63455	; 0xf7df
 8000760:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	Env.Menu.DANGER_TXT_Color	=COLOR565_WHITE;
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <main+0x228>)
 8000766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	Env.Menu.DANGER_BGR_Color	=COLOR565_RED;
 800076e:	4b70      	ldr	r3, [pc, #448]	; (8000930 <main+0x228>)
 8000770:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000774:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	f_RefreshScreen = 1;
 8000778:	4b6e      	ldr	r3, [pc, #440]	; (8000934 <main+0x22c>)
 800077a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800077e:	015b      	lsls	r3, r3, #5
 8000780:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000784:	f043 0314 	orr.w	r3, r3, #20
 8000788:	461a      	mov	r2, r3
 800078a:	2301      	movs	r3, #1
 800078c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f001 fcdb 	bl	8002148 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f8e5 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  LL_SPI_Enable(SPI1);// включить SPI после инициализации
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f7ff fdb7 	bl	8000308 <MX_GPIO_Init>
  MX_CRC_Init();
 800079a:	f7ff fcf7 	bl	800018c <MX_CRC_Init>
  MX_SPI1_Init();
 800079e:	f000 fad5 	bl	8000d4c <MX_SPI1_Init>
  LL_SPI_Enable(SPI1);// включить SPI после инициализации
 80007a2:	4865      	ldr	r0, [pc, #404]	; (8000938 <main+0x230>)
 80007a4:	f7ff ff1c 	bl	80005e0 <LL_SPI_Enable>
  MX_FATFS_Init();
 80007a8:	f003 fd4a 	bl	8004240 <MX_FATFS_Init>
  MX_TIM3_Init();
 80007ac:	f000 ff0e 	bl	80015cc <MX_TIM3_Init>
  MX_TIM1_Init();
 80007b0:	f000 fe3a 	bl	8001428 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007b4:	f000 feb8 	bl	8001528 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 80007b8:	2208      	movs	r2, #8
 80007ba:	f241 0110 	movw	r1, #4112	; 0x1010
 80007be:	485f      	ldr	r0, [pc, #380]	; (800093c <main+0x234>)
 80007c0:	f7ff ff39 	bl	8000636 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_UP);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f241 0110 	movw	r1, #4112	; 0x1010
 80007ca:	485c      	ldr	r0, [pc, #368]	; (800093c <main+0x234>)
 80007cc:	f7ff ff65 	bl	800069a <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80007d0:	2208      	movs	r2, #8
 80007d2:	f242 0120 	movw	r1, #8224	; 0x2020
 80007d6:	4859      	ldr	r0, [pc, #356]	; (800093c <main+0x234>)
 80007d8:	f7ff ff2d 	bl	8000636 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 80007dc:	2201      	movs	r2, #1
 80007de:	f242 0120 	movw	r1, #8224	; 0x2020
 80007e2:	4856      	ldr	r0, [pc, #344]	; (800093c <main+0x234>)
 80007e4:	f7ff ff59 	bl	800069a <LL_GPIO_SetPinPull>
	LL_TIM_SetCounter(TIM3, 0x7fff);
 80007e8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80007ec:	4854      	ldr	r0, [pc, #336]	; (8000940 <main+0x238>)
 80007ee:	f7ff ff15 	bl	800061c <LL_TIM_SetCounter>
	LL_GPIO_AF_RemapPartial_TIM3();
 80007f2:	f7ff ff75 	bl	80006e0 <LL_GPIO_AF_RemapPartial_TIM3>
	LL_TIM_EnableCounter(TIM3);
 80007f6:	4852      	ldr	r0, [pc, #328]	; (8000940 <main+0x238>)
 80007f8:	f7ff ff01 	bl	80005fe <LL_TIM_EnableCounter>
	HAL_ST7735_Init();
 80007fc:	f001 f854 	bl	80018a8 <HAL_ST7735_Init>
 //Монтируем файловую систему

	if(f_mount(&FatFs, "", 1) != FR_OK)
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	2201      	movs	r2, #1
 8000806:	494f      	ldr	r1, [pc, #316]	; (8000944 <main+0x23c>)
 8000808:	4618      	mov	r0, r3
 800080a:	f005 ffcf 	bl	80067ac <f_mount>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d06e      	beq.n	80008f2 <main+0x1ea>
	{
		ST7735_Clear(Env.Menu.DANGER_BGR_Color);
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <main+0x228>)
 8000816:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f9ce 	bl	8001bbc <ST7735_Clear>
		sprintf(status, "SD card" );
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4a49      	ldr	r2, [pc, #292]	; (8000948 <main+0x240>)
 8000824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000828:	e883 0003 	stmia.w	r3, {r0, r1}
		ST7735_DrawString7x11(39,1, status,Env.Menu.DANGER_TXT_Color,Env.Menu.DANGER_BGR_Color);
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <main+0x228>)
 800082e:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <main+0x228>)
 8000834:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	460b      	mov	r3, r1
 800083e:	2101      	movs	r1, #1
 8000840:	2027      	movs	r0, #39	; 0x27
 8000842:	f001 fb01 	bl	8001e48 <ST7735_DrawString7x11>
		sprintf(status, "not find" );
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4a40      	ldr	r2, [pc, #256]	; (800094c <main+0x244>)
 800084a:	ca07      	ldmia	r2, {r0, r1, r2}
 800084c:	c303      	stmia	r3!, {r0, r1}
 800084e:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(27,LINE_HEIGTH*1, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 8000850:	4b37      	ldr	r3, [pc, #220]	; (8000930 <main+0x228>)
 8000852:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 8000856:	4b36      	ldr	r3, [pc, #216]	; (8000930 <main+0x228>)
 8000858:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800085c:	1d3a      	adds	r2, r7, #4
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	460b      	mov	r3, r1
 8000862:	210d      	movs	r1, #13
 8000864:	201b      	movs	r0, #27
 8000866:	f001 faef 	bl	8001e48 <ST7735_DrawString7x11>
		sprintf(status, "Insert SD card" );
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4a38      	ldr	r2, [pc, #224]	; (8000950 <main+0x248>)
 800086e:	461c      	mov	r4, r3
 8000870:	4613      	mov	r3, r2
 8000872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000874:	c407      	stmia	r4!, {r0, r1, r2}
 8000876:	8023      	strh	r3, [r4, #0]
 8000878:	3402      	adds	r4, #2
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	7023      	strb	r3, [r4, #0]
		ST7735_DrawString7x11(8,LINE_HEIGTH*2, status, Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <main+0x228>)
 8000880:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <main+0x228>)
 8000886:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	460b      	mov	r3, r1
 8000890:	211a      	movs	r1, #26
 8000892:	2008      	movs	r0, #8
 8000894:	f001 fad8 	bl	8001e48 <ST7735_DrawString7x11>
		sprintf(status, "and reboot" );
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <main+0x24c>)
 800089c:	ca07      	ldmia	r2, {r0, r1, r2}
 800089e:	c303      	stmia	r3!, {r0, r1}
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	3302      	adds	r3, #2
 80008a4:	0c12      	lsrs	r2, r2, #16
 80008a6:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(29,LINE_HEIGTH*3, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <main+0x228>)
 80008aa:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <main+0x228>)
 80008b0:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80008b4:	1d3a      	adds	r2, r7, #4
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	460b      	mov	r3, r1
 80008ba:	2127      	movs	r1, #39	; 0x27
 80008bc:	201d      	movs	r0, #29
 80008be:	f001 fac3 	bl	8001e48 <ST7735_DrawString7x11>
		sprintf(status, "device" );
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4a24      	ldr	r2, [pc, #144]	; (8000958 <main+0x250>)
 80008c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ca:	6018      	str	r0, [r3, #0]
 80008cc:	3304      	adds	r3, #4
 80008ce:	8019      	strh	r1, [r3, #0]
 80008d0:	3302      	adds	r3, #2
 80008d2:	0c0a      	lsrs	r2, r1, #16
 80008d4:	701a      	strb	r2, [r3, #0]
		ST7735_DrawString7x11(42,LINE_HEIGTH*4, status,Env.Menu.DANGER_TXT_Color, Env.Menu.DANGER_BGR_Color);
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <main+0x228>)
 80008d8:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <main+0x228>)
 80008de:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	460b      	mov	r3, r1
 80008e8:	2134      	movs	r1, #52	; 0x34
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f001 faac 	bl	8001e48 <ST7735_DrawString7x11>
		while(1);
 80008f0:	e7fe      	b.n	80008f0 <main+0x1e8>
								}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ST7735_Clear(Env.Menu.BGR_Color);
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <main+0x228>)
 80008f4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 f95f 	bl	8001bbc <ST7735_Clear>
	FS_GetFileList( &Env);
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <main+0x228>)
 8000900:	f003 fcb0 	bl	8004264 <FS_GetFileList>
	Env.Menu.NmbrAllPages = (uint32_t)(Env.Menu.NmbrAllFiles/ITEM_ON_PAGE_MAX);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <main+0x228>)
 8000906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <main+0x254>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <main+0x228>)
 8000914:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  while (1)
  {
	Menu(&Env);
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <main+0x228>)
 800091a:	f000 f895 	bl	8000a48 <Menu>
	Test(&Env);
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <main+0x228>)
 8000920:	f000 fbde 	bl	80010e0 <Test>
	Display(&Env);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <main+0x228>)
 8000926:	f7ff fc39 	bl	800019c <Display>
  {
 800092a:	e7f5      	b.n	8000918 <main+0x210>
 800092c:	080073e8 	.word	0x080073e8
 8000930:	200000f0 	.word	0x200000f0
 8000934:	20000290 	.word	0x20000290
 8000938:	40013000 	.word	0x40013000
 800093c:	40010c00 	.word	0x40010c00
 8000940:	40000400 	.word	0x40000400
 8000944:	080073ac 	.word	0x080073ac
 8000948:	080073b0 	.word	0x080073b0
 800094c:	080073b8 	.word	0x080073b8
 8000950:	080073c4 	.word	0x080073c4
 8000954:	080073d4 	.word	0x080073d4
 8000958:	080073e0 	.word	0x080073e0
 800095c:	38e38e39 	.word	0x38e38e39

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fe1b 	bl	80005a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800096a:	bf00      	nop
 800096c:	f7ff fe2c 	bl	80005c8 <LL_FLASH_GetLatency>
 8000970:	4603      	mov	r3, r0
 8000972:	2b02      	cmp	r3, #2
 8000974:	d1fa      	bne.n	800096c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000976:	f7ff fd5f 	bl	8000438 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800097a:	bf00      	nop
 800097c:	f7ff fd6a 	bl	8000454 <LL_RCC_HSE_IsReady>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d1fa      	bne.n	800097c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000986:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800098a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800098e:	f7ff fdef 	bl	8000570 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000992:	f7ff fdcd 	bl	8000530 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000996:	bf00      	nop
 8000998:	f7ff fdd8 	bl	800054c <LL_RCC_PLL_IsReady>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1fa      	bne.n	8000998 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fd88 	bl	80004b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80009a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009ac:	f7ff fd98 	bl	80004e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fda9 	bl	8000508 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fd5e 	bl	8000478 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009bc:	bf00      	nop
 80009be:	f7ff fd6f 	bl	80004a0 <LL_RCC_GetSysClkSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d1fa      	bne.n	80009be <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <SystemClock_Config+0x84>)
 80009ca:	f003 fc2b 	bl	8004224 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80009ce:	2000      	movs	r0, #0
 80009d0:	f001 fbd0 	bl	8002174 <HAL_InitTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009da:	f000 f805 	bl	80009e8 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	044aa200 	.word	0x044aa200

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <Error_Handler+0x6>

080009f0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <LL_GPIO_IsInputPinSet>:
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
	...

08000a48 <Menu>:
uint8_t FS_ReadFile(typeEnv *Env);
void ParseString(char  *str_in, char *data_out);

const uint16_t  COLORS565[140] = {0xF7DF, 0xFF5A, 0x07FF, 0x7FFA, 0xF7FF, 0xF7BB, 0xFF38, 0x0, 0xFF59, 0x001F, 0x895C, 0xA145, 0xDDD0, 0x5CF4, 0x7FE0, 0xD343, 0xFBEA, 0x64BD, 0xFFDB, 0xD8A7, 0x07FF, 0x11, 0x451, 0xBC21, 0xAD55, 0x320, 0xBDAD, 0x8811, 0x5345, 0xFC60, 0x9999, 0x8800, 0xECAF, 0x8DF1, 0x49F1, 0x2A69, 0x067A, 0x901A, 0xF8B2, 0x05FF, 0x6B4D, 0x1C9F, 0xB104, 0xFFDE, 0x2444, 0xF81F, 0xDEFB, 0xFFDF, 0xFEA0, 0xDD24, 0x8410, 0x400, 0xAFE5, 0xF7FE, 0xFB56, 0xCAEB, 0x4810, 0xFFFE, 0xF731, 0xE73F, 0xFF9E, 0x7FE0, 0xFFD9, 0xAEDC, 0xF410, 0xE7FF, 0xFFDA, 0xD69A, 0x9772, 0xFDB8, 0xFD0F, 0x2595, 0x867F, 0x7453, 0xB63B, 0xFFFC, 0x7, 0x3666, 0xFF9C, 0xF81F, 0x8000, 0x6675, 0x19, 0xBABA, 0x939B, 0x3D8E, 0x7B5D, 0x07D3, 0x4E99, 0xC0B0, 0x18CE, 0xF7FF, 0xFF3C, 0xFF36, 0xFEF5, 0x10, 0xFFBC, 0x8400, 0x6C64, 0xFD20, 0xFA20, 0xDB9A, 0xEF55, 0x9FD3, 0xAF7D, 0xDB92, 0xFF7A, 0xFED7, 0xCC27, 0xFE19, 0xDD1B, 0xB71C, 0x8010, 0xF800, 0xBC71, 0x435C, 0x8A22, 0xFC0E, 0xF52C, 0x2C4A, 0xFFBD, 0xA285, 0xC618, 0x867D, 0x6AD9, 0x7412, 0xFFDF, 0x07EF, 0x4416, 0xD5B1, 0x410, 0xDDFB, 0xFB08, 0x471A, 0xEC1D, 0xF6F6, 0xFFFF, 0xF7BE, 0xFFE0, 0x9E66 };
void Menu(typeEnv *Env)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	static uint32_t EncoderCount=0x7fff;
	uint32_t currentCount = LL_TIM_GetCounter(TIM3);
 8000a50:	4875      	ldr	r0, [pc, #468]	; (8000c28 <Menu+0x1e0>)
 8000a52:	f7ff ffd7 	bl	8000a04 <LL_TIM_GetCounter>
 8000a56:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t end_list = Env->Menu.NmbrOnPageFiles;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
	short int ActiveItem = (*Env).Menu.ActiveItem;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8000a64:	85fb      	strh	r3, [r7, #46]	; 0x2e
	short int ActivePage = (*Env).Menu.ActivePage;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000a6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	char *fileName = (*Env).FileNameForTest;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a74:	623b      	str	r3, [r7, #32]
	static uint8_t but_latch=0, but_press=0, indx=0, key=0;
	uint8_t but_OK=0, but_DWN=0, but_UP=0, but_ENC=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	77fb      	strb	r3, [r7, #31]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	77bb      	strb	r3, [r7, #30]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	777b      	strb	r3, [r7, #29]
 8000a82:	2300      	movs	r3, #0
 8000a84:	773b      	strb	r3, [r7, #28]

	char String[FILENAME_SIZE];


	if(f_EncoderRead == 1)
 8000a86:	4b69      	ldr	r3, [pc, #420]	; (8000c2c <Menu+0x1e4>)
 8000a88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000a92:	f043 0318 	orr.w	r3, r3, #24
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	f040 80c1 	bne.w	8000c20 <Menu+0x1d8>
	{
		f_EncoderRead = 0;
 8000a9e:	4b63      	ldr	r3, [pc, #396]	; (8000c2c <Menu+0x1e4>)
 8000aa0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000aaa:	f043 0318 	orr.w	r3, r3, #24
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	6013      	str	r3, [r2, #0]
		if(EncoderCount != currentCount  	)
 8000ab4:	4b5e      	ldr	r3, [pc, #376]	; (8000c30 <Menu+0x1e8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d066      	beq.n	8000b8c <Menu+0x144>
			{
				if(EncoderCount > currentCount  	)
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <Menu+0x1e8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d21e      	bcs.n	8000b06 <Menu+0xbe>
				{
					ActiveItem++;
 8000ac8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(ActiveItem >= end_list)
 8000ad4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d830      	bhi.n	8000b40 <Menu+0xf8>
						{
						ActiveItem = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
						ActivePage++;
 8000ae2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	85bb      	strh	r3, [r7, #44]	; 0x2c
						if(ActivePage > Env->Menu.NmbrAllPages) {ActivePage = Env->Menu.NmbrAllPages;}
 8000aee:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d921      	bls.n	8000b40 <Menu+0xf8>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000b04:	e01c      	b.n	8000b40 <Menu+0xf8>
						}
				}
				else if (EncoderCount < currentCount )
 8000b06:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <Menu+0x1e8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d917      	bls.n	8000b40 <Menu+0xf8>
				{
					ActiveItem--;
 8000b10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(ActiveItem < 0)
 8000b1c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da0d      	bge.n	8000b40 <Menu+0xf8>
						{
							ActiveItem = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	85fb      	strh	r3, [r7, #46]	; 0x2e
							ActivePage--;
 8000b28:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	85bb      	strh	r3, [r7, #44]	; 0x2c
							if(ActivePage < 0) {ActivePage = 0;}
 8000b34:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da01      	bge.n	8000b40 <Menu+0xf8>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
						}
				}

				if(ActivePage != (*Env).Menu.ActivePage)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8000b46:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d00c      	beq.n	8000b68 <Menu+0x120>
				{
					(*Env).Menu.ActivePage = ActivePage;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b52:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
					FS_GetFileList(Env);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f003 fb84 	bl	8004264 <FS_GetFileList>
					ST7735_Clear((*Env).Menu.BGR_Color);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f82a 	bl	8001bbc <ST7735_Clear>
				}
				EncoderCount = currentCount;
 8000b68:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <Menu+0x1e8>)
 8000b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6c:	6013      	str	r3, [r2, #0]
				(*Env).Menu.ActiveItem = ActiveItem;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b72:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				f_RefreshScreen = 1;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <Menu+0x1e4>)
 8000b78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b7c:	015b      	lsls	r3, r3, #5
 8000b7e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000b82:	f043 0314 	orr.w	r3, r3, #20
 8000b86:	461a      	mov	r2, r3
 8000b88:	2301      	movs	r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
			}

					/* обработка кнопки */
		but_ENC = LL_GPIO_IsInputPinSet(BUTTON_GPIO_Port, BUTTON_Pin)<<3;
 8000b8c:	4929      	ldr	r1, [pc, #164]	; (8000c34 <Menu+0x1ec>)
 8000b8e:	482a      	ldr	r0, [pc, #168]	; (8000c38 <Menu+0x1f0>)
 8000b90:	f7ff ff43 	bl	8000a1a <LL_GPIO_IsInputPinSet>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	773b      	strb	r3, [r7, #28]
		but_UP  = LL_GPIO_IsInputPinSet(BUT_UP_GPIO_Port, BUT_UP_Pin)<<2;
 8000b9c:	4927      	ldr	r1, [pc, #156]	; (8000c3c <Menu+0x1f4>)
 8000b9e:	4828      	ldr	r0, [pc, #160]	; (8000c40 <Menu+0x1f8>)
 8000ba0:	f7ff ff3b 	bl	8000a1a <LL_GPIO_IsInputPinSet>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	777b      	strb	r3, [r7, #29]
		but_OK  = LL_GPIO_IsInputPinSet(BUT_OK_GPIO_Port, BUT_OK_Pin)<<1;
 8000bac:	4925      	ldr	r1, [pc, #148]	; (8000c44 <Menu+0x1fc>)
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <Menu+0x1f8>)
 8000bb0:	f7ff ff33 	bl	8000a1a <LL_GPIO_IsInputPinSet>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	77fb      	strb	r3, [r7, #31]
		but_DWN = LL_GPIO_IsInputPinSet(BUT_DWN_GPIO_Port,BUT_DWN_Pin);
 8000bbc:	f240 1101 	movw	r1, #257	; 0x101
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <Menu+0x1f8>)
 8000bc2:	f7ff ff2a 	bl	8000a1a <LL_GPIO_IsInputPinSet>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	77bb      	strb	r3, [r7, #30]
		but_latch = but_ENC | but_UP | but_OK | but_DWN;
 8000bca:	7f3a      	ldrb	r2, [r7, #28]
 8000bcc:	7f7b      	ldrb	r3, [r7, #29]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	7ffb      	ldrb	r3, [r7, #31]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	7fbb      	ldrb	r3, [r7, #30]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <Menu+0x200>)
 8000be0:	701a      	strb	r2, [r3, #0]
		if(but_latch !=0xF)
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <Menu+0x200>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d006      	beq.n	8000bf8 <Menu+0x1b0>
		{
			but_press=1;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Menu+0x204>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
			key = but_latch;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <Menu+0x200>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <Menu+0x208>)
 8000bf6:	701a      	strb	r2, [r3, #0]
		}
		if( but_latch==0xF &&  but_press ==1)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <Menu+0x200>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d10f      	bne.n	8000c20 <Menu+0x1d8>
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <Menu+0x204>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10b      	bne.n	8000c20 <Menu+0x1d8>
		{
			but_press=0;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <Menu+0x204>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
			Keyboard_handler(Env, key);
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <Menu+0x208>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f81d 	bl	8000c54 <Keyboard_handler>
			key=0;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <Menu+0x208>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
					}*/
//
//		ST7735_DrawChar7x11(110,92, String,TXT_COLOR,BGR_COLOR);
	}

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40000400 	.word	0x40000400
 8000c2c:	20000290 	.word	0x20000290
 8000c30:	20000000 	.word	0x20000000
 8000c34:	04800080 	.word	0x04800080
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	04080008 	.word	0x04080008
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	04040004 	.word	0x04040004
 8000c48:	200000b0 	.word	0x200000b0
 8000c4c:	200000b1 	.word	0x200000b1
 8000c50:	200000b2 	.word	0x200000b2

08000c54 <Keyboard_handler>:

void Keyboard_handler(typeEnv *Env, uint8_t key)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
	char String[8]={0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
	sprintf(&String, "%X", key);
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4908      	ldr	r1, [pc, #32]	; (8000c94 <Keyboard_handler+0x40>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 ff76 	bl	8006b64 <siprintf>
	ST7735_DrawString7x11(100,92,String,TXT_COLOR,BGR_COLOR);
 8000c78:	f107 0208 	add.w	r2, r7, #8
 8000c7c:	2311      	movs	r3, #17
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	f24f 73df 	movw	r3, #63455	; 0xf7df
 8000c84:	215c      	movs	r1, #92	; 0x5c
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f001 f8de 	bl	8001e48 <ST7735_DrawString7x11>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	080073fc 	.word	0x080073fc

08000c98 <LL_APB2_GRP1_EnableClock>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ca2:	699a      	ldr	r2, [r3, #24]
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cae:	699a      	ldr	r2, [r3, #24]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d101      	bne.n	8000d04 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	b2db      	uxtb	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	330c      	adds	r3, #12
 8000d38:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	; 0x40
 8000d50:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fef9 	bl	8006b52 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000d6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d72:	f7ff ff91 	bl	8000c98 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000d76:	2004      	movs	r0, #4
 8000d78:	f7ff ff8e 	bl	8000c98 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000d7c:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000d80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d82:	2309      	movs	r3, #9
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_SPI1_Init+0xa0>)
 8000d94:	f002 ff78 	bl	8003c88 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000d98:	f244 0340 	movw	r3, #16448	; 0x4040
 8000d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_SPI1_Init+0xa0>)
 8000da8:	f002 ff6e 	bl	8003c88 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000db0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000db4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8000dc8:	2330      	movs	r3, #48	; 0x30
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI1_Init+0xa4>)
 8000de0:	f003 f84c 	bl	8003e7c <LL_SPI_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3740      	adds	r7, #64	; 0x40
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40013000 	.word	0x40013000

08000df4 <LL_SPI_TransmitReceive>:

/* USER CODE BEGIN 1 */
uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	while(	LL_SPI_IsActiveFlag_TXE(SPIx) == RESET	);
 8000e00:	bf00      	nop
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff72 	bl	8000cec <LL_SPI_IsActiveFlag_TXE>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f9      	beq.n	8000e02 <LL_SPI_TransmitReceive+0xe>
	LL_SPI_TransmitData8(SPIx, TxByte);
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	4619      	mov	r1, r3
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff88 	bl	8000d28 <LL_SPI_TransmitData8>

	while(	LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET	);
 8000e18:	bf00      	nop
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff54 	bl	8000cc8 <LL_SPI_IsActiveFlag_RXNE>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <LL_SPI_TransmitReceive+0x26>
	return LL_SPI_ReceiveData8(SPIx);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff72 	bl	8000d10 <LL_SPI_ReceiveData8>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f001 f977 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_1ms();
 8000ee6:	f000 f803 	bl	8000ef0 <timer_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <timer_1ms>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void timer_1ms(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	if (    (f_1ms = !f_1ms)==0        )
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <timer_1ms+0x38>)
 8000ef6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000efa:	015b      	lsls	r3, r3, #5
 8000efc:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf0c      	ite	eq
 8000f06:	2301      	moveq	r3, #1
 8000f08:	2300      	movne	r3, #0
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <timer_1ms+0x38>)
 8000f0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f12:	015b      	lsls	r3, r3, #5
 8000f14:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <timer_1ms+0x34>
	  {
	   Flags_1ms();
 8000f20:	f000 f804 	bl	8000f2c <Flags_1ms>
	  }
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000290 	.word	0x20000290

08000f2c <Flags_1ms>:

void Flags_1ms(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	f_1ms = 1; // user flag every 1 ms
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <Flags_1ms+0x38>)
 8000f32:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f36:	015b      	lsls	r3, r3, #5
 8000f38:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2301      	movs	r3, #1
 8000f40:	6013      	str	r3, [r2, #0]


	  if (--t_10ms == 0x00)
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <Flags_1ms+0x3c>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <Flags_1ms+0x3c>)
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <Flags_1ms+0x3c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <Flags_1ms+0x34>
	    {
	      t_10ms = cl_ms10;
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <Flags_1ms+0x3c>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	801a      	strh	r2, [r3, #0]
	      Flags_10msec();
 8000f5c:	f000 f806 	bl	8000f6c <Flags_10msec>
	    }
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000290 	.word	0x20000290
 8000f68:	20000004 	.word	0x20000004

08000f6c <Flags_10msec>:

void Flags_10msec()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	f_10ms = 1;		// user flag every 10 ms
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <Flags_10msec+0x54>)
 8000f72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	461a      	mov	r2, r3
 8000f82:	2301      	movs	r3, #1
 8000f84:	6013      	str	r3, [r2, #0]
	f_EncoderRead=1;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <Flags_10msec+0x54>)
 8000f88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000f92:	f043 0318 	orr.w	r3, r3, #24
 8000f96:	461a      	mov	r2, r3
 8000f98:	2301      	movs	r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]
	  if (--t_100ms == 0x00)
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <Flags_10msec+0x58>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <Flags_10msec+0x58>)
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <Flags_10msec+0x58>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <Flags_10msec+0x4e>
		{
		  t_100ms = cl_ms100;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <Flags_10msec+0x58>)
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	801a      	strh	r2, [r3, #0]
		  Flags_100ms();
 8000fb6:	f000 f807 	bl	8000fc8 <Flags_100ms>
		}
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000290 	.word	0x20000290
 8000fc4:	20000006 	.word	0x20000006

08000fc8 <Flags_100ms>:

void Flags_100ms(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	f_100ms = 1;		// user flag every 100 ms
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <Flags_100ms+0x3c>)
 8000fce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2301      	movs	r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]
	//f_EncoderRead = 1;
	  if (--t_sec == 0x00)
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <Flags_100ms+0x40>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <Flags_100ms+0x40>)
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <Flags_100ms+0x40>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d104      	bne.n	8001000 <Flags_100ms+0x38>
		{
		  t_sec = cl_sec;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <Flags_100ms+0x40>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	801a      	strh	r2, [r3, #0]
		  Flags_1s();
 8000ffc:	f000 f806 	bl	800100c <Flags_1s>
		}
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000290 	.word	0x20000290
 8001008:	20000008 	.word	0x20000008

0800100c <Flags_1s>:

void Flags_1s(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	f_1sec = 1;		// user flag every 1 sec
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <Flags_1s+0x54>)
 8001012:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 800101c:	f043 030c 	orr.w	r3, r3, #12
 8001020:	461a      	mov	r2, r3
 8001022:	2301      	movs	r3, #1
 8001024:	6013      	str	r3, [r2, #0]
	if (--t_min == 0x00)
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <Flags_1s+0x58>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <Flags_1s+0x58>)
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <Flags_1s+0x58>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10d      	bne.n	8001056 <Flags_1s+0x4a>
			{
				f_1min = 1;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <Flags_1s+0x54>)
 800103c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001040:	015b      	lsls	r3, r3, #5
 8001042:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6013      	str	r3, [r2, #0]
				t_min = cl_min;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <Flags_1s+0x58>)
 8001052:	223c      	movs	r2, #60	; 0x3c
 8001054:	801a      	strh	r2, [r3, #0]

			}
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000290 	.word	0x20000290
 8001064:	2000000a 	.word	0x2000000a

08001068 <_sbrk>:
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
 8001098:	f005 fd18 	bl	8006acc <__errno>
 800109c:	4602      	mov	r2, r0
 800109e:	230c      	movs	r3, #12
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20005000 	.word	0x20005000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	200000b4 	.word	0x200000b4
 80010d0:	20000798 	.word	0x20000798

080010d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <Test>:
 *      Author: aalexeev
 */
#include "main.h"

void Test(typeEnv *Env)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <LL_APB1_GRP1_EnableClock>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010fe:	69da      	ldr	r2, [r3, #28]
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <LL_APB2_GRP1_EnableClock>:
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4013      	ands	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <LL_TIM_DisableARRPreload>:
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d01c      	beq.n	80011c0 <LL_TIM_IC_SetActiveInput+0x4c>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d017      	beq.n	80011bc <LL_TIM_IC_SetActiveInput+0x48>
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d012      	beq.n	80011b8 <LL_TIM_IC_SetActiveInput+0x44>
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b40      	cmp	r3, #64	; 0x40
 8001196:	d00d      	beq.n	80011b4 <LL_TIM_IC_SetActiveInput+0x40>
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800119e:	d007      	beq.n	80011b0 <LL_TIM_IC_SetActiveInput+0x3c>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a6:	d101      	bne.n	80011ac <LL_TIM_IC_SetActiveInput+0x38>
 80011a8:	2305      	movs	r3, #5
 80011aa:	e00a      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011ac:	2306      	movs	r3, #6
 80011ae:	e008      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011b0:	2304      	movs	r3, #4
 80011b2:	e006      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e004      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e002      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80011c0:	2300      	movs	r3, #0
 80011c2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3318      	adds	r3, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LL_TIM_IC_SetActiveInput+0x90>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	440b      	add	r3, r1
 80011d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	490b      	ldr	r1, [pc, #44]	; (8001208 <LL_TIM_IC_SetActiveInput+0x94>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	4619      	mov	r1, r3
 80011e0:	2303      	movs	r3, #3
 80011e2:	408b      	lsls	r3, r1
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0c1b      	lsrs	r3, r3, #16
 80011ec:	7df9      	ldrb	r1, [r7, #23]
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <LL_TIM_IC_SetActiveInput+0x94>)
 80011f0:	5c41      	ldrb	r1, [r0, r1]
 80011f2:	408b      	lsls	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	08007608 	.word	0x08007608
 8001208:	08007610 	.word	0x08007610

0800120c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d01c      	beq.n	8001258 <LL_TIM_IC_SetPrescaler+0x4c>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d017      	beq.n	8001254 <LL_TIM_IC_SetPrescaler+0x48>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d012      	beq.n	8001250 <LL_TIM_IC_SetPrescaler+0x44>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b40      	cmp	r3, #64	; 0x40
 800122e:	d00d      	beq.n	800124c <LL_TIM_IC_SetPrescaler+0x40>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001236:	d007      	beq.n	8001248 <LL_TIM_IC_SetPrescaler+0x3c>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123e:	d101      	bne.n	8001244 <LL_TIM_IC_SetPrescaler+0x38>
 8001240:	2305      	movs	r3, #5
 8001242:	e00a      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 8001244:	2306      	movs	r3, #6
 8001246:	e008      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 8001248:	2304      	movs	r3, #4
 800124a:	e006      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 800124c:	2303      	movs	r3, #3
 800124e:	e004      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_TIM_IC_SetPrescaler+0x4e>
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3318      	adds	r3, #24
 8001260:	4619      	mov	r1, r3
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <LL_TIM_IC_SetPrescaler+0x90>)
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	440b      	add	r3, r1
 800126a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	490b      	ldr	r1, [pc, #44]	; (80012a0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001274:	5ccb      	ldrb	r3, [r1, r3]
 8001276:	4619      	mov	r1, r3
 8001278:	230c      	movs	r3, #12
 800127a:	408b      	lsls	r3, r1
 800127c:	43db      	mvns	r3, r3
 800127e:	401a      	ands	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	7df9      	ldrb	r1, [r7, #23]
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <LL_TIM_IC_SetPrescaler+0x94>)
 8001288:	5c41      	ldrb	r1, [r0, r1]
 800128a:	408b      	lsls	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	08007608 	.word	0x08007608
 80012a0:	08007610 	.word	0x08007610

080012a4 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d01c      	beq.n	80012f0 <LL_TIM_IC_SetFilter+0x4c>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d017      	beq.n	80012ec <LL_TIM_IC_SetFilter+0x48>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d012      	beq.n	80012e8 <LL_TIM_IC_SetFilter+0x44>
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b40      	cmp	r3, #64	; 0x40
 80012c6:	d00d      	beq.n	80012e4 <LL_TIM_IC_SetFilter+0x40>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ce:	d007      	beq.n	80012e0 <LL_TIM_IC_SetFilter+0x3c>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d101      	bne.n	80012dc <LL_TIM_IC_SetFilter+0x38>
 80012d8:	2305      	movs	r3, #5
 80012da:	e00a      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012dc:	2306      	movs	r3, #6
 80012de:	e008      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012e0:	2304      	movs	r3, #4
 80012e2:	e006      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012e4:	2303      	movs	r3, #3
 80012e6:	e004      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_TIM_IC_SetFilter+0x4e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3318      	adds	r3, #24
 80012f8:	4619      	mov	r1, r3
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <LL_TIM_IC_SetFilter+0x90>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	440b      	add	r3, r1
 8001302:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	490b      	ldr	r1, [pc, #44]	; (8001338 <LL_TIM_IC_SetFilter+0x94>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	4619      	mov	r1, r3
 8001310:	23f0      	movs	r3, #240	; 0xf0
 8001312:	408b      	lsls	r3, r1
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	7df9      	ldrb	r1, [r7, #23]
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <LL_TIM_IC_SetFilter+0x94>)
 8001320:	5c41      	ldrb	r1, [r0, r1]
 8001322:	408b      	lsls	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	08007608 	.word	0x08007608
 8001338:	08007610 	.word	0x08007610

0800133c <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d01c      	beq.n	8001388 <LL_TIM_IC_SetPolarity+0x4c>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d017      	beq.n	8001384 <LL_TIM_IC_SetPolarity+0x48>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d012      	beq.n	8001380 <LL_TIM_IC_SetPolarity+0x44>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b40      	cmp	r3, #64	; 0x40
 800135e:	d00d      	beq.n	800137c <LL_TIM_IC_SetPolarity+0x40>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001366:	d007      	beq.n	8001378 <LL_TIM_IC_SetPolarity+0x3c>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136e:	d101      	bne.n	8001374 <LL_TIM_IC_SetPolarity+0x38>
 8001370:	2305      	movs	r3, #5
 8001372:	e00a      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 8001374:	2306      	movs	r3, #6
 8001376:	e008      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 8001378:	2304      	movs	r3, #4
 800137a:	e006      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 800137c:	2303      	movs	r3, #3
 800137e:	e004      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 8001380:	2302      	movs	r3, #2
 8001382:	e002      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <LL_TIM_IC_SetPolarity+0x4e>
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	490a      	ldr	r1, [pc, #40]	; (80013bc <LL_TIM_IC_SetPolarity+0x80>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	4619      	mov	r1, r3
 8001398:	230a      	movs	r3, #10
 800139a:	408b      	lsls	r3, r1
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4906      	ldr	r1, [pc, #24]	; (80013bc <LL_TIM_IC_SetPolarity+0x80>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	4619      	mov	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	408b      	lsls	r3, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80013b2:	bf00      	nop
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	08007618 	.word	0x08007618

080013c0 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b092      	sub	sp, #72	; 0x48
 800142c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2220      	movs	r2, #32
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f005 fb7d 	bl	8006b52 <memset>

  htim1.Instance = TIM1;
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MX_TIM1_Init+0xf8>)
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <MX_TIM1_Init+0xfc>)
 800145c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001460:	2248      	movs	r2, #72	; 0x48
 8001462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <MX_TIM1_Init+0xf8>)
 800146c:	2264      	movs	r2, #100	; 0x64
 800146e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <MX_TIM1_Init+0xf8>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001484:	f001 fa58 	bl	8002938 <HAL_TIM_PWM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800148e:	f7ff faab 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800149e:	4619      	mov	r1, r3
 80014a0:	481f      	ldr	r0, [pc, #124]	; (8001520 <MX_TIM1_Init+0xf8>)
 80014a2:	f002 f9c9 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80014ac:	f7ff fa9c 	bl	80009e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	220c      	movs	r2, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_TIM1_Init+0xf8>)
 80014d2:	f001 fcc5 	bl	8002e60 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80014dc:	f7ff fa84 	bl	80009e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001504:	f002 fa42 	bl	800398c <HAL_TIMEx_ConfigBreakDeadTime>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800150e:	f7ff fa6b 	bl	80009e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_TIM1_Init+0xf8>)
 8001514:	f000 f92a 	bl	800176c <HAL_TIM_MspPostInit>

}
 8001518:	bf00      	nop
 800151a:	3748      	adds	r7, #72	; 0x48
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000294 	.word	0x20000294
 8001524:	40012c00 	.word	0x40012c00

08001528 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <MX_TIM2_Init+0xa0>)
 8001546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_TIM2_Init+0xa0>)
 800154e:	2247      	movs	r2, #71	; 0x47
 8001550:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM2_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM2_Init+0xa0>)
 800155a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800155e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_TIM2_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM2_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_TIM2_Init+0xa0>)
 800156e:	f001 fa8d 	bl	8002a8c <HAL_TIM_IC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001578:	f7ff fa36 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_TIM2_Init+0xa0>)
 800158c:	f002 f954 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001596:	f7ff fa27 	bl	80009e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM2_Init+0xa0>)
 80015b2:	f001 fb15 	bl	8002be0 <HAL_TIM_IC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80015bc:	f7ff fa14 	bl	80009e8 <Error_Handler>
  }

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002dc 	.word	0x200002dc

080015cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7ff fd7f 	bl	80010f4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80015f6:	2008      	movs	r0, #8
 80015f8:	f7ff fd94 	bl	8001124 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80015fc:	f243 0330 	movw	r3, #12336	; 0x3030
 8001600:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001602:	2304      	movs	r3, #4
 8001604:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	4829      	ldr	r0, [pc, #164]	; (80016b0 <MX_TIM3_Init+0xe4>)
 800160c:	f002 fb3c 	bl	8003c88 <LL_GPIO_Init>

  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8001610:	2103      	movs	r1, #3
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001614:	f7ff fed4 	bl	80013c0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161c:	2101      	movs	r1, #1
 800161e:	4825      	ldr	r0, [pc, #148]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001620:	f7ff fda8 	bl	8001174 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV2);
 8001624:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001628:	2101      	movs	r1, #1
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800162c:	f7ff fdee 	bl	800120c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV4_N6);
 8001630:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001634:	2101      	movs	r1, #1
 8001636:	481f      	ldr	r0, [pc, #124]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001638:	f7ff fe34 	bl	80012a4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 800163c:	2200      	movs	r2, #0
 800163e:	2101      	movs	r1, #1
 8001640:	481c      	ldr	r0, [pc, #112]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001642:	f7ff fe7b 	bl	800133c <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164a:	2110      	movs	r1, #16
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800164e:	f7ff fd91 	bl	8001174 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV2);
 8001652:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001656:	2110      	movs	r1, #16
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800165a:	f7ff fdd7 	bl	800120c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV4_N6);
 800165e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001662:	2110      	movs	r1, #16
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001666:	f7ff fe1d 	bl	80012a4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800166a:	2200      	movs	r2, #0
 800166c:	2110      	movs	r1, #16
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001670:	f7ff fe64 	bl	800133c <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 800167c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001680:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800168e:	f002 fd29 	bl	80040e4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_TIM3_Init+0xe8>)
 8001694:	f7ff fd5e 	bl	8001154 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001698:	2100      	movs	r1, #0
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_TIM3_Init+0xe8>)
 800169c:	f7ff fea2 	bl	80013e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_TIM3_Init+0xe8>)
 80016a2:	f7ff feb1 	bl	8001408 <LL_TIM_DisableMasterSlaveMode>

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40000400 	.word	0x40000400

080016b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_TIM_PWM_MspInit+0x34>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10b      	bne.n	80016e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_PWM_MspInit+0x38>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_TIM_PWM_MspInit+0x38>)
 80016d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_TIM_PWM_MspInit+0x38>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001712:	d123      	bne.n	800175c <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	61d3      	str	r3, [r2, #28]
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_TIM_IC_MspInit+0x70>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <HAL_TIM_IC_MspInit+0x74>)
 8001758:	f000 fe82 	bl	8002460 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	40010800 	.word	0x40010800

0800176c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x5c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d118      	bne.n	80017be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_TIM_MspPostInit+0x60>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_TIM_MspPostInit+0x60>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_TIM_MspPostInit+0x60>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_TIM_MspPostInit+0x64>)
 80017ba:	f000 fe51 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010800 	.word	0x40010800

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017d6:	e003      	b.n	80017e0 <LoopCopyDataInit>

080017d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017de:	3104      	adds	r1, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017e8:	d3f6      	bcc.n	80017d8 <CopyDataInit>
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017ec:	e002      	b.n	80017f4 <LoopFillZerobss>

080017ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017f0:	f842 3b04 	str.w	r3, [r2], #4

080017f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017f8:	d3f9      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fa:	f7ff fc6b 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f005 f96b 	bl	8006ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7fe ff81 	bl	8000708 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r3, =_sidata
 8001808:	08007f7c 	.word	0x08007f7c
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001810:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8001814:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8001818:	20000798 	.word	0x20000798

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>
	...

08001820 <ST7735_write>:

uint8_t LL_SPI_TransmitReceive(SPI_TypeDef* SPIx, uint8_t TxByte);


void ST7735_write(uint8_t data)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
CS_LOW_ST7735  ;
 800182a:	2200      	movs	r2, #0
 800182c:	2110      	movs	r1, #16
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <ST7735_write+0x30>)
 8001830:	f001 f850 	bl	80028d4 <HAL_GPIO_WritePin>
LL_SPI_TransmitReceive(SPI1, data);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <ST7735_write+0x34>)
 800183a:	f7ff fadb 	bl	8000df4 <LL_SPI_TransmitReceive>
CS_HIGH_ST7735 ;
 800183e:	2201      	movs	r2, #1
 8001840:	2110      	movs	r1, #16
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <ST7735_write+0x30>)
 8001844:	f001 f846 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40010800 	.word	0x40010800
 8001854:	40013000 	.word	0x40013000

08001858 <ST7735_SendData>:
#define ST7735_Send(x) ST7735_write(x)

void ST7735_SendData(uint8_t data)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	A0_HIGH_ST7735 ; //A0_HIGH;
 8001862:	2201      	movs	r2, #1
 8001864:	2108      	movs	r1, #8
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <ST7735_SendData+0x24>)
 8001868:	f001 f834 	bl	80028d4 <HAL_GPIO_WritePin>
	ST7735_write(data);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffd6 	bl	8001820 <ST7735_write>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010800 	.word	0x40010800

08001880 <ST7735_SendCmd>:

void ST7735_SendCmd(uint8_t cmd)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	A0_LOW_ST7735 ; //A0_LOW;
 800188a:	2200      	movs	r2, #0
 800188c:	2108      	movs	r1, #8
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <ST7735_SendCmd+0x24>)
 8001890:	f001 f820 	bl	80028d4 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffc2 	bl	8001820 <ST7735_write>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40010800 	.word	0x40010800

080018a8 <HAL_ST7735_Init>:

void HAL_ST7735_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
/*#1*/
    CS_HIGH_ST7735 ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	2110      	movs	r1, #16
 80018b0:	489d      	ldr	r0, [pc, #628]	; (8001b28 <HAL_ST7735_Init+0x280>)
 80018b2:	f001 f80f 	bl	80028d4 <HAL_GPIO_WritePin>
	RESET_HIGH_ST7735 ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	2102      	movs	r1, #2
 80018ba:	489b      	ldr	r0, [pc, #620]	; (8001b28 <HAL_ST7735_Init+0x280>)
 80018bc:	f001 f80a 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f000 fca3 	bl	800220c <HAL_Delay>
	RESET_LOW_ST7735 ;
 80018c6:	2200      	movs	r2, #0
 80018c8:	2102      	movs	r1, #2
 80018ca:	4897      	ldr	r0, [pc, #604]	; (8001b28 <HAL_ST7735_Init+0x280>)
 80018cc:	f001 f802 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f000 fc9b 	bl	800220c <HAL_Delay>
	RESET_HIGH_ST7735 ;
 80018d6:	2201      	movs	r2, #1
 80018d8:	2102      	movs	r1, #2
 80018da:	4893      	ldr	r0, [pc, #588]	; (8001b28 <HAL_ST7735_Init+0x280>)
 80018dc:	f000 fffa 	bl	80028d4 <HAL_GPIO_WritePin>
    CS_LOW_ST7735 ;
 80018e0:	2200      	movs	r2, #0
 80018e2:	2110      	movs	r1, #16
 80018e4:	4890      	ldr	r0, [pc, #576]	; (8001b28 <HAL_ST7735_Init+0x280>)
 80018e6:	f000 fff5 	bl	80028d4 <HAL_GPIO_WritePin>
	
	ST7735_SendCmd(ST7735_SWRESET);// программный ресет
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ffc8 	bl	8001880 <ST7735_SendCmd>
	HAL_Delay(150);
 80018f0:	2096      	movs	r0, #150	; 0x96
 80018f2:	f000 fc8b 	bl	800220c <HAL_Delay>
	
	ST7735_SendCmd(ST7735_SLPOUT); // выход из спящего режима
 80018f6:	2011      	movs	r0, #17
 80018f8:	f7ff ffc2 	bl	8001880 <ST7735_SendCmd>
	HAL_Delay(500);
 80018fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001900:	f000 fc84 	bl	800220c <HAL_Delay>
	
	ST7735_SendCmd(ST7735_FRMCTR1);//FRMCTR1 (B1h): Frame Rate Control (In normal mode/ Full colors)
 8001904:	20b1      	movs	r0, #177	; 0xb1
 8001906:	f7ff ffbb 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff ffa4 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001910:	202c      	movs	r0, #44	; 0x2c
 8001912:	f7ff ffa1 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8001916:	202d      	movs	r0, #45	; 0x2d
 8001918:	f7ff ff9e 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR2);//Frame Rate Control (In Idle mode/ 8-colors)
 800191c:	20b2      	movs	r0, #178	; 0xb2
 800191e:	f7ff ffaf 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff ff98 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001928:	202c      	movs	r0, #44	; 0x2c
 800192a:	f7ff ff95 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2D);
 800192e:	202d      	movs	r0, #45	; 0x2d
 8001930:	f7ff ff92 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_FRMCTR3);//Frame Rate Control (In Partial mode/ full colors)
 8001934:	20b3      	movs	r0, #179	; 0xb3
 8001936:	f7ff ffa3 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x01);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff ff8c 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001940:	202c      	movs	r0, #44	; 0x2c
 8001942:	f7ff ff89 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8001946:	202d      	movs	r0, #45	; 0x2d
 8001948:	f7ff ff86 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x01);
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ff83 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001952:	202c      	movs	r0, #44	; 0x2c
 8001954:	f7ff ff80 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8001958:	202d      	movs	r0, #45	; 0x2d
 800195a:	f7ff ff7d 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVCTR); //  Display Inversion Control
 800195e:	20b4      	movs	r0, #180	; 0xb4
 8001960:	f7ff ff8e 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x07);
 8001964:	2007      	movs	r0, #7
 8001966:	f7ff ff77 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR1);
 800196a:	20c0      	movs	r0, #192	; 0xc0
 800196c:	f7ff ff88 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0xA2);
 8001970:	20a2      	movs	r0, #162	; 0xa2
 8001972:	f7ff ff71 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x02);
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff ff6e 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x84);
 800197c:	2084      	movs	r0, #132	; 0x84
 800197e:	f7ff ff6b 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR2);
 8001982:	20c1      	movs	r0, #193	; 0xc1
 8001984:	f7ff ff7c 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0xC5);
 8001988:	20c5      	movs	r0, #197	; 0xc5
 800198a:	f7ff ff65 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR3);
 800198e:	20c2      	movs	r0, #194	; 0xc2
 8001990:	f7ff ff76 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x0A);
 8001994:	200a      	movs	r0, #10
 8001996:	f7ff ff5f 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff ff5c 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR4);
 80019a0:	20c3      	movs	r0, #195	; 0xc3
 80019a2:	f7ff ff6d 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 80019a6:	208a      	movs	r0, #138	; 0x8a
 80019a8:	f7ff ff56 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2A);
 80019ac:	202a      	movs	r0, #42	; 0x2a
 80019ae:	f7ff ff53 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_PWCTR5);
 80019b2:	20c4      	movs	r0, #196	; 0xc4
 80019b4:	f7ff ff64 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x8A);
 80019b8:	208a      	movs	r0, #138	; 0x8a
 80019ba:	f7ff ff4d 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0xEE);
 80019be:	20ee      	movs	r0, #238	; 0xee
 80019c0:	f7ff ff4a 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_VMCTR1);
 80019c4:	20c5      	movs	r0, #197	; 0xc5
 80019c6:	f7ff ff5b 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x0E);
 80019ca:	200e      	movs	r0, #14
 80019cc:	f7ff ff44 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_INVOFF);
 80019d0:	2020      	movs	r0, #32
 80019d2:	f7ff ff55 	bl	8001880 <ST7735_SendCmd>
	
	ST7735_SendCmd(ST7735_MADCTL);	//
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff52 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0xC8);			// RGB =1 => BGR color filter panel)
 80019dc:	20c8      	movs	r0, #200	; 0xc8
 80019de:	f7ff ff3b 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_COLMOD);
 80019e2:	203a      	movs	r0, #58	; 0x3a
 80019e4:	f7ff ff4c 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x05);
 80019e8:	2005      	movs	r0, #5
 80019ea:	f7ff ff35 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_CASET);
 80019ee:	202a      	movs	r0, #42	; 0x2a
 80019f0:	f7ff ff46 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ff2f 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff ff2c 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff ff29 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x7F);
 8001a06:	207f      	movs	r0, #127	; 0x7f
 8001a08:	f7ff ff26 	bl	8001858 <ST7735_SendData>

	ST7735_SendCmd(ST7735_RASET);
 8001a0c:	202b      	movs	r0, #43	; 0x2b
 8001a0e:	f7ff ff37 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff ff20 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff ff1d 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ff1a 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x9F);
 8001a24:	209f      	movs	r0, #159	; 0x9f
 8001a26:	f7ff ff17 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRP1);
 8001a2a:	20e0      	movs	r0, #224	; 0xe0
 8001a2c:	f7ff ff28 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x02);
 8001a30:	2002      	movs	r0, #2
 8001a32:	f7ff ff11 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x1c);
 8001a36:	201c      	movs	r0, #28
 8001a38:	f7ff ff0e 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x07);
 8001a3c:	2007      	movs	r0, #7
 8001a3e:	f7ff ff0b 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x12);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff ff08 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x37);
 8001a48:	2037      	movs	r0, #55	; 0x37
 8001a4a:	f7ff ff05 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x32);
 8001a4e:	2032      	movs	r0, #50	; 0x32
 8001a50:	f7ff ff02 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x29);
 8001a54:	2029      	movs	r0, #41	; 0x29
 8001a56:	f7ff feff 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2d);
 8001a5a:	202d      	movs	r0, #45	; 0x2d
 8001a5c:	f7ff fefc 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x29);
 8001a60:	2029      	movs	r0, #41	; 0x29
 8001a62:	f7ff fef9 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x25);
 8001a66:	2025      	movs	r0, #37	; 0x25
 8001a68:	f7ff fef6 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2B);
 8001a6c:	202b      	movs	r0, #43	; 0x2b
 8001a6e:	f7ff fef3 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x39);	
 8001a72:	2039      	movs	r0, #57	; 0x39
 8001a74:	f7ff fef0 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff feed 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x01);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff feea 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x03);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f7ff fee7 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x10);
 8001a8a:	2010      	movs	r0, #16
 8001a8c:	f7ff fee4 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_GMCTRN1);
 8001a90:	20e1      	movs	r0, #225	; 0xe1
 8001a92:	f7ff fef5 	bl	8001880 <ST7735_SendCmd>
	ST7735_SendData(0x03);
 8001a96:	2003      	movs	r0, #3
 8001a98:	f7ff fede 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x1d);
 8001a9c:	201d      	movs	r0, #29
 8001a9e:	f7ff fedb 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x07);
 8001aa2:	2007      	movs	r0, #7
 8001aa4:	f7ff fed8 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x06);
 8001aa8:	2006      	movs	r0, #6
 8001aaa:	f7ff fed5 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8001aae:	202e      	movs	r0, #46	; 0x2e
 8001ab0:	f7ff fed2 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2C);
 8001ab4:	202c      	movs	r0, #44	; 0x2c
 8001ab6:	f7ff fecf 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x29);
 8001aba:	2029      	movs	r0, #41	; 0x29
 8001abc:	f7ff fecc 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2D);
 8001ac0:	202d      	movs	r0, #45	; 0x2d
 8001ac2:	f7ff fec9 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8001ac6:	202e      	movs	r0, #46	; 0x2e
 8001ac8:	f7ff fec6 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x2E);
 8001acc:	202e      	movs	r0, #46	; 0x2e
 8001ace:	f7ff fec3 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x37);
 8001ad2:	2037      	movs	r0, #55	; 0x37
 8001ad4:	f7ff fec0 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x3F);	
 8001ad8:	203f      	movs	r0, #63	; 0x3f
 8001ada:	f7ff febd 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff feba 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff feb7 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x02);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f7ff feb4 	bl	8001858 <ST7735_SendData>
	ST7735_SendData(0x10);
 8001af0:	2010      	movs	r0, #16
 8001af2:	f7ff feb1 	bl	8001858 <ST7735_SendData>
	
	ST7735_SendCmd(ST7735_NORON);//  Normal Display Mode On
 8001af6:	2013      	movs	r0, #19
 8001af8:	f7ff fec2 	bl	8001880 <ST7735_SendCmd>
	HAL_Delay(10);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f000 fb85 	bl	800220c <HAL_Delay>
	
	ST7735_SendCmd(ST7735_DISPON); // Display On
 8001b02:	2029      	movs	r0, #41	; 0x29
 8001b04:	f7ff febc 	bl	8001880 <ST7735_SendCmd>
	HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f000 fb7f 	bl	800220c <HAL_Delay>
	
	ST7735_SendCmd(ST7735_MADCTL);  // Memory Data Access Control
 8001b0e:	2036      	movs	r0, #54	; 0x36
 8001b10:	f7ff feb6 	bl	8001880 <ST7735_SendCmd>
#ifdef VERTICAL
	ST7735_SendData(0x00);		    // Parameter D7 D6 D5 D4 D3  D2 D1 D0
									//			 MY MX MV ML RGB MH x  x
#endif									//           0  1  1  0   0  0  0  0   -> 0x60 - rotate display 90
	ST7735_SendData(0x60);
 8001b14:	2060      	movs	r0, #96	; 0x60
 8001b16:	f7ff fe9f 	bl	8001858 <ST7735_SendData>

	CS_HIGH_ST7735 ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <HAL_ST7735_Init+0x280>)
 8001b20:	f000 fed8 	bl	80028d4 <HAL_GPIO_WritePin>

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010800 	.word	0x40010800

08001b2c <ST7735_AddrSet>:




void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	803b      	strh	r3, [r7, #0]
  ST7735_SendCmd(ST7735_CASET); // Column address set
 8001b4a:	202a      	movs	r0, #42	; 0x2a
 8001b4c:	f7ff fe98 	bl	8001880 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	2108      	movs	r1, #8
 8001b54:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <ST7735_AddrSet+0x8c>)
 8001b56:	f000 febd 	bl	80028d4 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fe60 	bl	8001820 <ST7735_write>
	ST7735_write(XS);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe5b 	bl	8001820 <ST7735_write>
	ST7735_write(0x00);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fe58 	bl	8001820 <ST7735_write>
	ST7735_write(XE);
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe53 	bl	8001820 <ST7735_write>

  ST7735_SendCmd(ST7735_RASET); // Row address set
 8001b7a:	202b      	movs	r0, #43	; 0x2b
 8001b7c:	f7ff fe80 	bl	8001880 <ST7735_SendCmd>
	A0_HIGH_ST7735 ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	2108      	movs	r1, #8
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <ST7735_AddrSet+0x8c>)
 8001b86:	f000 fea5 	bl	80028d4 <HAL_GPIO_WritePin>
	ST7735_write(0x00);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fe48 	bl	8001820 <ST7735_write>
	ST7735_write(YS);
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fe43 	bl	8001820 <ST7735_write>
	ST7735_write(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fe40 	bl	8001820 <ST7735_write>
	ST7735_write(YE);
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fe3b 	bl	8001820 <ST7735_write>

  ST7735_SendCmd(ST7735_RAMWR); // Memory write
 8001baa:	202c      	movs	r0, #44	; 0x2c
 8001bac:	f7ff fe68 	bl	8001880 <ST7735_SendCmd>
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	40010800 	.word	0x40010800

08001bbc <ST7735_Clear>:

void ST7735_Clear(uint16_t Color)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
	//	ST7735_Send(Color);


	uint16_t i;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(0,0,WIDTH+1,HEIGHT+1);
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	22a0      	movs	r2, #160	; 0xa0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ffa7 	bl	8001b2c <ST7735_AddrSet>
	A0_HIGH_ST7735 ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	2108      	movs	r1, #8
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <ST7735_Clear+0x58>)
 8001be4:	f000 fe76 	bl	80028d4 <HAL_GPIO_WritePin>
	for(i=0;i<20480;i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	81fb      	strh	r3, [r7, #14]
 8001bec:	e00a      	b.n	8001c04 <ST7735_Clear+0x48>
	{
		ST7735_write(CH);
 8001bee:	7b3b      	ldrb	r3, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe15 	bl	8001820 <ST7735_write>
		ST7735_write(CL);
 8001bf6:	7b7b      	ldrb	r3, [r7, #13]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe11 	bl	8001820 <ST7735_write>
	for(i=0;i<20480;i++)
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	3301      	adds	r3, #1
 8001c02:	81fb      	strh	r3, [r7, #14]
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001c0a:	d3f0      	bcc.n	8001bee <ST7735_Clear+0x32>
	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010800 	.word	0x40010800

08001c18 <ST7735_DrawHLine>:
	ST7735_Send(CH);
	ST7735_Send(CL);
}

void ST7735_DrawHLine(uint8_t x,uint8_t x1,uint8_t y,uint16_t Color)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4604      	mov	r4, r0
 8001c20:	4608      	mov	r0, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	717b      	strb	r3, [r7, #5]
 8001c32:	4613      	mov	r3, r2
 8001c34:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x1,y);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	b298      	uxth	r0, r3
 8001c46:	797b      	ldrb	r3, [r7, #5]
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	797b      	ldrb	r3, [r7, #5]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f7ff ff6b 	bl	8001b2c <ST7735_AddrSet>
	len = x1-x;
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 8001c62:	2201      	movs	r2, #1
 8001c64:	2108      	movs	r1, #8
 8001c66:	480c      	ldr	r0, [pc, #48]	; (8001c98 <ST7735_DrawHLine+0x80>)
 8001c68:	f000 fe34 	bl	80028d4 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	81fb      	strh	r3, [r7, #14]
 8001c70:	e00a      	b.n	8001c88 <ST7735_DrawHLine+0x70>
	{
		ST7735_Send(CH);
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fdd3 	bl	8001820 <ST7735_write>
		ST7735_Send(CL);
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdcf 	bl	8001820 <ST7735_write>
	for(i=0;i<len;i++)
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	3301      	adds	r3, #1
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	89fa      	ldrh	r2, [r7, #14]
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3f0      	bcc.n	8001c72 <ST7735_DrawHLine+0x5a>
	}
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	40010800 	.word	0x40010800

08001c9c <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x,uint8_t y,uint8_t y1,uint16_t Color)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71bb      	strb	r3, [r7, #6]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	717b      	strb	r3, [r7, #5]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	807b      	strh	r3, [r7, #2]
	uint16_t i,len;
	uint8_t CL,CH;
	CL = Color & 0xFF;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	737b      	strb	r3, [r7, #13]
	CH = (Color>>8) & 0xFF;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	733b      	strb	r3, [r7, #12]
	ST7735_AddrSet(x,y,x,y1);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	b298      	uxth	r0, r3
 8001cca:	79bb      	ldrb	r3, [r7, #6]
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f7ff ff29 	bl	8001b2c <ST7735_AddrSet>
	len = y1-y;
 8001cda:	797b      	ldrb	r3, [r7, #5]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	817b      	strh	r3, [r7, #10]
	A0_HIGH_ST7735;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2108      	movs	r1, #8
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <ST7735_DrawVLine+0x80>)
 8001cec:	f000 fdf2 	bl	80028d4 <HAL_GPIO_WritePin>
	for(i=0;i<len;i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	81fb      	strh	r3, [r7, #14]
 8001cf4:	e00a      	b.n	8001d0c <ST7735_DrawVLine+0x70>
	{
		ST7735_Send(CH);
 8001cf6:	7b3b      	ldrb	r3, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fd91 	bl	8001820 <ST7735_write>
		ST7735_Send(CL);
 8001cfe:	7b7b      	ldrb	r3, [r7, #13]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fd8d 	bl	8001820 <ST7735_write>
	for(i=0;i<len;i++)
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	81fb      	strh	r3, [r7, #14]
 8001d0c:	89fa      	ldrh	r2, [r7, #14]
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3f0      	bcc.n	8001cf6 <ST7735_DrawVLine+0x5a>
	}
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	40010800 	.word	0x40010800

08001d20 <ST7735_DrawChar7x11>:
	}
}


void ST7735_DrawChar7x11(uint8_t x,uint8_t y,uint8_t chr,uint16_t color,uint16_t background_color)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	4603      	mov	r3, r0
 8001d34:	71bb      	strb	r3, [r7, #6]
 8001d36:	460b      	mov	r3, r1
 8001d38:	717b      	strb	r3, [r7, #5]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	uint8_t CH,CL,BCH,BCL;
	uint8_t buffer[11];	// содержит код символа uint8_t chr
	
	CL = color & 0xFF;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	777b      	strb	r3, [r7, #29]
	CH = (color>>8) & 0xFF;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	773b      	strb	r3, [r7, #28]
	
	BCL = background_color & 0xFF;
 8001d4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d4c:	76fb      	strb	r3, [r7, #27]
	BCH = (background_color>>8) & 0xFF;
 8001d4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	76bb      	strb	r3, [r7, #26]
	
	memcpy(buffer,&Font7x11[(chr-32)*11],11);	// 32 - символ пробела - с него начинаются символы алфавита ASCII;
 8001d56:	797b      	ldrb	r3, [r7, #5]
 8001d58:	f1a3 0220 	sub.w	r2, r3, #32
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	4a36      	ldr	r2, [pc, #216]	; (8001e40 <ST7735_DrawChar7x11+0x120>)
 8001d68:	441a      	add	r2, r3
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	6810      	ldr	r0, [r2, #0]
 8001d70:	6851      	ldr	r1, [r2, #4]
 8001d72:	c303      	stmia	r3!, {r0, r1}
 8001d74:	8911      	ldrh	r1, [r2, #8]
 8001d76:	7a92      	ldrb	r2, [r2, #10]
 8001d78:	8019      	strh	r1, [r3, #0]
 8001d7a:	709a      	strb	r2, [r3, #2]
												//таблица шрифтов начинается с символа пробела
												// копируем от начала символа, в таблице шрифтов, 11 элементов,
												//из 11 элементов состоит один символ шрифта
	ST7735_AddrSet(x,y,x+7,y+11);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	b298      	uxth	r0, r3
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	b299      	uxth	r1, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3307      	adds	r3, #7
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	330b      	adds	r3, #11
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f7ff feca 	bl	8001b2c <ST7735_AddrSet>
	A0_HIGH_ST7735;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4829      	ldr	r0, [pc, #164]	; (8001e44 <ST7735_DrawChar7x11+0x124>)
 8001d9e:	f000 fd99 	bl	80028d4 <HAL_GPIO_WritePin>
	for(j=0;j<11;j++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	77bb      	strb	r3, [r7, #30]
 8001da6:	e032      	b.n	8001e0e <ST7735_DrawChar7x11+0xee>
	{
		for(i=0;i<7;i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	77fb      	strb	r3, [r7, #31]
 8001dac:	e021      	b.n	8001df2 <ST7735_DrawChar7x11+0xd2>
		{
			if((buffer[j] & (1<<i))==0)
 8001dae:	7fbb      	ldrb	r3, [r7, #30]
 8001db0:	f107 0220 	add.w	r2, r7, #32
 8001db4:	4413      	add	r3, r2
 8001db6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	fa42 f303 	asr.w	r3, r2, r3
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d108      	bne.n	8001ddc <ST7735_DrawChar7x11+0xbc>
			{
				ST7735_write(BCH);
 8001dca:	7ebb      	ldrb	r3, [r7, #26]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fd27 	bl	8001820 <ST7735_write>
				ST7735_write(BCL);
 8001dd2:	7efb      	ldrb	r3, [r7, #27]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd23 	bl	8001820 <ST7735_write>
 8001dda:	e007      	b.n	8001dec <ST7735_DrawChar7x11+0xcc>
			}
			else
			{
				ST7735_write(CH);
 8001ddc:	7f3b      	ldrb	r3, [r7, #28]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fd1e 	bl	8001820 <ST7735_write>
				ST7735_write(CL);
 8001de4:	7f7b      	ldrb	r3, [r7, #29]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fd1a 	bl	8001820 <ST7735_write>
		for(i=0;i<7;i++)
 8001dec:	7ffb      	ldrb	r3, [r7, #31]
 8001dee:	3301      	adds	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d9da      	bls.n	8001dae <ST7735_DrawChar7x11+0x8e>
			}			
		}
		ST7735_write(BCH);
 8001df8:	7ebb      	ldrb	r3, [r7, #26]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fd10 	bl	8001820 <ST7735_write>
		ST7735_write(BCL);
 8001e00:	7efb      	ldrb	r3, [r7, #27]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd0c 	bl	8001820 <ST7735_write>
	for(j=0;j<11;j++)
 8001e08:	7fbb      	ldrb	r3, [r7, #30]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	77bb      	strb	r3, [r7, #30]
 8001e0e:	7fbb      	ldrb	r3, [r7, #30]
 8001e10:	2b0a      	cmp	r3, #10
 8001e12:	d9c9      	bls.n	8001da8 <ST7735_DrawChar7x11+0x88>
	}
	for(i=0;i<8;i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	e00a      	b.n	8001e30 <ST7735_DrawChar7x11+0x110>
	{
		ST7735_write(BCH);
 8001e1a:	7ebb      	ldrb	r3, [r7, #26]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fcff 	bl	8001820 <ST7735_write>
		ST7735_write(BCL);
 8001e22:	7efb      	ldrb	r3, [r7, #27]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fcfb 	bl	8001820 <ST7735_write>
	for(i=0;i<8;i++)
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	77fb      	strb	r3, [r7, #31]
 8001e30:	7ffb      	ldrb	r3, [r7, #31]
 8001e32:	2b07      	cmp	r3, #7
 8001e34:	d9f1      	bls.n	8001e1a <ST7735_DrawChar7x11+0xfa>
	}
}
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08007620 	.word	0x08007620
 8001e44:	40010800 	.word	0x40010800

08001e48 <ST7735_DrawString7x11>:

void ST7735_DrawString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	603a      	str	r2, [r7, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	460b      	mov	r3, r1
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8001e62:	e013      	b.n	8001e8c <ST7735_DrawString7x11+0x44>
	{
		ST7735_DrawChar7x11(x+(8*i),y,chr[i],color,background_color);
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b2d8      	uxtb	r0, r3
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	88bc      	ldrh	r4, [r7, #4]
 8001e7a:	79b9      	ldrb	r1, [r7, #6]
 8001e7c:	8c3b      	ldrh	r3, [r7, #32]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4623      	mov	r3, r4
 8001e82:	f7ff ff4d 	bl	8001d20 <ST7735_DrawChar7x11>
		i++;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
	while(chr[i] != '\0')
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e5      	bne.n	8001e64 <ST7735_DrawString7x11+0x1c>
	}
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <ST7735_DrawNString7x11>:

void ST7735_DrawNString7x11(uint8_t x,uint8_t y,uint8_t* chr,uint16_t color,uint16_t background_color, uint8_t n)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	603a      	str	r2, [r7, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	71bb      	strb	r3, [r7, #6]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80bb      	strh	r3, [r7, #4]
	uint8_t i=0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
	uint8_t CHR=0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73bb      	strb	r3, [r7, #14]
	while(n-- != 0)
 8001ebe:	e01a      	b.n	8001ef6 <ST7735_DrawNString7x11+0x56>
	{
		//ST7735_DrawChar7x11(x+(8*i),y, *chr++,color,background_color);
		CHR = chr[i];
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	73bb      	strb	r3, [r7, #14]
		if(CHR == '\0') CHR=0x20;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <ST7735_DrawNString7x11+0x34>
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	73bb      	strb	r3, [r7, #14]
		ST7735_DrawChar7x11(x+(8*i),y,CHR,color,background_color);
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4413      	add	r3, r2
 8001ede:	b2d8      	uxtb	r0, r3
 8001ee0:	88bc      	ldrh	r4, [r7, #4]
 8001ee2:	7bba      	ldrb	r2, [r7, #14]
 8001ee4:	79b9      	ldrb	r1, [r7, #6]
 8001ee6:	8c3b      	ldrh	r3, [r7, #32]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4623      	mov	r3, r4
 8001eec:	f7ff ff18 	bl	8001d20 <ST7735_DrawChar7x11>
		i++;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
	while(n-- != 0)
 8001ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1dd      	bne.n	8001ec0 <ST7735_DrawNString7x11+0x20>
	}
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}

08001f0c <ST7735_DrawRectangle>:

void ST7735_DrawRectangle (uint8_t x,uint8_t y,uint8_t w,uint8_t h,uint16_t Color)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71bb      	strb	r3, [r7, #6]
 8001f22:	460b      	mov	r3, r1
 8001f24:	717b      	strb	r3, [r7, #5]
 8001f26:	4613      	mov	r3, r2
 8001f28:	713b      	strb	r3, [r7, #4]
	ST7735_DrawHLine(x,x+w,y,Color);
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	797b      	ldrb	r3, [r7, #5]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2d9      	uxtb	r1, r3
 8001f32:	8b3b      	ldrh	r3, [r7, #24]
 8001f34:	79ba      	ldrb	r2, [r7, #6]
 8001f36:	79f8      	ldrb	r0, [r7, #7]
 8001f38:	f7ff fe6e 	bl	8001c18 <ST7735_DrawHLine>
	ST7735_DrawVLine(x+w,y,y+h+1,Color);
 8001f3c:	79fa      	ldrb	r2, [r7, #7]
 8001f3e:	797b      	ldrb	r3, [r7, #5]
 8001f40:	4413      	add	r3, r2
 8001f42:	b2d8      	uxtb	r0, r3
 8001f44:	79ba      	ldrb	r2, [r7, #6]
 8001f46:	793b      	ldrb	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	8b3b      	ldrh	r3, [r7, #24]
 8001f52:	79b9      	ldrb	r1, [r7, #6]
 8001f54:	f7ff fea2 	bl	8001c9c <ST7735_DrawVLine>
	ST7735_DrawHLine(x,x+w,y+h,Color);
 8001f58:	79fa      	ldrb	r2, [r7, #7]
 8001f5a:	797b      	ldrb	r3, [r7, #5]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2d9      	uxtb	r1, r3
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	793b      	ldrb	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	8b3b      	ldrh	r3, [r7, #24]
 8001f6a:	79f8      	ldrb	r0, [r7, #7]
 8001f6c:	f7ff fe54 	bl	8001c18 <ST7735_DrawHLine>
	ST7735_DrawVLine(x,y,y+h,Color);
 8001f70:	79ba      	ldrb	r2, [r7, #6]
 8001f72:	793b      	ldrb	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	79b9      	ldrb	r1, [r7, #6]
 8001f7c:	79f8      	ldrb	r0, [r7, #7]
 8001f7e:	f7ff fe8d 	bl	8001c9c <ST7735_DrawVLine>
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
	...

08001f8c <ST7735_ListBox_Draw>:
		ST7735_Send(BCL);
	}
}
//ListBox
void ST7735_ListBox_Draw(ST7735_ListBox* lb)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	6078      	str	r0, [r7, #4]
	uint8_t BCH,BCL,SCH,SCL;
	uint16_t tmp,i, item, BGCol;
	
	ST7735_DrawRectangle(lb->x,lb->y,lb->w,lb->h,lb->BorderColor);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7818      	ldrb	r0, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7859      	ldrb	r1, [r3, #1]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	78da      	ldrb	r2, [r3, #3]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	789c      	ldrb	r4, [r3, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	889b      	ldrh	r3, [r3, #4]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4623      	mov	r3, r4
 8001fac:	f7ff ffae 	bl	8001f0c <ST7735_DrawRectangle>
	ST7735_DrawRectangle(lb->x+2,lb->y+2,lb->w-4,lb->h-4,lb->BorderColor);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	b2d8      	uxtb	r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	b2d9      	uxtb	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	3b04      	subs	r3, #4
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	789b      	ldrb	r3, [r3, #2]
 8001fcc:	3b04      	subs	r3, #4
 8001fce:	b2dc      	uxtb	r4, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	889b      	ldrh	r3, [r3, #4]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	f7ff ff98 	bl	8001f0c <ST7735_DrawRectangle>

	ST7735_AddrSet(lb->x+1,lb->y+1,lb->x+lb->w-1,lb->y+lb->h-1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29c      	uxth	r4, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	789b      	ldrb	r3, [r3, #2]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	4622      	mov	r2, r4
 800201a:	f7ff fd87 	bl	8001b2c <ST7735_AddrSet>
	tmp = lb->w * lb->h;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	b29b      	uxth	r3, r3
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	7892      	ldrb	r2, [r2, #2]
 8002028:	b292      	uxth	r2, r2
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	827b      	strh	r3, [r7, #18]
	
	BCL = lb->BackgroundColor & 0xFF;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	88db      	ldrh	r3, [r3, #6]
 8002034:	747b      	strb	r3, [r7, #17]
	BCH = (lb->BackgroundColor>>8) & 0xFF;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	88db      	ldrh	r3, [r3, #6]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	743b      	strb	r3, [r7, #16]
	SCL = lb->SelectedItemColor & 0xFF;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	895b      	ldrh	r3, [r3, #10]
 8002044:	73fb      	strb	r3, [r7, #15]
	SCH = (lb->SelectedItemColor>>8) & 0xFF;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	895b      	ldrh	r3, [r3, #10]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	73bb      	strb	r3, [r7, #14]
	A0_HIGH_ST7735;
 8002050:	2201      	movs	r2, #1
 8002052:	2108      	movs	r1, #8
 8002054:	4825      	ldr	r0, [pc, #148]	; (80020ec <ST7735_ListBox_Draw+0x160>)
 8002056:	f000 fc3d 	bl	80028d4 <HAL_GPIO_WritePin>
		ST7735_Send(BCH);
		ST7735_Send(BCL);
	}*/
	
	//item = 0;
	for(i=0;i<lb->items_count;i++)
 800205a:	2300      	movs	r3, #0
 800205c:	82fb      	strh	r3, [r7, #22]
 800205e:	e03b      	b.n	80020d8 <ST7735_ListBox_Draw+0x14c>
	{
		if(lb->items[i].visible == 1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	8afb      	ldrh	r3, [r7, #22]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d130      	bne.n	80020d2 <ST7735_ListBox_Draw+0x146>
		{
			BGCol = lb->BackgroundColor;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	88db      	ldrh	r3, [r3, #6]
 8002074:	82bb      	strh	r3, [r7, #20]
			uint16_t ty = lb->y + (LINE_HEIGTH*i)+5;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	b29a      	uxth	r2, r3
 800207c:	8afb      	ldrh	r3, [r7, #22]
 800207e:	4619      	mov	r1, r3
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	4419      	add	r1, r3
 8002084:	0089      	lsls	r1, r1, #2
 8002086:	440b      	add	r3, r1
 8002088:	b29b      	uxth	r3, r3
 800208a:	4413      	add	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	3305      	adds	r3, #5
 8002090:	81bb      	strh	r3, [r7, #12]
			if(lb->items[i].selected)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	795b      	ldrb	r3, [r3, #5]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <ST7735_ListBox_Draw+0x11c>
				for(j = 0;j<colored;j++)
				{
					ST7735_Send(SCH);
					ST7735_Send(SCL);
				}*/
				BGCol = lb->SelectedItemColor;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	895b      	ldrh	r3, [r3, #10]
 80020a6:	82bb      	strh	r3, [r7, #20]
			}
			ST7735_DrawNString7x11(lb->x+9,ty,(uint8_t *)lb->items[i].text,lb->ItemTextColor,BGCol, FILENAME_SIZE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3309      	adds	r3, #9
 80020ae:	b2d8      	uxtb	r0, r3
 80020b0:	89bb      	ldrh	r3, [r7, #12]
 80020b2:	b2d9      	uxtb	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	891c      	ldrh	r4, [r3, #8]
 80020c4:	230d      	movs	r3, #13
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	8abb      	ldrh	r3, [r7, #20]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4623      	mov	r3, r4
 80020ce:	f7ff fee7 	bl	8001ea0 <ST7735_DrawNString7x11>
	for(i=0;i<lb->items_count;i++)
 80020d2:	8afb      	ldrh	r3, [r7, #22]
 80020d4:	3301      	adds	r3, #1
 80020d6:	82fb      	strh	r3, [r7, #22]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7c1b      	ldrb	r3, [r3, #16]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8afa      	ldrh	r2, [r7, #22]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d3bd      	bcc.n	8002060 <ST7735_ListBox_Draw+0xd4>
		}
	}
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	40010800 	.word	0x40010800

080020f0 <ST7735_ListBox_StructInit>:
{
	return lb->items[lb->SelectedItemIndex];
}

void ST7735_ListBox_StructInit(ST7735_ListBox* lb,uint8_t x,uint8_t y,ST7735_ListBox_Item* items,uint8_t item_count)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	72fb      	strb	r3, [r7, #11]
 80020fe:	4613      	mov	r3, r2
 8002100:	72bb      	strb	r3, [r7, #10]
	FileList.BorderColor=COLOR565_DARK_SLATE_BLUE;
	FileList.SelectedItemColor=COLOR565_BLANCHED_ALMOND;
	FileList.ItemTextColor=COLOR565_TEAL;*/
	//lb->BackgroundColor = COLOR565_CRIMSON;
	//lb->BorderColor = COLOR565_ALICE_BLUE;
	lb->items = items;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
	lb->items_count = item_count;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	7e3a      	ldrb	r2, [r7, #24]
 800210c:	741a      	strb	r2, [r3, #16]
	//lb->ItemTextColor = COLOR565_ALICE_BLUE;
	//lb->SelectedItemColor = COLOR565_DARK_BLUE;
	lb->SelectedItemIndex = 0;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	745a      	strb	r2, [r3, #17]
	//lb->w = 75;
	lb->w = WIDTH;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	229f      	movs	r2, #159	; 0x9f
 8002118:	70da      	strb	r2, [r3, #3]
	//lb->w = FILENAME_SIZE*8;
	lb->h = item_count *LINE_HEIGTH+7;
 800211a:	7e3b      	ldrb	r3, [r7, #24]
 800211c:	461a      	mov	r2, r3
 800211e:	0052      	lsls	r2, r2, #1
 8002120:	441a      	add	r2, r3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4413      	add	r3, r2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3307      	adds	r3, #7
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	709a      	strb	r2, [r3, #2]
	lb->x = x;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	7afa      	ldrb	r2, [r7, #11]
 8002134:	701a      	strb	r2, [r3, #0]
	lb->y = y;///////////////смещение вниз от верхнего края на 15 пикселей
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	7aba      	ldrb	r2, [r7, #10]
 800213a:	705a      	strb	r2, [r3, #1]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x28>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x28>)
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f929 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7fe fe68 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f958 	bl	8002448 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f91e 	bl	80023f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20000014 	.word	0x20000014
 80021d0:	20000010 	.word	0x20000010

080021d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x1c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_IncTick+0x20>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_IncTick+0x20>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000014 	.word	0x20000014
 80021f4:	20000324 	.word	0x20000324

080021f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_GetTick+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000324 	.word	0x20000324

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fff0 	bl	80021f8 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_Delay+0x40>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffe0 	bl	80021f8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000014 	.word	0x20000014

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff90 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b07      	cmp	r3, #7
 80023bc:	d00f      	beq.n	80023de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d00c      	beq.n	80023de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d009      	beq.n	80023de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d006      	beq.n	80023de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d003      	beq.n	80023de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023d6:	2192      	movs	r1, #146	; 0x92
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80023da:	f7fe fb09 	bl	80009f0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff36 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	08007400 	.word	0x08007400

080023f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d903      	bls.n	8002410 <HAL_NVIC_SetPriority+0x20>
 8002408:	21aa      	movs	r1, #170	; 0xaa
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <HAL_NVIC_SetPriority+0x54>)
 800240c:	f7fe faf0 	bl	80009f0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	d903      	bls.n	800241e <HAL_NVIC_SetPriority+0x2e>
 8002416:	21ab      	movs	r1, #171	; 0xab
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <HAL_NVIC_SetPriority+0x54>)
 800241a:	f7fe fae9 	bl	80009f0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241e:	f7ff ff3b 	bl	8002298 <__NVIC_GetPriorityGrouping>
 8002422:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	6978      	ldr	r0, [r7, #20]
 800242a:	f7ff ff6d 	bl	8002308 <NVIC_EncodePriority>
 800242e:	4602      	mov	r2, r0
 8002430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff3c 	bl	80022b4 <__NVIC_SetPriority>
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08007400 	.word	0x08007400

08002448 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff8b 	bl	800236c <SysTick_Config>
 8002456:	4603      	mov	r3, r0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a9c      	ldr	r2, [pc, #624]	; (80026e8 <HAL_GPIO_Init+0x288>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x42>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a9b      	ldr	r2, [pc, #620]	; (80026ec <HAL_GPIO_Init+0x28c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00f      	beq.n	80024a2 <HAL_GPIO_Init+0x42>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a9a      	ldr	r2, [pc, #616]	; (80026f0 <HAL_GPIO_Init+0x290>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <HAL_GPIO_Init+0x42>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a99      	ldr	r2, [pc, #612]	; (80026f4 <HAL_GPIO_Init+0x294>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x42>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a98      	ldr	r2, [pc, #608]	; (80026f8 <HAL_GPIO_Init+0x298>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x42>
 800249a:	21bd      	movs	r1, #189	; 0xbd
 800249c:	4897      	ldr	r0, [pc, #604]	; (80026fc <HAL_GPIO_Init+0x29c>)
 800249e:	f7fe faa7 	bl	80009f0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_GPIO_Init+0x58>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x60>
 80024b8:	21be      	movs	r1, #190	; 0xbe
 80024ba:	4890      	ldr	r0, [pc, #576]	; (80026fc <HAL_GPIO_Init+0x29c>)
 80024bc:	f7fe fa98 	bl	80009f0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 81eb 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f000 81e6 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b11      	cmp	r3, #17
 80024da:	f000 81e1 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	f000 81dc 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	f000 81d7 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a82      	ldr	r2, [pc, #520]	; (8002700 <HAL_GPIO_Init+0x2a0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f000 81d1 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a80      	ldr	r2, [pc, #512]	; (8002704 <HAL_GPIO_Init+0x2a4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	f000 81cb 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a7e      	ldr	r2, [pc, #504]	; (8002708 <HAL_GPIO_Init+0x2a8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f000 81c5 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a7c      	ldr	r2, [pc, #496]	; (800270c <HAL_GPIO_Init+0x2ac>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f000 81bf 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a7a      	ldr	r2, [pc, #488]	; (8002710 <HAL_GPIO_Init+0x2b0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	f000 81b9 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a78      	ldr	r2, [pc, #480]	; (8002714 <HAL_GPIO_Init+0x2b4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	f000 81b3 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b03      	cmp	r3, #3
 8002540:	f000 81ae 	beq.w	80028a0 <HAL_GPIO_Init+0x440>
 8002544:	21bf      	movs	r1, #191	; 0xbf
 8002546:	486d      	ldr	r0, [pc, #436]	; (80026fc <HAL_GPIO_Init+0x29c>)
 8002548:	f7fe fa52 	bl	80009f0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254c:	e1a8      	b.n	80028a0 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800254e:	2201      	movs	r2, #1
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	429a      	cmp	r2, r3
 8002568:	f040 8197 	bne.w	800289a <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <HAL_GPIO_Init+0x288>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_GPIO_Init+0x13c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_GPIO_Init+0x28c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00f      	beq.n	800259c <HAL_GPIO_Init+0x13c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a5c      	ldr	r2, [pc, #368]	; (80026f0 <HAL_GPIO_Init+0x290>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <HAL_GPIO_Init+0x13c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a5b      	ldr	r2, [pc, #364]	; (80026f4 <HAL_GPIO_Init+0x294>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x13c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_GPIO_Init+0x298>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x13c>
 8002594:	21cd      	movs	r1, #205	; 0xcd
 8002596:	4859      	ldr	r0, [pc, #356]	; (80026fc <HAL_GPIO_Init+0x29c>)
 8002598:	f7fe fa2a 	bl	80009f0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b12      	cmp	r3, #18
 80025a2:	d065      	beq.n	8002670 <HAL_GPIO_Init+0x210>
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d80e      	bhi.n	80025c6 <HAL_GPIO_Init+0x166>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d04c      	beq.n	8002646 <HAL_GPIO_Init+0x1e6>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d804      	bhi.n	80025ba <HAL_GPIO_Init+0x15a>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d072      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d01d      	beq.n	80025f4 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025b8:	e0b1      	b.n	800271e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	f000 80ac 	beq.w	8002718 <HAL_GPIO_Init+0x2b8>
 80025c0:	2b11      	cmp	r3, #17
 80025c2:	d02b      	beq.n	800261c <HAL_GPIO_Init+0x1bc>
          break;
 80025c4:	e0ab      	b.n	800271e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80025c6:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <HAL_GPIO_Init+0x2a4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d066      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 80025cc:	4a4d      	ldr	r2, [pc, #308]	; (8002704 <HAL_GPIO_Init+0x2a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d806      	bhi.n	80025e0 <HAL_GPIO_Init+0x180>
 80025d2:	4a4b      	ldr	r2, [pc, #300]	; (8002700 <HAL_GPIO_Init+0x2a0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d060      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x2ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d05d      	beq.n	800269a <HAL_GPIO_Init+0x23a>
          break;
 80025de:	e09e      	b.n	800271e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80025e0:	4a49      	ldr	r2, [pc, #292]	; (8002708 <HAL_GPIO_Init+0x2a8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d059      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 80025e6:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_GPIO_Init+0x2b4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d056      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2b0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d053      	beq.n	800269a <HAL_GPIO_Init+0x23a>
          break;
 80025f2:	e094      	b.n	800271e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d00b      	beq.n	8002614 <HAL_GPIO_Init+0x1b4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1b4>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x1b4>
 800260c:	21d5      	movs	r1, #213	; 0xd5
 800260e:	483b      	ldr	r0, [pc, #236]	; (80026fc <HAL_GPIO_Init+0x29c>)
 8002610:	f7fe f9ee 	bl	80009f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e080      	b.n	800271e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d00b      	beq.n	800263c <HAL_GPIO_Init+0x1dc>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d007      	beq.n	800263c <HAL_GPIO_Init+0x1dc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x1dc>
 8002634:	21dc      	movs	r1, #220	; 0xdc
 8002636:	4831      	ldr	r0, [pc, #196]	; (80026fc <HAL_GPIO_Init+0x29c>)
 8002638:	f7fe f9da 	bl	80009f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	3304      	adds	r3, #4
 8002642:	623b      	str	r3, [r7, #32]
          break;
 8002644:	e06b      	b.n	800271e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d00b      	beq.n	8002666 <HAL_GPIO_Init+0x206>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d007      	beq.n	8002666 <HAL_GPIO_Init+0x206>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x206>
 800265e:	21e3      	movs	r1, #227	; 0xe3
 8002660:	4826      	ldr	r0, [pc, #152]	; (80026fc <HAL_GPIO_Init+0x29c>)
 8002662:	f7fe f9c5 	bl	80009f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	3308      	adds	r3, #8
 800266c:	623b      	str	r3, [r7, #32]
          break;
 800266e:	e056      	b.n	800271e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d00b      	beq.n	8002690 <HAL_GPIO_Init+0x230>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x230>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x230>
 8002688:	21ea      	movs	r1, #234	; 0xea
 800268a:	481c      	ldr	r0, [pc, #112]	; (80026fc <HAL_GPIO_Init+0x29c>)
 800268c:	f7fe f9b0 	bl	80009f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	330c      	adds	r3, #12
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e041      	b.n	800271e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_GPIO_Init+0x25a>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x25a>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x25a>
 80026b2:	21f7      	movs	r1, #247	; 0xf7
 80026b4:	4811      	ldr	r0, [pc, #68]	; (80026fc <HAL_GPIO_Init+0x29c>)
 80026b6:	f7fe f99b 	bl	80009f0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c2:	2304      	movs	r3, #4
 80026c4:	623b      	str	r3, [r7, #32]
          break;
 80026c6:	e02a      	b.n	800271e <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d0:	2308      	movs	r3, #8
 80026d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	611a      	str	r2, [r3, #16]
          break;
 80026da:	e020      	b.n	800271e <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026dc:	2308      	movs	r3, #8
 80026de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	615a      	str	r2, [r3, #20]
          break;
 80026e6:	e01a      	b.n	800271e <HAL_GPIO_Init+0x2be>
 80026e8:	40010800 	.word	0x40010800
 80026ec:	40010c00 	.word	0x40010c00
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40011400 	.word	0x40011400
 80026f8:	40011800 	.word	0x40011800
 80026fc:	0800743c 	.word	0x0800743c
 8002700:	10110000 	.word	0x10110000
 8002704:	10210000 	.word	0x10210000
 8002708:	10310000 	.word	0x10310000
 800270c:	10120000 	.word	0x10120000
 8002710:	10220000 	.word	0x10220000
 8002714:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
          break;
 800271c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2bff      	cmp	r3, #255	; 0xff
 8002722:	d801      	bhi.n	8002728 <HAL_GPIO_Init+0x2c8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	e001      	b.n	800272c <HAL_GPIO_Init+0x2cc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2bff      	cmp	r3, #255	; 0xff
 8002732:	d802      	bhi.n	800273a <HAL_GPIO_Init+0x2da>
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x2e0>
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3b08      	subs	r3, #8
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	210f      	movs	r1, #15
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	6a39      	ldr	r1, [r7, #32]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	431a      	orrs	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8096 	beq.w	800289a <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800276e:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <HAL_GPIO_Init+0x458>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_GPIO_Init+0x458>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <HAL_GPIO_Init+0x458>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002786:	4a4d      	ldr	r2, [pc, #308]	; (80028bc <HAL_GPIO_Init+0x45c>)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <HAL_GPIO_Init+0x460>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x37a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_GPIO_Init+0x464>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x376>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_GPIO_Init+0x468>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x372>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_GPIO_Init+0x46c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x36e>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x37c>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x37c>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x37c>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x37c>
 80027da:	2300      	movs	r3, #0
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ec:	4933      	ldr	r1, [pc, #204]	; (80028bc <HAL_GPIO_Init+0x45c>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4931      	ldr	r1, [pc, #196]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
 8002812:	e006      	b.n	8002822 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002814:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	492c      	ldr	r1, [pc, #176]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002846:	4013      	ands	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	491d      	ldr	r1, [pc, #116]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	43db      	mvns	r3, r3
 800286c:	4918      	ldr	r1, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800286e:	4013      	ands	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4913      	ldr	r1, [pc, #76]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
 800288a:	e006      	b.n	800289a <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_GPIO_Init+0x470>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	43db      	mvns	r3, r3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_GPIO_Init+0x470>)
 8002896:	4013      	ands	r3, r2
 8002898:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f47f ae4f 	bne.w	800254e <HAL_GPIO_Init+0xee>
  }
}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40010c00 	.word	0x40010c00
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40010400 	.word	0x40010400

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_GPIO_WritePin+0x20>
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_GPIO_WritePin+0x2a>
 80028f4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80028f8:	480e      	ldr	r0, [pc, #56]	; (8002934 <HAL_GPIO_WritePin+0x60>)
 80028fa:	f7fe f879 	bl	80009f0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80028fe:	787b      	ldrb	r3, [r7, #1]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_GPIO_WritePin+0x40>
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d004      	beq.n	8002914 <HAL_GPIO_WritePin+0x40>
 800290a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800290e:	4809      	ldr	r0, [pc, #36]	; (8002934 <HAL_GPIO_WritePin+0x60>)
 8002910:	f7fe f86e 	bl	80009f0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	0800743c 	.word	0x0800743c

08002938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e093      	b.n	8002a72 <HAL_TIM_PWM_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_TIM_PWM_Init+0x144>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_TIM_PWM_Init+0x44>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d00e      	beq.n	800297c <HAL_TIM_PWM_Init+0x44>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a47      	ldr	r2, [pc, #284]	; (8002a80 <HAL_TIM_PWM_Init+0x148>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_TIM_PWM_Init+0x44>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_TIM_PWM_Init+0x14c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_PWM_Init+0x44>
 8002972:	f240 510e 	movw	r1, #1294	; 0x50e
 8002976:	4844      	ldr	r0, [pc, #272]	; (8002a88 <HAL_TIM_PWM_Init+0x150>)
 8002978:	f7fe f83a 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d014      	beq.n	80029ae <HAL_TIM_PWM_Init+0x76>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d010      	beq.n	80029ae <HAL_TIM_PWM_Init+0x76>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b20      	cmp	r3, #32
 8002992:	d00c      	beq.n	80029ae <HAL_TIM_PWM_Init+0x76>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d008      	beq.n	80029ae <HAL_TIM_PWM_Init+0x76>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b60      	cmp	r3, #96	; 0x60
 80029a2:	d004      	beq.n	80029ae <HAL_TIM_PWM_Init+0x76>
 80029a4:	f240 510f 	movw	r1, #1295	; 0x50f
 80029a8:	4837      	ldr	r0, [pc, #220]	; (8002a88 <HAL_TIM_PWM_Init+0x150>)
 80029aa:	f7fe f821 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00e      	beq.n	80029d4 <HAL_TIM_PWM_Init+0x9c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d009      	beq.n	80029d4 <HAL_TIM_PWM_Init+0x9c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c8:	d004      	beq.n	80029d4 <HAL_TIM_PWM_Init+0x9c>
 80029ca:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80029ce:	482e      	ldr	r0, [pc, #184]	; (8002a88 <HAL_TIM_PWM_Init+0x150>)
 80029d0:	f7fe f80e 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_TIM_PWM_Init+0xb6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d004      	beq.n	80029ee <HAL_TIM_PWM_Init+0xb6>
 80029e4:	f240 5111 	movw	r1, #1297	; 0x511
 80029e8:	4827      	ldr	r0, [pc, #156]	; (8002a88 <HAL_TIM_PWM_Init+0x150>)
 80029ea:	f7fe f801 	bl	80009f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_PWM_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fe58 	bl	80016b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fb86 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	08007478 	.word	0x08007478

08002a8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e093      	b.n	8002bc6 <HAL_TIM_IC_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_TIM_IC_Init+0x144>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_TIM_IC_Init+0x44>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_TIM_IC_Init+0x44>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_TIM_IC_Init+0x148>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_TIM_IC_Init+0x44>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a45      	ldr	r2, [pc, #276]	; (8002bd8 <HAL_TIM_IC_Init+0x14c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIM_IC_Init+0x44>
 8002ac6:	f240 7189 	movw	r1, #1929	; 0x789
 8002aca:	4844      	ldr	r0, [pc, #272]	; (8002bdc <HAL_TIM_IC_Init+0x150>)
 8002acc:	f7fd ff90 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d014      	beq.n	8002b02 <HAL_TIM_IC_Init+0x76>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d010      	beq.n	8002b02 <HAL_TIM_IC_Init+0x76>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d00c      	beq.n	8002b02 <HAL_TIM_IC_Init+0x76>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d008      	beq.n	8002b02 <HAL_TIM_IC_Init+0x76>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b60      	cmp	r3, #96	; 0x60
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_IC_Init+0x76>
 8002af8:	f240 718a 	movw	r1, #1930	; 0x78a
 8002afc:	4837      	ldr	r0, [pc, #220]	; (8002bdc <HAL_TIM_IC_Init+0x150>)
 8002afe:	f7fd ff77 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <HAL_TIM_IC_Init+0x9c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	d009      	beq.n	8002b28 <HAL_TIM_IC_Init+0x9c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_IC_Init+0x9c>
 8002b1e:	f240 718b 	movw	r1, #1931	; 0x78b
 8002b22:	482e      	ldr	r0, [pc, #184]	; (8002bdc <HAL_TIM_IC_Init+0x150>)
 8002b24:	f7fd ff64 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_TIM_IC_Init+0xb6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d004      	beq.n	8002b42 <HAL_TIM_IC_Init+0xb6>
 8002b38:	f240 718c 	movw	r1, #1932	; 0x78c
 8002b3c:	4827      	ldr	r0, [pc, #156]	; (8002bdc <HAL_TIM_IC_Init+0x150>)
 8002b3e:	f7fd ff57 	bl	80009f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_IC_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fdcc 	bl	80016f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fadc 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000800 	.word	0x40000800
 8002bdc:	08007478 	.word	0x08007478

08002be0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a97      	ldr	r2, [pc, #604]	; (8002e50 <HAL_TIM_IC_ConfigChannel+0x270>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_TIM_IC_ConfigChannel+0x3e>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d00e      	beq.n	8002c1e <HAL_TIM_IC_ConfigChannel+0x3e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a93      	ldr	r2, [pc, #588]	; (8002e54 <HAL_TIM_IC_ConfigChannel+0x274>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_IC_ConfigChannel+0x3e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a92      	ldr	r2, [pc, #584]	; (8002e58 <HAL_TIM_IC_ConfigChannel+0x278>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_IC_ConfigChannel+0x3e>
 8002c14:	f640 71b3 	movw	r1, #4019	; 0xfb3
 8002c18:	4890      	ldr	r0, [pc, #576]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002c1a:	f7fd fee9 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_TIM_IC_ConfigChannel+0x60>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d008      	beq.n	8002c40 <HAL_TIM_IC_ConfigChannel+0x60>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b0a      	cmp	r3, #10
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_IC_ConfigChannel+0x60>
 8002c36:	f640 71b4 	movw	r1, #4020	; 0xfb4
 8002c3a:	4888      	ldr	r0, [pc, #544]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002c3c:	f7fd fed8 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00c      	beq.n	8002c62 <HAL_TIM_IC_ConfigChannel+0x82>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_TIM_IC_ConfigChannel+0x82>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d004      	beq.n	8002c62 <HAL_TIM_IC_ConfigChannel+0x82>
 8002c58:	f640 71b5 	movw	r1, #4021	; 0xfb5
 8002c5c:	487f      	ldr	r0, [pc, #508]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002c5e:	f7fd fec7 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_TIM_IC_ConfigChannel+0xac>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IC_ConfigChannel+0xac>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d008      	beq.n	8002c8c <HAL_TIM_IC_ConfigChannel+0xac>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d004      	beq.n	8002c8c <HAL_TIM_IC_ConfigChannel+0xac>
 8002c82:	f640 71b6 	movw	r1, #4022	; 0xfb6
 8002c86:	4875      	ldr	r0, [pc, #468]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002c88:	f7fd feb2 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d904      	bls.n	8002c9e <HAL_TIM_IC_ConfigChannel+0xbe>
 8002c94:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8002c98:	4870      	ldr	r0, [pc, #448]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002c9a:	f7fd fea9 	bl	80009f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_IC_ConfigChannel+0xcc>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0cd      	b.n	8002e48 <HAL_TIM_IC_ConfigChannel+0x268>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11b      	bne.n	8002cf2 <HAL_TIM_IC_ConfigChannel+0x112>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f000 fca7 	bl	800361c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020c 	bic.w	r2, r2, #12
 8002cdc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6999      	ldr	r1, [r3, #24]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
 8002cf0:	e0a5      	b.n	8002e3e <HAL_TIM_IC_ConfigChannel+0x25e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d135      	bne.n	8002d64 <HAL_TIM_IC_ConfigChannel+0x184>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_TIM_IC_ConfigChannel+0x270>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_TIM_IC_ConfigChannel+0x14a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d00e      	beq.n	8002d2a <HAL_TIM_IC_ConfigChannel+0x14a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a50      	ldr	r2, [pc, #320]	; (8002e54 <HAL_TIM_IC_ConfigChannel+0x274>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_TIM_IC_ConfigChannel+0x14a>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4f      	ldr	r2, [pc, #316]	; (8002e58 <HAL_TIM_IC_ConfigChannel+0x278>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIM_IC_ConfigChannel+0x14a>
 8002d20:	f640 71cd 	movw	r1, #4045	; 0xfcd
 8002d24:	484d      	ldr	r0, [pc, #308]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002d26:	f7fd fe63 	bl	80009f0 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f000 fcc9 	bl	80036d0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699a      	ldr	r2, [r3, #24]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6999      	ldr	r1, [r3, #24]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	021a      	lsls	r2, r3, #8
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	e06c      	b.n	8002e3e <HAL_TIM_IC_ConfigChannel+0x25e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d134      	bne.n	8002dd4 <HAL_TIM_IC_ConfigChannel+0x1f4>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a38      	ldr	r2, [pc, #224]	; (8002e50 <HAL_TIM_IC_ConfigChannel+0x270>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_TIM_IC_ConfigChannel+0x1bc>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d00e      	beq.n	8002d9c <HAL_TIM_IC_ConfigChannel+0x1bc>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_TIM_IC_ConfigChannel+0x274>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_TIM_IC_ConfigChannel+0x1bc>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <HAL_TIM_IC_ConfigChannel+0x278>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIM_IC_ConfigChannel+0x1bc>
 8002d92:	f640 71dd 	movw	r1, #4061	; 0xfdd
 8002d96:	4831      	ldr	r0, [pc, #196]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002d98:	f7fd fe2a 	bl	80009f0 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f000 fccc 	bl	8003748 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020c 	bic.w	r2, r2, #12
 8002dbe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69d9      	ldr	r1, [r3, #28]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	61da      	str	r2, [r3, #28]
 8002dd2:	e034      	b.n	8002e3e <HAL_TIM_IC_ConfigChannel+0x25e>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <HAL_TIM_IC_ConfigChannel+0x270>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x226>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d00e      	beq.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x226>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_IC_ConfigChannel+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x226>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_IC_ConfigChannel+0x278>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIM_IC_ConfigChannel+0x226>
 8002dfc:	f640 71ed 	movw	r1, #4077	; 0xfed
 8002e00:	4816      	ldr	r0, [pc, #88]	; (8002e5c <HAL_TIM_IC_ConfigChannel+0x27c>)
 8002e02:	f7fd fdf5 	bl	80009f0 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f000 fcd2 	bl	80037be <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	08007478 	.word	0x08007478

08002e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d00d      	beq.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d00a      	beq.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b3c      	cmp	r3, #60	; 0x3c
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002e8a:	f241 0112 	movw	r1, #4114	; 0x1012
 8002e8e:	489e      	ldr	r0, [pc, #632]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002e90:	f7fd fdae 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b60      	cmp	r3, #96	; 0x60
 8002e9a:	d008      	beq.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002ea4:	f241 0113 	movw	r1, #4115	; 0x1013
 8002ea8:	4897      	ldr	r0, [pc, #604]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002eaa:	f7fd fda1 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x68>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x68>
 8002ebe:	f241 0114 	movw	r1, #4116	; 0x1014
 8002ec2:	4891      	ldr	r0, [pc, #580]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002ec4:	f7fd fd94 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8002ed8:	f241 0115 	movw	r1, #4117	; 0x1015
 8002edc:	488a      	ldr	r0, [pc, #552]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002ede:	f7fd fd87 	bl	80009f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e119      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	f200 810c 	bhi.w	8003118 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08003119 	.word	0x08003119
 8002f10:	08003119 	.word	0x08003119
 8002f14:	08003119 	.word	0x08003119
 8002f18:	08002faf 	.word	0x08002faf
 8002f1c:	08003119 	.word	0x08003119
 8002f20:	08003119 	.word	0x08003119
 8002f24:	08003119 	.word	0x08003119
 8002f28:	08003023 	.word	0x08003023
 8002f2c:	08003119 	.word	0x08003119
 8002f30:	08003119 	.word	0x08003119
 8002f34:	08003119 	.word	0x08003119
 8002f38:	08003095 	.word	0x08003095
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002f64:	f241 011f 	movw	r1, #4127	; 0x101f
 8002f68:	4867      	ldr	r0, [pc, #412]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002f6a:	f7fd fd41 	bl	80009f0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f93b 	bl	80031f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6999      	ldr	r1, [r3, #24]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	619a      	str	r2, [r3, #24]
      break;
 8002fac:	e0b5      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002fd6:	f241 0130 	movw	r1, #4144	; 0x1030
 8002fda:	484b      	ldr	r0, [pc, #300]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002fdc:	f7fd fd08 	bl	80009f0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f992 	bl	8003310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6999      	ldr	r1, [r3, #24]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      break;
 8003020:	e07b      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a39      	ldr	r2, [pc, #228]	; (800310c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d00e      	beq.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a35      	ldr	r2, [pc, #212]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x1f4>
 800304a:	f241 0141 	movw	r1, #4161	; 0x1041
 800304e:	482e      	ldr	r0, [pc, #184]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8003050:	f7fd fcce 	bl	80009f0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f9ec 	bl	8003438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0204 	bic.w	r2, r2, #4
 800307e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69d9      	ldr	r1, [r3, #28]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	61da      	str	r2, [r3, #28]
      break;
 8003092:	e042      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x266>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d00e      	beq.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x266>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x266>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x266>
 80030bc:	f241 0152 	movw	r1, #4178	; 0x1052
 80030c0:	4811      	ldr	r0, [pc, #68]	; (8003108 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 80030c2:	f7fd fc95 	bl	80009f0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fa47 	bl	8003560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69d9      	ldr	r1, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
      break;
 8003106:	e008      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8003108:	08007478 	.word	0x08007478
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
    }

    default:
      break;
 8003118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <TIM_Base_SetConfig+0xbc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <TIM_Base_SetConfig+0xc0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800

080031f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a30      	ldr	r2, [pc, #192]	; (8003308 <TIM_OC1_SetConfig+0x118>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d119      	bne.n	8003280 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <TIM_OC1_SetConfig+0x76>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d004      	beq.n	8003266 <TIM_OC1_SetConfig+0x76>
 800325c:	f641 2103 	movw	r1, #6659	; 0x1a03
 8003260:	482a      	ldr	r0, [pc, #168]	; (800330c <TIM_OC1_SetConfig+0x11c>)
 8003262:	f7fd fbc5 	bl	80009f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0308 	bic.w	r3, r3, #8
 800326c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_OC1_SetConfig+0x118>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12d      	bne.n	80032e4 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d008      	beq.n	80032a4 <TIM_OC1_SetConfig+0xb4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <TIM_OC1_SetConfig+0xb4>
 800329a:	f641 2110 	movw	r1, #6672	; 0x1a10
 800329e:	481b      	ldr	r0, [pc, #108]	; (800330c <TIM_OC1_SetConfig+0x11c>)
 80032a0:	f7fd fba6 	bl	80009f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ac:	d008      	beq.n	80032c0 <TIM_OC1_SetConfig+0xd0>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <TIM_OC1_SetConfig+0xd0>
 80032b6:	f641 2111 	movw	r1, #6673	; 0x1a11
 80032ba:	4814      	ldr	r0, [pc, #80]	; (800330c <TIM_OC1_SetConfig+0x11c>)
 80032bc:	f7fd fb98 	bl	80009f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40012c00 	.word	0x40012c00
 800330c:	08007478 	.word	0x08007478

08003310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0210 	bic.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0320 	bic.w	r3, r3, #32
 800335a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a31      	ldr	r2, [pc, #196]	; (8003430 <TIM_OC2_SetConfig+0x120>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d11a      	bne.n	80033a6 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <TIM_OC2_SetConfig+0x7a>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d004      	beq.n	800338a <TIM_OC2_SetConfig+0x7a>
 8003380:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8003384:	482b      	ldr	r0, [pc, #172]	; (8003434 <TIM_OC2_SetConfig+0x124>)
 8003386:	f7fd fb33 	bl	80009f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a21      	ldr	r2, [pc, #132]	; (8003430 <TIM_OC2_SetConfig+0x120>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d12f      	bne.n	800340e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d008      	beq.n	80033ca <TIM_OC2_SetConfig+0xba>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <TIM_OC2_SetConfig+0xba>
 80033c0:	f641 215c 	movw	r1, #6748	; 0x1a5c
 80033c4:	481b      	ldr	r0, [pc, #108]	; (8003434 <TIM_OC2_SetConfig+0x124>)
 80033c6:	f7fd fb13 	bl	80009f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d2:	d008      	beq.n	80033e6 <TIM_OC2_SetConfig+0xd6>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <TIM_OC2_SetConfig+0xd6>
 80033dc:	f641 215d 	movw	r1, #6749	; 0x1a5d
 80033e0:	4814      	ldr	r0, [pc, #80]	; (8003434 <TIM_OC2_SetConfig+0x124>)
 80033e2:	f7fd fb05 	bl	80009f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	621a      	str	r2, [r3, #32]
}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40012c00 	.word	0x40012c00
 8003434:	08007478 	.word	0x08007478

08003438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a31      	ldr	r2, [pc, #196]	; (8003558 <TIM_OC3_SetConfig+0x120>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11a      	bne.n	80034cc <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <TIM_OC3_SetConfig+0x78>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d004      	beq.n	80034b0 <TIM_OC3_SetConfig+0x78>
 80034a6:	f641 2199 	movw	r1, #6809	; 0x1a99
 80034aa:	482c      	ldr	r0, [pc, #176]	; (800355c <TIM_OC3_SetConfig+0x124>)
 80034ac:	f7fd faa0 	bl	80009f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <TIM_OC3_SetConfig+0x120>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12f      	bne.n	8003534 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d008      	beq.n	80034f0 <TIM_OC3_SetConfig+0xb8>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <TIM_OC3_SetConfig+0xb8>
 80034e6:	f641 21a6 	movw	r1, #6822	; 0x1aa6
 80034ea:	481c      	ldr	r0, [pc, #112]	; (800355c <TIM_OC3_SetConfig+0x124>)
 80034ec:	f7fd fa80 	bl	80009f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d008      	beq.n	800350c <TIM_OC3_SetConfig+0xd4>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <TIM_OC3_SetConfig+0xd4>
 8003502:	f641 21a7 	movw	r1, #6823	; 0x1aa7
 8003506:	4815      	ldr	r0, [pc, #84]	; (800355c <TIM_OC3_SetConfig+0x124>)
 8003508:	f7fd fa72 	bl	80009f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	08007478 	.word	0x08007478

08003560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <TIM_OC4_SetConfig+0xb4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d117      	bne.n	80035f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d008      	beq.n	80035dc <TIM_OC4_SetConfig+0x7c>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <TIM_OC4_SetConfig+0x7c>
 80035d2:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80035d6:	4810      	ldr	r0, [pc, #64]	; (8003618 <TIM_OC4_SetConfig+0xb8>)
 80035d8:	f7fd fa0a 	bl	80009f0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	08007478 	.word	0x08007478

0800361c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <TIM_TI1_SetConfig+0xa8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_TI1_SetConfig+0x46>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d007      	beq.n	8003662 <TIM_TI1_SetConfig+0x46>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <TIM_TI1_SetConfig+0xac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_TI1_SetConfig+0x46>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <TIM_TI1_SetConfig+0xb0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <TIM_TI1_SetConfig+0x4a>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <TIM_TI1_SetConfig+0x4c>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e003      	b.n	8003686 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	b2db      	uxtb	r3, r3
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 030a 	and.w	r3, r3, #10
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800370e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	031b      	lsls	r3, r3, #12
 8003714:	b29b      	uxth	r3, r3
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003722:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003784:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	b2db      	uxtb	r3, r3
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037be:	b480      	push	{r7}
 80037c0:	b087      	sub	sp, #28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	b29b      	uxth	r3, r3
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003810:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	031b      	lsls	r3, r3, #12
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
	...

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4d      	ldr	r2, [pc, #308]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d00e      	beq.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a49      	ldr	r2, [pc, #292]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a47      	ldr	r2, [pc, #284]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800386a:	f240 715f 	movw	r1, #1887	; 0x75f
 800386e:	4846      	ldr	r0, [pc, #280]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8003870:	f7fd f8be 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b10      	cmp	r3, #16
 8003882:	d01c      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b20      	cmp	r3, #32
 800388a:	d018      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d014      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d010      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d00c      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b60      	cmp	r3, #96	; 0x60
 80038aa:	d008      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b70      	cmp	r3, #112	; 0x70
 80038b2:	d004      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80038b4:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 80038b8:	4833      	ldr	r0, [pc, #204]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80038ba:	f7fd f899 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d008      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80038ce:	f240 7161 	movw	r1, #1889	; 0x761
 80038d2:	482d      	ldr	r0, [pc, #180]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80038d4:	f7fd f88c 	bl	80009f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e046      	b.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d009      	beq.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d10c      	bne.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	080074b0 	.word	0x080074b0

0800398c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a5c      	ldr	r2, [pc, #368]	; (8003b10 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 80039a4:	f240 719c 	movw	r1, #1948	; 0x79c
 80039a8:	485a      	ldr	r0, [pc, #360]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80039aa:	f7fd f821 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b6:	d008      	beq.n	80039ca <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80039c0:	f240 719d 	movw	r1, #1949	; 0x79d
 80039c4:	4853      	ldr	r0, [pc, #332]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80039c6:	f7fd f813 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d008      	beq.n	80039e6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80039dc:	f240 719e 	movw	r1, #1950	; 0x79e
 80039e0:	484c      	ldr	r0, [pc, #304]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80039e2:	f7fd f805 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d009      	beq.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8003a0c:	f240 719f 	movw	r1, #1951	; 0x79f
 8003a10:	4840      	ldr	r0, [pc, #256]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8003a12:	f7fc ffed 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2bff      	cmp	r3, #255	; 0xff
 8003a1c:	d904      	bls.n	8003a28 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8003a1e:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 8003a22:	483c      	ldr	r0, [pc, #240]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8003a24:	f7fc ffe4 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d008      	beq.n	8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003a3a:	f240 71a1 	movw	r1, #1953	; 0x7a1
 8003a3e:	4835      	ldr	r0, [pc, #212]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8003a40:	f7fc ffd6 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d004      	beq.n	8003a60 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8003a56:	f240 71a2 	movw	r1, #1954	; 0x7a2
 8003a5a:	482e      	ldr	r0, [pc, #184]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8003a5c:	f7fc ffc8 	bl	80009f0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a68:	d008      	beq.n	8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8003a72:	f240 71a3 	movw	r1, #1955	; 0x7a3
 8003a76:	4827      	ldr	r0, [pc, #156]	; (8003b14 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8003a78:	f7fc ffba 	bl	80009f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e03d      	b.n	8003b06 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	080074b0 	.word	0x080074b0

08003b18 <LL_GPIO_SetPinMode>:
{
 8003b18:	b490      	push	{r4, r7}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0e1b      	lsrs	r3, r3, #24
 8003b2c:	4413      	add	r3, r2
 8003b2e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	613b      	str	r3, [r7, #16]
  return result;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	210f      	movs	r1, #15
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	401a      	ands	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	6023      	str	r3, [r4, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc90      	pop	{r4, r7}
 8003b7a:	4770      	bx	lr

08003b7c <LL_GPIO_SetPinSpeed>:
{
 8003b7c:	b490      	push	{r4, r7}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0e1b      	lsrs	r3, r3, #24
 8003b90:	4413      	add	r3, r2
 8003b92:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	613b      	str	r3, [r7, #16]
  return result;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	2103      	movs	r1, #3
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	6023      	str	r3, [r4, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc90      	pop	{r4, r7}
 8003bde:	4770      	bx	lr

08003be0 <LL_GPIO_SetPinOutputType>:
{
 8003be0:	b490      	push	{r4, r7}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0e1b      	lsrs	r3, r3, #24
 8003bf4:	4413      	add	r3, r2
 8003bf6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	613b      	str	r3, [r7, #16]
  return result;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	2104      	movs	r1, #4
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	61bb      	str	r3, [r7, #24]
  return result;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	6023      	str	r3, [r4, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc90      	pop	{r4, r7}
 8003c42:	4770      	bx	lr

08003c44 <LL_GPIO_SetPinPull>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	613b      	str	r3, [r7, #16]
  return result;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	408b      	lsls	r3, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t pinmask;
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a62      	ldr	r2, [pc, #392]	; (8003e20 <LL_GPIO_Init+0x198>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <LL_GPIO_Init+0x3a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a61      	ldr	r2, [pc, #388]	; (8003e24 <LL_GPIO_Init+0x19c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <LL_GPIO_Init+0x3a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <LL_GPIO_Init+0x1a0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <LL_GPIO_Init+0x3a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a5f      	ldr	r2, [pc, #380]	; (8003e2c <LL_GPIO_Init+0x1a4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <LL_GPIO_Init+0x3a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <LL_GPIO_Init+0x1a8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <LL_GPIO_Init+0x3a>
 8003cba:	21a3      	movs	r1, #163	; 0xa3
 8003cbc:	485d      	ldr	r0, [pc, #372]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003cbe:	f7fc fe97 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 437b 	bic.w	r3, r3, #4211081216	; 0xfb000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <LL_GPIO_Init+0x52>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 437b 	and.w	r3, r3, #4211081216	; 0xfb000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <LL_GPIO_Init+0x5a>
 8003cda:	21a4      	movs	r1, #164	; 0xa4
 8003cdc:	4855      	ldr	r0, [pc, #340]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003cde:	f7fc fe87 	bl	80009f0 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
  return result;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003d02:	e080      	b.n	8003e06 <LL_GPIO_Init+0x17e>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d076      	beq.n	8003e00 <LL_GPIO_Init+0x178>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	d806      	bhi.n	8003d26 <LL_GPIO_Init+0x9e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003d18:	f240 1201 	movw	r2, #257	; 0x101
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e008      	b.n	8003d38 <LL_GPIO_Init+0xb0>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3b08      	subs	r3, #8
 8003d2a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d36:	61bb      	str	r3, [r7, #24]
      }

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <LL_GPIO_Init+0xe0>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d00f      	beq.n	8003d68 <LL_GPIO_Init+0xe0>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d00b      	beq.n	8003d68 <LL_GPIO_Init+0xe0>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d007      	beq.n	8003d68 <LL_GPIO_Init+0xe0>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d003      	beq.n	8003d68 <LL_GPIO_Init+0xe0>
 8003d60:	21bd      	movs	r1, #189	; 0xbd
 8003d62:	4834      	ldr	r0, [pc, #208]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003d64:	f7fc fe44 	bl	80009f0 <assert_failed>
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <LL_GPIO_Init+0xf8>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d003      	beq.n	8003d80 <LL_GPIO_Init+0xf8>
 8003d78:	21be      	movs	r1, #190	; 0xbe
 8003d7a:	482e      	ldr	r0, [pc, #184]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003d7c:	f7fc fe38 	bl	80009f0 <assert_failed>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	461a      	mov	r2, r3
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff5b 	bl	8003c44 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	461a      	mov	r2, r3
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff febe 	bl	8003b18 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d003      	beq.n	8003dac <LL_GPIO_Init+0x124>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d129      	bne.n	8003e00 <LL_GPIO_Init+0x178>
      {
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d00b      	beq.n	8003dcc <LL_GPIO_Init+0x144>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d007      	beq.n	8003dcc <LL_GPIO_Init+0x144>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d003      	beq.n	8003dcc <LL_GPIO_Init+0x144>
 8003dc4:	21c9      	movs	r1, #201	; 0xc9
 8003dc6:	481b      	ldr	r0, [pc, #108]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003dc8:	f7fc fe12 	bl	80009f0 <assert_failed>
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <LL_GPIO_Init+0x15c>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d003      	beq.n	8003de4 <LL_GPIO_Init+0x15c>
 8003ddc:	21ca      	movs	r1, #202	; 0xca
 8003dde:	4815      	ldr	r0, [pc, #84]	; (8003e34 <LL_GPIO_Init+0x1ac>)
 8003de0:	f7fc fe06 	bl	80009f0 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	461a      	mov	r2, r3
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fec5 	bl	8003b7c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	461a      	mov	r2, r3
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fef0 	bl	8003be0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f47f af78 	bne.w	8003d04 <LL_GPIO_Init+0x7c>
  }
  return (SUCCESS);
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40010800 	.word	0x40010800
 8003e24:	40010c00 	.word	0x40010c00
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	40011800 	.word	0x40011800
 8003e34:	080074ec 	.word	0x080074ec

08003e38 <LL_SPI_IsEnabled>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d101      	bne.n	8003e50 <LL_SPI_IsEnabled+0x18>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_SPI_IsEnabled+0x1a>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <LL_SPI_SetCRCPolynomial>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	611a      	str	r2, [r3, #16]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
	...

08003e7c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]

  /* Check the SPI Instance SPIx*/
  assert_param(IS_SPI_ALL_INSTANCE(SPIx));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <LL_SPI_Init+0x1f0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <LL_SPI_Init+0x26>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a76      	ldr	r2, [pc, #472]	; (8004070 <LL_SPI_Init+0x1f4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <LL_SPI_Init+0x26>
 8003e9a:	21b7      	movs	r1, #183	; 0xb7
 8003e9c:	4875      	ldr	r0, [pc, #468]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003e9e:	f7fc fda7 	bl	80009f0 <assert_failed>

  /* Check the SPI parameters from SPI_InitStruct*/
  assert_param(IS_LL_SPI_TRANSFER_DIRECTION(SPI_InitStruct->TransferDirection));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <LL_SPI_Init+0x54>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d00d      	beq.n	8003ed0 <LL_SPI_Init+0x54>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	d008      	beq.n	8003ed0 <LL_SPI_Init+0x54>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ec6:	d003      	beq.n	8003ed0 <LL_SPI_Init+0x54>
 8003ec8:	21ba      	movs	r1, #186	; 0xba
 8003eca:	486a      	ldr	r0, [pc, #424]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003ecc:	f7fc fd90 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_MODE(SPI_InitStruct->Mode));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed8:	d007      	beq.n	8003eea <LL_SPI_Init+0x6e>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <LL_SPI_Init+0x6e>
 8003ee2:	21bb      	movs	r1, #187	; 0xbb
 8003ee4:	4863      	ldr	r0, [pc, #396]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003ee6:	f7fc fd83 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_DATAWIDTH(SPI_InitStruct->DataWidth));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <LL_SPI_Init+0x88>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d003      	beq.n	8003f04 <LL_SPI_Init+0x88>
 8003efc:	21bc      	movs	r1, #188	; 0xbc
 8003efe:	485d      	ldr	r0, [pc, #372]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003f00:	f7fc fd76 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_POLARITY(SPI_InitStruct->ClockPolarity));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <LL_SPI_Init+0xa0>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d003      	beq.n	8003f1c <LL_SPI_Init+0xa0>
 8003f14:	21bd      	movs	r1, #189	; 0xbd
 8003f16:	4857      	ldr	r0, [pc, #348]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003f18:	f7fc fd6a 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_PHASE(SPI_InitStruct->ClockPhase));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <LL_SPI_Init+0xb8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d003      	beq.n	8003f34 <LL_SPI_Init+0xb8>
 8003f2c:	21be      	movs	r1, #190	; 0xbe
 8003f2e:	4851      	ldr	r0, [pc, #324]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003f30:	f7fc fd5e 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d00c      	beq.n	8003f58 <LL_SPI_Init+0xdc>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <LL_SPI_Init+0xdc>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f4e:	d003      	beq.n	8003f58 <LL_SPI_Init+0xdc>
 8003f50:	21bf      	movs	r1, #191	; 0xbf
 8003f52:	4848      	ldr	r0, [pc, #288]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003f54:	f7fc fd4c 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01f      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d01b      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d017      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b18      	cmp	r3, #24
 8003f76:	d013      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d00f      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b28      	cmp	r3, #40	; 0x28
 8003f86:	d00b      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d007      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b38      	cmp	r3, #56	; 0x38
 8003f96:	d003      	beq.n	8003fa0 <LL_SPI_Init+0x124>
 8003f98:	21c0      	movs	r1, #192	; 0xc0
 8003f9a:	4836      	ldr	r0, [pc, #216]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003f9c:	f7fc fd28 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d007      	beq.n	8003fb8 <LL_SPI_Init+0x13c>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <LL_SPI_Init+0x13c>
 8003fb0:	21c1      	movs	r1, #193	; 0xc1
 8003fb2:	4830      	ldr	r0, [pc, #192]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003fb4:	f7fc fd1c 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d007      	beq.n	8003fd2 <LL_SPI_Init+0x156>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <LL_SPI_Init+0x156>
 8003fca:	21c2      	movs	r1, #194	; 0xc2
 8003fcc:	4829      	ldr	r0, [pc, #164]	; (8004074 <LL_SPI_Init+0x1f8>)
 8003fce:	f7fc fd0f 	bl	80009f0 <assert_failed>

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff30 	bl	8003e38 <LL_SPI_IsEnabled>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d141      	bne.n	8004062 <LL_SPI_Init+0x1e6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe6:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	6811      	ldr	r1, [r2, #0]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	6852      	ldr	r2, [r2, #4]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	6912      	ldr	r2, [r2, #16]
 8004004:	4311      	orrs	r1, r2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6952      	ldr	r2, [r2, #20]
 800400a:	4311      	orrs	r1, r2
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	6992      	ldr	r2, [r2, #24]
 8004010:	4311      	orrs	r1, r2
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	69d2      	ldr	r2, [r2, #28]
 8004016:	4311      	orrs	r1, r2
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	6a12      	ldr	r2, [r2, #32]
 800401c:	430a      	orrs	r2, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 0204 	bic.w	r2, r3, #4
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004040:	d10d      	bne.n	800405e <LL_SPI_Init+0x1e2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <LL_SPI_Init+0x1d6>
 800404a:	21e5      	movs	r1, #229	; 0xe5
 800404c:	4809      	ldr	r0, [pc, #36]	; (8004074 <LL_SPI_Init+0x1f8>)
 800404e:	f7fc fccf 	bl	80009f0 <assert_failed>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff feff 	bl	8003e5c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40013000 	.word	0x40013000
 8004070:	40003800 	.word	0x40003800
 8004074:	08007524 	.word	0x08007524

08004078 <LL_TIM_SetPrescaler>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <LL_TIM_SetAutoReload>:
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <LL_TIM_SetRepetitionCounter>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	615a      	str	r2, [r3, #20]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a48      	ldr	r2, [pc, #288]	; (8004214 <LL_TIM_Init+0x130>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d010      	beq.n	8004118 <LL_TIM_Init+0x34>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d00c      	beq.n	8004118 <LL_TIM_Init+0x34>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <LL_TIM_Init+0x134>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d008      	beq.n	8004118 <LL_TIM_Init+0x34>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a44      	ldr	r2, [pc, #272]	; (800421c <LL_TIM_Init+0x138>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <LL_TIM_Init+0x34>
 800410e:	f240 1149 	movw	r1, #329	; 0x149
 8004112:	4843      	ldr	r0, [pc, #268]	; (8004220 <LL_TIM_Init+0x13c>)
 8004114:	f7fc fc6c 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d014      	beq.n	800414a <LL_TIM_Init+0x66>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d010      	beq.n	800414a <LL_TIM_Init+0x66>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d00c      	beq.n	800414a <LL_TIM_Init+0x66>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b20      	cmp	r3, #32
 8004136:	d008      	beq.n	800414a <LL_TIM_Init+0x66>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d004      	beq.n	800414a <LL_TIM_Init+0x66>
 8004140:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004144:	4836      	ldr	r0, [pc, #216]	; (8004220 <LL_TIM_Init+0x13c>)
 8004146:	f7fc fc53 	bl	80009f0 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00e      	beq.n	8004170 <LL_TIM_Init+0x8c>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415a:	d009      	beq.n	8004170 <LL_TIM_Init+0x8c>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d004      	beq.n	8004170 <LL_TIM_Init+0x8c>
 8004166:	f240 114b 	movw	r1, #331	; 0x14b
 800416a:	482d      	ldr	r0, [pc, #180]	; (8004220 <LL_TIM_Init+0x13c>)
 800416c:	f7fc fc40 	bl	80009f0 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <LL_TIM_Init+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <LL_TIM_Init+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d007      	beq.n	8004196 <LL_TIM_Init+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <LL_TIM_Init+0x134>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <LL_TIM_Init+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <LL_TIM_Init+0x138>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d106      	bne.n	80041a4 <LL_TIM_Init+0xc0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <LL_TIM_Init+0x130>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <LL_TIM_Init+0xe0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d007      	beq.n	80041c4 <LL_TIM_Init+0xe0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <LL_TIM_Init+0x134>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <LL_TIM_Init+0xe0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <LL_TIM_Init+0x138>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d106      	bne.n	80041d2 <LL_TIM_Init+0xee>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ff57 	bl	8004092 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff44 	bl	8004078 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <LL_TIM_Init+0x130>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d105      	bne.n	8004204 <LL_TIM_Init+0x120>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff54 	bl	80040ac <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff5e 	bl	80040c6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	0800755c 	.word	0x0800755c

08004224 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800422c:	4a03      	ldr	r2, [pc, #12]	; (800423c <LL_SetSystemCoreClock+0x18>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	2000000c 	.word	0x2000000c

08004240 <MX_FATFS_Init>:
uint32_t count_tic = 0; // счётчик тиков для подсчёта времени выполнения кода

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004244:	4904      	ldr	r1, [pc, #16]	; (8004258 <MX_FATFS_Init+0x18>)
 8004246:	4805      	ldr	r0, [pc, #20]	; (800425c <MX_FATFS_Init+0x1c>)
 8004248:	f002 fc30 	bl	8006aac <FATFS_LinkDriver>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <MX_FATFS_Init+0x20>)
 8004252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000328 	.word	0x20000328
 800425c:	20000018 	.word	0x20000018
 8004260:	2000032c 	.word	0x2000032c

08004264 <FS_GetFileList>:
#include "main.h"
//extern ST7735_ListBox_Item Files_on_SD[ITEM_ON_PAGE_MAX];


uint8_t FS_GetFileList(typeEnv *Env)
{
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800426a:	af00      	add	r7, sp, #0
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	6018      	str	r0, [r3, #0]
	DIR dir;
	FRESULT fs_result;
	FILINFO fs_info;
	char* path ="";
 8004270:	4b51      	ldr	r3, [pc, #324]	; (80043b8 <FS_GetFileList+0x154>)
 8004272:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t cnt_file=0, indx=0;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	uint32_t start_list=0, end_list=0;
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	fs_result = f_opendir (&dir, path);
 800428e:	f107 0320 	add.w	r3, r7, #32
 8004292:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8004296:	4618      	mov	r0, r3
 8004298:	f002 fad0 	bl	800683c <f_opendir>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
	if(fs_result != FR_OK)
 80042a2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <FS_GetFileList+0x4a>
	{ return 1; }
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07e      	b.n	80043ac <FS_GetFileList+0x148>

	start_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX ;
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80042b6:	461a      	mov	r2, r3
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	end_list	= Env->Menu.ActivePage*ITEM_ON_PAGE_MAX + (ITEM_ON_PAGE_MAX);
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	memset( &(Env->Menu.FileList[0][0]), 0, sizeof(Env->Menu.FileList));
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2275      	movs	r2, #117	; 0x75
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 fc37 	bl	8006b52 <memset>

	for (;;)
	{
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 80042e4:	f107 0208 	add.w	r2, r7, #8
 80042e8:	f107 0320 	add.w	r3, r7, #32
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f002 fb4b 	bl	800698a <f_readdir>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (fs_result != FR_OK || fs_info.fname[0] == 0 ){ break;} /* Останов цикла при ошибке или при достижении конца списка директории */
 80042fa:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d14e      	bne.n	80043a0 <FS_GetFileList+0x13c>
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	7a5b      	ldrb	r3, [r3, #9]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d049      	beq.n	80043a0 <FS_GetFileList+0x13c>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	7a5b      	ldrb	r3, [r3, #9]
 8004312:	2b2e      	cmp	r3, #46	; 0x2e
 8004314:	d040      	beq.n	8004398 <FS_GetFileList+0x134>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	7a1b      	ldrb	r3, [r3, #8]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13b      	bne.n	800439c <FS_GetFileList+0x138>
		else
		{   /* Это файл. Заносим название в список файлов */
			if(cnt_file >= start_list && cnt_file < end_list)
 8004324:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004328:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800432c:	429a      	cmp	r2, r3
 800432e:	d327      	bcc.n	8004380 <FS_GetFileList+0x11c>
 8004330:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004334:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004338:	429a      	cmp	r2, r3
 800433a:	d221      	bcs.n	8004380 <FS_GetFileList+0x11c>
			{
				strncpy( &(Env->Menu.FileList[indx][0]),  &fs_info.fname, strlen(fs_info.fname));
 800433c:	1d39      	adds	r1, r7, #4
 800433e:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	680a      	ldr	r2, [r1, #0]
 800434e:	18d4      	adds	r4, r2, r3
 8004350:	f107 0308 	add.w	r3, r7, #8
 8004354:	3309      	adds	r3, #9
 8004356:	4618      	mov	r0, r3
 8004358:	f7fb fef8 	bl	800014c <strlen>
 800435c:	4602      	mov	r2, r0
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	3309      	adds	r3, #9
 8004364:	4619      	mov	r1, r3
 8004366:	4620      	mov	r0, r4
 8004368:	f002 fc1c 	bl	8006ba4 <strncpy>
				indx++;
 800436c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004370:	3301      	adds	r3, #1
 8004372:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				Env->Menu.NmbrOnPageFiles=indx;
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			cnt_file++;
 8004380:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004384:	3301      	adds	r3, #1
 8004386:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		}
		Env->Menu.NmbrAllFiles=cnt_file;
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004396:	e7a5      	b.n	80042e4 <FS_GetFileList+0x80>
		if (fs_info.fname[0] == '.') {continue;} /* игнорирование элемента 'точка' */
 8004398:	bf00      	nop
 800439a:	e7a3      	b.n	80042e4 <FS_GetFileList+0x80>
		if (fs_info.fattrib & AM_DIR){continue;}/* игнорирование элемента 'директория' */
 800439c:	bf00      	nop
		fs_result = f_readdir(&dir, &fs_info);  /* Чтение объекта директории */
 800439e:	e7a1      	b.n	80042e4 <FS_GetFileList+0x80>
	}

	f_closedir(&dir);
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 facb 	bl	8006940 <f_closedir>
	return 0;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	08007594 	.word	0x08007594

080043bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fa05 	bl	80047d8 <USER_SPI_initialize>
 80043ce:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fad7 	bl	8004998 <USER_SPI_status>
 80043ea:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8004404:	7bf8      	ldrb	r0, [r7, #15]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	f000 fad8 	bl	80049c0 <USER_SPI_read>
 8004410:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800442a:	7bf8      	ldrb	r0, [r7, #15]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	f000 fb2b 	bl	8004a8c <USER_SPI_write>
 8004436:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	603a      	str	r2, [r7, #0]
 800444a:	71fb      	strb	r3, [r7, #7]
 800444c:	460b      	mov	r3, r1
 800444e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8004450:	79b9      	ldrb	r1, [r7, #6]
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb94 	bl	8004b84 <USER_SPI_ioctl>
 800445c:	4603      	mov	r3, r0
//   n res;
  /* USER CODE END IOCTL */
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <LL_SPI_SetBaudRatePrescaler>:
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <LL_GPIO_SetOutputPin>:
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <LL_GPIO_ResetOutputPin>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	615a      	str	r2, [r3, #20]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
	...

080044c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80044d0:	f7fd fe92 	bl	80021f8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <SPI_Timer_On+0x20>)
 80044d8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <SPI_Timer_On+0x24>)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	2000078c 	.word	0x2000078c
 80044ec:	20000790 	.word	0x20000790

080044f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80044f4:	f7fd fe80 	bl	80021f8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <SPI_Timer_Status+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <SPI_Timer_Status+0x28>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	bf34      	ite	cc
 8004508:	2301      	movcc	r3, #1
 800450a:	2300      	movcs	r3, #0
 800450c:	b2db      	uxtb	r3, r3
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000078c 	.word	0x2000078c
 8004518:	20000790 	.word	0x20000790

0800451c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
  //  HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
	rxDat = LL_SPI_TransmitReceive(SPI1, dat);
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	4619      	mov	r1, r3
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <xchg_spi+0x24>)
 800452c:	f7fc fc62 	bl	8000df4 <LL_SPI_TransmitReceive>
 8004530:	4603      	mov	r3, r0
 8004532:	73fb      	strb	r3, [r7, #15]
	return rxDat;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40013000 	.word	0x40013000

08004544 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e00a      	b.n	800456a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	18d4      	adds	r4, r2, r3
 800455a:	20ff      	movs	r0, #255	; 0xff
 800455c:	f7ff ffde 	bl	800451c <xchg_spi>
 8004560:	4603      	mov	r3, r0
 8004562:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3f0      	bcc.n	8004554 <rcvr_spi_multi+0x10>
	}
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bd90      	pop	{r4, r7, pc}

0800457a <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e009      	b.n	800459e <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ffc2 	bl	800451c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3f1      	bcc.n	800458a <xmit_spi_multi+0x10>
	}
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80045b6:	f7fd fe1f 	bl	80021f8 <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80045c0:	20ff      	movs	r0, #255	; 0xff
 80045c2:	f7ff ffab 	bl	800451c <xchg_spi>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2bff      	cmp	r3, #255	; 0xff
 80045ce:	d007      	beq.n	80045e0 <wait_ready+0x32>
 80045d0:	f7fd fe12 	bl	80021f8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8ef      	bhi.n	80045c0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2bff      	cmp	r3, #255	; 0xff
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80045f8:	f240 2102 	movw	r1, #514	; 0x202
 80045fc:	4803      	ldr	r0, [pc, #12]	; (800460c <despiselect+0x18>)
 80045fe:	f7ff ff44 	bl	800448a <LL_GPIO_SetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004602:	20ff      	movs	r0, #255	; 0xff
 8004604:	f7ff ff8a 	bl	800451c <xchg_spi>

}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40010c00 	.word	0x40010c00

08004610 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004614:	f240 2102 	movw	r1, #514	; 0x202
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <spiselect+0x30>)
 800461a:	f7ff ff45 	bl	80044a8 <LL_GPIO_ResetOutputPin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800461e:	20ff      	movs	r0, #255	; 0xff
 8004620:	f7ff ff7c 	bl	800451c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004628:	f7ff ffc1 	bl	80045ae <wait_ready>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <spiselect+0x26>
 8004632:	2301      	movs	r3, #1
 8004634:	e002      	b.n	800463c <spiselect+0x2c>

	despiselect();
 8004636:	f7ff ffdd 	bl	80045f4 <despiselect>
	return 0;	/* Timeout */
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40010c00 	.word	0x40010c00

08004644 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800464e:	20c8      	movs	r0, #200	; 0xc8
 8004650:	f7ff ff3a 	bl	80044c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004654:	20ff      	movs	r0, #255	; 0xff
 8004656:	f7ff ff61 	bl	800451c <xchg_spi>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2bff      	cmp	r3, #255	; 0xff
 8004662:	d104      	bne.n	800466e <rcvr_datablock+0x2a>
 8004664:	f7ff ff44 	bl	80044f0 <SPI_Timer_Status>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f2      	bne.n	8004654 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2bfe      	cmp	r3, #254	; 0xfe
 8004672:	d001      	beq.n	8004678 <rcvr_datablock+0x34>
 8004674:	2300      	movs	r3, #0
 8004676:	e00a      	b.n	800468e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff62 	bl	8004544 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004680:	20ff      	movs	r0, #255	; 0xff
 8004682:	f7ff ff4b 	bl	800451c <xchg_spi>
 8004686:	20ff      	movs	r0, #255	; 0xff
 8004688:	f7ff ff48 	bl	800451c <xchg_spi>

	return 1;						/* Function succeeded */
 800468c:	2301      	movs	r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80046a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046a6:	f7ff ff82 	bl	80045ae <wait_ready>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <xmit_datablock+0x1e>
 80046b0:	2300      	movs	r3, #0
 80046b2:	e01e      	b.n	80046f2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ff30 	bl	800451c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	2bfd      	cmp	r3, #253	; 0xfd
 80046c0:	d016      	beq.n	80046f0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80046c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff57 	bl	800457a <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80046cc:	20ff      	movs	r0, #255	; 0xff
 80046ce:	f7ff ff25 	bl	800451c <xchg_spi>
 80046d2:	20ff      	movs	r0, #255	; 0xff
 80046d4:	f7ff ff22 	bl	800451c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80046d8:	20ff      	movs	r0, #255	; 0xff
 80046da:	f7ff ff1f 	bl	800451c <xchg_spi>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	d001      	beq.n	80046f0 <xmit_datablock+0x5a>
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <xmit_datablock+0x5c>
	}
	return 1;
 80046f0:	2301      	movs	r3, #1
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	6039      	str	r1, [r7, #0]
 8004704:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da0e      	bge.n	800472c <send_cmd+0x32>
		cmd &= 0x7F;
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004714:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004716:	2100      	movs	r1, #0
 8004718:	2037      	movs	r0, #55	; 0x37
 800471a:	f7ff ffee 	bl	80046fa <send_cmd>
 800471e:	4603      	mov	r3, r0
 8004720:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d901      	bls.n	800472c <send_cmd+0x32>
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	e051      	b.n	80047d0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d008      	beq.n	8004744 <send_cmd+0x4a>
		despiselect();
 8004732:	f7ff ff5f 	bl	80045f4 <despiselect>
		if (!spiselect()) return 0xFF;
 8004736:	f7ff ff6b 	bl	8004610 <spiselect>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <send_cmd+0x4a>
 8004740:	23ff      	movs	r3, #255	; 0xff
 8004742:	e045      	b.n	80047d0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fee5 	bl	800451c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	0e1b      	lsrs	r3, r3, #24
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fedf 	bl	800451c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fed9 	bl	800451c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fed3 	bl	800451c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fece 	bl	800451c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <send_cmd+0x94>
 800478a:	2395      	movs	r3, #149	; 0x95
 800478c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d101      	bne.n	8004798 <send_cmd+0x9e>
 8004794:	2387      	movs	r3, #135	; 0x87
 8004796:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff febe 	bl	800451c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d102      	bne.n	80047ac <send_cmd+0xb2>
 80047a6:	20ff      	movs	r0, #255	; 0xff
 80047a8:	f7ff feb8 	bl	800451c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80047ac:	230a      	movs	r3, #10
 80047ae:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80047b0:	20ff      	movs	r0, #255	; 0xff
 80047b2:	f7ff feb3 	bl	800451c <xchg_spi>
 80047b6:	4603      	mov	r3, r0
 80047b8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80047ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da05      	bge.n	80047ce <send_cmd+0xd4>
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80047ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <USER_SPI_initialize+0x14>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0ca      	b.n	8004982 <USER_SPI_initialize+0x1aa>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80047ec:	4b67      	ldr	r3, [pc, #412]	; (800498c <USER_SPI_initialize+0x1b4>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <USER_SPI_initialize+0x2a>
 80047fa:	4b64      	ldr	r3, [pc, #400]	; (800498c <USER_SPI_initialize+0x1b4>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e0bf      	b.n	8004982 <USER_SPI_initialize+0x1aa>

	FCLK_SLOW();
 8004802:	2130      	movs	r1, #48	; 0x30
 8004804:	4862      	ldr	r0, [pc, #392]	; (8004990 <USER_SPI_initialize+0x1b8>)
 8004806:	f7ff fe2e 	bl	8004466 <LL_SPI_SetBaudRatePrescaler>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800480a:	230a      	movs	r3, #10
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e005      	b.n	800481c <USER_SPI_initialize+0x44>
 8004810:	20ff      	movs	r0, #255	; 0xff
 8004812:	f7ff fe83 	bl	800451c <xchg_spi>
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	3b01      	subs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f6      	bne.n	8004810 <USER_SPI_initialize+0x38>

	ty = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004826:	2100      	movs	r1, #0
 8004828:	2000      	movs	r0, #0
 800482a:	f7ff ff66 	bl	80046fa <send_cmd>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 808b 	bne.w	800494c <USER_SPI_initialize+0x174>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800483a:	f7ff fe45 	bl	80044c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800483e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004842:	2008      	movs	r0, #8
 8004844:	f7ff ff59 	bl	80046fa <send_cmd>
 8004848:	4603      	mov	r3, r0
 800484a:	2b01      	cmp	r3, #1
 800484c:	d151      	bne.n	80048f2 <USER_SPI_initialize+0x11a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	e00d      	b.n	8004870 <USER_SPI_initialize+0x98>
 8004854:	7bfc      	ldrb	r4, [r7, #15]
 8004856:	20ff      	movs	r0, #255	; 0xff
 8004858:	f7ff fe60 	bl	800451c <xchg_spi>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	4423      	add	r3, r4
 8004866:	f803 2c08 	strb.w	r2, [r3, #-8]
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	3301      	adds	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d9ee      	bls.n	8004854 <USER_SPI_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004876:	7abb      	ldrb	r3, [r7, #10]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d167      	bne.n	800494c <USER_SPI_initialize+0x174>
 800487c:	7afb      	ldrb	r3, [r7, #11]
 800487e:	2baa      	cmp	r3, #170	; 0xaa
 8004880:	d164      	bne.n	800494c <USER_SPI_initialize+0x174>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004882:	bf00      	nop
 8004884:	f7ff fe34 	bl	80044f0 <SPI_Timer_Status>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <USER_SPI_initialize+0xc6>
 800488e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004892:	20a9      	movs	r0, #169	; 0xa9
 8004894:	f7ff ff31 	bl	80046fa <send_cmd>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <USER_SPI_initialize+0xac>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800489e:	f7ff fe27 	bl	80044f0 <SPI_Timer_Status>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d051      	beq.n	800494c <USER_SPI_initialize+0x174>
 80048a8:	2100      	movs	r1, #0
 80048aa:	203a      	movs	r0, #58	; 0x3a
 80048ac:	f7ff ff25 	bl	80046fa <send_cmd>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d14a      	bne.n	800494c <USER_SPI_initialize+0x174>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e00d      	b.n	80048d8 <USER_SPI_initialize+0x100>
 80048bc:	7bfc      	ldrb	r4, [r7, #15]
 80048be:	20ff      	movs	r0, #255	; 0xff
 80048c0:	f7ff fe2c 	bl	800451c <xchg_spi>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	4423      	add	r3, r4
 80048ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	3301      	adds	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d9ee      	bls.n	80048bc <USER_SPI_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80048de:	7a3b      	ldrb	r3, [r7, #8]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <USER_SPI_initialize+0x114>
 80048e8:	230c      	movs	r3, #12
 80048ea:	e000      	b.n	80048ee <USER_SPI_initialize+0x116>
 80048ec:	2304      	movs	r3, #4
 80048ee:	737b      	strb	r3, [r7, #13]
 80048f0:	e02c      	b.n	800494c <USER_SPI_initialize+0x174>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80048f2:	2100      	movs	r1, #0
 80048f4:	20a9      	movs	r0, #169	; 0xa9
 80048f6:	f7ff ff00 	bl	80046fa <send_cmd>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d804      	bhi.n	800490a <USER_SPI_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004900:	2302      	movs	r3, #2
 8004902:	737b      	strb	r3, [r7, #13]
 8004904:	23a9      	movs	r3, #169	; 0xa9
 8004906:	73bb      	strb	r3, [r7, #14]
 8004908:	e003      	b.n	8004912 <USER_SPI_initialize+0x13a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800490a:	2301      	movs	r3, #1
 800490c:	737b      	strb	r3, [r7, #13]
 800490e:	2301      	movs	r3, #1
 8004910:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004912:	bf00      	nop
 8004914:	f7ff fdec 	bl	80044f0 <SPI_Timer_Status>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <USER_SPI_initialize+0x156>
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fee9 	bl	80046fa <send_cmd>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f2      	bne.n	8004914 <USER_SPI_initialize+0x13c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800492e:	f7ff fddf 	bl	80044f0 <SPI_Timer_Status>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <USER_SPI_initialize+0x170>
 8004938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800493c:	2010      	movs	r0, #16
 800493e:	f7ff fedc 	bl	80046fa <send_cmd>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <USER_SPI_initialize+0x174>
				ty = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800494c:	4a11      	ldr	r2, [pc, #68]	; (8004994 <USER_SPI_initialize+0x1bc>)
 800494e:	7b7b      	ldrb	r3, [r7, #13]
 8004950:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004952:	f7ff fe4f 	bl	80045f4 <despiselect>

	if (ty) {			/* OK */
 8004956:	7b7b      	ldrb	r3, [r7, #13]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <USER_SPI_initialize+0x19e>
		FCLK_FAST();			/* Set fast clock */
 800495c:	2118      	movs	r1, #24
 800495e:	480c      	ldr	r0, [pc, #48]	; (8004990 <USER_SPI_initialize+0x1b8>)
 8004960:	f7ff fd81 	bl	8004466 <LL_SPI_SetBaudRatePrescaler>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <USER_SPI_initialize+0x1b4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <USER_SPI_initialize+0x1b4>)
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e002      	b.n	800497c <USER_SPI_initialize+0x1a4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <USER_SPI_initialize+0x1b4>)
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <USER_SPI_initialize+0x1b4>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bd90      	pop	{r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	2000002c 	.word	0x2000002c
 8004990:	40013000 	.word	0x40013000
 8004994:	200000b8 	.word	0x200000b8

08004998 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <USER_SPI_status+0x14>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e002      	b.n	80049b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <USER_SPI_status+0x24>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	2000002c 	.word	0x2000002c

080049c0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <USER_SPI_read+0x1c>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <USER_SPI_read+0x20>
 80049dc:	2304      	movs	r3, #4
 80049de:	e04d      	b.n	8004a7c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80049e0:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <USER_SPI_read+0xc4>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <USER_SPI_read+0x32>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e044      	b.n	8004a7c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80049f2:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <USER_SPI_read+0xc8>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <USER_SPI_read+0x44>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d111      	bne.n	8004a2e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	2011      	movs	r0, #17
 8004a0e:	f7ff fe74 	bl	80046fa <send_cmd>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d129      	bne.n	8004a6c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f7ff fe11 	bl	8004644 <rcvr_datablock>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d021      	beq.n	8004a6c <USER_SPI_read+0xac>
			count = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	e01e      	b.n	8004a6c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	2012      	movs	r0, #18
 8004a32:	f7ff fe62 	bl	80046fa <send_cmd>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d117      	bne.n	8004a6c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f7ff fdff 	bl	8004644 <rcvr_datablock>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <USER_SPI_read+0xa2>
				buff += 512;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ed      	bne.n	8004a3c <USER_SPI_read+0x7c>
 8004a60:	e000      	b.n	8004a64 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004a62:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004a64:	2100      	movs	r1, #0
 8004a66:	200c      	movs	r0, #12
 8004a68:	f7ff fe47 	bl	80046fa <send_cmd>
		}
	}
	despiselect();
 8004a6c:	f7ff fdc2 	bl	80045f4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	2000002c 	.word	0x2000002c
 8004a88:	200000b8 	.word	0x200000b8

08004a8c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <USER_SPI_write+0x1c>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <USER_SPI_write+0x20>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	e063      	b.n	8004b74 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <USER_SPI_write+0xf0>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <USER_SPI_write+0x32>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e05a      	b.n	8004b74 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004abe:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <USER_SPI_write+0xf0>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <USER_SPI_write+0x44>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e051      	b.n	8004b74 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <USER_SPI_write+0xf4>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <USER_SPI_write+0x56>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	025b      	lsls	r3, r3, #9
 8004ae0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d110      	bne.n	8004b0a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	2018      	movs	r0, #24
 8004aec:	f7ff fe05 	bl	80046fa <send_cmd>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d136      	bne.n	8004b64 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004af6:	21fe      	movs	r1, #254	; 0xfe
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	f7ff fdcc 	bl	8004696 <xmit_datablock>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d02f      	beq.n	8004b64 <USER_SPI_write+0xd8>
			count = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	e02c      	b.n	8004b64 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <USER_SPI_write+0xf4>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f003 0306 	and.w	r3, r3, #6
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <USER_SPI_write+0x92>
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	2097      	movs	r0, #151	; 0x97
 8004b1a:	f7ff fdee 	bl	80046fa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	2019      	movs	r0, #25
 8004b22:	f7ff fdea 	bl	80046fa <send_cmd>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d11b      	bne.n	8004b64 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004b2c:	21fc      	movs	r1, #252	; 0xfc
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7ff fdb1 	bl	8004696 <xmit_datablock>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <USER_SPI_write+0xc4>
				buff += 512;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b40:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ee      	bne.n	8004b2c <USER_SPI_write+0xa0>
 8004b4e:	e000      	b.n	8004b52 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004b50:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004b52:	21fd      	movs	r1, #253	; 0xfd
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff fd9e 	bl	8004696 <xmit_datablock>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <USER_SPI_write+0xd8>
 8004b60:	2301      	movs	r3, #1
 8004b62:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004b64:	f7ff fd46 	bl	80045f4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	2000002c 	.word	0x2000002c
 8004b80:	200000b8 	.word	0x200000b8

08004b84 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	603a      	str	r2, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
 8004b90:	460b      	mov	r3, r1
 8004b92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <USER_SPI_ioctl+0x1a>
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	e15a      	b.n	8004e54 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004b9e:	4baf      	ldr	r3, [pc, #700]	; (8004e5c <USER_SPI_ioctl+0x2d8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <USER_SPI_ioctl+0x2c>
 8004bac:	2303      	movs	r3, #3
 8004bae:	e151      	b.n	8004e54 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004bb6:	79bb      	ldrb	r3, [r7, #6]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	f200 8136 	bhi.w	8004e2a <USER_SPI_ioctl+0x2a6>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <USER_SPI_ioctl+0x40>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd9 	.word	0x08004bd9
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004e2b 	.word	0x08004e2b
 8004bd0:	08004c99 	.word	0x08004c99
 8004bd4:	08004d8f 	.word	0x08004d8f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004bd8:	f7ff fd1a 	bl	8004610 <spiselect>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8127 	beq.w	8004e32 <USER_SPI_ioctl+0x2ae>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004bea:	e122      	b.n	8004e32 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004bec:	2100      	movs	r1, #0
 8004bee:	2009      	movs	r0, #9
 8004bf0:	f7ff fd83 	bl	80046fa <send_cmd>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 811d 	bne.w	8004e36 <USER_SPI_ioctl+0x2b2>
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	2110      	movs	r1, #16
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd1e 	bl	8004644 <rcvr_datablock>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8113 	beq.w	8004e36 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004c10:	7b3b      	ldrb	r3, [r7, #12]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d111      	bne.n	8004c3e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004c1a:	7d7b      	ldrb	r3, [r7, #21]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	7d3b      	ldrb	r3, [r7, #20]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	4413      	add	r3, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004c2e:	4413      	add	r3, r2
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	029a      	lsls	r2, r3, #10
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e028      	b.n	8004c90 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004c3e:	7c7b      	ldrb	r3, [r7, #17]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	7dbb      	ldrb	r3, [r7, #22]
 8004c48:	09db      	lsrs	r3, r3, #7
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	7d7b      	ldrb	r3, [r7, #21]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0306 	and.w	r3, r3, #6
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3302      	adds	r3, #2
 8004c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004c66:	7d3b      	ldrb	r3, [r7, #20]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	7cbb      	ldrb	r3, [r7, #18]
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004c82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c86:	3b09      	subs	r3, #9
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004c96:	e0ce      	b.n	8004e36 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004c98:	4b71      	ldr	r3, [pc, #452]	; (8004e60 <USER_SPI_ioctl+0x2dc>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d031      	beq.n	8004d08 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	208d      	movs	r0, #141	; 0x8d
 8004ca8:	f7ff fd27 	bl	80046fa <send_cmd>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 80c3 	bne.w	8004e3a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004cb4:	20ff      	movs	r0, #255	; 0xff
 8004cb6:	f7ff fc31 	bl	800451c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fcbf 	bl	8004644 <rcvr_datablock>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80b6 	beq.w	8004e3a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004cce:	2330      	movs	r3, #48	; 0x30
 8004cd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004cd4:	e007      	b.n	8004ce6 <USER_SPI_ioctl+0x162>
 8004cd6:	20ff      	movs	r0, #255	; 0xff
 8004cd8:	f7ff fc20 	bl	800451c <xchg_spi>
 8004cdc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f3      	bne.n	8004cd6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004cee:	7dbb      	ldrb	r3, [r7, #22]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	fa03 f202 	lsl.w	r2, r3, r2
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004d06:	e098      	b.n	8004e3a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2009      	movs	r0, #9
 8004d0c:	f7ff fcf5 	bl	80046fa <send_cmd>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 8091 	bne.w	8004e3a <USER_SPI_ioctl+0x2b6>
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fc90 	bl	8004644 <rcvr_datablock>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8087 	beq.w	8004e3a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <USER_SPI_ioctl+0x2dc>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004d38:	7dbb      	ldrb	r3, [r7, #22]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d40:	7dfa      	ldrb	r2, [r7, #23]
 8004d42:	09d2      	lsrs	r2, r2, #7
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	4413      	add	r3, r2
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	7e7b      	ldrb	r3, [r7, #25]
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e013      	b.n	8004d86 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004d5e:	7dbb      	ldrb	r3, [r7, #22]
 8004d60:	109b      	asrs	r3, r3, #2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	3301      	adds	r3, #1
 8004d6a:	7dfa      	ldrb	r2, [r7, #23]
 8004d6c:	00d2      	lsls	r2, r2, #3
 8004d6e:	f002 0218 	and.w	r2, r2, #24
 8004d72:	7df9      	ldrb	r1, [r7, #23]
 8004d74:	0949      	lsrs	r1, r1, #5
 8004d76:	b2c9      	uxtb	r1, r1
 8004d78:	440a      	add	r2, r1
 8004d7a:	3201      	adds	r2, #1
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004d8c:	e055      	b.n	8004e3a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d8e:	4b34      	ldr	r3, [pc, #208]	; (8004e60 <USER_SPI_ioctl+0x2dc>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f003 0306 	and.w	r3, r3, #6
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d051      	beq.n	8004e3e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d9a:	f107 020c 	add.w	r2, r7, #12
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	210b      	movs	r1, #11
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff feee 	bl	8004b84 <USER_SPI_ioctl>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d149      	bne.n	8004e42 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004dae:	7b3b      	ldrb	r3, [r7, #12]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <USER_SPI_ioctl+0x23e>
 8004db8:	7dbb      	ldrb	r3, [r7, #22]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d041      	beq.n	8004e46 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <USER_SPI_ioctl+0x2dc>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	025b      	lsls	r3, r3, #9
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	025b      	lsls	r3, r3, #9
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dec:	2020      	movs	r0, #32
 8004dee:	f7ff fc84 	bl	80046fa <send_cmd>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d128      	bne.n	8004e4a <USER_SPI_ioctl+0x2c6>
 8004df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dfa:	2021      	movs	r0, #33	; 0x21
 8004dfc:	f7ff fc7d 	bl	80046fa <send_cmd>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d121      	bne.n	8004e4a <USER_SPI_ioctl+0x2c6>
 8004e06:	2100      	movs	r1, #0
 8004e08:	2026      	movs	r0, #38	; 0x26
 8004e0a:	f7ff fc76 	bl	80046fa <send_cmd>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11a      	bne.n	8004e4a <USER_SPI_ioctl+0x2c6>
 8004e14:	f247 5030 	movw	r0, #30000	; 0x7530
 8004e18:	f7ff fbc9 	bl	80045ae <wait_ready>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d013      	beq.n	8004e4a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004e22:	2300      	movs	r3, #0
 8004e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004e28:	e00f      	b.n	8004e4a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e30:	e00c      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		break;
 8004e32:	bf00      	nop
 8004e34:	e00a      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		break;
 8004e36:	bf00      	nop
 8004e38:	e008      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		break;
 8004e3a:	bf00      	nop
 8004e3c:	e006      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004e3e:	bf00      	nop
 8004e40:	e004      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <USER_SPI_ioctl+0x2c8>
		break;
 8004e4a:	bf00      	nop
	}

	despiselect();
 8004e4c:	f7ff fbd2 	bl	80045f4 <despiselect>

	return res;
 8004e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3730      	adds	r7, #48	; 0x30
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	2000002c 	.word	0x2000002c
 8004e60:	200000b8 	.word	0x200000b8

08004e64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <disk_status+0x30>)
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	79fa      	ldrb	r2, [r7, #7]
 8004e7c:	4905      	ldr	r1, [pc, #20]	; (8004e94 <disk_status+0x30>)
 8004e7e:	440a      	add	r2, r1
 8004e80:	7a12      	ldrb	r2, [r2, #8]
 8004e82:	4610      	mov	r0, r2
 8004e84:	4798      	blx	r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	200000dc 	.word	0x200000dc

08004e98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <disk_initialize+0x48>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d111      	bne.n	8004ed4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ee0 <disk_initialize+0x48>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <disk_initialize+0x48>)
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	79fa      	ldrb	r2, [r7, #7]
 8004ec6:	4906      	ldr	r1, [pc, #24]	; (8004ee0 <disk_initialize+0x48>)
 8004ec8:	440a      	add	r2, r1
 8004eca:	7a12      	ldrb	r2, [r2, #8]
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200000dc 	.word	0x200000dc

08004ee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <disk_read+0x3c>)
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	689c      	ldr	r4, [r3, #8]
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	4a07      	ldr	r2, [pc, #28]	; (8004f20 <disk_read+0x3c>)
 8004f04:	4413      	add	r3, r2
 8004f06:	7a18      	ldrb	r0, [r3, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	47a0      	blx	r4
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200000dc 	.word	0x200000dc

08004f24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <disk_write+0x3c>)
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	68dc      	ldr	r4, [r3, #12]
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <disk_write+0x3c>)
 8004f44:	4413      	add	r3, r2
 8004f46:	7a18      	ldrb	r0, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	47a0      	blx	r4
 8004f50:	4603      	mov	r3, r0
 8004f52:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200000dc 	.word	0x200000dc

08004f64 <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004f74:	e005      	b.n	8004f82 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	617a      	str	r2, [r7, #20]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1e5a      	subs	r2, r3, #1
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f4      	bne.n	8004f76 <mem_set+0x12>
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004f96:	b480      	push	{r7}
 8004f98:	b089      	sub	sp, #36	; 0x24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004fae:	bf00      	nop
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1e5a      	subs	r2, r3, #1
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <mem_cmp+0x40>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	61fa      	str	r2, [r7, #28]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	61ba      	str	r2, [r7, #24]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	1acb      	subs	r3, r1, r3
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ec      	beq.n	8004fb0 <mem_cmp+0x1a>
	return r;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3724      	adds	r7, #36	; 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004fec:	e002      	b.n	8004ff4 <chk_chr+0x12>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <chk_chr+0x26>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	4293      	cmp	r3, r2
 8005006:	d1f2      	bne.n	8004fee <chk_chr+0xc>
	return *str;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	781b      	ldrb	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
	...

08005018 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e02b      	b.n	8005080 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005028:	4955      	ldr	r1, [pc, #340]	; (8005180 <inc_lock+0x168>)
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800503e:	429a      	cmp	r2, r3
 8005040:	d11b      	bne.n	800507a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005042:	494f      	ldr	r1, [pc, #316]	; (8005180 <inc_lock+0x168>)
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3304      	adds	r3, #4
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800505a:	429a      	cmp	r2, r3
 800505c:	d10d      	bne.n	800507a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800505e:	4948      	ldr	r1, [pc, #288]	; (8005180 <inc_lock+0x168>)
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3308      	adds	r3, #8
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005076:	429a      	cmp	r2, r3
 8005078:	d006      	beq.n	8005088 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d9d0      	bls.n	8005028 <inc_lock+0x10>
 8005086:	e000      	b.n	800508a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005088:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d145      	bne.n	800511c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <inc_lock+0x84>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d809      	bhi.n	80050b6 <inc_lock+0x9e>
 80050a2:	4937      	ldr	r1, [pc, #220]	; (8005180 <inc_lock+0x168>)
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ef      	bne.n	8005096 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d101      	bne.n	80050c0 <inc_lock+0xa8>
 80050bc:	2300      	movs	r3, #0
 80050be:	e05a      	b.n	8005176 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80050c6:	482e      	ldr	r0, [pc, #184]	; (8005180 <inc_lock+0x168>)
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80050dc:	4828      	ldr	r0, [pc, #160]	; (8005180 <inc_lock+0x168>)
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	3304      	adds	r3, #4
 80050ec:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80050f4:	4922      	ldr	r1, [pc, #136]	; (8005180 <inc_lock+0x168>)
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3308      	adds	r3, #8
 8005104:	4602      	mov	r2, r0
 8005106:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005108:	491d      	ldr	r1, [pc, #116]	; (8005180 <inc_lock+0x168>)
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	330a      	adds	r3, #10
 8005118:	2200      	movs	r2, #0
 800511a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <inc_lock+0x124>
 8005122:	4917      	ldr	r1, [pc, #92]	; (8005180 <inc_lock+0x168>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	330a      	adds	r3, #10
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <inc_lock+0x124>
 8005138:	2300      	movs	r3, #0
 800513a:	e01c      	b.n	8005176 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <inc_lock+0x142>
 8005142:	490f      	ldr	r1, [pc, #60]	; (8005180 <inc_lock+0x168>)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	330a      	adds	r3, #10
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	b299      	uxth	r1, r3
 8005158:	e001      	b.n	800515e <inc_lock+0x146>
 800515a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800515e:	4808      	ldr	r0, [pc, #32]	; (8005180 <inc_lock+0x168>)
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	330a      	adds	r3, #10
 800516e:	460a      	mov	r2, r1
 8005170:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	200000c4 	.word	0x200000c4

08005184 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d82e      	bhi.n	80051f6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005198:	491b      	ldr	r1, [pc, #108]	; (8005208 <dec_lock+0x84>)
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	330a      	adds	r3, #10
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	d101      	bne.n	80051b8 <dec_lock+0x34>
 80051b4:	2300      	movs	r3, #0
 80051b6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80051b8:	89fb      	ldrh	r3, [r7, #14]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <dec_lock+0x40>
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051c4:	4910      	ldr	r1, [pc, #64]	; (8005208 <dec_lock+0x84>)
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	330a      	adds	r3, #10
 80051d4:	89fa      	ldrh	r2, [r7, #14]
 80051d6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051d8:	89fb      	ldrh	r3, [r7, #14]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <dec_lock+0x6c>
 80051de:	490a      	ldr	r1, [pc, #40]	; (8005208 <dec_lock+0x84>)
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	737b      	strb	r3, [r7, #13]
 80051f4:	e001      	b.n	80051fa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051f6:	2302      	movs	r3, #2
 80051f8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	200000c4 	.word	0x200000c4

0800520c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e016      	b.n	8005248 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800521a:	490f      	ldr	r1, [pc, #60]	; (8005258 <clear_lock+0x4c>)
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d108      	bne.n	8005242 <clear_lock+0x36>
 8005230:	4909      	ldr	r1, [pc, #36]	; (8005258 <clear_lock+0x4c>)
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d9e5      	bls.n	800521a <clear_lock+0xe>
	}
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	200000c4 	.word	0x200000c4

0800525c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800526e:	2b00      	cmp	r3, #0
 8005270:	d038      	beq.n	80052e4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005278:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	2301      	movs	r3, #1
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	f7ff fe4d 	bl	8004f24 <disk_write>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e026      	b.n	80052e4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	1ad2      	subs	r2, r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d218      	bcs.n	80052e4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	e010      	b.n	80052de <sync_window+0x82>
					wsect += fs->fsize;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	2301      	movs	r3, #1
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f7ff fe26 	bl	8004f24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3b01      	subs	r3, #1
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d8eb      	bhi.n	80052bc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d01b      	beq.n	8005340 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ffa7 	bl	800525c <sync_window>
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d113      	bne.n	8005340 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	2301      	movs	r3, #1
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	f7ff fdde 	bl	8004ee4 <disk_read>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	3b02      	subs	r3, #2
 8005358:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005360:	3b02      	subs	r3, #2
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d301      	bcc.n	800536c <clust2sect+0x22>
 8005368:	2300      	movs	r3, #0
 800536a:	e00a      	b.n	8005382 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005372:	461a      	mov	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	fb03 f202 	mul.w	r2, r3, r2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005380:	4413      	add	r3, r2
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d905      	bls.n	80053a8 <get_fat+0x1c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <get_fat+0x22>
		val = 1;	/* Internal error */
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e0a0      	b.n	80054f0 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d044      	beq.n	8005448 <get_fat+0xbc>
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d063      	beq.n	800548a <get_fat+0xfe>
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	f040 808a 	bne.w	80054dc <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	0a5b      	lsrs	r3, r3, #9
 80053e0:	4413      	add	r3, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff82 	bl	80052ee <move_window>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d178      	bne.n	80054e2 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	60fa      	str	r2, [r7, #12]
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0a5b      	lsrs	r3, r3, #9
 800540a:	4413      	add	r3, r2
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff6d 	bl	80052ee <move_window>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d165      	bne.n	80054e6 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <get_fat+0xb2>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	e002      	b.n	8005444 <get_fat+0xb8>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005444:	617b      	str	r3, [r7, #20]
			break;
 8005446:	e053      	b.n	80054f0 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	4413      	add	r3, r2
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff49 	bl	80052ee <move_window>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d143      	bne.n	80054ea <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3301      	adds	r3, #1
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	b21a      	sxth	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b21b      	sxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b21b      	sxth	r3, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	617b      	str	r3, [r7, #20]
			break;
 8005488:	e032      	b.n	80054f0 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	4413      	add	r3, r2
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff28 	bl	80052ee <move_window>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d124      	bne.n	80054ee <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	3303      	adds	r3, #3
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	061a      	lsls	r2, r3, #24
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3302      	adds	r3, #2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	4313      	orrs	r3, r2
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	3201      	adds	r2, #1
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	0212      	lsls	r2, r2, #8
 80054cc:	4313      	orrs	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054d8:	617b      	str	r3, [r7, #20]
			break;
 80054da:	e009      	b.n	80054f0 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80054dc:	2301      	movs	r3, #1
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e006      	b.n	80054f0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054e2:	bf00      	nop
 80054e4:	e004      	b.n	80054f0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054ee:	bf00      	nop
		}
	}

	return val;
 80054f0:	697b      	ldr	r3, [r7, #20]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d905      	bls.n	8005518 <put_fat+0x1e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d302      	bcc.n	800551e <put_fat+0x24>
		res = FR_INT_ERR;
 8005518:	2302      	movs	r3, #2
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e0f3      	b.n	8005706 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005524:	2b02      	cmp	r3, #2
 8005526:	d074      	beq.n	8005612 <put_fat+0x118>
 8005528:	2b03      	cmp	r3, #3
 800552a:	f000 8099 	beq.w	8005660 <put_fat+0x166>
 800552e:	2b01      	cmp	r3, #1
 8005530:	f040 80df 	bne.w	80056f2 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	0a5b      	lsrs	r3, r3, #9
 800554c:	4413      	add	r3, r2
 800554e:	4619      	mov	r1, r3
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff fecc 	bl	80052ee <move_window>
 8005556:	4603      	mov	r3, r0
 8005558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800555a:	7ffb      	ldrb	r3, [r7, #31]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 80cb 	bne.w	80056f8 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	617a      	str	r2, [r7, #20]
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <put_fat+0x9e>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b25b      	sxtb	r3, r3
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	b25a      	sxtb	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	b25b      	sxtb	r3, r3
 8005590:	4313      	orrs	r3, r2
 8005592:	b25b      	sxtb	r3, r3
 8005594:	b2db      	uxtb	r3, r3
 8005596:	e001      	b.n	800559c <put_fat+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	0a5b      	lsrs	r3, r3, #9
 80055b2:	4413      	add	r3, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fe99 	bl	80052ee <move_window>
 80055bc:	4603      	mov	r3, r0
 80055be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f040 809a 	bne.w	80056fc <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <put_fat+0xec>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e00e      	b.n	8005604 <put_fat+0x10a>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	b25b      	sxtb	r3, r3
 80055ec:	f023 030f 	bic.w	r3, r3, #15
 80055f0:	b25a      	sxtb	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	b25b      	sxtb	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005610:	e079      	b.n	8005706 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	4413      	add	r3, r2
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fe64 	bl	80052ee <move_window>
 8005626:	4603      	mov	r3, r0
 8005628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d167      	bne.n	8005700 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	b29b      	uxth	r3, r3
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	b29a      	uxth	r2, r3
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	3301      	adds	r3, #1
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800565e:	e052      	b.n	8005706 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	09db      	lsrs	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	4619      	mov	r1, r3
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fe3d 	bl	80052ee <move_window>
 8005674:	4603      	mov	r3, r0
 8005676:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d142      	bne.n	8005704 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	3303      	adds	r3, #3
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	061a      	lsls	r2, r3, #24
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3302      	adds	r3, #2
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	4313      	orrs	r3, r2
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	3201      	adds	r2, #1
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	0212      	lsls	r2, r2, #8
 80056a6:	4313      	orrs	r3, r2
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	0c1a      	lsrs	r2, r3, #16
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3302      	adds	r3, #2
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0e1a      	lsrs	r2, r3, #24
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	3303      	adds	r3, #3
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80056f0:	e009      	b.n	8005706 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80056f2:	2302      	movs	r3, #2
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e006      	b.n	8005706 <put_fat+0x20c>
			if (res != FR_OK) break;
 80056f8:	bf00      	nop
 80056fa:	e004      	b.n	8005706 <put_fat+0x20c>
			if (res != FR_OK) break;
 80056fc:	bf00      	nop
 80056fe:	e002      	b.n	8005706 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005704:	bf00      	nop
		}
	}

	return res;
 8005706:	7ffb      	ldrb	r3, [r7, #31]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10f      	bne.n	8005740 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005726:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <create_chain+0x2a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	429a      	cmp	r2, r3
 8005738:	d31c      	bcc.n	8005774 <create_chain+0x64>
 800573a:	2301      	movs	r3, #1
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	e019      	b.n	8005774 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fe22 	bl	800538c <get_fat>
 8005748:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d801      	bhi.n	8005754 <create_chain+0x44>
 8005750:	2301      	movs	r3, #1
 8005752:	e076      	b.n	8005842 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d101      	bne.n	8005760 <create_chain+0x50>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	e070      	b.n	8005842 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d201      	bcs.n	8005770 <create_chain+0x60>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	e068      	b.n	8005842 <create_chain+0x132>
		scl = clst;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	429a      	cmp	r2, r3
 8005788:	d307      	bcc.n	800579a <create_chain+0x8a>
			ncl = 2;
 800578a:	2302      	movs	r3, #2
 800578c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d901      	bls.n	800579a <create_chain+0x8a>
 8005796:	2300      	movs	r3, #0
 8005798:	e053      	b.n	8005842 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fdf5 	bl	800538c <get_fat>
 80057a2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d002      	beq.n	80057b8 <create_chain+0xa8>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <create_chain+0xac>
			return cs;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	e042      	b.n	8005842 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d1d9      	bne.n	8005778 <create_chain+0x68>
 80057c4:	2300      	movs	r3, #0
 80057c6:	e03c      	b.n	8005842 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80057c8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80057ca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fe92 	bl	80054fa <put_fat>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <create_chain+0xe4>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d006      	beq.n	80057f4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fe85 	bl	80054fa <put_fat>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11a      	bne.n	8005830 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d018      	beq.n	8005840 <create_chain+0x130>
			fs->free_clust--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800582e:	e007      	b.n	8005840 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <create_chain+0x12c>
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	e000      	b.n	800583e <create_chain+0x12e>
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005840:	697b      	ldr	r3, [r7, #20]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005864:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d007      	beq.n	800587c <dir_sdi+0x32>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005872:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d301      	bcc.n	8005880 <dir_sdi+0x36>
		return FR_INT_ERR;
 800587c:	2302      	movs	r3, #2
 800587e:	e074      	b.n	800596a <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <dir_sdi+0x56>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800588c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005890:	2b03      	cmp	r3, #3
 8005892:	d105      	bne.n	80058a0 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800589a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800589e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d111      	bne.n	80058ca <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058ac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80058b0:	461a      	mov	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d301      	bcc.n	80058bc <dir_sdi+0x72>
			return FR_INT_ERR;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e056      	b.n	800596a <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058c2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e032      	b.n	8005930 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058d0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80058d8:	e01e      	b.n	8005918 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fd52 	bl	800538c <get_fat>
 80058e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d101      	bne.n	80058f6 <dir_sdi+0xac>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e039      	b.n	800596a <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d907      	bls.n	800590c <dir_sdi+0xc2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005902:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	429a      	cmp	r2, r3
 800590a:	d301      	bcc.n	8005910 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800590c:	2302      	movs	r3, #2
 800590e:	e02c      	b.n	800596a <dir_sdi+0x120>
			idx -= ic;
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d2dc      	bcs.n	80058da <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fd0e 	bl	800534a <clust2sect>
 800592e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <dir_sdi+0xf8>
 800593e:	2302      	movs	r3, #2
 8005940:	e013      	b.n	800596a <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	091a      	lsrs	r2, r3, #4
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	441a      	add	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005956:	461a      	mov	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	015b      	lsls	r3, r3, #5
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005972:	b590      	push	{r4, r7, lr}
 8005974:	b087      	sub	sp, #28
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <dir_next+0x26>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <dir_next+0x2a>
		return FR_NO_FILE;
 8005998:	2304      	movs	r3, #4
 800599a:	e0dd      	b.n	8005b58 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 80c6 	bne.w	8005b34 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f0c0 80b0 	bcc.w	8005b34 <dir_next+0x1c2>
				return FR_NO_FILE;
 80059d4:	2304      	movs	r3, #4
 80059d6:	e0bf      	b.n	8005b58 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80059e2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80059e6:	3a01      	subs	r2, #1
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 80a2 	bne.w	8005b34 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f7ff fcc4 	bl	800538c <get_fat>
 8005a04:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d801      	bhi.n	8005a10 <dir_next+0x9e>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e0a3      	b.n	8005b58 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a16:	d101      	bne.n	8005a1c <dir_next+0xaa>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e09d      	b.n	8005b58 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d374      	bcc.n	8005b16 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <dir_next+0xc4>
 8005a32:	2304      	movs	r3, #4
 8005a34:	e090      	b.n	8005b58 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7ff fe63 	bl	8005710 <create_chain>
 8005a4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <dir_next+0xe4>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e080      	b.n	8005b58 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <dir_next+0xee>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e07b      	b.n	8005b58 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d101      	bne.n	8005a6c <dir_next+0xfa>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e075      	b.n	8005b58 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fbf2 	bl	800525c <sync_window>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <dir_next+0x110>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06a      	b.n	8005b58 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fa68 	bl	8004f64 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7ff fc51 	bl	800534a <clust2sect>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005aae:	2300      	movs	r3, #0
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e01b      	b.n	8005aec <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fbc8 	bl	800525c <sync_window>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <dir_next+0x164>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e040      	b.n	8005b58 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005adc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ae0:	3201      	adds	r2, #1
 8005ae2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005af2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005af6:	461a      	mov	r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d3da      	bcc.n	8005ab4 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b04:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	1a8a      	subs	r2, r1, r2
 8005b12:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fc0f 	bl	800534a <clust2sect>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b44:	461a      	mov	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	015b      	lsls	r3, r3, #5
 8005b4e:	441a      	add	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}

08005b60 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	331b      	adds	r3, #27
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	b21a      	sxth	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	331a      	adds	r3, #26
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b21b      	sxth	r3, r3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d10f      	bne.n	8005bae <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3315      	adds	r3, #21
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	b21a      	sxth	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

	return cl;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fe40 	bl	800584a <dir_sdi>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <dir_find+0x1e>
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	e03b      	b.n	8005c50 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7ff fb81 	bl	80052ee <move_window>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d128      	bne.n	8005c48 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bfc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <dir_find+0x56>
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	75fb      	strb	r3, [r7, #23]
 8005c0e:	e01e      	b.n	8005c4e <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	330b      	adds	r3, #11
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <dir_find+0x7a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c24:	220b      	movs	r2, #11
 8005c26:	4619      	mov	r1, r3
 8005c28:	6938      	ldr	r0, [r7, #16]
 8005c2a:	f7ff f9b4 	bl	8004f96 <mem_cmp>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005c34:	2100      	movs	r1, #0
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fe9b 	bl	8005972 <dir_next>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c8      	beq.n	8005bd8 <dir_find+0x1e>
 8005c46:	e002      	b.n	8005c4e <dir_find+0x94>
		if (res != FR_OK) break;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <dir_find+0x94>
			break;
 8005c4c:	bf00      	nop

	return res;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8005c62:	2304      	movs	r3, #4
 8005c64:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8005c66:	e03f      	b.n	8005ce8 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f7ff fb39 	bl	80052ee <move_window>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d136      	bne.n	8005cf4 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c8c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <dir_read+0x48>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	75fb      	strb	r3, [r7, #23]
 8005c9e:	e02e      	b.n	8005cfe <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	330b      	adds	r3, #11
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005caa:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2be5      	cmp	r3, #229	; 0xe5
 8005cb0:	d011      	beq.n	8005cd6 <dir_read+0x7e>
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb6:	d00e      	beq.n	8005cd6 <dir_read+0x7e>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	d00b      	beq.n	8005cd6 <dir_read+0x7e>
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	f023 0320 	bic.w	r3, r3, #32
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d010      	beq.n	8005cf8 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fe4a 	bl	8005972 <dir_next>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <dir_read+0xa4>
	while (dp->sect) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1ba      	bne.n	8005c68 <dir_read+0x10>
 8005cf2:	e004      	b.n	8005cfe <dir_read+0xa6>
		if (res != FR_OK) break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <dir_read+0xa6>
			break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <dir_read+0xa6>
		if (res != FR_OK) break;
 8005cfc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <dir_read+0xb4>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3309      	adds	r3, #9
 8005d24:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05a      	beq.n	8005de6 <get_fileinfo+0xd0>
		dir = dp->dir;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d36:	60bb      	str	r3, [r7, #8]
		i = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8005d3c:	e01c      	b.n	8005d78 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	617a      	str	r2, [r7, #20]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4413      	add	r3, r2
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d100      	bne.n	8005d54 <get_fileinfo+0x3e>
 8005d52:	e011      	b.n	8005d78 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d101      	bne.n	8005d5e <get_fileinfo+0x48>
 8005d5a:	23e5      	movs	r3, #229	; 0xe5
 8005d5c:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d104      	bne.n	8005d6e <get_fileinfo+0x58>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	613a      	str	r2, [r7, #16]
 8005d6a:	222e      	movs	r2, #46	; 0x2e
 8005d6c:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	613a      	str	r2, [r7, #16]
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b0a      	cmp	r3, #10
 8005d7c:	d9df      	bls.n	8005d3e <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	7ada      	ldrb	r2, [r3, #11]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	331f      	adds	r3, #31
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	061a      	lsls	r2, r3, #24
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	331e      	adds	r3, #30
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	4313      	orrs	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	321d      	adds	r2, #29
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	0212      	lsls	r2, r2, #8
 8005da0:	4313      	orrs	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	321c      	adds	r2, #28
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	431a      	orrs	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	3319      	adds	r3, #25
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	b21a      	sxth	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3318      	adds	r3, #24
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3317      	adds	r3, #23
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	b21a      	sxth	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3316      	adds	r3, #22
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr
	...

08005df8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e002      	b.n	8005e10 <create_name+0x18>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b2f      	cmp	r3, #47	; 0x2f
 8005e16:	d0f8      	beq.n	8005e0a <create_name+0x12>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e1e:	d0f4      	beq.n	8005e0a <create_name+0x12>
	sfn = dp->fn;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e26:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e28:	220b      	movs	r2, #11
 8005e2a:	2120      	movs	r1, #32
 8005e2c:	68b8      	ldr	r0, [r7, #8]
 8005e2e:	f7ff f899 	bl	8004f64 <mem_set>
	si = i = b = 0; ni = 8;
 8005e32:	2300      	movs	r3, #0
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	2308      	movs	r3, #8
 8005e40:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	617a      	str	r2, [r7, #20]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005e50:	7fbb      	ldrb	r3, [r7, #30]
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d953      	bls.n	8005efe <create_name+0x106>
 8005e56:	7fbb      	ldrb	r3, [r7, #30]
 8005e58:	2b2f      	cmp	r3, #47	; 0x2f
 8005e5a:	d050      	beq.n	8005efe <create_name+0x106>
 8005e5c:	7fbb      	ldrb	r3, [r7, #30]
 8005e5e:	2b5c      	cmp	r3, #92	; 0x5c
 8005e60:	d04d      	beq.n	8005efe <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005e62:	7fbb      	ldrb	r3, [r7, #30]
 8005e64:	2b2e      	cmp	r3, #46	; 0x2e
 8005e66:	d003      	beq.n	8005e70 <create_name+0x78>
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d30f      	bcc.n	8005e90 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d102      	bne.n	8005e7c <create_name+0x84>
 8005e76:	7fbb      	ldrb	r3, [r7, #30]
 8005e78:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7a:	d001      	beq.n	8005e80 <create_name+0x88>
 8005e7c:	2306      	movs	r3, #6
 8005e7e:	e073      	b.n	8005f68 <create_name+0x170>
			i = 8; ni = 11;
 8005e80:	2308      	movs	r3, #8
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	230b      	movs	r3, #11
 8005e86:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005e88:	7ffb      	ldrb	r3, [r7, #31]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e035      	b.n	8005efc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	da08      	bge.n	8005eaa <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	f043 0303 	orr.w	r3, r3, #3
 8005e9e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ea0:	7fbb      	ldrb	r3, [r7, #30]
 8005ea2:	3b80      	subs	r3, #128	; 0x80
 8005ea4:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <create_name+0x178>)
 8005ea6:	5cd3      	ldrb	r3, [r2, r3]
 8005ea8:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005eaa:	7fbb      	ldrb	r3, [r7, #30]
 8005eac:	4619      	mov	r1, r3
 8005eae:	4831      	ldr	r0, [pc, #196]	; (8005f74 <create_name+0x17c>)
 8005eb0:	f7ff f897 	bl	8004fe2 <chk_chr>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <create_name+0xc6>
				return FR_INVALID_NAME;
 8005eba:	2306      	movs	r3, #6
 8005ebc:	e054      	b.n	8005f68 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005ebe:	7fbb      	ldrb	r3, [r7, #30]
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d907      	bls.n	8005ed4 <create_name+0xdc>
 8005ec4:	7fbb      	ldrb	r3, [r7, #30]
 8005ec6:	2b5a      	cmp	r3, #90	; 0x5a
 8005ec8:	d804      	bhi.n	8005ed4 <create_name+0xdc>
				b |= 2;
 8005eca:	7ffb      	ldrb	r3, [r7, #31]
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e00c      	b.n	8005eee <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005ed4:	7fbb      	ldrb	r3, [r7, #30]
 8005ed6:	2b60      	cmp	r3, #96	; 0x60
 8005ed8:	d909      	bls.n	8005eee <create_name+0xf6>
 8005eda:	7fbb      	ldrb	r3, [r7, #30]
 8005edc:	2b7a      	cmp	r3, #122	; 0x7a
 8005ede:	d806      	bhi.n	8005eee <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	7fbb      	ldrb	r3, [r7, #30]
 8005eea:	3b20      	subs	r3, #32
 8005eec:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	613a      	str	r2, [r7, #16]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	7fba      	ldrb	r2, [r7, #30]
 8005efa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005efc:	e7a1      	b.n	8005e42 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	441a      	add	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005f08:	7fbb      	ldrb	r3, [r7, #30]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d801      	bhi.n	8005f12 <create_name+0x11a>
 8005f0e:	2304      	movs	r3, #4
 8005f10:	e000      	b.n	8005f14 <create_name+0x11c>
 8005f12:	2300      	movs	r3, #0
 8005f14:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <create_name+0x128>
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	e023      	b.n	8005f68 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2be5      	cmp	r3, #229	; 0xe5
 8005f26:	d102      	bne.n	8005f2e <create_name+0x136>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d102      	bne.n	8005f3a <create_name+0x142>
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005f3a:	7ffb      	ldrb	r3, [r7, #31]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <create_name+0x154>
 8005f44:	7fbb      	ldrb	r3, [r7, #30]
 8005f46:	f043 0310 	orr.w	r3, r3, #16
 8005f4a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005f4c:	7ffb      	ldrb	r3, [r7, #31]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d103      	bne.n	8005f5e <create_name+0x166>
 8005f56:	7fbb      	ldrb	r3, [r7, #30]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	330b      	adds	r3, #11
 8005f62:	7fba      	ldrb	r2, [r7, #30]
 8005f64:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f66:	2300      	movs	r3, #0
#endif
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	08007e60 	.word	0x08007e60
 8005f74:	080075c4 	.word	0x080075c4

08005f78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b2f      	cmp	r3, #47	; 0x2f
 8005f88:	d003      	beq.n	8005f92 <follow_path+0x1a>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b5c      	cmp	r3, #92	; 0x5c
 8005f90:	d102      	bne.n	8005f98 <follow_path+0x20>
		path++;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b1f      	cmp	r3, #31
 8005fa6:	d80a      	bhi.n	8005fbe <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fc4d 	bl	800584a <dir_sdi>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005fbc:	e045      	b.n	800604a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff ff18 	bl	8005df8 <create_name>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d136      	bne.n	8006040 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fdf1 	bl	8005bba <dir_find>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005fe2:	7adb      	ldrb	r3, [r3, #11]
 8005fe4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d128      	bne.n	8006044 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d123      	bne.n	8006044 <follow_path+0xcc>
 8005ffc:	2305      	movs	r3, #5
 8005ffe:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006000:	e020      	b.n	8006044 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11d      	bne.n	8006048 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006012:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	330b      	adds	r3, #11
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006022:	2305      	movs	r3, #5
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e010      	b.n	800604a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fd95 	bl	8005b60 <ld_clust>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800603e:	e7be      	b.n	8005fbe <follow_path+0x46>
			if (res != FR_OK) break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <follow_path+0xd2>
				break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006048:	bf00      	nop
		}
	}

	return res;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d031      	beq.n	80060ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e002      	b.n	8006078 <get_ldnumber+0x24>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	3301      	adds	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b20      	cmp	r3, #32
 800607e:	d903      	bls.n	8006088 <get_ldnumber+0x34>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b3a      	cmp	r3, #58	; 0x3a
 8006086:	d1f4      	bne.n	8006072 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b3a      	cmp	r3, #58	; 0x3a
 800608e:	d11c      	bne.n	80060ca <get_ldnumber+0x76>
			tp = *path;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	3b30      	subs	r3, #48	; 0x30
 80060a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b09      	cmp	r3, #9
 80060a6:	d80e      	bhi.n	80060c6 <get_ldnumber+0x72>
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d10a      	bne.n	80060c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d107      	bne.n	80060c6 <get_ldnumber+0x72>
					vol = (int)i;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	3301      	adds	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	e002      	b.n	80060d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060ce:	693b      	ldr	r3, [r7, #16]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
	...

080060dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff f8f7 	bl	80052ee <move_window>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <check_fs+0x2e>
		return 3;
 8006106:	2303      	movs	r3, #3
 8006108:	e04a      	b.n	80061a0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006110:	3301      	adds	r3, #1
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	b21a      	sxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800611e:	b21b      	sxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	b21b      	sxth	r3, r3
 8006124:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <check_fs+0xcc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d001      	beq.n	800612e <check_fs+0x52>
		return 2;
 800612a:	2302      	movs	r3, #2
 800612c:	e038      	b.n	80061a0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3336      	adds	r3, #54	; 0x36
 8006132:	3303      	adds	r3, #3
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	061a      	lsls	r2, r3, #24
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3336      	adds	r3, #54	; 0x36
 800613c:	3302      	adds	r3, #2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	041b      	lsls	r3, r3, #16
 8006142:	4313      	orrs	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	3236      	adds	r2, #54	; 0x36
 8006148:	3201      	adds	r2, #1
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	0212      	lsls	r2, r2, #8
 800614e:	4313      	orrs	r3, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006156:	4313      	orrs	r3, r2
 8006158:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800615c:	4a13      	ldr	r2, [pc, #76]	; (80061ac <check_fs+0xd0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <check_fs+0x8a>
		return 0;
 8006162:	2300      	movs	r3, #0
 8006164:	e01c      	b.n	80061a0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3352      	adds	r3, #82	; 0x52
 800616a:	3303      	adds	r3, #3
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	061a      	lsls	r2, r3, #24
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3352      	adds	r3, #82	; 0x52
 8006174:	3302      	adds	r3, #2
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	4313      	orrs	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	3252      	adds	r2, #82	; 0x52
 8006180:	3201      	adds	r2, #1
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	0212      	lsls	r2, r2, #8
 8006186:	4313      	orrs	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800618e:	4313      	orrs	r3, r2
 8006190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006194:	4a05      	ldr	r2, [pc, #20]	; (80061ac <check_fs+0xd0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <check_fs+0xc2>
		return 0;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <check_fs+0xc4>

	return 1;
 800619e:	2301      	movs	r3, #1
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	ffffaa55 	.word	0xffffaa55
 80061ac:	00544146 	.word	0x00544146

080061b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b096      	sub	sp, #88	; 0x58
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80061c4:	68b8      	ldr	r0, [r7, #8]
 80061c6:	f7ff ff45 	bl	8006054 <get_ldnumber>
 80061ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da01      	bge.n	80061d6 <find_volume+0x26>
 80061d2:	230b      	movs	r3, #11
 80061d4:	e2aa      	b.n	800672c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80061d6:	4a9e      	ldr	r2, [pc, #632]	; (8006450 <find_volume+0x2a0>)
 80061d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <find_volume+0x3a>
 80061e6:	230c      	movs	r3, #12
 80061e8:	e2a0      	b.n	800672c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fe2f 	bl	8004e64 <disk_status>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800620c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10c      	bne.n	8006232 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <find_volume+0x7e>
 800621e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800622a:	230a      	movs	r3, #10
 800622c:	e27e      	b.n	800672c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800622e:	2300      	movs	r3, #0
 8006230:	e27c      	b.n	800672c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	b2da      	uxtb	r2, r3
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fe24 	bl	8004e98 <disk_initialize>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006262:	2303      	movs	r3, #3
 8006264:	e262      	b.n	800672c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d007      	beq.n	800627c <find_volume+0xcc>
 800626c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006278:	230a      	movs	r3, #10
 800627a:	e257      	b.n	800672c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006280:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006282:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006284:	f7ff ff2a 	bl	80060dc <check_fs>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800628e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006292:	2b01      	cmp	r3, #1
 8006294:	d155      	bne.n	8006342 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006296:	2300      	movs	r3, #0
 8006298:	643b      	str	r3, [r7, #64]	; 0x40
 800629a:	e029      	b.n	80062f0 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800629c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80062a6:	4413      	add	r3, r2
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3304      	adds	r3, #4
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d012      	beq.n	80062da <find_volume+0x12a>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	330b      	adds	r3, #11
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	061a      	lsls	r2, r3, #24
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	330a      	adds	r3, #10
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	4313      	orrs	r3, r2
 80062c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c8:	3209      	adds	r2, #9
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	0212      	lsls	r2, r2, #8
 80062ce:	4313      	orrs	r3, r2
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	3208      	adds	r2, #8
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	e000      	b.n	80062dc <find_volume+0x12c>
 80062da:	2200      	movs	r2, #0
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80062e4:	440b      	add	r3, r1
 80062e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	3301      	adds	r3, #1
 80062ee:	643b      	str	r3, [r7, #64]	; 0x40
 80062f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d9d2      	bls.n	800629c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80062f6:	2300      	movs	r3, #0
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <find_volume+0x156>
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	3b01      	subs	r3, #1
 8006304:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800630e:	4413      	add	r3, r2
 8006310:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <find_volume+0x178>
 800631c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800631e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006320:	f7ff fedc 	bl	80060dc <check_fs>
 8006324:	4603      	mov	r3, r0
 8006326:	e000      	b.n	800632a <find_volume+0x17a>
 8006328:	2302      	movs	r3, #2
 800632a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800632e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <find_volume+0x192>
 8006336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006338:	3301      	adds	r3, #1
 800633a:	643b      	str	r3, [r7, #64]	; 0x40
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	2b03      	cmp	r3, #3
 8006340:	d9e1      	bls.n	8006306 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006346:	2b03      	cmp	r3, #3
 8006348:	d101      	bne.n	800634e <find_volume+0x19e>
 800634a:	2301      	movs	r3, #1
 800634c:	e1ee      	b.n	800672c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800634e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <find_volume+0x1aa>
 8006356:	230d      	movs	r3, #13
 8006358:	e1e8      	b.n	800672c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	7b1b      	ldrb	r3, [r3, #12]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	b21a      	sxth	r2, r3
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	7adb      	ldrb	r3, [r3, #11]
 8006366:	b21b      	sxth	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b21b      	sxth	r3, r3
 800636c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006370:	d001      	beq.n	8006376 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8006372:	230d      	movs	r3, #13
 8006374:	e1da      	b.n	800672c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	7ddb      	ldrb	r3, [r3, #23]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	b21a      	sxth	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	7d9b      	ldrb	r3, [r3, #22]
 8006382:	b21b      	sxth	r3, r3
 8006384:	4313      	orrs	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d112      	bne.n	80063b8 <find_volume+0x208>
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006398:	061a      	lsls	r2, r3, #24
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	4313      	orrs	r3, r2
 80063a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80063aa:	0212      	lsls	r2, r2, #8
 80063ac:	4313      	orrs	r3, r2
 80063ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80063b4:	4313      	orrs	r3, r2
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	7c1a      	ldrb	r2, [r3, #16]
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d006      	beq.n	80063e2 <find_volume+0x232>
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d001      	beq.n	80063e2 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80063de:	230d      	movs	r3, #13
 80063e0:	e1a4      	b.n	800672c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80063e8:	461a      	mov	r2, r3
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	7b5a      	ldrb	r2, [r3, #13]
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <find_volume+0x26c>
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800640c:	461a      	mov	r2, r3
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006414:	3b01      	subs	r3, #1
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800641c:	230d      	movs	r3, #13
 800641e:	e185      	b.n	800672c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	7c9b      	ldrb	r3, [r3, #18]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	b21a      	sxth	r2, r3
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	7c5b      	ldrb	r3, [r3, #17]
 800642c:	b21b      	sxth	r3, r3
 800642e:	4313      	orrs	r3, r2
 8006430:	b21b      	sxth	r3, r3
 8006432:	b29a      	uxth	r2, r3
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800644a:	230d      	movs	r3, #13
 800644c:	e16e      	b.n	800672c <find_volume+0x57c>
 800644e:	bf00      	nop
 8006450:	200000bc 	.word	0x200000bc

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	7d1b      	ldrb	r3, [r3, #20]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	b21a      	sxth	r2, r3
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	7cdb      	ldrb	r3, [r3, #19]
 8006460:	b21b      	sxth	r3, r3
 8006462:	4313      	orrs	r3, r2
 8006464:	b21b      	sxth	r3, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800646a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646c:	2b00      	cmp	r3, #0
 800646e:	d112      	bne.n	8006496 <find_volume+0x2e6>
 8006470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006472:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006476:	061a      	lsls	r2, r3, #24
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4313      	orrs	r3, r2
 8006482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006484:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006488:	0212      	lsls	r2, r2, #8
 800648a:	4313      	orrs	r3, r2
 800648c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006492:	4313      	orrs	r3, r2
 8006494:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	7bdb      	ldrb	r3, [r3, #15]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	b21a      	sxth	r2, r3
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	7b9b      	ldrb	r3, [r3, #14]
 80064a2:	b21b      	sxth	r3, r3
 80064a4:	4313      	orrs	r3, r2
 80064a6:	b21b      	sxth	r3, r3
 80064a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80064aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <find_volume+0x304>
 80064b0:	230d      	movs	r3, #13
 80064b2:	e13b      	b.n	800672c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80064b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	4413      	add	r3, r2
 80064ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064bc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80064c0:	0912      	lsrs	r2, r2, #4
 80064c2:	b292      	uxth	r2, r2
 80064c4:	4413      	add	r3, r2
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80064c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d201      	bcs.n	80064d4 <find_volume+0x324>
 80064d0:	230d      	movs	r3, #13
 80064d2:	e12b      	b.n	800672c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80064d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064dc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80064e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <find_volume+0x340>
 80064ec:	230d      	movs	r3, #13
 80064ee:	e11d      	b.n	800672c <find_volume+0x57c>
	fmt = FS_FAT12;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d902      	bls.n	8006506 <find_volume+0x356>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800650c:	4293      	cmp	r3, r2
 800650e:	d902      	bls.n	8006516 <find_volume+0x366>
 8006510:	2303      	movs	r3, #3
 8006512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1c9a      	adds	r2, r3, #2
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006524:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006528:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	441a      	add	r2, r3
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	441a      	add	r2, r3
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006544:	2b03      	cmp	r3, #3
 8006546:	d121      	bne.n	800658c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <find_volume+0x3a6>
 8006552:	230d      	movs	r3, #13
 8006554:	e0ea      	b.n	800672c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800655c:	061a      	lsls	r2, r3, #24
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	4313      	orrs	r3, r2
 8006568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800656e:	0212      	lsls	r2, r2, #8
 8006570:	4313      	orrs	r3, r2
 8006572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006574:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006578:	431a      	orrs	r2, r3
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	e025      	b.n	80065d8 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <find_volume+0x3ea>
 8006596:	230d      	movs	r3, #13
 8006598:	e0c8      	b.n	800672c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	441a      	add	r2, r3
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d104      	bne.n	80065bc <find_volume+0x40c>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	e00c      	b.n	80065d6 <find_volume+0x426>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	085a      	lsrs	r2, r3, #1
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80065de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80065e4:	0a5b      	lsrs	r3, r3, #9
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d201      	bcs.n	80065ee <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 80065ea:	230d      	movs	r3, #13
 80065ec:	e09e      	b.n	800672c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800660c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006610:	2b03      	cmp	r3, #3
 8006612:	d177      	bne.n	8006704 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b21a      	sxth	r2, r3
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006624:	b21b      	sxth	r3, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	b21b      	sxth	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	d16a      	bne.n	8006704 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800662e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006630:	3301      	adds	r3, #1
 8006632:	4619      	mov	r1, r3
 8006634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006636:	f7fe fe5a 	bl	80052ee <move_window>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d161      	bne.n	8006704 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	b21a      	sxth	r2, r3
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006658:	b21b      	sxth	r3, r3
 800665a:	4313      	orrs	r3, r2
 800665c:	b21b      	sxth	r3, r3
 800665e:	4a35      	ldr	r2, [pc, #212]	; (8006734 <find_volume+0x584>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d14f      	bne.n	8006704 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	061a      	lsls	r2, r3, #24
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	4313      	orrs	r3, r2
 8006672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006674:	7852      	ldrb	r2, [r2, #1]
 8006676:	0212      	lsls	r2, r2, #8
 8006678:	4313      	orrs	r3, r2
 800667a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	4313      	orrs	r3, r2
 8006680:	4a2d      	ldr	r2, [pc, #180]	; (8006738 <find_volume+0x588>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d13e      	bne.n	8006704 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800668c:	061a      	lsls	r2, r3, #24
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	4313      	orrs	r3, r2
 8006698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800669e:	0212      	lsls	r2, r2, #8
 80066a0:	4313      	orrs	r3, r2
 80066a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80066a8:	4313      	orrs	r3, r2
 80066aa:	4a24      	ldr	r2, [pc, #144]	; (800673c <find_volume+0x58c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d129      	bne.n	8006704 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80066b6:	061a      	lsls	r2, r3, #24
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	4313      	orrs	r3, r2
 80066c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80066c8:	0212      	lsls	r2, r2, #8
 80066ca:	4313      	orrs	r3, r2
 80066cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ce:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80066d2:	431a      	orrs	r2, r3
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80066e0:	061a      	lsls	r2, r3, #24
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	4313      	orrs	r3, r2
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80066f2:	0212      	lsls	r2, r2, #8
 80066f4:	4313      	orrs	r3, r2
 80066f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80066fc:	431a      	orrs	r2, r3
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800670a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <find_volume+0x590>)
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <find_volume+0x590>)
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <find_volume+0x590>)
 800671c:	881a      	ldrh	r2, [r3, #0]
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006726:	f7fe fd71 	bl	800520c <clear_lock>
#endif

	return FR_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3758      	adds	r7, #88	; 0x58
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	ffffaa55 	.word	0xffffaa55
 8006738:	41615252 	.word	0x41615252
 800673c:	61417272 	.word	0x61417272
 8006740:	200000c0 	.word	0x200000c0

08006744 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d022      	beq.n	800679c <validate+0x58>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01d      	beq.n	800679c <validate+0x58>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800676a:	2b00      	cmp	r3, #0
 800676c:	d016      	beq.n	800679c <validate+0x58>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006774:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800677e:	429a      	cmp	r2, r3
 8006780:	d10c      	bne.n	800679c <validate+0x58>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006788:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fb69 	bl	8004e64 <disk_status>
 8006792:	4603      	mov	r3, r0
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800679c:	2309      	movs	r3, #9
 800679e:	e000      	b.n	80067a2 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff fc46 	bl	8006054 <get_ldnumber>
 80067c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da01      	bge.n	80067d4 <f_mount+0x28>
 80067d0:	230b      	movs	r3, #11
 80067d2:	e02d      	b.n	8006830 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <f_mount+0x8c>)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80067e4:	69b8      	ldr	r0, [r7, #24]
 80067e6:	f7fe fd11 	bl	800520c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	490d      	ldr	r1, [pc, #52]	; (8006838 <f_mount+0x8c>)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <f_mount+0x6a>
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <f_mount+0x6e>
 8006816:	2300      	movs	r3, #0
 8006818:	e00a      	b.n	8006830 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800681a:	f107 0108 	add.w	r1, r7, #8
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	2200      	movs	r2, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fcc3 	bl	80061b0 <find_volume>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800682e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200000bc 	.word	0x200000bc

0800683c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <f_opendir+0x14>
 800684c:	2309      	movs	r3, #9
 800684e:	e073      	b.n	8006938 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8006850:	4639      	mov	r1, r7
 8006852:	f107 0318 	add.w	r3, r7, #24
 8006856:	2200      	movs	r2, #0
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fca9 	bl	80061b0 <find_volume>
 800685e:	4603      	mov	r3, r0
 8006860:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15f      	bne.n	8006928 <f_opendir+0xec>
		dp->fs = fs;
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f107 020c 	add.w	r2, r7, #12
 8006876:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff fb7a 	bl	8005f78 <follow_path>
 8006884:	4603      	mov	r3, r0
 8006886:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8006888:	7ffb      	ldrb	r3, [r7, #31]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d147      	bne.n	800691e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800689e:	330b      	adds	r3, #11
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7ff f953 	bl	8005b60 <ld_clust>
 80068ba:	4602      	mov	r2, r0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80068c2:	e001      	b.n	80068c8 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80068c4:	2305      	movs	r3, #5
 80068c6:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 80068c8:	7ffb      	ldrb	r3, [r7, #31]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d127      	bne.n	800691e <f_opendir+0xe2>
				dp->id = fs->id;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80068da:	2100      	movs	r1, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fe ffb4 	bl	800584a <dir_sdi>
 80068e2:	4603      	mov	r3, r0
 80068e4:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 80068e6:	7ffb      	ldrb	r3, [r7, #31]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d118      	bne.n	800691e <f_opendir+0xe2>
					if (dp->sclust) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00f      	beq.n	8006916 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80068f6:	2100      	movs	r1, #0
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fe fb8d 	bl	8005018 <inc_lock>
 80068fe:	4602      	mov	r2, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8006910:	2312      	movs	r3, #18
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e003      	b.n	800691e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d101      	bne.n	8006928 <f_opendir+0xec>
 8006924:	2305      	movs	r3, #5
 8006926:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8006928:	7ffb      	ldrb	r3, [r7, #31]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <f_opendir+0xfa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8006936:	7ffb      	ldrb	r3, [r7, #31]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fefb 	bl	8006744 <validate>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d113      	bne.n	8006980 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe fc0b 	bl	8005184 <dec_lock>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fed5 	bl	8006744 <validate>
 800699a:	4603      	mov	r3, r0
 800699c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d133      	bne.n	8006a0c <f_readdir+0x82>
		if (!fno) {
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80069aa:	2100      	movs	r1, #0
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe ff4c 	bl	800584a <dir_sdi>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
 80069b6:	e029      	b.n	8006a0c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f107 0208 	add.w	r2, r7, #8
 80069be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f947 	bl	8005c58 <dir_read>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d105      	bne.n	80069e0 <f_readdir+0x56>
				dp->sect = 0;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d112      	bne.n	8006a0c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff f994 	bl	8005d16 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80069ee:	2100      	movs	r1, #0
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fe ffbe 	bl	8005972 <dir_next>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d105      	bne.n	8006a0c <f_readdir+0x82>
					dp->sect = 0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006a2e:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a30:	7a5b      	ldrb	r3, [r3, #9]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d831      	bhi.n	8006a9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a38:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a3a:	7a5b      	ldrb	r3, [r3, #9]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a42:	2100      	movs	r1, #0
 8006a44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a48:	7a5b      	ldrb	r3, [r3, #9]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a58:	7a5b      	ldrb	r3, [r3, #9]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a60:	4413      	add	r3, r2
 8006a62:	79fa      	ldrb	r2, [r7, #7]
 8006a64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	b2d1      	uxtb	r1, r2
 8006a70:	4a0d      	ldr	r2, [pc, #52]	; (8006aa8 <FATFS_LinkDriverEx+0x90>)
 8006a72:	7251      	strb	r1, [r2, #9]
 8006a74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a76:	7dbb      	ldrb	r3, [r7, #22]
 8006a78:	3330      	adds	r3, #48	; 0x30
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3301      	adds	r3, #1
 8006a84:	223a      	movs	r2, #58	; 0x3a
 8006a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	222f      	movs	r2, #47	; 0x2f
 8006a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3303      	adds	r3, #3
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr
 8006aa8:	200000dc 	.word	0x200000dc

08006aac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ffac 	bl	8006a18 <FATFS_LinkDriverEx>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <__errno>:
 8006acc:	4b01      	ldr	r3, [pc, #4]	; (8006ad4 <__errno+0x8>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000030 	.word	0x20000030

08006ad8 <__libc_init_array>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	2500      	movs	r5, #0
 8006adc:	4e0c      	ldr	r6, [pc, #48]	; (8006b10 <__libc_init_array+0x38>)
 8006ade:	4c0d      	ldr	r4, [pc, #52]	; (8006b14 <__libc_init_array+0x3c>)
 8006ae0:	1ba4      	subs	r4, r4, r6
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	42a5      	cmp	r5, r4
 8006ae6:	d109      	bne.n	8006afc <__libc_init_array+0x24>
 8006ae8:	f000 fc4c 	bl	8007384 <_init>
 8006aec:	2500      	movs	r5, #0
 8006aee:	4e0a      	ldr	r6, [pc, #40]	; (8006b18 <__libc_init_array+0x40>)
 8006af0:	4c0a      	ldr	r4, [pc, #40]	; (8006b1c <__libc_init_array+0x44>)
 8006af2:	1ba4      	subs	r4, r4, r6
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	42a5      	cmp	r5, r4
 8006af8:	d105      	bne.n	8006b06 <__libc_init_array+0x2e>
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b00:	4798      	blx	r3
 8006b02:	3501      	adds	r5, #1
 8006b04:	e7ee      	b.n	8006ae4 <__libc_init_array+0xc>
 8006b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b0a:	4798      	blx	r3
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	e7f2      	b.n	8006af6 <__libc_init_array+0x1e>
 8006b10:	08007f74 	.word	0x08007f74
 8006b14:	08007f74 	.word	0x08007f74
 8006b18:	08007f74 	.word	0x08007f74
 8006b1c:	08007f78 	.word	0x08007f78

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0302 	add.w	r3, r1, r2
 8006b28:	d807      	bhi.n	8006b3a <memmove+0x1a>
 8006b2a:	1e42      	subs	r2, r0, #1
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	d00a      	beq.n	8006b46 <memmove+0x26>
 8006b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b38:	e7f8      	b.n	8006b2c <memmove+0xc>
 8006b3a:	4283      	cmp	r3, r0
 8006b3c:	d9f5      	bls.n	8006b2a <memmove+0xa>
 8006b3e:	1881      	adds	r1, r0, r2
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	42d3      	cmn	r3, r2
 8006b44:	d100      	bne.n	8006b48 <memmove+0x28>
 8006b46:	bd10      	pop	{r4, pc}
 8006b48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b50:	e7f7      	b.n	8006b42 <memmove+0x22>

08006b52 <memset>:
 8006b52:	4603      	mov	r3, r0
 8006b54:	4402      	add	r2, r0
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d100      	bne.n	8006b5c <memset+0xa>
 8006b5a:	4770      	bx	lr
 8006b5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b60:	e7f9      	b.n	8006b56 <memset+0x4>
	...

08006b64 <siprintf>:
 8006b64:	b40e      	push	{r1, r2, r3}
 8006b66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b6a:	b500      	push	{lr}
 8006b6c:	b09c      	sub	sp, #112	; 0x70
 8006b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b70:	9002      	str	r0, [sp, #8]
 8006b72:	9006      	str	r0, [sp, #24]
 8006b74:	9107      	str	r1, [sp, #28]
 8006b76:	9104      	str	r1, [sp, #16]
 8006b78:	4808      	ldr	r0, [pc, #32]	; (8006b9c <siprintf+0x38>)
 8006b7a:	4909      	ldr	r1, [pc, #36]	; (8006ba0 <siprintf+0x3c>)
 8006b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b80:	9105      	str	r1, [sp, #20]
 8006b82:	6800      	ldr	r0, [r0, #0]
 8006b84:	a902      	add	r1, sp, #8
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	f000 f87c 	bl	8006c84 <_svfiprintf_r>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	9b02      	ldr	r3, [sp, #8]
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	b01c      	add	sp, #112	; 0x70
 8006b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b98:	b003      	add	sp, #12
 8006b9a:	4770      	bx	lr
 8006b9c:	20000030 	.word	0x20000030
 8006ba0:	ffff0208 	.word	0xffff0208

08006ba4 <strncpy>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	3901      	subs	r1, #1
 8006baa:	b902      	cbnz	r2, 8006bae <strncpy+0xa>
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	4623      	mov	r3, r4
 8006bb0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006bb4:	1e56      	subs	r6, r2, #1
 8006bb6:	f803 5b01 	strb.w	r5, [r3], #1
 8006bba:	b92d      	cbnz	r5, 8006bc8 <strncpy+0x24>
 8006bbc:	4414      	add	r4, r2
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	d0f4      	beq.n	8006bac <strncpy+0x8>
 8006bc2:	f803 5b01 	strb.w	r5, [r3], #1
 8006bc6:	e7fa      	b.n	8006bbe <strncpy+0x1a>
 8006bc8:	461c      	mov	r4, r3
 8006bca:	4632      	mov	r2, r6
 8006bcc:	e7ed      	b.n	8006baa <strncpy+0x6>

08006bce <__ssputs_r>:
 8006bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd2:	688e      	ldr	r6, [r1, #8]
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	429e      	cmp	r6, r3
 8006bd8:	460c      	mov	r4, r1
 8006bda:	4690      	mov	r8, r2
 8006bdc:	4699      	mov	r9, r3
 8006bde:	d837      	bhi.n	8006c50 <__ssputs_r+0x82>
 8006be0:	898a      	ldrh	r2, [r1, #12]
 8006be2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006be6:	d031      	beq.n	8006c4c <__ssputs_r+0x7e>
 8006be8:	2302      	movs	r3, #2
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	6909      	ldr	r1, [r1, #16]
 8006bee:	1a6f      	subs	r7, r5, r1
 8006bf0:	6965      	ldr	r5, [r4, #20]
 8006bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bf6:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bfa:	f109 0301 	add.w	r3, r9, #1
 8006bfe:	443b      	add	r3, r7
 8006c00:	429d      	cmp	r5, r3
 8006c02:	bf38      	it	cc
 8006c04:	461d      	movcc	r5, r3
 8006c06:	0553      	lsls	r3, r2, #21
 8006c08:	d530      	bpl.n	8006c6c <__ssputs_r+0x9e>
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f000 fb20 	bl	8007250 <_malloc_r>
 8006c10:	4606      	mov	r6, r0
 8006c12:	b950      	cbnz	r0, 8006c2a <__ssputs_r+0x5c>
 8006c14:	230c      	movs	r3, #12
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	f8ca 3000 	str.w	r3, [sl]
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	463a      	mov	r2, r7
 8006c2c:	6921      	ldr	r1, [r4, #16]
 8006c2e:	f000 fab7 	bl	80071a0 <memcpy>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	6126      	str	r6, [r4, #16]
 8006c40:	443e      	add	r6, r7
 8006c42:	6026      	str	r6, [r4, #0]
 8006c44:	464e      	mov	r6, r9
 8006c46:	6165      	str	r5, [r4, #20]
 8006c48:	1bed      	subs	r5, r5, r7
 8006c4a:	60a5      	str	r5, [r4, #8]
 8006c4c:	454e      	cmp	r6, r9
 8006c4e:	d900      	bls.n	8006c52 <__ssputs_r+0x84>
 8006c50:	464e      	mov	r6, r9
 8006c52:	4632      	mov	r2, r6
 8006c54:	4641      	mov	r1, r8
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	f7ff ff62 	bl	8006b20 <memmove>
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	2000      	movs	r0, #0
 8006c60:	1b9b      	subs	r3, r3, r6
 8006c62:	60a3      	str	r3, [r4, #8]
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	441e      	add	r6, r3
 8006c68:	6026      	str	r6, [r4, #0]
 8006c6a:	e7dc      	b.n	8006c26 <__ssputs_r+0x58>
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	f000 fb49 	bl	8007304 <_realloc_r>
 8006c72:	4606      	mov	r6, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1e2      	bne.n	8006c3e <__ssputs_r+0x70>
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	f000 fa9c 	bl	80071b8 <_free_r>
 8006c80:	e7c8      	b.n	8006c14 <__ssputs_r+0x46>
	...

08006c84 <_svfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	461d      	mov	r5, r3
 8006c8a:	898b      	ldrh	r3, [r1, #12]
 8006c8c:	b09d      	sub	sp, #116	; 0x74
 8006c8e:	061f      	lsls	r7, r3, #24
 8006c90:	4680      	mov	r8, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4616      	mov	r6, r2
 8006c96:	d50f      	bpl.n	8006cb8 <_svfiprintf_r+0x34>
 8006c98:	690b      	ldr	r3, [r1, #16]
 8006c9a:	b96b      	cbnz	r3, 8006cb8 <_svfiprintf_r+0x34>
 8006c9c:	2140      	movs	r1, #64	; 0x40
 8006c9e:	f000 fad7 	bl	8007250 <_malloc_r>
 8006ca2:	6020      	str	r0, [r4, #0]
 8006ca4:	6120      	str	r0, [r4, #16]
 8006ca6:	b928      	cbnz	r0, 8006cb4 <_svfiprintf_r+0x30>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	f8c8 3000 	str.w	r3, [r8]
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	e0c8      	b.n	8006e46 <_svfiprintf_r+0x1c2>
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	6163      	str	r3, [r4, #20]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9309      	str	r3, [sp, #36]	; 0x24
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cc2:	2330      	movs	r3, #48	; 0x30
 8006cc4:	f04f 0b01 	mov.w	fp, #1
 8006cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ccc:	9503      	str	r5, [sp, #12]
 8006cce:	4637      	mov	r7, r6
 8006cd0:	463d      	mov	r5, r7
 8006cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cd6:	b10b      	cbz	r3, 8006cdc <_svfiprintf_r+0x58>
 8006cd8:	2b25      	cmp	r3, #37	; 0x25
 8006cda:	d13e      	bne.n	8006d5a <_svfiprintf_r+0xd6>
 8006cdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ce0:	d00b      	beq.n	8006cfa <_svfiprintf_r+0x76>
 8006ce2:	4653      	mov	r3, sl
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f7ff ff70 	bl	8006bce <__ssputs_r>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	f000 80a4 	beq.w	8006e3c <_svfiprintf_r+0x1b8>
 8006cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf6:	4453      	add	r3, sl
 8006cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfa:	783b      	ldrb	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 809d 	beq.w	8006e3c <_svfiprintf_r+0x1b8>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	9307      	str	r3, [sp, #28]
 8006d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d14:	931a      	str	r3, [sp, #104]	; 0x68
 8006d16:	462f      	mov	r7, r5
 8006d18:	2205      	movs	r2, #5
 8006d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d1e:	4850      	ldr	r0, [pc, #320]	; (8006e60 <_svfiprintf_r+0x1dc>)
 8006d20:	f000 fa30 	bl	8007184 <memchr>
 8006d24:	9b04      	ldr	r3, [sp, #16]
 8006d26:	b9d0      	cbnz	r0, 8006d5e <_svfiprintf_r+0xda>
 8006d28:	06d9      	lsls	r1, r3, #27
 8006d2a:	bf44      	itt	mi
 8006d2c:	2220      	movmi	r2, #32
 8006d2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d32:	071a      	lsls	r2, r3, #28
 8006d34:	bf44      	itt	mi
 8006d36:	222b      	movmi	r2, #43	; 0x2b
 8006d38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d3c:	782a      	ldrb	r2, [r5, #0]
 8006d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8006d40:	d015      	beq.n	8006d6e <_svfiprintf_r+0xea>
 8006d42:	462f      	mov	r7, r5
 8006d44:	2000      	movs	r0, #0
 8006d46:	250a      	movs	r5, #10
 8006d48:	9a07      	ldr	r2, [sp, #28]
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d50:	3b30      	subs	r3, #48	; 0x30
 8006d52:	2b09      	cmp	r3, #9
 8006d54:	d94d      	bls.n	8006df2 <_svfiprintf_r+0x16e>
 8006d56:	b1b8      	cbz	r0, 8006d88 <_svfiprintf_r+0x104>
 8006d58:	e00f      	b.n	8006d7a <_svfiprintf_r+0xf6>
 8006d5a:	462f      	mov	r7, r5
 8006d5c:	e7b8      	b.n	8006cd0 <_svfiprintf_r+0x4c>
 8006d5e:	4a40      	ldr	r2, [pc, #256]	; (8006e60 <_svfiprintf_r+0x1dc>)
 8006d60:	463d      	mov	r5, r7
 8006d62:	1a80      	subs	r0, r0, r2
 8006d64:	fa0b f000 	lsl.w	r0, fp, r0
 8006d68:	4318      	orrs	r0, r3
 8006d6a:	9004      	str	r0, [sp, #16]
 8006d6c:	e7d3      	b.n	8006d16 <_svfiprintf_r+0x92>
 8006d6e:	9a03      	ldr	r2, [sp, #12]
 8006d70:	1d11      	adds	r1, r2, #4
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	9103      	str	r1, [sp, #12]
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	db01      	blt.n	8006d7e <_svfiprintf_r+0xfa>
 8006d7a:	9207      	str	r2, [sp, #28]
 8006d7c:	e004      	b.n	8006d88 <_svfiprintf_r+0x104>
 8006d7e:	4252      	negs	r2, r2
 8006d80:	f043 0302 	orr.w	r3, r3, #2
 8006d84:	9207      	str	r2, [sp, #28]
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	783b      	ldrb	r3, [r7, #0]
 8006d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d8c:	d10c      	bne.n	8006da8 <_svfiprintf_r+0x124>
 8006d8e:	787b      	ldrb	r3, [r7, #1]
 8006d90:	2b2a      	cmp	r3, #42	; 0x2a
 8006d92:	d133      	bne.n	8006dfc <_svfiprintf_r+0x178>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	3702      	adds	r7, #2
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	9203      	str	r2, [sp, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfb8      	it	lt
 8006da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da6:	9305      	str	r3, [sp, #20]
 8006da8:	4d2e      	ldr	r5, [pc, #184]	; (8006e64 <_svfiprintf_r+0x1e0>)
 8006daa:	2203      	movs	r2, #3
 8006dac:	7839      	ldrb	r1, [r7, #0]
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 f9e8 	bl	8007184 <memchr>
 8006db4:	b138      	cbz	r0, 8006dc6 <_svfiprintf_r+0x142>
 8006db6:	2340      	movs	r3, #64	; 0x40
 8006db8:	1b40      	subs	r0, r0, r5
 8006dba:	fa03 f000 	lsl.w	r0, r3, r0
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	3701      	adds	r7, #1
 8006dc2:	4303      	orrs	r3, r0
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	7839      	ldrb	r1, [r7, #0]
 8006dc8:	2206      	movs	r2, #6
 8006dca:	4827      	ldr	r0, [pc, #156]	; (8006e68 <_svfiprintf_r+0x1e4>)
 8006dcc:	1c7e      	adds	r6, r7, #1
 8006dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd2:	f000 f9d7 	bl	8007184 <memchr>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d038      	beq.n	8006e4c <_svfiprintf_r+0x1c8>
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <_svfiprintf_r+0x1e8>)
 8006ddc:	bb13      	cbnz	r3, 8006e24 <_svfiprintf_r+0x1a0>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	3307      	adds	r3, #7
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	3308      	adds	r3, #8
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	444b      	add	r3, r9
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	e76d      	b.n	8006cce <_svfiprintf_r+0x4a>
 8006df2:	fb05 3202 	mla	r2, r5, r2, r3
 8006df6:	2001      	movs	r0, #1
 8006df8:	460f      	mov	r7, r1
 8006dfa:	e7a6      	b.n	8006d4a <_svfiprintf_r+0xc6>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	250a      	movs	r5, #10
 8006e00:	4619      	mov	r1, r3
 8006e02:	3701      	adds	r7, #1
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	4638      	mov	r0, r7
 8006e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e0c:	3a30      	subs	r2, #48	; 0x30
 8006e0e:	2a09      	cmp	r2, #9
 8006e10:	d903      	bls.n	8006e1a <_svfiprintf_r+0x196>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0c8      	beq.n	8006da8 <_svfiprintf_r+0x124>
 8006e16:	9105      	str	r1, [sp, #20]
 8006e18:	e7c6      	b.n	8006da8 <_svfiprintf_r+0x124>
 8006e1a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4607      	mov	r7, r0
 8006e22:	e7f0      	b.n	8006e06 <_svfiprintf_r+0x182>
 8006e24:	ab03      	add	r3, sp, #12
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <_svfiprintf_r+0x1ec>)
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f3af 8000 	nop.w
 8006e34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e38:	4681      	mov	r9, r0
 8006e3a:	d1d6      	bne.n	8006dea <_svfiprintf_r+0x166>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	065b      	lsls	r3, r3, #25
 8006e40:	f53f af35 	bmi.w	8006cae <_svfiprintf_r+0x2a>
 8006e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e46:	b01d      	add	sp, #116	; 0x74
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4622      	mov	r2, r4
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <_svfiprintf_r+0x1ec>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4640      	mov	r0, r8
 8006e58:	f000 f882 	bl	8006f60 <_printf_i>
 8006e5c:	e7ea      	b.n	8006e34 <_svfiprintf_r+0x1b0>
 8006e5e:	bf00      	nop
 8006e60:	08007ee0 	.word	0x08007ee0
 8006e64:	08007ee6 	.word	0x08007ee6
 8006e68:	08007eea 	.word	0x08007eea
 8006e6c:	00000000 	.word	0x00000000
 8006e70:	08006bcf 	.word	0x08006bcf

08006e74 <_printf_common>:
 8006e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e78:	4691      	mov	r9, r2
 8006e7a:	461f      	mov	r7, r3
 8006e7c:	688a      	ldr	r2, [r1, #8]
 8006e7e:	690b      	ldr	r3, [r1, #16]
 8006e80:	4606      	mov	r6, r0
 8006e82:	4293      	cmp	r3, r2
 8006e84:	bfb8      	it	lt
 8006e86:	4613      	movlt	r3, r2
 8006e88:	f8c9 3000 	str.w	r3, [r9]
 8006e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e90:	460c      	mov	r4, r1
 8006e92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e96:	b112      	cbz	r2, 8006e9e <_printf_common+0x2a>
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f8c9 3000 	str.w	r3, [r9]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	0699      	lsls	r1, r3, #26
 8006ea2:	bf42      	ittt	mi
 8006ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ea8:	3302      	addmi	r3, #2
 8006eaa:	f8c9 3000 	strmi.w	r3, [r9]
 8006eae:	6825      	ldr	r5, [r4, #0]
 8006eb0:	f015 0506 	ands.w	r5, r5, #6
 8006eb4:	d107      	bne.n	8006ec6 <_printf_common+0x52>
 8006eb6:	f104 0a19 	add.w	sl, r4, #25
 8006eba:	68e3      	ldr	r3, [r4, #12]
 8006ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	42ab      	cmp	r3, r5
 8006ec4:	dc29      	bgt.n	8006f1a <_printf_common+0xa6>
 8006ec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	3300      	adds	r3, #0
 8006ece:	bf18      	it	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	0692      	lsls	r2, r2, #26
 8006ed4:	d42e      	bmi.n	8006f34 <_printf_common+0xc0>
 8006ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eda:	4639      	mov	r1, r7
 8006edc:	4630      	mov	r0, r6
 8006ede:	47c0      	blx	r8
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d021      	beq.n	8006f28 <_printf_common+0xb4>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	68e5      	ldr	r5, [r4, #12]
 8006ee8:	f003 0306 	and.w	r3, r3, #6
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	bf18      	it	ne
 8006ef0:	2500      	movne	r5, #0
 8006ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8006ef6:	f04f 0900 	mov.w	r9, #0
 8006efa:	bf08      	it	eq
 8006efc:	1aad      	subeq	r5, r5, r2
 8006efe:	68a3      	ldr	r3, [r4, #8]
 8006f00:	6922      	ldr	r2, [r4, #16]
 8006f02:	bf08      	it	eq
 8006f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bfc4      	itt	gt
 8006f0c:	1a9b      	subgt	r3, r3, r2
 8006f0e:	18ed      	addgt	r5, r5, r3
 8006f10:	341a      	adds	r4, #26
 8006f12:	454d      	cmp	r5, r9
 8006f14:	d11a      	bne.n	8006f4c <_printf_common+0xd8>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e008      	b.n	8006f2c <_printf_common+0xb8>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4630      	mov	r0, r6
 8006f22:	47c0      	blx	r8
 8006f24:	3001      	adds	r0, #1
 8006f26:	d103      	bne.n	8006f30 <_printf_common+0xbc>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f30:	3501      	adds	r5, #1
 8006f32:	e7c2      	b.n	8006eba <_printf_common+0x46>
 8006f34:	2030      	movs	r0, #48	; 0x30
 8006f36:	18e1      	adds	r1, r4, r3
 8006f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f42:	4422      	add	r2, r4
 8006f44:	3302      	adds	r3, #2
 8006f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f4a:	e7c4      	b.n	8006ed6 <_printf_common+0x62>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4639      	mov	r1, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	47c0      	blx	r8
 8006f56:	3001      	adds	r0, #1
 8006f58:	d0e6      	beq.n	8006f28 <_printf_common+0xb4>
 8006f5a:	f109 0901 	add.w	r9, r9, #1
 8006f5e:	e7d8      	b.n	8006f12 <_printf_common+0x9e>

08006f60 <_printf_i>:
 8006f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f68:	460c      	mov	r4, r1
 8006f6a:	7e09      	ldrb	r1, [r1, #24]
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	296e      	cmp	r1, #110	; 0x6e
 8006f70:	4617      	mov	r7, r2
 8006f72:	4606      	mov	r6, r0
 8006f74:	4698      	mov	r8, r3
 8006f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f78:	f000 80b3 	beq.w	80070e2 <_printf_i+0x182>
 8006f7c:	d822      	bhi.n	8006fc4 <_printf_i+0x64>
 8006f7e:	2963      	cmp	r1, #99	; 0x63
 8006f80:	d036      	beq.n	8006ff0 <_printf_i+0x90>
 8006f82:	d80a      	bhi.n	8006f9a <_printf_i+0x3a>
 8006f84:	2900      	cmp	r1, #0
 8006f86:	f000 80b9 	beq.w	80070fc <_printf_i+0x19c>
 8006f8a:	2958      	cmp	r1, #88	; 0x58
 8006f8c:	f000 8083 	beq.w	8007096 <_printf_i+0x136>
 8006f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f98:	e032      	b.n	8007000 <_printf_i+0xa0>
 8006f9a:	2964      	cmp	r1, #100	; 0x64
 8006f9c:	d001      	beq.n	8006fa2 <_printf_i+0x42>
 8006f9e:	2969      	cmp	r1, #105	; 0x69
 8006fa0:	d1f6      	bne.n	8006f90 <_printf_i+0x30>
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	6813      	ldr	r3, [r2, #0]
 8006fa6:	0605      	lsls	r5, r0, #24
 8006fa8:	f103 0104 	add.w	r1, r3, #4
 8006fac:	d52a      	bpl.n	8007004 <_printf_i+0xa4>
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da03      	bge.n	8006fbe <_printf_i+0x5e>
 8006fb6:	222d      	movs	r2, #45	; 0x2d
 8006fb8:	425b      	negs	r3, r3
 8006fba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fbe:	486f      	ldr	r0, [pc, #444]	; (800717c <_printf_i+0x21c>)
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	e039      	b.n	8007038 <_printf_i+0xd8>
 8006fc4:	2973      	cmp	r1, #115	; 0x73
 8006fc6:	f000 809d 	beq.w	8007104 <_printf_i+0x1a4>
 8006fca:	d808      	bhi.n	8006fde <_printf_i+0x7e>
 8006fcc:	296f      	cmp	r1, #111	; 0x6f
 8006fce:	d020      	beq.n	8007012 <_printf_i+0xb2>
 8006fd0:	2970      	cmp	r1, #112	; 0x70
 8006fd2:	d1dd      	bne.n	8006f90 <_printf_i+0x30>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	e003      	b.n	8006fe6 <_printf_i+0x86>
 8006fde:	2975      	cmp	r1, #117	; 0x75
 8006fe0:	d017      	beq.n	8007012 <_printf_i+0xb2>
 8006fe2:	2978      	cmp	r1, #120	; 0x78
 8006fe4:	d1d4      	bne.n	8006f90 <_printf_i+0x30>
 8006fe6:	2378      	movs	r3, #120	; 0x78
 8006fe8:	4865      	ldr	r0, [pc, #404]	; (8007180 <_printf_i+0x220>)
 8006fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fee:	e055      	b.n	800709c <_printf_i+0x13c>
 8006ff0:	6813      	ldr	r3, [r2, #0]
 8006ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff6:	1d19      	adds	r1, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6011      	str	r1, [r2, #0]
 8006ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007000:	2301      	movs	r3, #1
 8007002:	e08c      	b.n	800711e <_printf_i+0x1be>
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800700a:	6011      	str	r1, [r2, #0]
 800700c:	bf18      	it	ne
 800700e:	b21b      	sxthne	r3, r3
 8007010:	e7cf      	b.n	8006fb2 <_printf_i+0x52>
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1d18      	adds	r0, r3, #4
 8007018:	6010      	str	r0, [r2, #0]
 800701a:	0628      	lsls	r0, r5, #24
 800701c:	d501      	bpl.n	8007022 <_printf_i+0xc2>
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	e002      	b.n	8007028 <_printf_i+0xc8>
 8007022:	0668      	lsls	r0, r5, #25
 8007024:	d5fb      	bpl.n	800701e <_printf_i+0xbe>
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	296f      	cmp	r1, #111	; 0x6f
 800702a:	bf14      	ite	ne
 800702c:	220a      	movne	r2, #10
 800702e:	2208      	moveq	r2, #8
 8007030:	4852      	ldr	r0, [pc, #328]	; (800717c <_printf_i+0x21c>)
 8007032:	2100      	movs	r1, #0
 8007034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007038:	6865      	ldr	r5, [r4, #4]
 800703a:	2d00      	cmp	r5, #0
 800703c:	60a5      	str	r5, [r4, #8]
 800703e:	f2c0 8095 	blt.w	800716c <_printf_i+0x20c>
 8007042:	6821      	ldr	r1, [r4, #0]
 8007044:	f021 0104 	bic.w	r1, r1, #4
 8007048:	6021      	str	r1, [r4, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d13d      	bne.n	80070ca <_printf_i+0x16a>
 800704e:	2d00      	cmp	r5, #0
 8007050:	f040 808e 	bne.w	8007170 <_printf_i+0x210>
 8007054:	4665      	mov	r5, ip
 8007056:	2a08      	cmp	r2, #8
 8007058:	d10b      	bne.n	8007072 <_printf_i+0x112>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	07db      	lsls	r3, r3, #31
 800705e:	d508      	bpl.n	8007072 <_printf_i+0x112>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	bfde      	ittt	le
 8007068:	2330      	movle	r3, #48	; 0x30
 800706a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800706e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007072:	ebac 0305 	sub.w	r3, ip, r5
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	f8cd 8000 	str.w	r8, [sp]
 800707c:	463b      	mov	r3, r7
 800707e:	aa03      	add	r2, sp, #12
 8007080:	4621      	mov	r1, r4
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff fef6 	bl	8006e74 <_printf_common>
 8007088:	3001      	adds	r0, #1
 800708a:	d14d      	bne.n	8007128 <_printf_i+0x1c8>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b005      	add	sp, #20
 8007092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007096:	4839      	ldr	r0, [pc, #228]	; (800717c <_printf_i+0x21c>)
 8007098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800709c:	6813      	ldr	r3, [r2, #0]
 800709e:	6821      	ldr	r1, [r4, #0]
 80070a0:	1d1d      	adds	r5, r3, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6015      	str	r5, [r2, #0]
 80070a6:	060a      	lsls	r2, r1, #24
 80070a8:	d50b      	bpl.n	80070c2 <_printf_i+0x162>
 80070aa:	07ca      	lsls	r2, r1, #31
 80070ac:	bf44      	itt	mi
 80070ae:	f041 0120 	orrmi.w	r1, r1, #32
 80070b2:	6021      	strmi	r1, [r4, #0]
 80070b4:	b91b      	cbnz	r3, 80070be <_printf_i+0x15e>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	f022 0220 	bic.w	r2, r2, #32
 80070bc:	6022      	str	r2, [r4, #0]
 80070be:	2210      	movs	r2, #16
 80070c0:	e7b7      	b.n	8007032 <_printf_i+0xd2>
 80070c2:	064d      	lsls	r5, r1, #25
 80070c4:	bf48      	it	mi
 80070c6:	b29b      	uxthmi	r3, r3
 80070c8:	e7ef      	b.n	80070aa <_printf_i+0x14a>
 80070ca:	4665      	mov	r5, ip
 80070cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d0:	fb02 3311 	mls	r3, r2, r1, r3
 80070d4:	5cc3      	ldrb	r3, [r0, r3]
 80070d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070da:	460b      	mov	r3, r1
 80070dc:	2900      	cmp	r1, #0
 80070de:	d1f5      	bne.n	80070cc <_printf_i+0x16c>
 80070e0:	e7b9      	b.n	8007056 <_printf_i+0xf6>
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	6825      	ldr	r5, [r4, #0]
 80070e6:	1d18      	adds	r0, r3, #4
 80070e8:	6961      	ldr	r1, [r4, #20]
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	0628      	lsls	r0, r5, #24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	d501      	bpl.n	80070f6 <_printf_i+0x196>
 80070f2:	6019      	str	r1, [r3, #0]
 80070f4:	e002      	b.n	80070fc <_printf_i+0x19c>
 80070f6:	066a      	lsls	r2, r5, #25
 80070f8:	d5fb      	bpl.n	80070f2 <_printf_i+0x192>
 80070fa:	8019      	strh	r1, [r3, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	4665      	mov	r5, ip
 8007100:	6123      	str	r3, [r4, #16]
 8007102:	e7b9      	b.n	8007078 <_printf_i+0x118>
 8007104:	6813      	ldr	r3, [r2, #0]
 8007106:	1d19      	adds	r1, r3, #4
 8007108:	6011      	str	r1, [r2, #0]
 800710a:	681d      	ldr	r5, [r3, #0]
 800710c:	6862      	ldr	r2, [r4, #4]
 800710e:	2100      	movs	r1, #0
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f837 	bl	8007184 <memchr>
 8007116:	b108      	cbz	r0, 800711c <_printf_i+0x1bc>
 8007118:	1b40      	subs	r0, r0, r5
 800711a:	6060      	str	r0, [r4, #4]
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	6123      	str	r3, [r4, #16]
 8007120:	2300      	movs	r3, #0
 8007122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007126:	e7a7      	b.n	8007078 <_printf_i+0x118>
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	462a      	mov	r2, r5
 800712c:	4639      	mov	r1, r7
 800712e:	4630      	mov	r0, r6
 8007130:	47c0      	blx	r8
 8007132:	3001      	adds	r0, #1
 8007134:	d0aa      	beq.n	800708c <_printf_i+0x12c>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	079b      	lsls	r3, r3, #30
 800713a:	d413      	bmi.n	8007164 <_printf_i+0x204>
 800713c:	68e0      	ldr	r0, [r4, #12]
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	4298      	cmp	r0, r3
 8007142:	bfb8      	it	lt
 8007144:	4618      	movlt	r0, r3
 8007146:	e7a3      	b.n	8007090 <_printf_i+0x130>
 8007148:	2301      	movs	r3, #1
 800714a:	464a      	mov	r2, r9
 800714c:	4639      	mov	r1, r7
 800714e:	4630      	mov	r0, r6
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d09a      	beq.n	800708c <_printf_i+0x12c>
 8007156:	3501      	adds	r5, #1
 8007158:	68e3      	ldr	r3, [r4, #12]
 800715a:	9a03      	ldr	r2, [sp, #12]
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	42ab      	cmp	r3, r5
 8007160:	dcf2      	bgt.n	8007148 <_printf_i+0x1e8>
 8007162:	e7eb      	b.n	800713c <_printf_i+0x1dc>
 8007164:	2500      	movs	r5, #0
 8007166:	f104 0919 	add.w	r9, r4, #25
 800716a:	e7f5      	b.n	8007158 <_printf_i+0x1f8>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1ac      	bne.n	80070ca <_printf_i+0x16a>
 8007170:	7803      	ldrb	r3, [r0, #0]
 8007172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800717a:	e76c      	b.n	8007056 <_printf_i+0xf6>
 800717c:	08007ef1 	.word	0x08007ef1
 8007180:	08007f02 	.word	0x08007f02

08007184 <memchr>:
 8007184:	b510      	push	{r4, lr}
 8007186:	b2c9      	uxtb	r1, r1
 8007188:	4402      	add	r2, r0
 800718a:	4290      	cmp	r0, r2
 800718c:	4603      	mov	r3, r0
 800718e:	d101      	bne.n	8007194 <memchr+0x10>
 8007190:	2300      	movs	r3, #0
 8007192:	e003      	b.n	800719c <memchr+0x18>
 8007194:	781c      	ldrb	r4, [r3, #0]
 8007196:	3001      	adds	r0, #1
 8007198:	428c      	cmp	r4, r1
 800719a:	d1f6      	bne.n	800718a <memchr+0x6>
 800719c:	4618      	mov	r0, r3
 800719e:	bd10      	pop	{r4, pc}

080071a0 <memcpy>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	1e43      	subs	r3, r0, #1
 80071a4:	440a      	add	r2, r1
 80071a6:	4291      	cmp	r1, r2
 80071a8:	d100      	bne.n	80071ac <memcpy+0xc>
 80071aa:	bd10      	pop	{r4, pc}
 80071ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b4:	e7f7      	b.n	80071a6 <memcpy+0x6>
	...

080071b8 <_free_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4605      	mov	r5, r0
 80071bc:	2900      	cmp	r1, #0
 80071be:	d043      	beq.n	8007248 <_free_r+0x90>
 80071c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c4:	1f0c      	subs	r4, r1, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bfb8      	it	lt
 80071ca:	18e4      	addlt	r4, r4, r3
 80071cc:	f000 f8d0 	bl	8007370 <__malloc_lock>
 80071d0:	4a1e      	ldr	r2, [pc, #120]	; (800724c <_free_r+0x94>)
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	4610      	mov	r0, r2
 80071d6:	b933      	cbnz	r3, 80071e6 <_free_r+0x2e>
 80071d8:	6063      	str	r3, [r4, #4]
 80071da:	6014      	str	r4, [r2, #0]
 80071dc:	4628      	mov	r0, r5
 80071de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e2:	f000 b8c6 	b.w	8007372 <__malloc_unlock>
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	d90b      	bls.n	8007202 <_free_r+0x4a>
 80071ea:	6821      	ldr	r1, [r4, #0]
 80071ec:	1862      	adds	r2, r4, r1
 80071ee:	4293      	cmp	r3, r2
 80071f0:	bf01      	itttt	eq
 80071f2:	681a      	ldreq	r2, [r3, #0]
 80071f4:	685b      	ldreq	r3, [r3, #4]
 80071f6:	1852      	addeq	r2, r2, r1
 80071f8:	6022      	streq	r2, [r4, #0]
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6004      	str	r4, [r0, #0]
 80071fe:	e7ed      	b.n	80071dc <_free_r+0x24>
 8007200:	4613      	mov	r3, r2
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	b10a      	cbz	r2, 800720a <_free_r+0x52>
 8007206:	42a2      	cmp	r2, r4
 8007208:	d9fa      	bls.n	8007200 <_free_r+0x48>
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	1858      	adds	r0, r3, r1
 800720e:	42a0      	cmp	r0, r4
 8007210:	d10b      	bne.n	800722a <_free_r+0x72>
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	4401      	add	r1, r0
 8007216:	1858      	adds	r0, r3, r1
 8007218:	4282      	cmp	r2, r0
 800721a:	6019      	str	r1, [r3, #0]
 800721c:	d1de      	bne.n	80071dc <_free_r+0x24>
 800721e:	6810      	ldr	r0, [r2, #0]
 8007220:	6852      	ldr	r2, [r2, #4]
 8007222:	4401      	add	r1, r0
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	e7d8      	b.n	80071dc <_free_r+0x24>
 800722a:	d902      	bls.n	8007232 <_free_r+0x7a>
 800722c:	230c      	movs	r3, #12
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	e7d4      	b.n	80071dc <_free_r+0x24>
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	1821      	adds	r1, r4, r0
 8007236:	428a      	cmp	r2, r1
 8007238:	bf01      	itttt	eq
 800723a:	6811      	ldreq	r1, [r2, #0]
 800723c:	6852      	ldreq	r2, [r2, #4]
 800723e:	1809      	addeq	r1, r1, r0
 8007240:	6021      	streq	r1, [r4, #0]
 8007242:	6062      	str	r2, [r4, #4]
 8007244:	605c      	str	r4, [r3, #4]
 8007246:	e7c9      	b.n	80071dc <_free_r+0x24>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	200000e8 	.word	0x200000e8

08007250 <_malloc_r>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	1ccd      	adds	r5, r1, #3
 8007254:	f025 0503 	bic.w	r5, r5, #3
 8007258:	3508      	adds	r5, #8
 800725a:	2d0c      	cmp	r5, #12
 800725c:	bf38      	it	cc
 800725e:	250c      	movcc	r5, #12
 8007260:	2d00      	cmp	r5, #0
 8007262:	4606      	mov	r6, r0
 8007264:	db01      	blt.n	800726a <_malloc_r+0x1a>
 8007266:	42a9      	cmp	r1, r5
 8007268:	d903      	bls.n	8007272 <_malloc_r+0x22>
 800726a:	230c      	movs	r3, #12
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	2000      	movs	r0, #0
 8007270:	bd70      	pop	{r4, r5, r6, pc}
 8007272:	f000 f87d 	bl	8007370 <__malloc_lock>
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <_malloc_r+0xac>)
 8007278:	6814      	ldr	r4, [r2, #0]
 800727a:	4621      	mov	r1, r4
 800727c:	b991      	cbnz	r1, 80072a4 <_malloc_r+0x54>
 800727e:	4c20      	ldr	r4, [pc, #128]	; (8007300 <_malloc_r+0xb0>)
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	b91b      	cbnz	r3, 800728c <_malloc_r+0x3c>
 8007284:	4630      	mov	r0, r6
 8007286:	f000 f863 	bl	8007350 <_sbrk_r>
 800728a:	6020      	str	r0, [r4, #0]
 800728c:	4629      	mov	r1, r5
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f85e 	bl	8007350 <_sbrk_r>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d124      	bne.n	80072e2 <_malloc_r+0x92>
 8007298:	230c      	movs	r3, #12
 800729a:	4630      	mov	r0, r6
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	f000 f868 	bl	8007372 <__malloc_unlock>
 80072a2:	e7e4      	b.n	800726e <_malloc_r+0x1e>
 80072a4:	680b      	ldr	r3, [r1, #0]
 80072a6:	1b5b      	subs	r3, r3, r5
 80072a8:	d418      	bmi.n	80072dc <_malloc_r+0x8c>
 80072aa:	2b0b      	cmp	r3, #11
 80072ac:	d90f      	bls.n	80072ce <_malloc_r+0x7e>
 80072ae:	600b      	str	r3, [r1, #0]
 80072b0:	18cc      	adds	r4, r1, r3
 80072b2:	50cd      	str	r5, [r1, r3]
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f85c 	bl	8007372 <__malloc_unlock>
 80072ba:	f104 000b 	add.w	r0, r4, #11
 80072be:	1d23      	adds	r3, r4, #4
 80072c0:	f020 0007 	bic.w	r0, r0, #7
 80072c4:	1ac3      	subs	r3, r0, r3
 80072c6:	d0d3      	beq.n	8007270 <_malloc_r+0x20>
 80072c8:	425a      	negs	r2, r3
 80072ca:	50e2      	str	r2, [r4, r3]
 80072cc:	e7d0      	b.n	8007270 <_malloc_r+0x20>
 80072ce:	684b      	ldr	r3, [r1, #4]
 80072d0:	428c      	cmp	r4, r1
 80072d2:	bf16      	itet	ne
 80072d4:	6063      	strne	r3, [r4, #4]
 80072d6:	6013      	streq	r3, [r2, #0]
 80072d8:	460c      	movne	r4, r1
 80072da:	e7eb      	b.n	80072b4 <_malloc_r+0x64>
 80072dc:	460c      	mov	r4, r1
 80072de:	6849      	ldr	r1, [r1, #4]
 80072e0:	e7cc      	b.n	800727c <_malloc_r+0x2c>
 80072e2:	1cc4      	adds	r4, r0, #3
 80072e4:	f024 0403 	bic.w	r4, r4, #3
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d005      	beq.n	80072f8 <_malloc_r+0xa8>
 80072ec:	1a21      	subs	r1, r4, r0
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f82e 	bl	8007350 <_sbrk_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d0cf      	beq.n	8007298 <_malloc_r+0x48>
 80072f8:	6025      	str	r5, [r4, #0]
 80072fa:	e7db      	b.n	80072b4 <_malloc_r+0x64>
 80072fc:	200000e8 	.word	0x200000e8
 8007300:	200000ec 	.word	0x200000ec

08007304 <_realloc_r>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	4607      	mov	r7, r0
 8007308:	4614      	mov	r4, r2
 800730a:	460e      	mov	r6, r1
 800730c:	b921      	cbnz	r1, 8007318 <_realloc_r+0x14>
 800730e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007312:	4611      	mov	r1, r2
 8007314:	f7ff bf9c 	b.w	8007250 <_malloc_r>
 8007318:	b922      	cbnz	r2, 8007324 <_realloc_r+0x20>
 800731a:	f7ff ff4d 	bl	80071b8 <_free_r>
 800731e:	4625      	mov	r5, r4
 8007320:	4628      	mov	r0, r5
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	f000 f826 	bl	8007374 <_malloc_usable_size_r>
 8007328:	42a0      	cmp	r0, r4
 800732a:	d20f      	bcs.n	800734c <_realloc_r+0x48>
 800732c:	4621      	mov	r1, r4
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff ff8e 	bl	8007250 <_malloc_r>
 8007334:	4605      	mov	r5, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d0f2      	beq.n	8007320 <_realloc_r+0x1c>
 800733a:	4631      	mov	r1, r6
 800733c:	4622      	mov	r2, r4
 800733e:	f7ff ff2f 	bl	80071a0 <memcpy>
 8007342:	4631      	mov	r1, r6
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ff37 	bl	80071b8 <_free_r>
 800734a:	e7e9      	b.n	8007320 <_realloc_r+0x1c>
 800734c:	4635      	mov	r5, r6
 800734e:	e7e7      	b.n	8007320 <_realloc_r+0x1c>

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	2300      	movs	r3, #0
 8007354:	4c05      	ldr	r4, [pc, #20]	; (800736c <_sbrk_r+0x1c>)
 8007356:	4605      	mov	r5, r0
 8007358:	4608      	mov	r0, r1
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	f7f9 fe84 	bl	8001068 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000794 	.word	0x20000794

08007370 <__malloc_lock>:
 8007370:	4770      	bx	lr

08007372 <__malloc_unlock>:
 8007372:	4770      	bx	lr

08007374 <_malloc_usable_size_r>:
 8007374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007378:	1f18      	subs	r0, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	bfbc      	itt	lt
 800737e:	580b      	ldrlt	r3, [r1, r0]
 8007380:	18c0      	addlt	r0, r0, r3
 8007382:	4770      	bx	lr

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
